swagger: 2.0
host: 'api.rollbar.com'
basePath: '/api/1'
schemes: ['https']
tags:
  - name: 'Item'
  - name: 'Occurrence'
  - name: 'Deploy'
  - name: 'Symbol Maps'
  - name: 'RQL'
  - name: 'Reports'
  - name: 'Projects'
  - name: 'Project Access Tokens'
  - name: 'Teams'
  - name: 'Users'
  - name: 'Teams ⟷ Users'
  - name: 'Teams ⟷ Projects'
  - name: 'Users ⟷ Projects'
  - name: 'People'
  - name: 'Notifications'
  - name: 'Versions'
info:
  title: Rollbar API
  version: '1.0'
  description: |
    # Getting Started
    The Rollbar API provides a RESTful interface to much of the data in the
    system. It is used by our official libraries to report exceptions,
    deploys, and other messages. It can be used to create notifiers for
    additional languages, get data out to integrate with other systems, or
    whatever else you can imagine. If the API is missing something you'd
    like to see, please [let us know](support@rollbar.com).

    # Ping
    To test whether you're able to ping the API server, you can simply run the
    following command:

    ```
    curl 'https://api.rollbar.com/api/1/status/ping'
    ```

    You will get back pong from our server if your request was successful.

    # Timestamps
    All timestamps (inputs and outputs) are GMT unix timestamps.

    # Authentication
    Authentication is done via access token included as a header parameter. For authenticated requests, pass your access token
    through the `X-Rollbar-Access-Token` parameter in the header.

    ```
    curl -H "X-Rollbar-Access-Token: YOUR_ACCESS_TOKEN" 'https://api.rollbar.com/api/1/item/12345'
    ```

    ## Project access tokens
    Many operations require a project-specific access token. You can find and administer your
    access tokens in Settings -> Project Access Tokens. Access tokens can have any or
    all of the following scopes:

    ### post_server_item
    Can perform all POST requests to /deploy/ and /item/

    ### post_client_item
    Can perform POST requests to /deploy/ and /item/, but only if the item has a client-side (browser, mobile) platform.

    ### read
    Can perform all GET requests

    ### write
    Can perform PATCH and DELETE requests

    ## Account Access Tokens
    Operations performed at the level of the account require an account-specific
    access token. These can be found and managed at
    {Account name} Settings -> Account Access Tokens.
    Account access tokens can have the following scopes:

    ### read
    Supports all GET operations at the account level.

    ### write
    Supports all POST, PUT, PATCH, and DELETE operations at the account level.

    # HTTP responses
    The API can return the following HTTP response codes:

    ### 200	OK
    Operation was completed successfully

    ### 400	Bad request
    The request was malformed and could not be parsed.

    ### 403	Access denied
    Access token was missing, invalid, or does not have the necessary permissions.

    ### 404	Not found
    The requested resource was not found. This response will be returned if the URL is entirely invalid (i.e. /asdf), or if it is a URL that could be valid but is referencing something that does not exist (i.e. /item/12345).

    ### 413	Request entity too large
    The request exceeded the maximum size of 128KB.

    ### 422	Unprocessable Entity
    The request was parseable (i.e. valid JSON), but some parameters were missing or otherwise invalid.

    ### 429	Too Many Requests
    If rate limiting is enabled for your access token, this return code signifies that

    # Examples

    ### [api-examples](https://github.com/rollbar/api-examples)
    Author: Rollbar

    Language: Python

    Examples using RQL, deploys, occurrences, and reports

    ### [api-people-example](https://github.com/rollbar/api-people-example)
    Author: Rollbar

    Language: Python

    Shows how to gather the Person data for each occurrence of a list of items

    ### [rolltools](https://github.com/jslate/rolltools)
    Author: Jonathan Slate

    Language: Ruby

    A few utilities using the Rollbar API

securityDefinitions:
  accessToken:
    type: apiKey
    in: header
    name: X-Rollbar-Access-Token

security:
  - accessToken: []

paths:
  # Items
  /item/:
    post:
      $ref: './readmeio.yaml#/paths/~1item~1/post'
      tags: ['Item']
  /items:
    get:
      $ref: './readmeio.yaml#/paths/~1items/get'
      tags: ['Item']
  /item/{itemid}:
    get:
      $ref: './readmeio.yaml#/paths/~1item~1{itemid}/get'
      tags: ['Item']
    patch:
      $ref: './readmeio.yaml#/paths/~1item~1{item_id}/patch'
      tags: ['Item']
  /item_by_counter/{counter}:
    get:
      $ref: './readmeio.yaml#/paths/~1item_by_counter~1{counter}/get'
      tags: ['Item']

  # Occurrences
  /instances:
    get:
      tags: ['Occurrence']
      summary: List all occurrences in a project
      description: |
        Returns all occurrences in the project, in pages of 20. Order is descending by occurrence ID (which is approximately descending by timestamp).
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - name: page
          in: query
          description: Page number to return, starting at 1. 20 occurrences are returned per page.
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  err:
                    type: integer
                    enum: [0]
                  result:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/PaginatedOccurrenceInstances'

  /{item_id}/instances:
    get:
      tags: ['Occurrence']
      summary: List all occurrences in an item
      description: |
        Returns all occurrences of an item, in pages of 20. Order is descending by occurrence ID (which is approximately descending by timestamp).
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - $ref: './parameters.yaml#/item_id_path'
        - name: page
          in: query
          description: Page number to return, starting at 1. 20 occurrences are returned per page.
          required: false
          schema:
            type: integer
            default: 1
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  err:
                    type: integer
                    enum: [0]
                  result:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/PaginatedOccurrenceInstances'

  /instance/{instance_id}:
    get:
      tags: ['Occurrence']
      summary: Get an occurrence
      description: |
        Returns a JSON object describing the occurrence. This is similar to the "Raw JSON" section of the occurrence detail page.

        `instance_id` must be an Occurrence ID for an occurrence in the project. These IDs are returned as the `id`
        field in other occurrence API calls, and can be found in the Rollbar UI on URLs like
        `https://rollbar.com/Rollbar/demo/items/54/occurrences/3209095494/` (`3209095494` is the Occurrence ID).
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - $ref: './parameters.yaml#/instance_id_path'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  err:
                    type: integer
                    enum: [0]
                  result:
                    type: object
                    allOf:
                      - $ref: '#/components/schemas/OccurrenceInstance'
    delete:
      tags: ['Occurrence']
      summary: Delete an occurrence
      description: |
        Permanently deletes an occurrence. This will make it unavailable in the Rollbar UI and API. Aggregate counts are not updated.
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - $ref: './parameters.yaml#/instance_id_path'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                properties:
                  err:
                    type: integer
                    enum: [0]
                  message:
                    type: string

  # Deploys
  /deploy:
    post:
      $ref: './readmeio.yaml#/paths/~1deploy~1/post'
      tags: ['Deploy']
    get:
      $ref: './readmeio.yaml#/paths/~1deploy~1{deploy_id}/get'
      tags: ['Deploy']
    patch:
      $ref: './readmeio.yaml#/paths/~1deploy~1{deploy_id}/patch'
      tags: ['Deploy']
  /deploys:
    get:
      $ref: './readmeio.yaml#/paths/~1deploys~1/get'
      tags: ['Deploy']

  # Symbol Maps
  /sourcemap:
    post:
      $ref: './readmeio.yaml#/paths/~1sourcemap~1/post'
      tags: ['Symbol Maps']
  /dsym:
    post:
      $ref: './readmeio.yaml#/paths/~1dsym~1/post'
      tags: ['Symbol Maps']
  /proguard:
    post:
      $ref: './readmeio.yaml#/paths/~1proguard~1/post'
      tags: ['Symbol Maps']

  # RQL
  /rql/job/{job_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1rql~1job~1{job_id}/get'
      tags: ['RQL']
  /rql/jobs/:
    post:
      $ref: './readmeio.yaml#/paths/~1rql~1jobs~1/post'
      tags: ['RQL']
    get:
      $ref: './readmeio.yaml#/paths/~1rql~1jobs~1/get'
      tags: ['RQL']
  /rql/job/{job_id}/result:
    get:
      $ref: './readmeio.yaml#/paths/~1rql~1job~1{job_id}~1result/get'
      tags: ['RQL']
  /rql/job/{job_id}/cancel:
    post:
      $ref: './readmeio.yaml#/paths/~1rql~1job~1{job_id}~1cancel/post'
      tags: ['RQL']

  # Reports
  /reports/top_active_items:
    get:
      $ref: './readmeio.yaml#/paths/~1reports~1top_active_items/get'
      tags: ['Reports']
  /reports/occurrence_counts:
    get:
      $ref: './readmeio.yaml#/paths/~1reports~1occurrence_counts/get'
      tags: ['Reports']
  /reports/activated_counts:
    get:
      $ref: './readmeio.yaml#/paths/~1reports~1activated_counts/get'
      tags: ['Reports']

  # Projects
  /projects:
    post:
      $ref: './readmeio.yaml#/paths/~1projects~1/post'
      tags: ['Projects']
    get:
      $ref: './readmeio.yaml#/paths/~1projects~1/get'
      tags: ['Projects']
  /project/{project_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1project~1{project_id}/get'
      tags: ['Projects']
    post:
      $ref: './readmeio.yaml#/paths/~1project~1{project_id}/delete'
      tags: ['Projects']

  # Project Access Tokens

  /project/{id}/access_tokens:
    get:
      $ref: './readmeio.yaml#/paths/~1project~1{project_id}~1access_tokens/get'
      tags: ['Project Access Tokens']
    post:
      tags: ['Project Access Tokens']
      description: Create a project access token
      parameters:
        - $ref: './parameters.yaml#/account_write_access_token_header'
        - $ref: './parameters.yaml#/project_id_path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectAccessToken'
            example:
              name: 'production'
              scopes:
                - write
                - read
      responses:
        '200':
          description: Response data for slack notification configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  err:
                    type: integer
                    enum: [0]
                  result:
                    $ref: '#/components/schemas/ProjectAccessTokenResponse'
  /project/{project_id}/access_token/{project_access_token}:
    patch:
      $ref: './readmeio.yaml#/paths/~1project~1{project_id}~1access_token~1{project_access_token}/patch'
      tags: ['Project Access Tokens']

  # Teams
  /teams:
    post:
      $ref: './readmeio.yaml#/paths/~1teams/post'
      tags: ['Teams']
    get:
      $ref: './readmeio.yaml#/paths/~1teams/get'
      tags: ['Teams']
  /team:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}/get'
      tags: ['Teams']
    delete:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}/delete'
      tags: ['Teams']

  # Users
  /users:
    get:
      $ref: './readmeio.yaml#/paths/~1users/get'
      tags: ['Users']
  /user/{user_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1user~1{user_id}/get'
      tags: ['Users']

  # Teams ⟷ Users
  /team/{team_id}/users:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1users/get'
      tags: ['Teams ⟷ Users']
  /team/{team_id}/user/{user_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1user~1{user_id}/get'
      tags: ['Teams ⟷ Users']
    put:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1user~1{user_id}/put'
      tags: ['Teams ⟷ Users']
    delete:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1user~1{user_id}/delete'
      tags: ['Teams ⟷ Users']
  /user/{user_id}/teams:
    get:
      $ref: './readmeio.yaml#/paths/~1user~1{user_id}~1teams/get'
      tags: ['Teams ⟷ Users']
  /team/{team_id}/invites:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1invites/get'
      tags: ['Teams ⟷ Users']
    post:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1invites/post'
      tags: ['Teams ⟷ Users']
  /invite/{invite_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1invite~1{invite_id}/get'
      tags: ['Teams ⟷ Users']
    delete:
      $ref: './readmeio.yaml#/paths/~1invite~1{invite_id}/delete'
      tags: ['Teams ⟷ Users']

  # Teams ⟷ Projects
  /team/{team_id}/projects:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1projects/get'
      tags: ['Teams ⟷ Projects']
  /team/{team_id}/project/{project_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1project~1{project_id}/get'
      tags: ['Teams ⟷ Projects']
    put:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1project~1{project_id}/put'
      tags: ['Teams ⟷ Projects']
    delete:
      $ref: './readmeio.yaml#/paths/~1team~1{team_id}~1project~1{project_id}/delete'
      tags: ['Teams ⟷ Projects']

  # Users ⟷ Projects
  /user/{user_id}/projects:
    get:
      $ref: './readmeio.yaml#/paths/~1user~1{user_id}~1projects/get'
      tags: ['Users ⟷ Projects']

  # People
  /people/delete_jobs/:
    post:
      $ref: './readmeio.yaml#/paths/~1people~1delete_jobs~1/post'
      tags: ['People']
  /people/delete_jobs/{job_id}:
    get:
      $ref: './readmeio.yaml#/paths/~1people~1delete_jobs~1{job_id}/get'
      tags: ['People']

  # Notifications
  /notifications/slack:
    put:
      tags: ['Notifications']
      description: Configuring Slack integration
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackIntegrationConfig'
            example:
              enabled: true
              channel: '#general'
              service_account_id: 12345
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}

  /notifications/slack/rules:
    put:
      tags: ['Notifications']
      description: Setup Slack notification rules
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlackRules'
            example:
              - trigger: new_item
                filters:
                  - type: environment
                    operation: eq
                    value: production
                  - type: level
                    operation: gte
                    value: error
        required: true

      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}

  /notifications/pagerduty:
    put:
      tags: ['Notifications']
      description: Configuring PagerDuty integration
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagerDutyIntegrationConfig'
            example:
              enabled: true
              service_key: yckkfseezrrkpvdefmkxuxwzrqxnrmsm
        required: true

      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}

  /notifications/pagerduty/rules:
    put:
      tags: ['Notifications']
      description: Setup PagerDuty notification rules
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PagerDutyRules'
            example:
              - trigger: new_item
                filters:
                  - type: environment
                    operation: eq
                    value: production
                  - type: level
                    operation: gte
                    value: error
        required: true

      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}
  /versions/{version}:
    get:
      tags: ['Versions']
      summary: Code version details in one project
      description: |
        Returns the details about one specific code version in one project

        https://docs.rollbar.com/docs/versions
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - $ref: './parameters.yaml#/version_path'
        - name: environment
          in: query
          description: The environment where the code version is detected
          required: true
          schema:
            type: string
          example: production
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      result:
                        $ref: '#/components/schemas/ProjectVersion'

  /versions/{version}/items:
    get:
      tags: ['Versions']
      summary: List items by code version
      description: |
        List items that have occurrences for one specific code version.

        https://docs.rollbar.com/docs/versions
      parameters:
        - $ref: './parameters.yaml#/project_read_access_token_header'
        - $ref: './parameters.yaml#/version_path'
        - name: environment
          in: query
          description: For one code version list the items only for this environment
          required: true
          schema:
            type: string
          example: production
        - name: event
          in: query
          description: |
            Filter the list of items by the item event produced on the code version. One item can have one of these events in one version:

              - `new` for new items in the code version
              - `repeated` for an item that already existed in preivous versions
              - `reactivated` an item that was resolved but was reactivated in the code version
              - `resolved` an item resolved in one specific version
          required: true
          schema:
            type: string
            enum: [new, repeated, reactivated, resolved]
          example: new
        - name: level
          in: query
          description: Filter the list of items by level. Multiple levels can be used, and all items for all levels will be returned if no one is specified.
          required: false
          schema:
            type: array
            items:
              type: string
              enum: [debug, info, warning, error, critical]
          example: [error, critical]
        - $ref: './parameters.yaml#/page_parameter'
      responses:
        '200':
          content:
            application/json; charset=utf-8:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      result:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/ItemInVersion'
  /notifications/email:
    put:
      tags: ['Notifications']
      description: Configuring Email Notifications integration
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailIntegrationConfig'
            example:
              enabled: true
        required: true

      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}

  /notifications/email/rules:
    put:
      tags: ['Notifications']
      description: Setup Email notification rules
      parameters:
        - $ref: './parameters.yaml#/project_write_access_token_header'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailRules'
            example:
              - trigger: new_item
                filters:
                  - type: environment
                    operation: eq
                    value: production
                  - type: level
                    operation: gte
                    value: error
        required: true

      responses:
        '200':
          description: Success
          content:
            application/json; charset=utf-8:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
              example:
                err: 0
                result: {}

components:
  schemas:
    SuccessResponse:
      type: object
      properties:
        err:
          type: integer
          enum: [0]
    EmptyResponse:
      type: object
      properties:
        err:
          type: integer
          enum: [0]
        result:
          type: object
          default: {}

    # Occurrences
    PaginatedOccurrenceInstances:
      type: object
      properties:
        page:
          type: integer
          default: 1
        instances:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/OccurrenceInstance'

    OccurrenceInstance:
      type: object
      properties:
        id:
          type: integer
          description: The occurrence id
        project_id:
          type: integer
          description: The project id
        item_id:
          type: integer
          description: The item id
        timestamp:
          type: integer
          description: The timestamp in ms when the occurrence was received
        version:
          type: integer
        data:
          type: object
          description: The occurrence data sent to the API
        billable:
          type: integer

    # Project access token
    ProjectAccessToken:
      type: object
      required:
        - name
        - scopes
      properties:
        name:
          description: Name to identify the access token
          type: string
        scopes:
          description: Scopes to assign to the create access token
          type: array
          items:
            type: string
            enum:
              - write
              - read
              - post_server_item
              - post_client_server
        status:
          type: string
          description: Enable or disable the access token
          enum:
            - disabled
            - enabled
          default: enabled
        rate_limit_window_size:
          type: integer
          description: Period of time (in seconds) for the rate limit configuration
          minimum: 1
        rate_limit_window_count:
          type: integer
          description: Number of requests for the defined rate limiting period
          minimum: 1

    # Response representation of a ProjectAccessToken, included fields add from DB
    ProjectAccessTokenResponse:
      allOf:
        - $ref: '#/components/schemas/ProjectAccessToken'
        - type: object
          properties:
            access_token:
              type: string
              description: The access token value
            project_id:
              type: integer
              description: The project ID the access token belongs to
            date_created:
              type: string
            date_modified:
              type: string
            cur_rate_limit_window_start:
              type: integer
            cur_rate_limit_window_count:
              type: integer

    EmailRules:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/NewItemEmailRule'
          - $ref: '#/components/schemas/OccurrenceEmailRule'
          - $ref: '#/components/schemas/DeployEmailRule'
          - $ref: '#/components/schemas/ReactivatedItemEmailRule'
          - $ref: '#/components/schemas/ResolvedItemEmailRule'
          - $ref: '#/components/schemas/NewVersionEmailRule'
          - $ref: '#/components/schemas/ReopenedItemEmailRule'
          - $ref: '#/components/schemas/OccurrenceRateEmailRule'
          - $ref: '#/components/schemas/ExpRepeatItemEmailRule'
        discriminator:
          propertyName: trigger
          mapping:
            new_item: '#/components/schemas/NewItemEmailRule'
            occurrence: '#/components/schemas/OccurrenceEmailRule'
            deploy: '#/components/schemas/DeployEmailRule'
            reactivated_item: '#/components/schemas/ReactivatedItemEmailRule'
            resolved_item: '#/components/schemas/ResolvedItemEmailRule'
            new_version: '#/components/schemas/NewVersionEmailRule'
            reopened_item: '#/components/schemas/ReopenedItemEmailRule'
            occurrence_rate: '#/components/schemas/OccurrenceRateEmailRule'
            exp_repeat_item: '#/components/schemas/ExpRepeatItemEmailRule'
        maxLength: 50
        uniqueItems: true

    EmailIntegrationConfig:
      required:
        - enabled
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable the Email notifications globally
        include_request_params:
          type: boolean
          description: Whether to include request parameters

    EmailRuleConfig:
      type: object
      properties:
        config:
          type: object
          properties:
            teams:
              type: array
              description: List of team names to send emails to
            users:
              type: array
              description: List of usernames or email addresses to send emails to

    NewItemEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewItemRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    OccurrenceEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/OccurrenceRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    DeployEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/DeployRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    ReactivatedItemEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReactivatedItemRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    ResolvedItemEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResolvedItemRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    NewVersionEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewVersionRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    ReopenedItemEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReopenedItemRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    OccurrenceRateEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/OccurrenceRateRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    ExpRepeatItemEmailRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExpRepeatItemRule'
        - $ref: '#/components/schemas/EmailRuleConfig'

    SlackIntegrationConfig:
      required:
        - channel
        - enabled
        - service_account_id
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable the Slack notifications globally
        service_account_id:
          type: integer
          description: You can find your Service Account ID in https://rollbar.com/settings/integrations/#slack
        channel:
          type: string
          description: The default Slack channel to send the messages
          example: '#general'
        show_message_buttons:
          type: boolean
          description: Show the Slack actionable buttons

    SlackRules:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/NewItemSlackRule'
          - $ref: '#/components/schemas/OccurrenceSlackRule'
          - $ref: '#/components/schemas/DeploySlackRule'
          - $ref: '#/components/schemas/ReactivatedItemSlackRule'
          - $ref: '#/components/schemas/ResolvedItemSlackRule'
          - $ref: '#/components/schemas/NewVersionSlackRule'
          - $ref: '#/components/schemas/ReopenedItemSlackRule'
          - $ref: '#/components/schemas/OccurrenceRateSlackRule'
          - $ref: '#/components/schemas/ExpRepeatItemSlackRule'
        discriminator:
          propertyName: trigger
          mapping:
            new_item: '#/components/schemas/NewItemSlackRule'
            occurrence: '#/components/schemas/OccurrenceSlackRule'
            deploy: '#/components/schemas/DeploySlackRule'
            reactivated_item: '#/components/schemas/ReactivatedItemSlackRule'
            resolved_item: '#/components/schemas/ResolvedItemSlackRule'
            new_version: '#/components/schemas/NewVersionSlackRule'
            reopened_item: '#/components/schemas/ReopenedItemSlackRule'
            occurrence_rate: '#/components/schemas/OccurrenceRateSlackRule'
            exp_repeat_item: '#/components/schemas/ExpRepeatItemSlackRule'
        maxLength: 50
        uniqueItems: true

    SlackRuleConfig:
      type: object
      properties:
        config:
          type: object
          properties:
            message_template:
              type: string
              description: Define a custom template for the Slack message. More information here https://docs.rollbar.com/docs/slack#section-tips-tricks
            show_message_buttons:
              type: boolean
              description: Show the Slack actionable buttons
            channel:
              type: string
              description: The Slack channel to send the messages
              example: '#general'

    SlackRuleConfigNoButtons:
      type: object
      properties:
        config:
          type: object
          properties:
            message_template:
              type: string
              description: Define a custom template for the Slack message. More information here https://docs.rollbar.com/docs/slack#section-tips-tricks
            channel:
              type: string
              description: The Slack channel to send the messages
              example: '#general'

    NewItemSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewItemRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    OccurrenceSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/OccurrenceRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    DeploySlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/DeployRule'
        - $ref: '#/components/schemas/SlackRuleConfigNoButtons'

    ReactivatedItemSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReactivatedItemRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    ResolvedItemSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResolvedItemRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    NewVersionSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewVersionRule'
        - $ref: '#/components/schemas/SlackRuleConfigNoButtons'

    ReopenedItemSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReopenedItemRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    OccurrenceRateSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/OccurrenceRateRule'
        - $ref: '#/components/schemas/SlackRuleConfig'

    ExpRepeatItemSlackRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExpRepeatItemRule'
        - $ref: '#/components/schemas/SlackRuleConfigNoButtons'

    PagerDutyIntegrationConfig:
      required:
        - enabled
        - service_key
      type: object
      properties:
        enabled:
          type: boolean
          description: Enable the PagerDuty notifications globally
        service_key:
          type: string
          description: PagerDuty Service API Key

    PagerDutyRules:
      type: array
      items:
        anyOf:
          - $ref: '#/components/schemas/NewItemPagerDutyRule'
          - $ref: '#/components/schemas/ReactivatedItemPagerDutyRule'
          - $ref: '#/components/schemas/ResolvedItemPagerDutyRule'
          - $ref: '#/components/schemas/OccurrenceRatePagerDutyRule'
          - $ref: '#/components/schemas/ExpRepeatItemPagerDutyRule'
        discriminator:
          propertyName: trigger
          mapping:
            new_item: '#/components/schemas/NewItemPagerDutyRule'
            reactivated_item: '#/components/schemas/ReactivatedItemPagerDutyRule'
            resolved_item: '#/components/schemas/ResolvedItemPagerDutyRule'
            occurrence_rate: '#/components/schemas/OccurrenceRatePagerDutyRule'
            exp_repeat_item: '#/components/schemas/ExpRepeatItemPagerDutyRule'
        maxLength: 50
        uniqueItems: true

    PagerDutyRuleConfig:
      type: object
      properties:
        config:
          type: object
          properties:
            service_key:
              type: string
              description: PagerDuty Service API Key

    NewItemPagerDutyRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/NewItemRule'
        - $ref: '#/components/schemas/PagerDutyRuleConfig'

    ReactivatedItemPagerDutyRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ReactivatedItemRule'
        - $ref: '#/components/schemas/PagerDutyRuleConfig'

    ResolvedItemPagerDutyRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ResolvedItemRule'
        - $ref: '#/components/schemas/PagerDutyRuleConfig'

    OccurrenceRatePagerDutyRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/OccurrenceRateRule'
        - $ref: '#/components/schemas/PagerDutyRuleConfig'

    ExpRepeatItemPagerDutyRule:
      type: object
      allOf:
        - $ref: '#/components/schemas/ExpRepeatItemRule'
        - $ref: '#/components/schemas/PagerDutyRuleConfig'

    # Abstract Rules
    NewItemRule:
      type: object
      required:
        - trigger
      properties:
        trigger:
          type: string
          enum: ['new_item']
          description: An error/ message is seen for the first time
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'

    OccurrenceRule:
      type: object
      required:
        - trigger
      properties:
        trigger:
          type: string
          enum: ['occurrence']
          description: Every time an error/ message occurs (use wisely!).
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'

    DeployRule:
      type: object
      required:
        - trigger
      properties:
        trigger:
          type: string
          enum: ['deploy']
          description: A new deploy is reported.
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/comment_filter'

    ReactivatedItemRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['reactivated_item']
          description: An error/message occurs again after being marked Resolved
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'

    ResolvedItemRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['resolved_item']
          description: An error/message is marked Resolved.
        filters:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'

    NewVersionRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['new_version']
          description: A new code version is detected
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'

    ReopenedItemRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['reopened_item']
          description: An error/message is marked Active by a user.
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'

    OccurrenceRateRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['occurrence_rate']
          description: '{x} occurrences seen in {y} minutes'
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'
              - $ref: '#/components/schemas/rate_filter'

    ExpRepeatItemRule:
      required:
        - trigger
      type: object
      properties:
        trigger:
          type: string
          enum: ['exp_repeat_item']
          description: 10th, 100th, 1,000th, 10,000th, … occurrence
        filters:
          type: array
          description: To keep your notifications relevant, you'll want to apply filters to limit when they send messages or create incidents.
          items:
            anyOf:
              - $ref: '#/components/schemas/environment_filter'
              - $ref: '#/components/schemas/level_filter'
              - $ref: '#/components/schemas/title_filter'
              - $ref: '#/components/schemas/filename_filter'
              - $ref: '#/components/schemas/context_filter'
              - $ref: '#/components/schemas/method_filter'
              - $ref: '#/components/schemas/framework_filter'
              - $ref: '#/components/schemas/path_filter'
              - $ref: '#/components/schemas/path_filter_with_exists'
              - $ref: '#/components/schemas/unique_occurences_filter'
              - $ref: '#/components/schemas/rate_filter'

    # Filters
    path_filter:
      type: object
      example: body.body.trace.exception.message
      properties:
        path:
          type: string
        type:
          enum: ['path']
          type: string
          description: Allows for filtering based on any data in the JSON payload. To view the JSON structure of your errors, check out the Raw JSON section of any occurrence
        value:
          type: string
        operation:
          enum:
            - eq
            - gte
            - lte
            - within
            - nwithin
            - neq
            - regex
            - nregex
            - startswith
          type: string
      required:
        - path
        - type
        - operation
        - value
    path_filter_with_exists:
      type: object
      example: body.body.trace.exception.message
      properties:
        path:
          type: string
        type:
          enum: ['path']
          type: string
          description: Allows for filtering based on any data in the JSON payload. To view the JSON structure of your errors, check out the Raw JSON section of any occurrence
        value:
          type: string
        operation:
          enum:
            - eq
            - gte
            - lte
            - within
            - nwithin
            - neq
            - regex
            - nregex
            - startswith
            - exists
            - nexists
          type: string
      required:
        - path
        - type
        - operation
    level_filter:
      type: object
      properties:
        type:
          enum: ['level']
          type: string
          description: Item Level
        operation:
          type: string
          enum:
            - eq
            - gte
        value:
          type: string
          enum:
            - debug
            - info
            - warning
            - error
            - critical
      required:
        - type
        - operation
        - value
    title_filter:
      type: object
      properties:
        type:
          enum: ['title']
          type: string
          description: Item Title
        operation:
          type: string
          enum:
            - within
            - nwithin
            - regex
            - nregex
        value:
          type: string
      required:
        - type
        - operation
        - value
    filename_filter:
      type: object
      properties:
        type:
          enum: ['filename']
          type: string
          description: Matches the name of any file in the stack trace
        operation:
          type: string
          enum:
            - within
            - nwithin
            - regex
            - nregex
        value:
          type: string
      required:
        - type
        - operation
        - value
    context_filter:
      type: object
      properties:
        type:
          enum: ['context']
          type: string
          description: Matches context value (if included in payload)
        operation:
          type: string
          enum:
            - startswith
            - eq
            - neq
        value:
          type: string
      required:
        - type
        - operation
        - value
    method_filter:
      type: object
      properties:
        type:
          enum: ['method']
          type: string
          description: Matches any method in the stack trace
        operation:
          type: string
          enum:
            - within
            - nwithin
            - regex
            - nregex
        value:
          type: string
      required:
        - type
        - operation
        - value
    framework_filter:
      type: object
      properties:
        type:
          enum: ['framework']
          type: string
          description: Platform/language of the item
        operation:
          type: string
          enum:
            - eq
        value:
          type: string
      required:
        - type
        - operation
        - value
    unique_occurences_filter:
      type: object
      properties:
        type:
          enum: ['unique_occurrences']
          type: string
          description: Number of unique IPs affected for the item
        operation:
          type: string
          enum:
            - gte
        value:
          type: number
      required:
        - type
        - operation
        - value
    comment_filter:
      type: object
      properties:
        type:
          enum: ['comment']
          type: string
          description: Body of an item comment
        operation:
          type: string
          enum:
            - within
        value:
          type: string
      required:
        - type
        - operation
        - value
    rate_filter:
      type: object
      properties:
        type:
          enum: ['rate']
          type: string
          description: Rate of occurrences of an item
        period:
          type: number
          description: Number of seconds
        count:
          type: number
      required:
        - type
        - period
        - count
    environment_filter:
      type: object
      properties:
        type:
          enum: ['environment']
          type: string
          description: Item Environment
        operation:
          type: string
          enum:
            - eq
            - neq
        value:
          type: string
      required:
        - type
        - operation
        - value

    Item:
      type: object
      properties:
        id:
          type: integer
          description: The item ID
        project_id:
          type: integer
          description: The item's project ID
        counter:
          type: integer
          description: The item identifier withing the project
        environment:
          type: string
        platform:
          type: string
        framework:
          type: string
        hash:
          type: string
          description: Fingerprint that identifies the item
        title:
          type: string
        first_occurrence_id:
          type: integer
          description: First occurrence ID of the item in the version
        first_occurrence_timestamp:
          type: integer
          description: First occurrence timestamp of the item
        activating_occurrence_id:
          type: integer
          description: Occurrence ID that activated the item
        last_activated_timestamp:
          type: integer
          description: Last activation timestamp
        last_resolved_timestamp:
          type: integer
          description: Last timestamp the item was resolved
        last_muted_timestamp:
          type: integer
          description: Last timestamp the item was muted
        last_occurrence_id:
          type: integer
          description: Last received occurrence ID of the item
        last_occurrence_timestamp:
          type: integer
          description: Last received occurrence timestamp
        total_occurrences:
          type: integer
          description: Total number of occurrences on the item
        last_modified_by:
          type: string
          description: Last user ID that modified the item
        status:
          type: string
          enum:
            - active
            - resolved
            - muted
        level:
          type: string
          enum:
            - debug
            - info
            - warning
            - error
            - critical
        integrations_data:
          type: object
        assigned_user_id:
          type: integer
          description: User ID the item is assigned to
        group_item_id:
          type: integer
          description: Group item this item belongs to
        group_status:
          type: integer
      example:
        id: 1000
        project_id: 5
        counter: 4
        environment: production
        platform: unknown
        framework: rails
        hash: 03044fc948dd2c51c4ebccafbf0a01b01339a7b5
        title: NotMethod Error
        first_occurrence_id: 1234
        first_occurrence_timestamp: 1583538518
        activating_occurrence_id: 1234
        last_activated_timestamp: 1583538518
        last_resolved_timestamp: None
        last_muted_timestamp: None
        last_occurrence_id: 2234
        last_occurrence_timestamp: 1583538118
        total_occurrences: 1000
        last_modified_by: 123
        status: active
        level: error
        integrations_data: {}
        assigned_user_id: 400
        group_item_id: None
        group_status: 1

    ItemInVersion:
      type: object
      allOf:
        - $ref: '#/components/schemas/Item'
      properties:
        first_in_version_occurrence_id:
          type: integer
          description: First occurrence ID of the item on the version
        first_in_version_occurrence_timestamp:
          type: integer
          description: First occurrence timestamp of the item on the version
        last_in_version_occurrence_id:
          type: integer
          description: Last received occurrence ID of the item on the version
        last_in_version_occurrence_timestamp:
          type: integer
          description: Last received occurrence timestamp on the version
        occurrences_in_version:
          type: integer
          description: Total number of item occurrences on this version
        people_in_version:
          type: integer
          description: Number of affected people by this item on this version
      example:
        id: 1000
        project_id: 5
        counter: 4
        environment: production
        platform: unknown
        framework: rails
        hash: 03044fc948dd2c51c4ebccafbf0a01b01339a7b5
        title: NotMethod Error
        status: active
        level: error
        first_in_version_occurrence_id: 1234
        first_in_version_occurrence_timestamp: 1583538518
        last_in_version_occurrence_id: 2234
        last_in_version_occurrence_timestamp: 1583538519
        occurrences_in_version: 1000
        people_in_version: 23

    ProjectVersion:
      type: object
      properties:
        id:
          type: integer
          description: The internal ID for the project version
        version:
          type: string
          description: The version value received in the item occurrences
        environment:
          type: string
          description: Environment where this version has been deployed
        date_created:
          type: integer
          description: Timestamp when the version is created
        first_version_occurrence_id:
          type: integer
          description: First occurrence ID received for this version
        first_occurrence_timestamp:
          type: integer
          description: First occurrence timestamp of the item on the version
        last_occurrence_id:
          type: integer
          description: Last received occurrence ID of the item on the version
        last_occurrence_timestamp:
          type: integer
          description: Last received occurrence timestamp on the version
        deployed_by:
          type: string
          description: Username of the user that deployed the version. https://docs.rollbar.com/docs/deploy-tracking
        last_deploy_timestamp:
          type: integer
          description: Last received occurrence timestamp on the version
        item_stats:
          type: object
          title: Item Stats
          description: |
            Items statistics per event type and level. Each item in the specified version has 4 possible event types:
              - `new` for new items in the code version
              - `repeated` for an item that already existed in preivous versions
              - `reactivated` an item that was resolved but was reactivated in the code version
              - `resolved` an item resolved in one specific version

            For each of them we collect the number of items for each possible level: `debug`, `info`, `warning`, `error` or `critical`.
          properties:
            new:
              $ref: '#/components/schemas/ItemLevelStats'
            repeated:
              $ref: '#/components/schemas/ItemLevelStats'
            reactivated:
              $ref: '#/components/schemas/ItemLevelStats'
            resolved:
              $ref: '#/components/schemas/ItemLevelStats'
        commits:
          type: array
          title: Commits
          description: |
            Commits for this version compared to the previous project deploy. If deploy tracking feature is not used this value
            will be an empty array. https://docs.rollbar.com/docs/deploy-tracking
          items:
            type: object
            description: Commit
            properties:
              author:
                type: string
                description: Author of the commit
              sha:
                type: string
                description: Commit SHA
              message:
                type: string
                description: Commit message
      example:
        id: 100
        version: 781463c84c8e1a3143a95ae5295b468fc5484b32
        environment: production
        date_created: 1583538519
        first_occurrence_id: 2000
        first_occurrence_timestamp: 1583538529
        last_occurrence_id: 30000
        last_occurrence_timestamp: 1583538529
        deployed_by: michael
        last_deploy_timestamp: 1583538509
        item_stats:
          new:
            debug: 0
            info: 10
            warning: 19
            error: 4
            critical: 0
          repeated:
            debug: 0
            info: 10
            warning: 19
            error: 4
            critical: 0
          reactivated:
            debug: 0
            info: 10
            warning: 19
            error: 4
            critical: 0
          resolved:
            debug: 0
            info: 10
            warning: 19
            error: 4
            critical: 1
          critical:
            debug: 0
            info: 10
            warning: 19
            error: 4
            critical: 0
        commits:
          - author: michael
            sha: 781463c84c8e1a3143a95ae5295b468fc5484b32
            message: Add feature X
          - author: michael
            sha: 03a4569e5d4842f272a54facaacda0bebab97326
            message: Fix bug

    ItemLevelStats:
      type: object
      properties:
        debug:
          type: integer
        info:
          type: integer
        warning:
          type: integer
        error:
          type: integer
        critical:
          type: integer
      example:
        debug: 0
        info: 10
        warning: 19
        error: 4
        critical: 0
