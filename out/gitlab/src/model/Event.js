/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Note from './Note';
import UserBasic from './UserBasic';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.0
 */
class Event {
    /**
     * Constructs a new <code>Event</code>.
     * This feature was introduced in GitLab 8.13.
     * @alias module:model/Event
     */
    constructor() { 
        
        Event.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Event} obj Optional instance to populate.
     * @return {module:model/Event} The populated <code>Event</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Event();

            if (data.hasOwnProperty('action_name')) {
                obj['action_name'] = ApiClient.convertToType(data['action_name'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('author_id')) {
                obj['author_id'] = ApiClient.convertToType(data['author_id'], 'String');
            }
            if (data.hasOwnProperty('author_username')) {
                obj['author_username'] = ApiClient.convertToType(data['author_username'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], 'String');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = Note.constructFromObject(data['note']);
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
            if (data.hasOwnProperty('target_id')) {
                obj['target_id'] = ApiClient.convertToType(data['target_id'], 'String');
            }
            if (data.hasOwnProperty('target_title')) {
                obj['target_title'] = ApiClient.convertToType(data['target_title'], 'String');
            }
            if (data.hasOwnProperty('target_type')) {
                obj['target_type'] = ApiClient.convertToType(data['target_type'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} action_name
 */
Event.prototype['action_name'] = undefined;

/**
 * @member {module:model/UserBasic} author
 */
Event.prototype['author'] = undefined;

/**
 * @member {String} author_id
 */
Event.prototype['author_id'] = undefined;

/**
 * @member {String} author_username
 */
Event.prototype['author_username'] = undefined;

/**
 * @member {String} created_at
 */
Event.prototype['created_at'] = undefined;

/**
 * @member {String} data
 */
Event.prototype['data'] = undefined;

/**
 * @member {module:model/Note} note
 */
Event.prototype['note'] = undefined;

/**
 * @member {String} project_id
 */
Event.prototype['project_id'] = undefined;

/**
 * @member {String} target_id
 */
Event.prototype['target_id'] = undefined;

/**
 * @member {String} target_title
 */
Event.prototype['target_title'] = undefined;

/**
 * @member {String} target_type
 */
Event.prototype['target_type'] = undefined;

/**
 * @member {String} title
 */
Event.prototype['title'] = undefined;






export default Event;

