/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BuildArtifactFile from './BuildArtifactFile';
import PipelineBasic from './PipelineBasic';
import RepoCommit from './RepoCommit';
import Runner from './Runner';
import User from './User';

/**
 * The Build model module.
 * @module model/Build
 * @version 1.1.0
 */
class Build {
    /**
     * Constructs a new <code>Build</code>.
     * This feature was added in GitLab 8.11
     * @alias module:model/Build
     */
    constructor() { 
        
        Build.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Build</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Build} obj Optional instance to populate.
     * @return {module:model/Build} The populated <code>Build</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Build();

            if (data.hasOwnProperty('artifacts_file')) {
                obj['artifacts_file'] = BuildArtifactFile.constructFromObject(data['artifacts_file']);
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = RepoCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('coverage')) {
                obj['coverage'] = ApiClient.convertToType(data['coverage'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('finished_at')) {
                obj['finished_at'] = ApiClient.convertToType(data['finished_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pipeline')) {
                obj['pipeline'] = PipelineBasic.constructFromObject(data['pipeline']);
            }
            if (data.hasOwnProperty('ref')) {
                obj['ref'] = ApiClient.convertToType(data['ref'], 'String');
            }
            if (data.hasOwnProperty('runner')) {
                obj['runner'] = Runner.constructFromObject(data['runner']);
            }
            if (data.hasOwnProperty('stage')) {
                obj['stage'] = ApiClient.convertToType(data['stage'], 'String');
            }
            if (data.hasOwnProperty('started_at')) {
                obj['started_at'] = ApiClient.convertToType(data['started_at'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/BuildArtifactFile} artifacts_file
 */
Build.prototype['artifacts_file'] = undefined;

/**
 * @member {module:model/RepoCommit} commit
 */
Build.prototype['commit'] = undefined;

/**
 * @member {String} coverage
 */
Build.prototype['coverage'] = undefined;

/**
 * @member {String} created_at
 */
Build.prototype['created_at'] = undefined;

/**
 * @member {String} finished_at
 */
Build.prototype['finished_at'] = undefined;

/**
 * @member {String} id
 */
Build.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Build.prototype['name'] = undefined;

/**
 * @member {module:model/PipelineBasic} pipeline
 */
Build.prototype['pipeline'] = undefined;

/**
 * @member {String} ref
 */
Build.prototype['ref'] = undefined;

/**
 * @member {module:model/Runner} runner
 */
Build.prototype['runner'] = undefined;

/**
 * @member {String} stage
 */
Build.prototype['stage'] = undefined;

/**
 * @member {String} started_at
 */
Build.prototype['started_at'] = undefined;

/**
 * @member {String} status
 */
Build.prototype['status'] = undefined;

/**
 * @member {String} tag
 */
Build.prototype['tag'] = undefined;

/**
 * @member {module:model/User} user
 */
Build.prototype['user'] = undefined;






export default Build;

