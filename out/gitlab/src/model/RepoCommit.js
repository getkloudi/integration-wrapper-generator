/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RepoCommit model module.
 * @module model/RepoCommit
 * @version 1.1.0
 */
class RepoCommit {
    /**
     * Constructs a new <code>RepoCommit</code>.
     * Get the commits of a merge request
     * @alias module:model/RepoCommit
     */
    constructor() { 
        
        RepoCommit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RepoCommit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RepoCommit} obj Optional instance to populate.
     * @return {module:model/RepoCommit} The populated <code>RepoCommit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RepoCommit();

            if (data.hasOwnProperty('author_email')) {
                obj['author_email'] = ApiClient.convertToType(data['author_email'], 'String');
            }
            if (data.hasOwnProperty('author_name')) {
                obj['author_name'] = ApiClient.convertToType(data['author_name'], 'String');
            }
            if (data.hasOwnProperty('committer_email')) {
                obj['committer_email'] = ApiClient.convertToType(data['committer_email'], 'String');
            }
            if (data.hasOwnProperty('committer_name')) {
                obj['committer_name'] = ApiClient.convertToType(data['committer_name'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('short_id')) {
                obj['short_id'] = ApiClient.convertToType(data['short_id'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} author_email
 */
RepoCommit.prototype['author_email'] = undefined;

/**
 * @member {String} author_name
 */
RepoCommit.prototype['author_name'] = undefined;

/**
 * @member {String} committer_email
 */
RepoCommit.prototype['committer_email'] = undefined;

/**
 * @member {String} committer_name
 */
RepoCommit.prototype['committer_name'] = undefined;

/**
 * @member {String} created_at
 */
RepoCommit.prototype['created_at'] = undefined;

/**
 * @member {String} id
 */
RepoCommit.prototype['id'] = undefined;

/**
 * @member {String} message
 */
RepoCommit.prototype['message'] = undefined;

/**
 * @member {String} short_id
 */
RepoCommit.prototype['short_id'] = undefined;

/**
 * @member {String} title
 */
RepoCommit.prototype['title'] = undefined;






export default RepoCommit;

