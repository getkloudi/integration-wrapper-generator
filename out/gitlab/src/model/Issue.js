/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Milestone from './Milestone';
import UserBasic from './UserBasic';

/**
 * The Issue model module.
 * @module model/Issue
 * @version 1.0.0
 */
class Issue {
    /**
     * Constructs a new <code>Issue</code>.
     * Get currently authenticated user&#39;s issues
     * @alias module:model/Issue
     */
    constructor() { 
        
        Issue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Issue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Issue} obj Optional instance to populate.
     * @return {module:model/Issue} The populated <code>Issue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Issue();

            if (data.hasOwnProperty('assignee')) {
                obj['assignee'] = UserBasic.constructFromObject(data['assignee']);
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = UserBasic.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('confidential')) {
                obj['confidential'] = ApiClient.convertToType(data['confidential'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('downvotes')) {
                obj['downvotes'] = ApiClient.convertToType(data['downvotes'], 'String');
            }
            if (data.hasOwnProperty('due_date')) {
                obj['due_date'] = ApiClient.convertToType(data['due_date'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('iid')) {
                obj['iid'] = ApiClient.convertToType(data['iid'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], 'String');
            }
            if (data.hasOwnProperty('milestone')) {
                obj['milestone'] = Milestone.constructFromObject(data['milestone']);
            }
            if (data.hasOwnProperty('project_id')) {
                obj['project_id'] = ApiClient.convertToType(data['project_id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subscribed')) {
                obj['subscribed'] = ApiClient.convertToType(data['subscribed'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
            if (data.hasOwnProperty('upvotes')) {
                obj['upvotes'] = ApiClient.convertToType(data['upvotes'], 'String');
            }
            if (data.hasOwnProperty('user_notes_count')) {
                obj['user_notes_count'] = ApiClient.convertToType(data['user_notes_count'], 'String');
            }
            if (data.hasOwnProperty('web_url')) {
                obj['web_url'] = ApiClient.convertToType(data['web_url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/UserBasic} assignee
 */
Issue.prototype['assignee'] = undefined;

/**
 * @member {module:model/UserBasic} author
 */
Issue.prototype['author'] = undefined;

/**
 * @member {String} confidential
 */
Issue.prototype['confidential'] = undefined;

/**
 * @member {String} created_at
 */
Issue.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
Issue.prototype['description'] = undefined;

/**
 * @member {String} downvotes
 */
Issue.prototype['downvotes'] = undefined;

/**
 * @member {String} due_date
 */
Issue.prototype['due_date'] = undefined;

/**
 * @member {String} id
 */
Issue.prototype['id'] = undefined;

/**
 * @member {String} iid
 */
Issue.prototype['iid'] = undefined;

/**
 * @member {String} labels
 */
Issue.prototype['labels'] = undefined;

/**
 * @member {module:model/Milestone} milestone
 */
Issue.prototype['milestone'] = undefined;

/**
 * @member {String} project_id
 */
Issue.prototype['project_id'] = undefined;

/**
 * @member {String} state
 */
Issue.prototype['state'] = undefined;

/**
 * @member {String} subscribed
 */
Issue.prototype['subscribed'] = undefined;

/**
 * @member {String} title
 */
Issue.prototype['title'] = undefined;

/**
 * @member {String} updated_at
 */
Issue.prototype['updated_at'] = undefined;

/**
 * @member {String} upvotes
 */
Issue.prototype['upvotes'] = undefined;

/**
 * @member {String} user_notes_count
 */
Issue.prototype['user_notes_count'] = undefined;

/**
 * @member {String} web_url
 */
Issue.prototype['web_url'] = undefined;






export default Issue;

