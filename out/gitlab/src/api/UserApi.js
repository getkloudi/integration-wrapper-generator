/**
 * Gitlab
 * The platform for modern developers GitLab unifies issues, code review, CI and CD into a single UI
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Email from '../model/Email';
import SSHKey from '../model/SSHKey';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';
import UserPublic from '../model/UserPublic';

/**
* User service.
* @module api/UserApi
* @version 1.1.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteV3UserEmailsEmailId operation.
     * @callback module:api/UserApi~deleteV3UserEmailsEmailIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an email address from the currently authenticated user
     * Delete an email address from the currently authenticated user
     * @param {Number} emailId The ID of the email
     * @param {module:api/UserApi~deleteV3UserEmailsEmailIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteV3UserEmailsEmailId(emailId, callback) {
      let postBody = null;
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling deleteV3UserEmailsEmailId");
      }

      let pathParams = {
        'email_id': emailId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/user/emails/{email_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteV3UserKeysKeyId operation.
     * @callback module:api/UserApi~deleteV3UserKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an SSH key from the currently authenticated user
     * Delete an SSH key from the currently authenticated user
     * @param {Number} keyId The ID of the SSH key
     * @param {module:api/UserApi~deleteV3UserKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    deleteV3UserKeysKeyId(keyId, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling deleteV3UserKeysKeyId");
      }

      let pathParams = {
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/user/keys/{key_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3User operation.
     * @callback module:api/UserApi~getV3UserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserPublic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the currently authenticated user
     * Get the currently authenticated user
     * @param {module:api/UserApi~getV3UserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserPublic}
     */
    getV3User(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UserPublic;
      return this.apiClient.callApi(
        '/v3/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3UserEmails operation.
     * @callback module:api/UserApi~getV3UserEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the currently authenticated user's email addresses
     * Get the currently authenticated user's email addresses
     * @param {module:api/UserApi~getV3UserEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    getV3UserEmails(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v3/user/emails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3UserEmailsEmailId operation.
     * @callback module:api/UserApi~getV3UserEmailsEmailIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single email address owned by the currently authenticated user
     * Get a single email address owned by the currently authenticated user
     * @param {Number} emailId The ID of the email
     * @param {module:api/UserApi~getV3UserEmailsEmailIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    getV3UserEmailsEmailId(emailId, callback) {
      let postBody = null;
      // verify the required parameter 'emailId' is set
      if (emailId === undefined || emailId === null) {
        throw new Error("Missing the required parameter 'emailId' when calling getV3UserEmailsEmailId");
      }

      let pathParams = {
        'email_id': emailId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v3/user/emails/{email_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3UserKeys operation.
     * @callback module:api/UserApi~getV3UserKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the currently authenticated user's SSH keys
     * Get the currently authenticated user's SSH keys
     * @param {module:api/UserApi~getV3UserKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3UserKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/user/keys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getV3UserKeysKeyId operation.
     * @callback module:api/UserApi~getV3UserKeysKeyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single key owned by currently authenticated user
     * Get a single key owned by currently authenticated user
     * @param {Number} keyId The ID of the SSH key
     * @param {module:api/UserApi~getV3UserKeysKeyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    getV3UserKeysKeyId(keyId, callback) {
      let postBody = null;
      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling getV3UserKeysKeyId");
      }

      let pathParams = {
        'key_id': keyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/user/keys/{key_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3UserEmails operation.
     * @callback module:api/UserApi~postV3UserEmailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Email} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new email address to the currently authenticated user
     * Add new email address to the currently authenticated user
     * @param {module:model/UNKNOWN_BASE_TYPE} UNKNOWN_BASE_TYPE 
     * @param {module:api/UserApi~postV3UserEmailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Email}
     */
    postV3UserEmails(UNKNOWN_BASE_TYPE, callback) {
      let postBody = UNKNOWN_BASE_TYPE;
      // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
      if (UNKNOWN_BASE_TYPE === undefined || UNKNOWN_BASE_TYPE === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling postV3UserEmails");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Email;
      return this.apiClient.callApi(
        '/v3/user/emails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postV3UserKeys operation.
     * @callback module:api/UserApi~postV3UserKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SSHKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new SSH key to the currently authenticated user
     * Add a new SSH key to the currently authenticated user
     * @param {module:model/UNKNOWN_BASE_TYPE} UNKNOWN_BASE_TYPE 
     * @param {module:api/UserApi~postV3UserKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SSHKey}
     */
    postV3UserKeys(UNKNOWN_BASE_TYPE, callback) {
      let postBody = UNKNOWN_BASE_TYPE;
      // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
      if (UNKNOWN_BASE_TYPE === undefined || UNKNOWN_BASE_TYPE === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling postV3UserKeys");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['private_token_header', 'private_token_query'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SSHKey;
      return this.apiClient.callApi(
        '/v3/user/keys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
