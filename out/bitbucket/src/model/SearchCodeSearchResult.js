/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitFile from './CommitFile';
import SearchContentMatch from './SearchContentMatch';
import SearchSegment from './SearchSegment';

/**
 * The SearchCodeSearchResult model module.
 * @module model/SearchCodeSearchResult
 * @version 1.1.2
 */
class SearchCodeSearchResult {
    /**
     * Constructs a new <code>SearchCodeSearchResult</code>.
     * @alias module:model/SearchCodeSearchResult
     */
    constructor() { 
        
        SearchCodeSearchResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchCodeSearchResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchCodeSearchResult} obj Optional instance to populate.
     * @return {module:model/SearchCodeSearchResult} The populated <code>SearchCodeSearchResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchCodeSearchResult();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('content_match_count')) {
                obj['content_match_count'] = ApiClient.convertToType(data['content_match_count'], 'Number');
            }
            if (data.hasOwnProperty('content_matches')) {
                obj['content_matches'] = ApiClient.convertToType(data['content_matches'], [SearchContentMatch]);
            }
            if (data.hasOwnProperty('path_matches')) {
                obj['path_matches'] = ApiClient.convertToType(data['path_matches'], [SearchSegment]);
            }
            if (data.hasOwnProperty('file')) {
                obj['file'] = CommitFile.constructFromObject(data['file']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
SearchCodeSearchResult.prototype['type'] = undefined;

/**
 * @member {Number} content_match_count
 */
SearchCodeSearchResult.prototype['content_match_count'] = undefined;

/**
 * @member {Array.<module:model/SearchContentMatch>} content_matches
 */
SearchCodeSearchResult.prototype['content_matches'] = undefined;

/**
 * @member {Array.<module:model/SearchSegment>} path_matches
 */
SearchCodeSearchResult.prototype['path_matches'] = undefined;

/**
 * @member {module:model/CommitFile} file
 */
SearchCodeSearchResult.prototype['file'] = undefined;






export default SearchCodeSearchResult;

