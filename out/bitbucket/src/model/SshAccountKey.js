/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Account from './Account';
import BranchingModelSettingsAllOfLinks from './BranchingModelSettingsAllOfLinks';
import SshAccountKeyAllOf from './SshAccountKeyAllOf';
import SshKey from './SshKey';

/**
 * The SshAccountKey model module.
 * @module model/SshAccountKey
 * @version 1.1.0
 */
class SshAccountKey {
    /**
     * Constructs a new <code>SshAccountKey</code>.
     * @alias module:model/SshAccountKey
     * @implements module:model/SshKey
     * @implements module:model/SshAccountKeyAllOf
     * @param type {String} 
     */
    constructor(type) { 
        SshKey.initialize(this, type);SshAccountKeyAllOf.initialize(this);
        SshAccountKey.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SshAccountKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SshAccountKey} obj Optional instance to populate.
     * @return {module:model/SshAccountKey} The populated <code>SshAccountKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SshAccountKey();
            SshKey.constructFromObject(data, obj);
            SshAccountKeyAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('created_on')) {
                obj['created_on'] = ApiClient.convertToType(data['created_on'], 'Date');
            }
            if (data.hasOwnProperty('last_used')) {
                obj['last_used'] = ApiClient.convertToType(data['last_used'], 'Date');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = BranchingModelSettingsAllOfLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = Account.constructFromObject(data['owner']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
SshAccountKey.prototype['type'] = undefined;

/**
 * The SSH key's immutable ID.
 * @member {String} uuid
 */
SshAccountKey.prototype['uuid'] = undefined;

/**
 * The SSH public key value in OpenSSH format.
 * @member {String} key
 */
SshAccountKey.prototype['key'] = undefined;

/**
 * The comment parsed from the SSH key (if present)
 * @member {String} comment
 */
SshAccountKey.prototype['comment'] = undefined;

/**
 * The user-defined label for the SSH key
 * @member {String} label
 */
SshAccountKey.prototype['label'] = undefined;

/**
 * @member {Date} created_on
 */
SshAccountKey.prototype['created_on'] = undefined;

/**
 * @member {Date} last_used
 */
SshAccountKey.prototype['last_used'] = undefined;

/**
 * @member {module:model/BranchingModelSettingsAllOfLinks} links
 */
SshAccountKey.prototype['links'] = undefined;

/**
 * @member {module:model/Account} owner
 */
SshAccountKey.prototype['owner'] = undefined;


// Implement SshKey interface:
/**
 * @member {String} type
 */
SshKey.prototype['type'] = undefined;
/**
 * The SSH key's immutable ID.
 * @member {String} uuid
 */
SshKey.prototype['uuid'] = undefined;
/**
 * The SSH public key value in OpenSSH format.
 * @member {String} key
 */
SshKey.prototype['key'] = undefined;
/**
 * The comment parsed from the SSH key (if present)
 * @member {String} comment
 */
SshKey.prototype['comment'] = undefined;
/**
 * The user-defined label for the SSH key
 * @member {String} label
 */
SshKey.prototype['label'] = undefined;
/**
 * @member {Date} created_on
 */
SshKey.prototype['created_on'] = undefined;
/**
 * @member {Date} last_used
 */
SshKey.prototype['last_used'] = undefined;
/**
 * @member {module:model/BranchingModelSettingsAllOfLinks} links
 */
SshKey.prototype['links'] = undefined;
// Implement SshAccountKeyAllOf interface:
/**
 * @member {module:model/Account} owner
 */
SshAccountKeyAllOf.prototype['owner'] = undefined;




export default SshAccountKey;

