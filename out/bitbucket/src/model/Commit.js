/**
 * Bitbucket
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Author from './Author';
import BaseCommit from './BaseCommit';
import CommitAllOf from './CommitAllOf';
import CommitAllOfLinks from './CommitAllOfLinks';
import Participant from './Participant';
import Repository from './Repository';

/**
 * The Commit model module.
 * @module model/Commit
 * @version 1.1.0
 */
class Commit {
    /**
     * Constructs a new <code>Commit</code>.
     * @alias module:model/Commit
     * @implements module:model/BaseCommit
     * @implements module:model/CommitAllOf
     * @param type {String} 
     */
    constructor(type) { 
        BaseCommit.initialize(this, type);CommitAllOf.initialize(this);
        Commit.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Commit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commit} obj Optional instance to populate.
     * @return {module:model/Commit} The populated <code>Commit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commit();
            BaseCommit.constructFromObject(data, obj);
            CommitAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = Author.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('date')) {
                obj['date'] = ApiClient.convertToType(data['date'], 'Date');
            }
            if (data.hasOwnProperty('hash')) {
                obj['hash'] = ApiClient.convertToType(data['hash'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [BaseCommit]);
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = CommitAllOfLinks.constructFromObject(data['links']);
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], [Participant]);
            }
            if (data.hasOwnProperty('repository')) {
                obj['repository'] = Repository.constructFromObject(data['repository']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
Commit.prototype['type'] = undefined;

/**
 * @member {module:model/Author} author
 */
Commit.prototype['author'] = undefined;

/**
 * @member {Date} date
 */
Commit.prototype['date'] = undefined;

/**
 * @member {String} hash
 */
Commit.prototype['hash'] = undefined;

/**
 * @member {String} message
 */
Commit.prototype['message'] = undefined;

/**
 * @member {Array.<module:model/BaseCommit>} parents
 */
Commit.prototype['parents'] = undefined;

/**
 * @member {module:model/CommitAllOfLinks} links
 */
Commit.prototype['links'] = undefined;

/**
 * @member {Array.<module:model/Participant>} participants
 */
Commit.prototype['participants'] = undefined;

/**
 * @member {module:model/Repository} repository
 */
Commit.prototype['repository'] = undefined;


// Implement BaseCommit interface:
/**
 * @member {String} type
 */
BaseCommit.prototype['type'] = undefined;
/**
 * @member {module:model/Author} author
 */
BaseCommit.prototype['author'] = undefined;
/**
 * @member {Date} date
 */
BaseCommit.prototype['date'] = undefined;
/**
 * @member {String} hash
 */
BaseCommit.prototype['hash'] = undefined;
/**
 * @member {String} message
 */
BaseCommit.prototype['message'] = undefined;
/**
 * @member {Array.<module:model/BaseCommit>} parents
 */
BaseCommit.prototype['parents'] = undefined;
// Implement CommitAllOf interface:
/**
 * @member {module:model/CommitAllOfLinks} links
 */
CommitAllOf.prototype['links'] = undefined;
/**
 * @member {Array.<module:model/Participant>} participants
 */
CommitAllOf.prototype['participants'] = undefined;
/**
 * @member {module:model/Repository} repository
 */
CommitAllOf.prototype['repository'] = undefined;




export default Commit;

