/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PullrequestAllOfRenderedTitle model module.
 * @module model/PullrequestAllOfRenderedTitle
 * @version 1.1.0
 */
class PullrequestAllOfRenderedTitle {
    /**
     * Constructs a new <code>PullrequestAllOfRenderedTitle</code>.
     * @alias module:model/PullrequestAllOfRenderedTitle
     */
    constructor() { 
        
        PullrequestAllOfRenderedTitle.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PullrequestAllOfRenderedTitle</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PullrequestAllOfRenderedTitle} obj Optional instance to populate.
     * @return {module:model/PullrequestAllOfRenderedTitle} The populated <code>PullrequestAllOfRenderedTitle</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PullrequestAllOfRenderedTitle();

            if (data.hasOwnProperty('raw')) {
                obj['raw'] = ApiClient.convertToType(data['raw'], 'String');
            }
            if (data.hasOwnProperty('markup')) {
                obj['markup'] = ApiClient.convertToType(data['markup'], 'String');
            }
            if (data.hasOwnProperty('html')) {
                obj['html'] = ApiClient.convertToType(data['html'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The text as it was typed by a user.
 * @member {String} raw
 */
PullrequestAllOfRenderedTitle.prototype['raw'] = undefined;

/**
 * The type of markup language the raw content is to be interpreted in.
 * @member {module:model/PullrequestAllOfRenderedTitle.MarkupEnum} markup
 */
PullrequestAllOfRenderedTitle.prototype['markup'] = undefined;

/**
 * The user's content rendered as HTML.
 * @member {String} html
 */
PullrequestAllOfRenderedTitle.prototype['html'] = undefined;





/**
 * Allowed values for the <code>markup</code> property.
 * @enum {String}
 * @readonly
 */
PullrequestAllOfRenderedTitle['MarkupEnum'] = {

    /**
     * value: "markdown"
     * @const
     */
    "markdown": "markdown",

    /**
     * value: "creole"
     * @const
     */
    "creole": "creole",

    /**
     * value: "plaintext"
     * @const
     */
    "plaintext": "plaintext"
};



export default PullrequestAllOfRenderedTitle;

