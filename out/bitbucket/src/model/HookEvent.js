/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HookEvent model module.
 * @module model/HookEvent
 * @version 1.1.2
 */
class HookEvent {
    /**
     * Constructs a new <code>HookEvent</code>.
     * An event, associated with a resource or subject type.
     * @alias module:model/HookEvent
     */
    constructor() { 
        
        HookEvent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HookEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HookEvent} obj Optional instance to populate.
     * @return {module:model/HookEvent} The populated <code>HookEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HookEvent();

            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The event identifier.
 * @member {module:model/HookEvent.EventEnum} event
 */
HookEvent.prototype['event'] = undefined;

/**
 * The category this event belongs to.
 * @member {String} category
 */
HookEvent.prototype['category'] = undefined;

/**
 * Summary of the webhook event type.
 * @member {String} label
 */
HookEvent.prototype['label'] = undefined;

/**
 * More detailed description of the webhook event type.
 * @member {String} description
 */
HookEvent.prototype['description'] = undefined;





/**
 * Allowed values for the <code>event</code> property.
 * @enum {String}
 * @readonly
 */
HookEvent['EventEnum'] = {

    /**
     * value: "pullrequest:unapproved"
     * @const
     */
    "pullrequest:unapproved": "pullrequest:unapproved",

    /**
     * value: "issue:comment_created"
     * @const
     */
    "issue:comment_created": "issue:comment_created",

    /**
     * value: "pullrequest:approved"
     * @const
     */
    "pullrequest:approved": "pullrequest:approved",

    /**
     * value: "repo:created"
     * @const
     */
    "repo:created": "repo:created",

    /**
     * value: "repo:deleted"
     * @const
     */
    "repo:deleted": "repo:deleted",

    /**
     * value: "repo:imported"
     * @const
     */
    "repo:imported": "repo:imported",

    /**
     * value: "pullrequest:comment_updated"
     * @const
     */
    "pullrequest:comment_updated": "pullrequest:comment_updated",

    /**
     * value: "issue:updated"
     * @const
     */
    "issue:updated": "issue:updated",

    /**
     * value: "project:updated"
     * @const
     */
    "project:updated": "project:updated",

    /**
     * value: "pullrequest:comment_created"
     * @const
     */
    "pullrequest:comment_created": "pullrequest:comment_created",

    /**
     * value: "repo:commit_status_updated"
     * @const
     */
    "repo:commit_status_updated": "repo:commit_status_updated",

    /**
     * value: "pullrequest:updated"
     * @const
     */
    "pullrequest:updated": "pullrequest:updated",

    /**
     * value: "issue:created"
     * @const
     */
    "issue:created": "issue:created",

    /**
     * value: "repo:fork"
     * @const
     */
    "repo:fork": "repo:fork",

    /**
     * value: "pullrequest:comment_deleted"
     * @const
     */
    "pullrequest:comment_deleted": "pullrequest:comment_deleted",

    /**
     * value: "repo:commit_status_created"
     * @const
     */
    "repo:commit_status_created": "repo:commit_status_created",

    /**
     * value: "repo:updated"
     * @const
     */
    "repo:updated": "repo:updated",

    /**
     * value: "pullrequest:rejected"
     * @const
     */
    "pullrequest:rejected": "pullrequest:rejected",

    /**
     * value: "pullrequest:fulfilled"
     * @const
     */
    "pullrequest:fulfilled": "pullrequest:fulfilled",

    /**
     * value: "repo:push"
     * @const
     */
    "repo:push": "repo:push",

    /**
     * value: "pullrequest:created"
     * @const
     */
    "pullrequest:created": "pullrequest:created",

    /**
     * value: "repo:transfer"
     * @const
     */
    "repo:transfer": "repo:transfer",

    /**
     * value: "repo:commit_comment_created"
     * @const
     */
    "repo:commit_comment_created": "repo:commit_comment_created"
};



export default HookEvent;

