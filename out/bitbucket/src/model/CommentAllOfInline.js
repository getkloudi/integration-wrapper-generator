/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CommentAllOfInline model module.
 * @module model/CommentAllOfInline
 * @version 1.1.2
 */
class CommentAllOfInline {
    /**
     * Constructs a new <code>CommentAllOfInline</code>.
     * @alias module:model/CommentAllOfInline
     * @param path {String} The path of the file this comment is anchored to.
     */
    constructor(path) { 
        
        CommentAllOfInline.initialize(this, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, path) { 
        obj['path'] = path;
    }

    /**
     * Constructs a <code>CommentAllOfInline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentAllOfInline} obj Optional instance to populate.
     * @return {module:model/CommentAllOfInline} The populated <code>CommentAllOfInline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentAllOfInline();

            if (data.hasOwnProperty('to')) {
                obj['to'] = ApiClient.convertToType(data['to'], 'Number');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = ApiClient.convertToType(data['from'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The comment's anchor line in the new version of the file.
 * @member {Number} to
 */
CommentAllOfInline.prototype['to'] = undefined;

/**
 * The comment's anchor line in the old version of the file.
 * @member {Number} from
 */
CommentAllOfInline.prototype['from'] = undefined;

/**
 * The path of the file this comment is anchored to.
 * @member {String} path
 */
CommentAllOfInline.prototype['path'] = undefined;






export default CommentAllOfInline;

