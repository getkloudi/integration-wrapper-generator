/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BranchingModelAllOfBranchTypes model module.
 * @module model/BranchingModelAllOfBranchTypes
 * @version 1.1.0
 */
class BranchingModelAllOfBranchTypes {
    /**
     * Constructs a new <code>BranchingModelAllOfBranchTypes</code>.
     * @alias module:model/BranchingModelAllOfBranchTypes
     * @param kind {module:model/BranchingModelAllOfBranchTypes.KindEnum} The kind of branch.
     * @param prefix {String} The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
     */
    constructor(kind, prefix) { 
        
        BranchingModelAllOfBranchTypes.initialize(this, kind, prefix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, kind, prefix) { 
        obj['kind'] = kind;
        obj['prefix'] = prefix;
    }

    /**
     * Constructs a <code>BranchingModelAllOfBranchTypes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BranchingModelAllOfBranchTypes} obj Optional instance to populate.
     * @return {module:model/BranchingModelAllOfBranchTypes} The populated <code>BranchingModelAllOfBranchTypes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BranchingModelAllOfBranchTypes();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The kind of branch.
 * @member {module:model/BranchingModelAllOfBranchTypes.KindEnum} kind
 */
BranchingModelAllOfBranchTypes.prototype['kind'] = undefined;

/**
 * The prefix for this branch type. A branch with this prefix will be classified as per `kind`. The prefix must be a valid prefix for a branch and must always exist. It cannot be blank, empty or `null`.
 * @member {String} prefix
 */
BranchingModelAllOfBranchTypes.prototype['prefix'] = undefined;





/**
 * Allowed values for the <code>kind</code> property.
 * @enum {String}
 * @readonly
 */
BranchingModelAllOfBranchTypes['KindEnum'] = {

    /**
     * value: "feature"
     * @const
     */
    "feature": "feature",

    /**
     * value: "bugfix"
     * @const
     */
    "bugfix": "bugfix",

    /**
     * value: "release"
     * @const
     */
    "release": "release",

    /**
     * value: "hotfix"
     * @const
     */
    "hotfix": "hotfix"
};



export default BranchingModelAllOfBranchTypes;

