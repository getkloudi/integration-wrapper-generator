/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommitFile from './CommitFile';

/**
 * The Diffstat model module.
 * @module model/Diffstat
 * @version 1.1.0
 */
class Diffstat {
    /**
     * Constructs a new <code>Diffstat</code>.
     * A diffstat object that includes a summary of changes made to a file between two commits.
     * @alias module:model/Diffstat
     * @param type {String} 
     */
    constructor(type) { 
        
        Diffstat.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Diffstat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Diffstat} obj Optional instance to populate.
     * @return {module:model/Diffstat} The populated <code>Diffstat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Diffstat();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('lines_added')) {
                obj['lines_added'] = ApiClient.convertToType(data['lines_added'], 'Number');
            }
            if (data.hasOwnProperty('lines_removed')) {
                obj['lines_removed'] = ApiClient.convertToType(data['lines_removed'], 'Number');
            }
            if (data.hasOwnProperty('old')) {
                obj['old'] = CommitFile.constructFromObject(data['old']);
            }
            if (data.hasOwnProperty('new')) {
                obj['new'] = CommitFile.constructFromObject(data['new']);
            }
        }
        return obj;
    }


}

/**
 * @member {String} type
 */
Diffstat.prototype['type'] = undefined;

/**
 * @member {module:model/Diffstat.StatusEnum} status
 */
Diffstat.prototype['status'] = undefined;

/**
 * @member {Number} lines_added
 */
Diffstat.prototype['lines_added'] = undefined;

/**
 * @member {Number} lines_removed
 */
Diffstat.prototype['lines_removed'] = undefined;

/**
 * @member {module:model/CommitFile} old
 */
Diffstat.prototype['old'] = undefined;

/**
 * @member {module:model/CommitFile} new
 */
Diffstat.prototype['new'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Diffstat['StatusEnum'] = {

    /**
     * value: "added"
     * @const
     */
    "added": "added",

    /**
     * value: "removed"
     * @const
     */
    "removed": "removed",

    /**
     * value: "modified"
     * @const
     */
    "modified": "modified",

    /**
     * value: "renamed"
     * @const
     */
    "renamed": "renamed"
};



export default Diffstat;

