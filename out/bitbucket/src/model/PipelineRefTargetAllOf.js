/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Commit from './Commit';
import PipelineSelector from './PipelineSelector';

/**
 * The PipelineRefTargetAllOf model module.
 * @module model/PipelineRefTargetAllOf
 * @version 1.2.0
 */
class PipelineRefTargetAllOf {
    /**
     * Constructs a new <code>PipelineRefTargetAllOf</code>.
     * A Bitbucket Pipelines reference target.
     * @alias module:model/PipelineRefTargetAllOf
     */
    constructor() { 
        
        PipelineRefTargetAllOf.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PipelineRefTargetAllOf</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PipelineRefTargetAllOf} obj Optional instance to populate.
     * @return {module:model/PipelineRefTargetAllOf} The populated <code>PipelineRefTargetAllOf</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PipelineRefTargetAllOf();

            if (data.hasOwnProperty('ref_type')) {
                obj['ref_type'] = ApiClient.convertToType(data['ref_type'], 'String');
            }
            if (data.hasOwnProperty('ref_name')) {
                obj['ref_name'] = ApiClient.convertToType(data['ref_name'], 'String');
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = Commit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = PipelineSelector.constructFromObject(data['selector']);
            }
        }
        return obj;
    }


}

/**
 * The type of reference (branch/tag).
 * @member {module:model/PipelineRefTargetAllOf.RefTypeEnum} ref_type
 */
PipelineRefTargetAllOf.prototype['ref_type'] = undefined;

/**
 * The name of the reference.
 * @member {String} ref_name
 */
PipelineRefTargetAllOf.prototype['ref_name'] = undefined;

/**
 * @member {module:model/Commit} commit
 */
PipelineRefTargetAllOf.prototype['commit'] = undefined;

/**
 * @member {module:model/PipelineSelector} selector
 */
PipelineRefTargetAllOf.prototype['selector'] = undefined;





/**
 * Allowed values for the <code>ref_type</code> property.
 * @enum {String}
 * @readonly
 */
PipelineRefTargetAllOf['RefTypeEnum'] = {

    /**
     * value: "branch"
     * @const
     */
    "branch": "branch",

    /**
     * value: "tag"
     * @const
     */
    "tag": "tag",

    /**
     * value: "named_branch"
     * @const
     */
    "named_branch": "named_branch",

    /**
     * value: "bookmark"
     * @const
     */
    "bookmark": "bookmark"
};



export default PipelineRefTargetAllOf;

