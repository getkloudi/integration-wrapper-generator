/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Deployment from '../model/Deployment';
import DeploymentEnvironment from '../model/DeploymentEnvironment';
import Error from '../model/Error';
import PaginatedDeployments from '../model/PaginatedDeployments';
import PaginatedEnvironments from '../model/PaginatedEnvironments';

/**
* Deployments service.
* @module api/DeploymentsApi
* @version 1.2.0
*/
export default class DeploymentsApi {

    /**
    * Constructs a new DeploymentsApi. 
    * @alias module:api/DeploymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createEnvironment operation.
     * @callback module:api/DeploymentsApi~createEnvironmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an environment.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/DeploymentEnvironment} body The environment to create.
     * @param {module:api/DeploymentsApi~createEnvironmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironment}
     */
    createEnvironment(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createEnvironment");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createEnvironment");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createEnvironment");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~deleteEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an environment
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~deleteEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEnvironmentForRepository(username, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling deleteEnvironmentForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentForRepository operation.
     * @callback module:api/DeploymentsApi~getDeploymentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Deployment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a deployment
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} deploymentUuid The deployment UUID.
     * @param {module:api/DeploymentsApi~getDeploymentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Deployment}
     */
    getDeploymentForRepository(username, repoSlug, deploymentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDeploymentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentForRepository");
      }
      // verify the required parameter 'deploymentUuid' is set
      if (deploymentUuid === undefined || deploymentUuid === null) {
        throw new Error("Missing the required parameter 'deploymentUuid' when calling getDeploymentForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'deployment_uuid': deploymentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Deployment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments/{deployment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentsForRepository operation.
     * @callback module:api/DeploymentsApi~getDeploymentsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDeployments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find deployments
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/DeploymentsApi~getDeploymentsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDeployments}
     */
    getDeploymentsForRepository(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDeploymentsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentsForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDeployments;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~getEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve an environment
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~getEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentEnvironment}
     */
    getEnvironmentForRepository(username, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling getEnvironmentForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeploymentEnvironment;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEnvironmentsForRepository operation.
     * @callback module:api/DeploymentsApi~getEnvironmentsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedEnvironments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find environments
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/DeploymentsApi~getEnvironmentsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedEnvironments}
     */
    getEnvironmentsForRepository(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getEnvironmentsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getEnvironmentsForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedEnvironments;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEnvironmentForRepository operation.
     * @callback module:api/DeploymentsApi~updateEnvironmentForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an environment
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment UUID.
     * @param {module:api/DeploymentsApi~updateEnvironmentForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateEnvironmentForRepository(username, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateEnvironmentForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateEnvironmentForRepository");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling updateEnvironmentForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/environments/{environment_uuid}/changes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
