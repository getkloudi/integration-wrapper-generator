/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';
import SearchResultPage from '../model/SearchResultPage';

/**
* Search service.
* @module api/SearchApi
* @version 1.1.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchAccount operation.
     * @callback module:api/SearchApi~searchAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for code in the repositories of the specified team
     * @param {String} username The account to search in; either the username or the UUID in curly braces
     * @param {String} searchQuery The search query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page of the search results to retrieve (default to 1)
     * @param {Number} opts.pagelen How many search results to retrieve per page (default to 10)
     * @param {module:api/SearchApi~searchAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultPage}
     */
    searchAccount(username, searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling searchAccount");
      }
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling searchAccount");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'search_query': searchQuery,
        'page': opts['page'],
        'pagelen': opts['pagelen']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResultPage;
      return this.apiClient.callApi(
        '/teams/{username}/search/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAccount_0 operation.
     * @callback module:api/SearchApi~searchAccount_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for code in the repositories of the specified user
     * @param {String} username The account to search in; either the username or the UUID in curly braces
     * @param {String} searchQuery The search query
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Which page of the search results to retrieve (default to 1)
     * @param {Number} opts.pagelen How many search results to retrieve per page (default to 10)
     * @param {module:api/SearchApi~searchAccount_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultPage}
     */
    searchAccount_0(username, searchQuery, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling searchAccount_0");
      }
      // verify the required parameter 'searchQuery' is set
      if (searchQuery === undefined || searchQuery === null) {
        throw new Error("Missing the required parameter 'searchQuery' when calling searchAccount_0");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
        'search_query': searchQuery,
        'page': opts['page'],
        'pagelen': opts['pagelen']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SearchResultPage;
      return this.apiClient.callApi(
        '/users/{username}/search/code', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
