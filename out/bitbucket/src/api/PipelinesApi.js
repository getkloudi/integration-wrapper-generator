/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeploymentVariable from '../model/DeploymentVariable';
import Error from '../model/Error';
import PaginatedDeploymentVariable from '../model/PaginatedDeploymentVariable';
import PaginatedPipelineKnownHosts from '../model/PaginatedPipelineKnownHosts';
import PaginatedPipelineScheduleExecutions from '../model/PaginatedPipelineScheduleExecutions';
import PaginatedPipelineSchedules from '../model/PaginatedPipelineSchedules';
import PaginatedPipelineSteps from '../model/PaginatedPipelineSteps';
import PaginatedPipelineVariables from '../model/PaginatedPipelineVariables';
import PaginatedPipelines from '../model/PaginatedPipelines';
import Pipeline from '../model/Pipeline';
import PipelineBuildNumber from '../model/PipelineBuildNumber';
import PipelineKnownHost from '../model/PipelineKnownHost';
import PipelineSchedule from '../model/PipelineSchedule';
import PipelineSshKeyPair from '../model/PipelineSshKeyPair';
import PipelineStep from '../model/PipelineStep';
import PipelineVariable from '../model/PipelineVariable';
import PipelinesConfig from '../model/PipelinesConfig';

/**
* Pipelines service.
* @module api/PipelinesApi
* @version 1.1.2
*/
export default class PipelinesApi {

    /**
    * Constructs a new PipelinesApi. 
    * @alias module:api/PipelinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createDeploymentVariable operation.
     * @callback module:api/PipelinesApi~createDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a deployment environment level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {String} variableUuid The UUID of the variable to update.
     * @param {module:model/DeploymentVariable} body The variable to create
     * @param {module:api/PipelinesApi~createDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentVariable}
     */
    createDeploymentVariable(username, repoSlug, environmentUuid, variableUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling createDeploymentVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling createDeploymentVariable");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createDeploymentVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineForRepository operation.
     * @callback module:api/PipelinesApi~createPipelineForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Endpoint to create and initiate a pipeline.  There are a couple of different options to initiate a pipeline, where the payload of the request will determine which type of pipeline will be instantiated. # Trigger a Pipeline for a branch One way to trigger pipelines is by specifying the branch for which you want to trigger a pipeline.  The specified branch will be used to determine which pipeline definition from the `bitbucket-pipelines.yml` file will be applied to initiate the pipeline. The pipeline will then do a clone of the repository and checkout the latest revision of the specified branch.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"ref_type\": \"branch\",        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\"     }   }' ``` # Trigger a Pipeline for a commit on a branch or tag You can initiate a pipeline for a specific commit and in the context of a specified reference (e.g. a branch, tag or bookmark). The specified reference will be used to determine which pipeline definition from the bitbucket-pipelines.yml file will be applied to initiate the pipeline. The pipeline will clone the repository and then do a checkout the specified reference.   The following reference types are supported:  * `branch`  * `named_branch` * `bookmark`   * `tag`  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\   https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\   -d '   {     \"target\": {       \"commit\": {         \"type\": \"commit\",          \"hash\": \"ce5b7431602f7cbba007062eeb55225c6e18e956\"       },        \"ref_type\": \"branch\",        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\"     }   }' ``` # Trigger a specific pipeline definition for a commit You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit.  In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition. The resulting pipeline will then clone the repository and checkout the specified revision.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },         \"selector\": {            \"type\":\"custom\",               \"pattern\":\"Deploy to production\"           },         \"type\":\"pipeline_commit_target\"    }   }' ``` # Trigger a specific pipeline definition for a commit on a branch or tag You can trigger a specific pipeline that is defined in your `bitbucket-pipelines.yml` file for a specific commit in the context of a specified reference.  In addition to the commit revision, you specify the type and pattern of the selector that identifies the pipeline definition, as well as the reference information. The resulting pipeline will then clone the repository a checkout the specified reference.  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/jeroendr/meat-demo2/pipelines/ \\  -d '   {      \"target\": {       \"commit\": {          \"hash\":\"a3c4e02c9a3755eccdc3764e6ea13facdf30f923\",          \"type\":\"commit\"        },        \"selector\": {           \"type\": \"custom\",           \"pattern\": \"Deploy to production\"        },        \"type\": \"pipeline_ref_target\",        \"ref_name\": \"master\",        \"ref_type\": \"branch\"      }   }' ```   # Trigger a custom pipeline with variables In addition to triggering a custom pipeline that is defined in your `bitbucket-pipelines.yml` file as shown in the examples above, you can specify variables that will be available for your build. In the request, provide a list of variables, specifying the following for each variable: key, value, and whether it should be secured or not (this field is optional and defaults to not secured).  ### Example  ``` $ curl -X POST -is -u username:password \\   -H 'Content-Type: application/json' \\  https://api.bitbucket.org/2.0/repositories/{workspace}/{repo_slug}/pipelines/ \\  -d '   {     \"target\": {       \"type\": \"pipeline_ref_target\",       \"ref_type\": \"branch\",       \"ref_name\": \"master\",       \"selector\": {         \"type\": \"custom\",         \"pattern\": \"Deploy to production\"       }     },     \"variables\": [       {         \"key\": \"var1key\",         \"value\": \"var1value\",         \"secured\": true       },       {         \"key\": \"var2key\",         \"value\": \"var2value\"       }     ]   }' ``` 
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/Pipeline} body The pipeline to initiate.
     * @param {module:api/PipelinesApi~createPipelineForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    createPipelineForRepository(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createPipelineForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createPipelineForRepository");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createPipelineForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~createPipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account level variable.
     * @param {String} username The account.
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineVariable} opts.body The variable to create.
     * @param {module:api/PipelinesApi~createPipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createPipelineVariableForTeam(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createPipelineVariableForTeam");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~createPipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a user level variable.
     * @param {String} username The account.
     * @param {Object} opts Optional parameters
     * @param {module:model/PipelineVariable} opts.body The variable to create.
     * @param {module:api/PipelinesApi~createPipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createPipelineVariableForUser(username, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createPipelineVariableForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{username}/pipelines_config/variables/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository level known host.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineKnownHost} body The known host to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    createRepositoryPipelineKnownHost(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a schedule for the given repository.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineSchedule} body The schedule to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    createRepositoryPipelineSchedule(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineSchedule");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRepositoryPipelineSchedule");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~createRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a repository level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineVariable} body The variable to create.
     * @param {module:api/PipelinesApi~createRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    createRepositoryPipelineVariable(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling createRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling createRepositoryPipelineVariable");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling createRepositoryPipelineVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDeploymentVariable operation.
     * @callback module:api/PipelinesApi~deleteDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a deployment environment level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deleteDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDeploymentVariable(username, repoSlug, environmentUuid, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling deleteDeploymentVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deleteDeploymentVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~deletePipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deletePipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipelineVariableForTeam(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deletePipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~deletePipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an account level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deletePipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePipelineVariableForUser(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deletePipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deletePipelineVariableForUser");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{username}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineKeyPair operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineKeyPairCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the repository SSH key pair.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineKeyPair(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKeyPair");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository level known host.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to delete.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineKnownHost(username, repoSlug, knownHostUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling deleteRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a schedule.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineSchedule(username, repoSlug, scheduleUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling deleteRepositoryPipelineSchedule");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~deleteRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a repository level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to delete.
     * @param {module:api/PipelinesApi~deleteRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepositoryPipelineVariable(username, repoSlug, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling deleteRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling deleteRepositoryPipelineVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDeploymentVariables operation.
     * @callback module:api/PipelinesApi~getDeploymentVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedDeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find deployment environment level variables.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {module:api/PipelinesApi~getDeploymentVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedDeploymentVariable}
     */
    getDeploymentVariables(username, repoSlug, environmentUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getDeploymentVariables");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getDeploymentVariables");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling getDeploymentVariables");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedDeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specified pipeline
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The pipeline UUID.
     * @param {module:api/PipelinesApi~getPipelineForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pipeline}
     */
    getPipelineForRepository(username, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pipeline;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineStep} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a given step of a pipeline.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineStepForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineStep}
     */
    getPipelineStepForRepository(username, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepForRepository");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineStepForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineStep;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepLogForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepLogForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the log file for a given step of a pipeline.  This endpoint supports (and encourages!) the use of [HTTP Range requests](https://tools.ietf.org/html/rfc7233) to deal with potentially very large log files.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {String} stepUuid The UUID of the step.
     * @param {module:api/PipelinesApi~getPipelineStepLogForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getPipelineStepLogForRepository(username, repoSlug, pipelineUuid, stepUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepLogForRepository");
      }
      // verify the required parameter 'stepUuid' is set
      if (stepUuid === undefined || stepUuid === null) {
        throw new Error("Missing the required parameter 'stepUuid' when calling getPipelineStepLogForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid,
        'step_uuid': stepUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/{step_uuid}/log', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineStepsForRepository operation.
     * @callback module:api/PipelinesApi~getPipelineStepsForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineSteps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find steps for the given pipeline.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {module:api/PipelinesApi~getPipelineStepsForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineSteps}
     */
    getPipelineStepsForRepository(username, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineStepsForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelineStepsForRepository");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling getPipelineStepsForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineSteps;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/steps/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~getPipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a team level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getPipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getPipelineVariableForTeam(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getPipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~getPipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getPipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getPipelineVariableForUser(username, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getPipelineVariableForUser");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{username}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariablesForTeam operation.
     * @callback module:api/PipelinesApi~getPipelineVariablesForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find account level variables.
     * @param {String} username The account.
     * @param {module:api/PipelinesApi~getPipelineVariablesForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getPipelineVariablesForTeam(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariablesForTeam");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineVariablesForUser operation.
     * @callback module:api/PipelinesApi~getPipelineVariablesForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find user level variables.
     * @param {String} username The account.
     * @param {module:api/PipelinesApi~getPipelineVariablesForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getPipelineVariablesForUser(username, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelineVariablesForUser");
      }

      let pathParams = {
        'username': username
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/users/{username}/pipelines_config/variables/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelinesForRepository operation.
     * @callback module:api/PipelinesApi~getPipelinesForRepositoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find pipelines
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getPipelinesForRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelines}
     */
    getPipelinesForRepository(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getPipelinesForRepository");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getPipelinesForRepository");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelines;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineConfig operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelinesConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the repository pipelines configuration.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelinesConfig}
     */
    getRepositoryPipelineConfig(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineConfig");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineConfig");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelinesConfig;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a repository level known host.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to retrieve.
     * @param {module:api/PipelinesApi~getRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    getRepositoryPipelineKnownHost(username, repoSlug, knownHostUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling getRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineKnownHosts operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineKnownHostsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineKnownHosts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find repository level known hosts.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineKnownHostsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineKnownHosts}
     */
    getRepositoryPipelineKnownHosts(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineKnownHosts");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineKnownHosts");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineKnownHosts;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a schedule by its UUID.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:api/PipelinesApi~getRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    getRepositoryPipelineSchedule(username, repoSlug, scheduleUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling getRepositoryPipelineSchedule");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineScheduleExecutions operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineScheduleExecutionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineScheduleExecutions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the executions of a given schedule.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineScheduleExecutionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineScheduleExecutions}
     */
    getRepositoryPipelineScheduleExecutions(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineScheduleExecutions");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineScheduleExecutions");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineScheduleExecutions;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}/executions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSchedules operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineSchedulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineSchedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the configured schedules for the given repository.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineSchedulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineSchedules}
     */
    getRepositoryPipelineSchedules(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineSchedules");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSchedules");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineSchedules;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineSshKeyPair operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineSshKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSshKeyPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the repository SSH key pair excluding the SSH private key. The private key is a write only field and will never be exposed in the logs or the REST API.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineSshKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSshKeyPair}
     */
    getRepositoryPipelineSshKeyPair(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineSshKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineSshKeyPair");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineSshKeyPair;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a repository level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to retrieve.
     * @param {module:api/PipelinesApi~getRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    getRepositoryPipelineVariable(username, repoSlug, variableUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling getRepositoryPipelineVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepositoryPipelineVariables operation.
     * @callback module:api/PipelinesApi~getRepositoryPipelineVariablesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaginatedPipelineVariables} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find repository level variables.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:api/PipelinesApi~getRepositoryPipelineVariablesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaginatedPipelineVariables}
     */
    getRepositoryPipelineVariables(username, repoSlug, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getRepositoryPipelineVariables");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling getRepositoryPipelineVariables");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PaginatedPipelineVariables;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopPipeline operation.
     * @callback module:api/PipelinesApi~stopPipelineCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Signal the stop of a pipeline and all of its steps that not have completed yet.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} pipelineUuid The UUID of the pipeline.
     * @param {module:api/PipelinesApi~stopPipelineCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopPipeline(username, repoSlug, pipelineUuid, callback) {
      let postBody = null;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling stopPipeline");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling stopPipeline");
      }
      // verify the required parameter 'pipelineUuid' is set
      if (pipelineUuid === undefined || pipelineUuid === null) {
        throw new Error("Missing the required parameter 'pipelineUuid' when calling stopPipeline");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'pipeline_uuid': pipelineUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines/{pipeline_uuid}/stopPipeline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDeploymentVariable operation.
     * @callback module:api/PipelinesApi~updateDeploymentVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeploymentVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a deployment environment level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} environmentUuid The environment.
     * @param {String} variableUuid The UUID of the variable to update.
     * @param {module:model/DeploymentVariable} body The updated deployment variable.
     * @param {module:api/PipelinesApi~updateDeploymentVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeploymentVariable}
     */
    updateDeploymentVariable(username, repoSlug, environmentUuid, variableUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'environmentUuid' is set
      if (environmentUuid === undefined || environmentUuid === null) {
        throw new Error("Missing the required parameter 'environmentUuid' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updateDeploymentVariable");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateDeploymentVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'environment_uuid': environmentUuid,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeploymentVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/deployments_config/environments/{environment_uuid}/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineVariableForTeam operation.
     * @callback module:api/PipelinesApi~updatePipelineVariableForTeamCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a team level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable.
     * @param {module:model/PipelineVariable} body The updated variable.
     * @param {module:api/PipelinesApi~updatePipelineVariableForTeamCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updatePipelineVariableForTeam(username, variableUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updatePipelineVariableForTeam");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForTeam");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePipelineVariableForTeam");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/teams/{username}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePipelineVariableForUser operation.
     * @callback module:api/PipelinesApi~updatePipelineVariableForUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a user level variable.
     * @param {String} username The account.
     * @param {String} variableUuid The UUID of the variable.
     * @param {module:model/PipelineVariable} body The updated variable.
     * @param {module:api/PipelinesApi~updatePipelineVariableForUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updatePipelineVariableForUser(username, variableUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updatePipelineVariableForUser");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updatePipelineVariableForUser");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updatePipelineVariableForUser");
      }

      let pathParams = {
        'username': username,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/users/{username}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryBuildNumber operation.
     * @callback module:api/PipelinesApi~updateRepositoryBuildNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineBuildNumber} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the next build number that should be assigned to a pipeline. The next build number that will be configured has to be strictly higher than the current latest build number for this repository.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineBuildNumber} body The build number to update.
     * @param {module:api/PipelinesApi~updateRepositoryBuildNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineBuildNumber}
     */
    updateRepositoryBuildNumber(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryBuildNumber");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryBuildNumber");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryBuildNumber");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineBuildNumber;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/build_number', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineConfig operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelinesConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the pipelines configuration for a repository.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelinesConfig} body The updated repository pipelines configuration.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelinesConfig}
     */
    updateRepositoryPipelineConfig(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryPipelineConfig");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineConfig");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryPipelineConfig");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelinesConfig;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineKeyPair operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineKeyPairCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSshKeyPair} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update the repository SSH key pair. The private key will be set as a default SSH identity in your build container.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {module:model/PipelineSshKeyPair} body The created or updated SSH key pair.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineKeyPairCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSshKeyPair}
     */
    updateRepositoryPipelineKeyPair(username, repoSlug, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKeyPair");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryPipelineKeyPair");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSshKeyPair;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/key_pair', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineKnownHost operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineKnownHostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineKnownHost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a repository level known host.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} knownHostUuid The UUID of the known host to update.
     * @param {module:model/PipelineKnownHost} body The updated known host.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineKnownHostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineKnownHost}
     */
    updateRepositoryPipelineKnownHost(username, repoSlug, knownHostUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'knownHostUuid' is set
      if (knownHostUuid === undefined || knownHostUuid === null) {
        throw new Error("Missing the required parameter 'knownHostUuid' when calling updateRepositoryPipelineKnownHost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryPipelineKnownHost");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'known_host_uuid': knownHostUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineKnownHost;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/ssh/known_hosts/{known_host_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineSchedule operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineScheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a schedule.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} scheduleUuid The uuid of the schedule.
     * @param {module:model/PipelineSchedule} body The schedule to update.
     * @param {module:api/PipelinesApi~updateRepositoryPipelineScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineSchedule}
     */
    updateRepositoryPipelineSchedule(username, repoSlug, scheduleUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'scheduleUuid' is set
      if (scheduleUuid === undefined || scheduleUuid === null) {
        throw new Error("Missing the required parameter 'scheduleUuid' when calling updateRepositoryPipelineSchedule");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryPipelineSchedule");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'schedule_uuid': scheduleUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineSchedule;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/schedules/{schedule_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryPipelineVariable operation.
     * @callback module:api/PipelinesApi~updateRepositoryPipelineVariableCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PipelineVariable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a repository level variable.
     * @param {String} username The account.
     * @param {String} repoSlug The repository.
     * @param {String} variableUuid The UUID of the variable to update.
     * @param {module:model/PipelineVariable} body The updated variable
     * @param {module:api/PipelinesApi~updateRepositoryPipelineVariableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PipelineVariable}
     */
    updateRepositoryPipelineVariable(username, repoSlug, variableUuid, body, callback) {
      let postBody = body;
      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'repoSlug' is set
      if (repoSlug === undefined || repoSlug === null) {
        throw new Error("Missing the required parameter 'repoSlug' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'variableUuid' is set
      if (variableUuid === undefined || variableUuid === null) {
        throw new Error("Missing the required parameter 'variableUuid' when calling updateRepositoryPipelineVariable");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateRepositoryPipelineVariable");
      }

      let pathParams = {
        'username': username,
        'repo_slug': repoSlug,
        'variable_uuid': variableUuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PipelineVariable;
      return this.apiClient.callApi(
        '/repositories/{workspace}/{repo_slug}/pipelines_config/variables/{variable_uuid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
