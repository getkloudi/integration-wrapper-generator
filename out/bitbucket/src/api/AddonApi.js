/**
 * Bitbucket
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Addon service.
* @module api/AddonApi
* @version 1.1.0
*/
export default class AddonApi {

    /**
    * Constructs a new AddonApi. 
    * @alias module:api/AddonApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addonDelete operation.
     * @callback module:api/AddonApi~addonDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AddonApi~addonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersGet operation.
     * @callback module:api/AddonApi~addonLinkersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AddonApi~addonLinkersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyGet operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyGet(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyGet");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesDelete operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesDelete(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesDelete");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesDelete_0 operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesDelete_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesDelete_0(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesDelete_0");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesGet operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesGet(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesGet");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesGet_0 operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesGet_0(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesGet_0");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesPost operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesPost(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPost");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonLinkersLinkerKeyValuesPut operation.
     * @callback module:api/AddonApi~addonLinkersLinkerKeyValuesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} linkerKey 
     * @param {module:api/AddonApi~addonLinkersLinkerKeyValuesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonLinkersLinkerKeyValuesPut(linkerKey, callback) {
      let postBody = null;
      // verify the required parameter 'linkerKey' is set
      if (linkerKey === undefined || linkerKey === null) {
        throw new Error("Missing the required parameter 'linkerKey' when calling addonLinkersLinkerKeyValuesPut");
      }

      let pathParams = {
        'linker_key': linkerKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon/linkers/{linker_key}/values', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addonPut operation.
     * @callback module:api/AddonApi~addonPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/AddonApi~addonPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    addonPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/addon', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
