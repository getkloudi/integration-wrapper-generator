/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Error from '../model/Error';

/**
* Snippet service.
* @module api/SnippetApi
* @version 1.2.0
*/
export default class SnippetApi {

    /**
    * Constructs a new SnippetApi. 
    * @alias module:api/SnippetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the snippetsWorkspaceEncodedIdFilesPathGet operation.
     * @callback module:api/SnippetApi~snippetsWorkspaceEncodedIdFilesPathGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convenience resource for getting to a snippet's raw files without the need for first having to retrieve the snippet itself and having to pull out the versioned file links.
     * @param {String} path 
     * @param {String} encodedId 
     * @param {String} workspace This can either be the workspace ID (slug) or the workspace UUID surrounded by curly-braces, for example: `{workspace UUID}`. 
     * @param {module:api/SnippetApi~snippetsWorkspaceEncodedIdFilesPathGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    snippetsWorkspaceEncodedIdFilesPathGet(path, encodedId, workspace, callback) {
      let postBody = null;
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling snippetsWorkspaceEncodedIdFilesPathGet");
      }
      // verify the required parameter 'encodedId' is set
      if (encodedId === undefined || encodedId === null) {
        throw new Error("Missing the required parameter 'encodedId' when calling snippetsWorkspaceEncodedIdFilesPathGet");
      }
      // verify the required parameter 'workspace' is set
      if (workspace === undefined || workspace === null) {
        throw new Error("Missing the required parameter 'workspace' when calling snippetsWorkspaceEncodedIdFilesPathGet");
      }

      let pathParams = {
        'path': path,
        'encoded_id': encodedId,
        'workspace': workspace
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'basic', 'oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/snippets/{workspace}/{encoded_id}/files/{path}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
