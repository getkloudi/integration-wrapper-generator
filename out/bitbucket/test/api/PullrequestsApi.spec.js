/**
 * Bitbucket
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bitbucket);
  }
}(this, function(expect, Bitbucket) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bitbucket.PullrequestsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PullrequestsApi', function() {
    describe('repositoriesUsernameRepoSlugDefaultReviewersGet', function() {
      it('should call repositoriesUsernameRepoSlugDefaultReviewersGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugDefaultReviewersGet
        //instance.repositoriesUsernameRepoSlugDefaultReviewersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete', function() {
      it('should call repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete
        //instance.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet', function() {
      it('should call repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet
        //instance.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut', function() {
      it('should call repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut
        //instance.repositoriesUsernameRepoSlugDefaultReviewersTargetUsernamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsActivityGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsActivityGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsActivityGet
        //instance.repositoriesUsernameRepoSlugPullrequestsActivityGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsGet
        //instance.repositoriesUsernameRepoSlugPullrequestsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPost', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPost
        //instance.repositoriesUsernameRepoSlugPullrequestsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdActivityGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdApproveDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdApprovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsCommentIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommentsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdCommitsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdDeclinePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdDiffGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdMergePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdPatchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet', function() {
      it('should call repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet
        //instance.repositoriesUsernameRepoSlugPullrequestsPullRequestIdStatusesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
