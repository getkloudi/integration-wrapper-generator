/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bitbucket);
  }
}(this, function(expect, Bitbucket) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bitbucket.WebhooksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WebhooksApi', function() {
    describe('hookEventsGet', function() {
      it('should call hookEventsGet successfully', function(done) {
        //uncomment below and update the code to test hookEventsGet
        //instance.hookEventsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hookEventsSubjectTypeGet', function() {
      it('should call hookEventsSubjectTypeGet successfully', function(done) {
        //uncomment below and update the code to test hookEventsSubjectTypeGet
        //instance.hookEventsSubjectTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksGet', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksGet
        //instance.repositoriesWorkspaceRepoSlugHooksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksPost', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksPost
        //instance.repositoriesWorkspaceRepoSlugHooksPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidDelete', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidDelete successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidDelete
        //instance.repositoriesWorkspaceRepoSlugHooksUidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidGet', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidGet
        //instance.repositoriesWorkspaceRepoSlugHooksUidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidPut', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidPut successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidPut
        //instance.repositoriesWorkspaceRepoSlugHooksUidPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamsUsernameHooksGet', function() {
      it('should call teamsUsernameHooksGet successfully', function(done) {
        //uncomment below and update the code to test teamsUsernameHooksGet
        //instance.teamsUsernameHooksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamsUsernameHooksPost', function() {
      it('should call teamsUsernameHooksPost successfully', function(done) {
        //uncomment below and update the code to test teamsUsernameHooksPost
        //instance.teamsUsernameHooksPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamsUsernameHooksUidDelete', function() {
      it('should call teamsUsernameHooksUidDelete successfully', function(done) {
        //uncomment below and update the code to test teamsUsernameHooksUidDelete
        //instance.teamsUsernameHooksUidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamsUsernameHooksUidGet', function() {
      it('should call teamsUsernameHooksUidGet successfully', function(done) {
        //uncomment below and update the code to test teamsUsernameHooksUidGet
        //instance.teamsUsernameHooksUidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('teamsUsernameHooksUidPut', function() {
      it('should call teamsUsernameHooksUidPut successfully', function(done) {
        //uncomment below and update the code to test teamsUsernameHooksUidPut
        //instance.teamsUsernameHooksUidPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUsernameHooksGet', function() {
      it('should call usersUsernameHooksGet successfully', function(done) {
        //uncomment below and update the code to test usersUsernameHooksGet
        //instance.usersUsernameHooksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUsernameHooksPost', function() {
      it('should call usersUsernameHooksPost successfully', function(done) {
        //uncomment below and update the code to test usersUsernameHooksPost
        //instance.usersUsernameHooksPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUsernameHooksUidDelete', function() {
      it('should call usersUsernameHooksUidDelete successfully', function(done) {
        //uncomment below and update the code to test usersUsernameHooksUidDelete
        //instance.usersUsernameHooksUidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUsernameHooksUidGet', function() {
      it('should call usersUsernameHooksUidGet successfully', function(done) {
        //uncomment below and update the code to test usersUsernameHooksUidGet
        //instance.usersUsernameHooksUidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersUsernameHooksUidPut', function() {
      it('should call usersUsernameHooksUidPut successfully', function(done) {
        //uncomment below and update the code to test usersUsernameHooksUidPut
        //instance.usersUsernameHooksUidPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
