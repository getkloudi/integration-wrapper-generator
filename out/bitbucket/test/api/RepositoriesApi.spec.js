/**
 * Bitbucket API
 * Code against the Bitbucket API to automate simple tasks, embed Bitbucket data into your own site, build mobile or desktop apps, or even add custom UI add-ons into Bitbucket itself using the Connect framework.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@bitbucket.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Bitbucket);
  }
}(this, function(expect, Bitbucket) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Bitbucket.RepositoriesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RepositoriesApi', function() {
    describe('repositoriesGet', function() {
      it('should call repositoriesGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesGet
        //instance.repositoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceGet', function() {
      it('should call repositoriesWorkspaceGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceGet
        //instance.repositoriesWorkspaceGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyGet', function() {
      it('should call repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyGet
        //instance.repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyPut', function() {
      it('should call repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyPut successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyPut
        //instance.repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildPost', function() {
      it('should call repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildPost
        //instance.repositoriesWorkspaceRepoSlugCommitNodeStatusesBuildPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugCommitNodeStatusesGet', function() {
      it('should call repositoriesWorkspaceRepoSlugCommitNodeStatusesGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugCommitNodeStatusesGet
        //instance.repositoriesWorkspaceRepoSlugCommitNodeStatusesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugDelete', function() {
      it('should call repositoriesWorkspaceRepoSlugDelete successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugDelete
        //instance.repositoriesWorkspaceRepoSlugDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugFilehistoryNodePathGet', function() {
      it('should call repositoriesWorkspaceRepoSlugFilehistoryNodePathGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugFilehistoryNodePathGet
        //instance.repositoriesWorkspaceRepoSlugFilehistoryNodePathGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugForksGet', function() {
      it('should call repositoriesWorkspaceRepoSlugForksGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugForksGet
        //instance.repositoriesWorkspaceRepoSlugForksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugForksPost', function() {
      it('should call repositoriesWorkspaceRepoSlugForksPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugForksPost
        //instance.repositoriesWorkspaceRepoSlugForksPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugGet', function() {
      it('should call repositoriesWorkspaceRepoSlugGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugGet
        //instance.repositoriesWorkspaceRepoSlugGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksGet', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksGet
        //instance.repositoriesWorkspaceRepoSlugHooksGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksPost', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksPost
        //instance.repositoriesWorkspaceRepoSlugHooksPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidDelete', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidDelete successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidDelete
        //instance.repositoriesWorkspaceRepoSlugHooksUidDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidGet', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidGet
        //instance.repositoriesWorkspaceRepoSlugHooksUidGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugHooksUidPut', function() {
      it('should call repositoriesWorkspaceRepoSlugHooksUidPut successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugHooksUidPut
        //instance.repositoriesWorkspaceRepoSlugHooksUidPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugPost', function() {
      it('should call repositoriesWorkspaceRepoSlugPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugPost
        //instance.repositoriesWorkspaceRepoSlugPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet', function() {
      it('should call repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet
        //instance.repositoriesWorkspaceRepoSlugPullrequestsPullRequestIdStatusesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugPut', function() {
      it('should call repositoriesWorkspaceRepoSlugPut successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugPut
        //instance.repositoriesWorkspaceRepoSlugPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugSrcGet', function() {
      it('should call repositoriesWorkspaceRepoSlugSrcGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugSrcGet
        //instance.repositoriesWorkspaceRepoSlugSrcGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugSrcNodePathGet', function() {
      it('should call repositoriesWorkspaceRepoSlugSrcNodePathGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugSrcNodePathGet
        //instance.repositoriesWorkspaceRepoSlugSrcNodePathGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugSrcPost', function() {
      it('should call repositoriesWorkspaceRepoSlugSrcPost successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugSrcPost
        //instance.repositoriesWorkspaceRepoSlugSrcPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoriesWorkspaceRepoSlugWatchersGet', function() {
      it('should call repositoriesWorkspaceRepoSlugWatchersGet successfully', function(done) {
        //uncomment below and update the code to test repositoriesWorkspaceRepoSlugWatchersGet
        //instance.repositoriesWorkspaceRepoSlugWatchersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('userPermissionsRepositoriesGet', function() {
      it('should call userPermissionsRepositoriesGet successfully', function(done) {
        //uncomment below and update the code to test userPermissionsRepositoriesGet
        //instance.userPermissionsRepositoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
