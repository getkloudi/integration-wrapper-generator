/**
 * Rollbar API
 * # Getting Started The Rollbar API provides a RESTful interface to much of the data in the system. It is used by our official libraries to report exceptions, deploys, and other messages. It can be used to create notifiers for additional languages, get data out to integrate with other systems, or whatever else you can imagine. If the API is missing something you'd like to see, please [let us know](support@rollbar.com).  # Ping To test whether you're able to ping the API server, you can simply run the following command:  ``` curl 'https://api.rollbar.com/api/1/status/ping' ```  You will get back pong from our server if your request was successful.  # Timestamps All timestamps (inputs and outputs) are GMT unix timestamps.  # Authentication Authentication is done via access token included as a header parameter. For authenticated requests, pass your access token through the `X-Rollbar-Access-Token` parameter in the header.  ``` curl -H \"X-Rollbar-Access-Token: YOUR_ACCESS_TOKEN\" 'https://api.rollbar.com/api/1/item/12345' ```  ## Project access tokens Many operations require a project-specific access token. You can find and administer your access tokens in Settings -> Project Access Tokens. Access tokens can have any or all of the following scopes:  ### post_server_item Can perform all POST requests to /deploy/ and /item/  ### post_client_item Can perform POST requests to /deploy/ and /item/, but only if the item has a client-side (browser, mobile) platform.  ### read Can perform all GET requests  ### write Can perform PATCH and DELETE requests  ## Account Access Tokens Operations performed at the level of the account require an account-specific access token. These can be found and managed at {Account name} Settings -> Account Access Tokens. Account access tokens can have the following scopes:  ### read Supports all GET operations at the account level.  ### write Supports all POST, PUT, PATCH, and DELETE operations at the account level.  # HTTP responses The API can return the following HTTP response codes:  ### 200 OK Operation was completed successfully  ### 400 Bad request The request was malformed and could not be parsed.  ### 403 Access denied Access token was missing, invalid, or does not have the necessary permissions.  ### 404 Not found The requested resource was not found. This response will be returned if the URL is entirely invalid (i.e. /asdf), or if it is a URL that could be valid but is referencing something that does not exist (i.e. /item/12345).  ### 413 Request entity too large The request exceeded the maximum size of 128KB.  ### 422 Unprocessable Entity The request was parseable (i.e. valid JSON), but some parameters were missing or otherwise invalid.  ### 429 Too Many Requests If rate limiting is enabled for your access token, this return code signifies that  # Examples  ### [api-examples](https://github.com/rollbar/api-examples) Author: Rollbar  Language: Python  Examples using RQL, deploys, occurrences, and reports  ### [api-people-example](https://github.com/rollbar/api-people-example) Author: Rollbar  Language: Python  Shows how to gather the Person data for each occurrence of a list of items  ### [rolltools](https://github.com/jslate/rolltools) Author: Jonathan Slate  Language: Ruby  A few utilities using the Rollbar API 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Occurrence service.
* @module api/OccurrenceApi
* @version 1.0.0
*/
export default class OccurrenceApi {

    /**
    * Constructs a new OccurrenceApi. 
    * @alias module:api/OccurrenceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the instanceInstanceIdDelete operation.
     * @callback module:api/OccurrenceApi~instanceInstanceIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an occurrence
     * Permanently deletes an occurrence. This will make it unavailable in the Rollbar UI and API. Aggregate counts are not updated. 
     * @param {Object} opts Optional parameters
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME 
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME2 
     * @param {module:api/OccurrenceApi~instanceInstanceIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instanceInstanceIdDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{instance_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instanceInstanceIdGet operation.
     * @callback module:api/OccurrenceApi~instanceInstanceIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an occurrence
     * Returns a JSON object describing the occurrence. This is similar to the \"Raw JSON\" section of the occurrence detail page.  `instance_id` must be an Occurrence ID for an occurrence in the project. These IDs are returned as the `id` field in other occurrence API calls, and can be found in the Rollbar UI on URLs like `https://rollbar.com/Rollbar/demo/items/54/occurrences/3209095494/` (`3209095494` is the Occurrence ID). 
     * @param {Object} opts Optional parameters
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME 
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME2 
     * @param {module:api/OccurrenceApi~instanceInstanceIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instanceInstanceIdGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/instance/{instance_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the instancesGet operation.
     * @callback module:api/OccurrenceApi~instancesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all occurrences in a project
     * Returns all occurrences in the project, in pages of 20. Order is descending by occurrence ID (which is approximately descending by timestamp). 
     * @param {Object} opts Optional parameters
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME 
     * @param {Object} opts.page Page number to return, starting at 1. 20 occurrences are returned per page.
     * @param {module:api/OccurrenceApi~instancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    instancesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the itemIdInstancesGet operation.
     * @callback module:api/OccurrenceApi~itemIdInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all occurrences in an item
     * Returns all occurrences of an item, in pages of 20. Order is descending by occurrence ID (which is approximately descending by timestamp). 
     * @param {Object} opts Optional parameters
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME 
     * @param {module:model/null} opts.UNKNOWN_PARAMETER_NAME2 
     * @param {Object} opts.page Page number to return, starting at 1. 20 occurrences are returned per page.
     * @param {module:api/OccurrenceApi~itemIdInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    itemIdInstancesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{item_id}/instances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
