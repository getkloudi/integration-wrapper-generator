/**
 * Rollbar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Api1VersionsItemsResponse from '../model/Api1VersionsItemsResponse';
import Api1VersionsResponse from '../model/Api1VersionsResponse';

/**
* Versions service.
* @module api/VersionsApi
* @version 1.1.0
*/
export default class VersionsApi {

    /**
    * Constructs a new VersionsApi. 
    * @alias module:api/VersionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the versionsVersionGet operation.
     * @callback module:api/VersionsApi~versionsVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Api1VersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Code version details in one project
     * Returns the details about one specific code version in one project  https://docs.rollbar.com/docs/versions 
     * @param {String} xRollbarAccessToken Use a project access token with 'read' scope
     * @param {String} version The code version sent on the occurrence payload
     * @param {String} environment The environment where the code version is detected
     * @param {module:api/VersionsApi~versionsVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Api1VersionsResponse}
     */
    versionsVersionGet(xRollbarAccessToken, version, environment, callback) {
      let postBody = null;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling versionsVersionGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling versionsVersionGet");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling versionsVersionGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'environment': environment
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Api1VersionsResponse;
      return this.apiClient.callApi(
        '/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the versionsVersionItemsGet operation.
     * @callback module:api/VersionsApi~versionsVersionItemsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Api1VersionsItemsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List items by code version
     * List items that have occurrences for one specific code version.  https://docs.rollbar.com/docs/versions 
     * @param {String} xRollbarAccessToken Use a project access token with 'read' scope
     * @param {String} version The code version sent on the occurrence payload
     * @param {String} environment For one code version list the items only for this environment
     * @param {module:model/String} event Filter the list of items by the item event produced on the code version. One item can have one of these events in one version:    - `new` for new items in the code version   - `repeated` for an item that already existed in preivous versions   - `reactivated` an item that was resolved but was reactivated in the code version   - `resolved` an item resolved in one specific version
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} opts.level Filter the list of items by level. Multiple levels can be used, and all items for all levels will be returned if no one is specified.
     * @param {Number} opts.page Page number, starting from 1. 20 elements are returned per page.
     * @param {module:api/VersionsApi~versionsVersionItemsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Api1VersionsItemsResponse}
     */
    versionsVersionItemsGet(xRollbarAccessToken, version, environment, event, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling versionsVersionItemsGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling versionsVersionItemsGet");
      }
      // verify the required parameter 'environment' is set
      if (environment === undefined || environment === null) {
        throw new Error("Missing the required parameter 'environment' when calling versionsVersionItemsGet");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling versionsVersionItemsGet");
      }

      let pathParams = {
        'version': version
      };
      let queryParams = {
        'environment': environment,
        'event': event,
        'level': this.apiClient.buildCollectionParam(opts['level'], 'csv'),
        'page': opts['page']
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = Api1VersionsItemsResponse;
      return this.apiClient.callApi(
        '/versions/{version}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
