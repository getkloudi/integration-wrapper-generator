/**
 * Rollbar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EmailIntegrationConfig from '../model/EmailIntegrationConfig';
import EmailRule from '../model/EmailRule';
import EmptyResponse from '../model/EmptyResponse';
import PagerDutyIntegrationConfig from '../model/PagerDutyIntegrationConfig';
import PagerDutyRule from '../model/PagerDutyRule';
import SlackIntegrationConfig from '../model/SlackIntegrationConfig';
import SlackRule from '../model/SlackRule';

/**
* Notifications service.
* @module api/NotificationsApi
* @version 1.1.0
*/
export default class NotificationsApi {

    /**
    * Constructs a new NotificationsApi. 
    * @alias module:api/NotificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the notificationsEmailPut operation.
     * @callback module:api/NotificationsApi~notificationsEmailPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configuring Email Notifications integration
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {module:model/EmailIntegrationConfig} body 
     * @param {module:api/NotificationsApi~notificationsEmailPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsEmailPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsEmailPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsEmailPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsEmailRulesPut operation.
     * @callback module:api/NotificationsApi~notificationsEmailRulesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup Email notification rules
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {Array.<module:model/EmailRule>} body 
     * @param {module:api/NotificationsApi~notificationsEmailRulesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsEmailRulesPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsEmailRulesPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsEmailRulesPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/email/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsPagerdutyPut operation.
     * @callback module:api/NotificationsApi~notificationsPagerdutyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configuring PagerDuty integration
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {module:model/PagerDutyIntegrationConfig} body 
     * @param {module:api/NotificationsApi~notificationsPagerdutyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsPagerdutyPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsPagerdutyPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsPagerdutyPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/pagerduty', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsPagerdutyRulesPut operation.
     * @callback module:api/NotificationsApi~notificationsPagerdutyRulesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup PagerDuty notification rules
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {Array.<module:model/PagerDutyRule>} body 
     * @param {module:api/NotificationsApi~notificationsPagerdutyRulesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsPagerdutyRulesPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsPagerdutyRulesPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsPagerdutyRulesPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/pagerduty/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsSlackPut operation.
     * @callback module:api/NotificationsApi~notificationsSlackPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Configuring Slack integration
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {module:model/SlackIntegrationConfig} body 
     * @param {module:api/NotificationsApi~notificationsSlackPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsSlackPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsSlackPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsSlackPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/slack', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsSlackRulesPut operation.
     * @callback module:api/NotificationsApi~notificationsSlackRulesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EmptyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Setup Slack notification rules
     * @param {String} xRollbarAccessToken Use a project access token with 'write' scope
     * @param {Array.<module:model/SlackRule>} body 
     * @param {module:api/NotificationsApi~notificationsSlackRulesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EmptyResponse}
     */
    notificationsSlackRulesPut(xRollbarAccessToken, body, callback) {
      let postBody = body;
      // verify the required parameter 'xRollbarAccessToken' is set
      if (xRollbarAccessToken === undefined || xRollbarAccessToken === null) {
        throw new Error("Missing the required parameter 'xRollbarAccessToken' when calling notificationsSlackRulesPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling notificationsSlackRulesPut");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'X-Rollbar-Access-Token': xRollbarAccessToken
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json; charset=utf-8'];
      let returnType = EmptyResponse;
      return this.apiClient.callApi(
        '/notifications/slack/rules', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
