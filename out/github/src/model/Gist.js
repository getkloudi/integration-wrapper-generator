/**
 * GitHub
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GistFiles from './GistFiles';
import GistForks from './GistForks';
import GistHistory from './GistHistory';
import User from './User';

/**
 * The Gist model module.
 * @module model/Gist
 * @version 1.4.0
 */
class Gist {
    /**
     * Constructs a new <code>Gist</code>.
     * @alias module:model/Gist
     */
    constructor() { 
        
        Gist.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Gist</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Gist} obj Optional instance to populate.
     * @return {module:model/Gist} The populated <code>Gist</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Gist();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'Number');
            }
            if (data.hasOwnProperty('comments_url')) {
                obj['comments_url'] = ApiClient.convertToType(data['comments_url'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = GistFiles.constructFromObject(data['files']);
            }
            if (data.hasOwnProperty('forks')) {
                obj['forks'] = ApiClient.convertToType(data['forks'], [GistForks]);
            }
            if (data.hasOwnProperty('git_pull_url')) {
                obj['git_pull_url'] = ApiClient.convertToType(data['git_pull_url'], 'String');
            }
            if (data.hasOwnProperty('git_push_url')) {
                obj['git_push_url'] = ApiClient.convertToType(data['git_push_url'], 'String');
            }
            if (data.hasOwnProperty('history')) {
                obj['history'] = ApiClient.convertToType(data['history'], [GistHistory]);
            }
            if (data.hasOwnProperty('html_url')) {
                obj['html_url'] = ApiClient.convertToType(data['html_url'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('public')) {
                obj['public'] = ApiClient.convertToType(data['public'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = User.constructFromObject(data['user']);
            }
        }
        return obj;
    }


}

/**
 * @member {Number} comments
 */
Gist.prototype['comments'] = undefined;

/**
 * @member {String} comments_url
 */
Gist.prototype['comments_url'] = undefined;

/**
 * Timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
 * @member {String} created_at
 */
Gist.prototype['created_at'] = undefined;

/**
 * @member {String} description
 */
Gist.prototype['description'] = undefined;

/**
 * @member {module:model/GistFiles} files
 */
Gist.prototype['files'] = undefined;

/**
 * @member {Array.<module:model/GistForks>} forks
 */
Gist.prototype['forks'] = undefined;

/**
 * @member {String} git_pull_url
 */
Gist.prototype['git_pull_url'] = undefined;

/**
 * @member {String} git_push_url
 */
Gist.prototype['git_push_url'] = undefined;

/**
 * @member {Array.<module:model/GistHistory>} history
 */
Gist.prototype['history'] = undefined;

/**
 * @member {String} html_url
 */
Gist.prototype['html_url'] = undefined;

/**
 * @member {String} id
 */
Gist.prototype['id'] = undefined;

/**
 * @member {Boolean} public
 */
Gist.prototype['public'] = undefined;

/**
 * @member {String} url
 */
Gist.prototype['url'] = undefined;

/**
 * @member {module:model/User} user
 */
Gist.prototype['user'] = undefined;






export default Gist;

