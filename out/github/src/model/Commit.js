/**
 * GitHub
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BranchCommitCommit from './BranchCommitCommit';
import BranchCommitCommitTree from './BranchCommitCommitTree';
import CommitFiles from './CommitFiles';
import CommitStats from './CommitStats';
import User from './User';

/**
 * The Commit model module.
 * @module model/Commit
 * @version 1.4.0
 */
class Commit {
    /**
     * Constructs a new <code>Commit</code>.
     * @alias module:model/Commit
     */
    constructor() { 
        
        Commit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Commit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Commit} obj Optional instance to populate.
     * @return {module:model/Commit} The populated <code>Commit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Commit();

            if (data.hasOwnProperty('author')) {
                obj['author'] = User.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('commit')) {
                obj['commit'] = BranchCommitCommit.constructFromObject(data['commit']);
            }
            if (data.hasOwnProperty('committer')) {
                obj['committer'] = User.constructFromObject(data['committer']);
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [CommitFiles]);
            }
            if (data.hasOwnProperty('parents')) {
                obj['parents'] = ApiClient.convertToType(data['parents'], [BranchCommitCommitTree]);
            }
            if (data.hasOwnProperty('sha')) {
                obj['sha'] = ApiClient.convertToType(data['sha'], 'String');
            }
            if (data.hasOwnProperty('stats')) {
                obj['stats'] = CommitStats.constructFromObject(data['stats']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/User} author
 */
Commit.prototype['author'] = undefined;

/**
 * @member {module:model/BranchCommitCommit} commit
 */
Commit.prototype['commit'] = undefined;

/**
 * @member {module:model/User} committer
 */
Commit.prototype['committer'] = undefined;

/**
 * @member {Array.<module:model/CommitFiles>} files
 */
Commit.prototype['files'] = undefined;

/**
 * @member {Array.<module:model/BranchCommitCommitTree>} parents
 */
Commit.prototype['parents'] = undefined;

/**
 * @member {String} sha
 */
Commit.prototype['sha'] = undefined;

/**
 * @member {module:model/CommitStats} stats
 */
Commit.prototype['stats'] = undefined;

/**
 * @member {String} url
 */
Commit.prototype['url'] = undefined;






export default Commit;

