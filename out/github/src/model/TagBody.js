/**
 * GitHub
 * Powerful collaboration, code review, and code management for open source and private projects. 
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TagTagger from './TagTagger';

/**
 * The TagBody model module.
 * @module model/TagBody
 * @version 1.3.1
 */
class TagBody {
    /**
     * Constructs a new <code>TagBody</code>.
     * @alias module:model/TagBody
     * @param message {String} String of the tag message.
     * @param _object {String} String of the SHA of the git object this is tagging.
     * @param tag {String} The tag's name. This is typically a version (e.g., \"v0.0.1\").
     * @param tagger {module:model/TagTagger} 
     * @param type {module:model/TagBody.TypeEnum} String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.
     */
    constructor(message, _object, tag, tagger, type) { 
        
        TagBody.initialize(this, message, _object, tag, tagger, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, message, _object, tag, tagger, type) { 
        obj['message'] = message;
        obj['object'] = _object;
        obj['tag'] = tag;
        obj['tagger'] = tagger;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>TagBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagBody} obj Optional instance to populate.
     * @return {module:model/TagBody} The populated <code>TagBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagBody();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('object')) {
                obj['object'] = ApiClient.convertToType(data['object'], 'String');
            }
            if (data.hasOwnProperty('tag')) {
                obj['tag'] = ApiClient.convertToType(data['tag'], 'String');
            }
            if (data.hasOwnProperty('tagger')) {
                obj['tagger'] = TagTagger.constructFromObject(data['tagger']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * String of the tag message.
 * @member {String} message
 */
TagBody.prototype['message'] = undefined;

/**
 * String of the SHA of the git object this is tagging.
 * @member {String} object
 */
TagBody.prototype['object'] = undefined;

/**
 * The tag's name. This is typically a version (e.g., \"v0.0.1\").
 * @member {String} tag
 */
TagBody.prototype['tag'] = undefined;

/**
 * @member {module:model/TagTagger} tagger
 */
TagBody.prototype['tagger'] = undefined;

/**
 * String of the type of the object we’re tagging. Normally this is a commit but it can also be a tree or a blob.
 * @member {module:model/TagBody.TypeEnum} type
 */
TagBody.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TagBody['TypeEnum'] = {

    /**
     * value: "commit"
     * @const
     */
    "commit": "commit",

    /**
     * value: "tree"
     * @const
     */
    "tree": "tree",

    /**
     * value: "blob"
     * @const
     */
    "blob": "blob"
};



export default TagBody;

