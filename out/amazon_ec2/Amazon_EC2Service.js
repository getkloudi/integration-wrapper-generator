const Axios = require("axios");
const ErrorHelper = require("../../../helpers/ErrorHelper");
const nconf = require("nconf");
// const qs = require("querystring");

class Amazon_EC2Service {
  get name() {
    return "AMAZON_EC2";
  }

  get description() {
    return "mazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.";
  }

  get icon() {
    return "amazonec2.svg";
  }

  get category() {
    return;
  }

  get apiEndpoint() {
    return "https://ec2.amazonaws.com/";
  }

  get authMethod() {
    return "API_TOKEN";
  }

  get authEndpoint() {
    return;
  }

  get apiTokenURL() {
    return "https://console.aws.amazon.com/iam/home?#security_credential";
  }

  get scopes() {
    return;
  }

  get requiredAuthParams() {
    return ["regions", "accessKey", "secretKey"];
  }

  get primaryAction() {
    return {
      type: "INPUT_API_TOKEN_PARAMS",
      requiredAuthParams: this.requiredAuthParams
    };
  }

  get webhooks() {
    return;
  }

  get webhookToTasksMap() {
    return;
  }

  get entities() {
    return;
  }

  getNextPaginationURIFromResponse(response) {
    //TODO: Add custom getNextPaginationURIFromResponse functionality here
  }

  async connect(authParams) {
    if (authParams.accessKey && authParams.secretKey && authParams.regions) {
      let regions = [];
      // if (authParams.regions.includes("all"))
      //   regions = regions.concat([
      //     "us-east-1",
      //     "us-east-2",
      //     "us-west-1",
      //     "us-west-2",
      //     "us-gov-west-1",
      //     "us-gov-east-1",
      //     "ca-central-1",
      //     "eu-north-1",
      //     "eu-west-1",
      //     "eu-west-2",
      //     "eu-west-3",
      //     "eu-central-1",
      //     "ap-northeast-1",
      //     "ap-northeast-2",
      //     "ap-northeast-3",
      //     "ap-southeast-1",
      //     "ap-southeast-2",
      //     "ap-south-1",
      //     "sa-east-1"
      //   ]);
      // else
      regions = "ap-south-1";
      return {
        integrationSpecificParams: {
          secretKey: authParams.secretKey,
          regions: regions
        },
        accessToken: authParams.accessKey
      };
    } else {
      throw ErrorHelper.getError(
        "Missing accessKey, secretKey and regions",
        400
      );
    }
  }

  async getThirdPartyProjects(incomingOptions) {
    // incomingOptions.regions = "ap-south-1.";
    // incomingOptions.action = "DescribeRegions";
    // incomingOptions.version = "2016-11-15";
    // console.log(incomingOptions);
    let res;
    try {
      res = await this.get("ACTION_DESCRIBE_REGIONS", incomingOptions);
      console.log(res);
      return ["Ok"];
    } catch (error) {
      console.log(error);
      return ["Error"];
    }
  }

  async registerWebhooks(incomingOptions) {
    //TODO: Add custom registerWebhooks functionality here
  }

  async syncIntegrationEntities(integration, incomingOptions) {
    // TODO: Add custom syncIntegrationEntities functionality here
    // const taskUri = nconf.get("TASK_API_URI");
    // const authToken = nconf.get("PEPPER_TASK_API_ACCESS_TOKEN");
    // try {
    //   const res = await Axios.default.post(
    //     taskUri,
    //     {
    //       pepper_task: [],
    //       project_id: incomingOptions.projectId,
    //       user_id: incomingOptions.userId,
    //       third_party_project_id: "",
    //       third_party_organization_id: ""
    //     },
    //     {
    //       headers: {
    //         Authorization: authToken
    //       }
    //     }
    //   );
    //   return "Ok";
    // } catch (error) {
    //   console.error(error.response || error);
    //   return "ERROR";
    // }
  }

  async get(entity, options) {
    switch (entity) {
      case "ACTION_ACCEPT_RESERVED_INSTANCES_EXCHANGE_QUOTE":
        /*



Accepts the Convertible Reserved Instance exchange quote described in the &lt;a&gt;GetReservedInstancesExchangeQuote&lt;/a&gt; call.


      Function parameters for this API region,reservedInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptReservedInstancesExchangeQuoteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Accepts a transit gateway peering attachment request. The peering attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptTransitGatewayPeeringAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Accepts a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;RejectTransitGatewayVpcAttachment&lt;/a&gt; to reject a VPC attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptTransitGatewayVpcAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_VPC_ENDPOINT_CONNECTIONS":
        /*



Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.


      Function parameters for this API region,serviceId,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptVpcEndpointConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_VPC_PEERING_CONNECTION":
        /*



&lt;p&gt;Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state, and you must be the owner of the peer VPC. Use &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; to view your outstanding VPC peering connection requests.&lt;/p&gt; &lt;p&gt;For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptVpcPeeringConnectionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ADVERTISE_BYOIP_CIDR":
        /*



&lt;p&gt;Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.&lt;/p&gt; &lt;p&gt;To stop advertising the BYOIP CIDR, use &lt;a&gt;WithdrawByoipCidr&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API cidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAdvertiseByoipCidrGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ALLOCATE_ADDRESS":
        /*



&lt;p&gt;Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.&lt;/p&gt; &lt;p&gt;You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAllocateAddressGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ALLOCATE_HOSTS":
        /*



Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.


      Function parameters for this API availabilityZone,quantity,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAllocateHostsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_APPLY_SECURITY_GROUPS_TO_CLIENT_VPN_TARGET_NETWORK":
        /*



Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.


      Function parameters for this API clientVpnEndpointId,vpcId,securityGroupId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionApplySecurityGroupsToClientVpnTargetNetworkGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSIGN_IPV6_ADDRESSES":
        /*



Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet&#39;s IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\&quot;&gt;IP Addresses Per Network Interface Per Instance Type&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssignIpv6AddressesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSIGN_PRIVATE_IP_ADDRESSES":
        /*



&lt;p&gt;Assigns one or more secondary private IP addresses to the specified network interface.&lt;/p&gt; &lt;p&gt;You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet&#39;s CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about Elastic IP addresses, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.&lt;/p&gt; &lt;p&gt;Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check &lt;code&gt;network/interfaces/macs/mac/local-ipv4s&lt;/code&gt; in the instance metadata to confirm that the remapping is complete.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssignPrivateIpAddressesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_ADDRESS":
        /*



&lt;p&gt;Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.&lt;/p&gt; &lt;p&gt;[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.&lt;/p&gt; &lt;p&gt;You cannot associate an Elastic IP address with an interface in a different network border group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the &lt;i&gt;Elastic IP Addresses&lt;/i&gt; section of &lt;a href&#x3D;\&quot;http://aws.amazon.com/ec2/pricing/\&quot;&gt;Amazon EC2 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateAddressGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSOCIATE_CLIENT_VPN_TARGET_NETWORK":
        /*



Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.


      Function parameters for this API clientVpnEndpointId,subnetId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateClientVpnTargetNetworkGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_DHCP_OPTIONS":
        /*



&lt;p&gt;Associates a set of DHCP options (that you&#39;ve previously created) with the specified VPC, or associates no DHCP options with the VPC.&lt;/p&gt; &lt;p&gt;After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don&#39;t need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API dhcpOptionsId,vpcId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateDhcpOptionsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSOCIATE_IAM_INSTANCE_PROFILE":
        /*



Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateIamInstanceProfileGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_ROUTE_TABLE":
        /*



&lt;p&gt;Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateRouteTableGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSOCIATE_SUBNET_CIDR_BLOCK":
        /*



Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.


      Function parameters for this API ipv6CidrBlock,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateSubnetCidrBlockGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



&lt;p&gt;Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.&lt;/p&gt; &lt;p&gt;The transit gateway attachment must be in the available state before you can add a resource. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html\&quot;&gt;DescribeTransitGatewayAttachments&lt;/a&gt; to see the state of the attachment.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateTransitGatewayMulticastDomainGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateTransitGatewayRouteTableGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_VPC_CIDR_BLOCK":
        /*



&lt;p&gt;Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.&lt;/p&gt; &lt;p&gt;For more information about associating CIDR blocks with your VPC and applicable restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing\&quot;&gt;VPC and Subnet Sizing&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateVpcCidrBlockGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_CLASSIC_LINK_VPC":
        /*



&lt;p&gt;Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC&#39;s security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that&#39;s in the &lt;code&gt;running&lt;/code&gt; state. An instance is automatically unlinked from a VPC when it&#39;s stopped - you can link it to the VPC again when you restart it.&lt;/p&gt; &lt;p&gt;After you&#39;ve linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.&lt;/p&gt; &lt;p&gt;Linking your instance to a VPC is sometimes referred to as &lt;i&gt;attaching&lt;/i&gt; your instance.&lt;/p&gt;


      Function parameters for this API region,securityGroupId,instanceId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachClassicLinkVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ATTACH_INTERNET_GATEWAY":
        /*



Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.


      Function parameters for this API region,internetGatewayId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_NETWORK_INTERFACE":
        /*



Attaches a network interface to an instance.


      Function parameters for this API deviceIndex,region,instanceId,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachNetworkInterfaceGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_VOLUME":
        /*



&lt;p&gt;Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.&lt;/p&gt; &lt;p&gt;Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you attach an EBS volume, you must make it available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\&quot;&gt;Making an EBS Volume Available For Use&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If a volume has an AWS Marketplace product code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The volume can be attached only to a stopped instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;AWS Marketplace product codes are copied from the volume to the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must be subscribed to the product.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The instance type and operating system of the instance must support the product. For example, you can&#39;t detach a volume from a Windows instance and attach it to a Linux instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html\&quot;&gt;Attaching Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API device,instanceId,volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ATTACH_VPN_GATEWAY":
        /*



&lt;p&gt;Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,vpnGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachVpnGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_AUTHORIZE_CLIENT_VPN_INGRESS":
        /*



Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.


      Function parameters for this API clientVpnEndpointId,targetNetworkCidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeClientVpnIngressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_AUTHORIZE_SECURITY_GROUP_EGRESS":
        /*



&lt;p&gt;[VPC only] Adds the specified egress rules to a security group for use with a VPC.&lt;/p&gt; &lt;p&gt;An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeSecurityGroupEgressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_AUTHORIZE_SECURITY_GROUP_INGRESS":
        /*



&lt;p&gt;Adds the specified ingress rules to a security group.&lt;/p&gt; &lt;p&gt;An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeSecurityGroupIngressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_BUNDLE_INSTANCE":
        /*



&lt;p&gt;Bundles an Amazon instance store-backed Windows instance.&lt;/p&gt; &lt;p&gt;During bundling, only the root device volume (C:\\) is bundled. Data on other instance store volumes is not preserved.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionBundleInstanceGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_BUNDLE_TASK":
        /*



Cancels a bundling operation for an instance store-backed Windows instance.


      Function parameters for this API bundleId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelBundleTaskGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_CAPACITY_RESERVATION":
        /*



&lt;p&gt;Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation&#39;s state to &lt;code&gt;cancelled&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.&lt;/p&gt;


      Function parameters for this API capacityReservationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelCapacityReservationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_CONVERSION_TASK":
        /*



&lt;p&gt;Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API conversionTaskId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelConversionTaskGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_EXPORT_TASK":
        /*



Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.


      Function parameters for this API exportTaskId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelExportTaskGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_IMPORT_TASK":
        /*



Cancels an in-process import virtual machine or import snapshot task.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelImportTaskGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_RESERVED_INSTANCES_LISTING":
        /*



&lt;p&gt;Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API reservedInstancesListingId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelReservedInstancesListingGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_SPOT_FLEET_REQUESTS":
        /*



&lt;p&gt;Cancels the specified Spot Fleet requests.&lt;/p&gt; &lt;p&gt;After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the &lt;code&gt;cancelled_terminating&lt;/code&gt; state. Otherwise, the Spot Fleet request enters the &lt;code&gt;cancelled_running&lt;/code&gt; state and the instances continue to run until they are interrupted or you terminate them manually.&lt;/p&gt;


      Function parameters for this API region,spotFleetRequestId,terminateInstances,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelSpotFleetRequestsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_SPOT_INSTANCE_REQUESTS":
        /*



&lt;p&gt;Cancels one or more Spot Instance requests.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API region,spotInstanceRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelSpotInstanceRequestsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CONFIRM_PRODUCT_INSTANCE":
        /*



Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user&#39;s instance is eligible for support.


      Function parameters for this API instanceId,productCode,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionConfirmProductInstanceGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_COPY_FPGA_IMAGE":
        /*



Copies the specified Amazon FPGA Image (AFI) to the current Region.


      Function parameters for this API region,sourceFpgaImageId,sourceRegion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopyFpgaImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_COPY_IMAGE":
        /*



&lt;p&gt;Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.&lt;/p&gt; &lt;p&gt;Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set &lt;code&gt;Encrypted&lt;/code&gt; during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.&lt;/p&gt; &lt;p&gt;For more information about the prerequisites and limits when copying an AMI, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html\&quot;&gt;Copying an AMI&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API name,sourceImageId,sourceRegion,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopyImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_COPY_SNAPSHOT":
        /*



&lt;p&gt;Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).&lt;/p&gt; &lt;p&gt;Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK) however, you can specify a different CMK.&lt;/p&gt; &lt;p&gt;To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html\&quot;&gt;Copying an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API sourceRegion,sourceSnapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopySnapshotGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_CAPACITY_RESERVATION":
        /*



&lt;p&gt;Creates a new Capacity Reservation with the specified attributes.&lt;/p&gt; &lt;p&gt;Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\&quot;&gt;Capacity Reservations&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.&lt;/p&gt; &lt;p&gt;Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html\&quot;&gt;Amazon EC2 Service Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceType,instancePlatform,instanceCount,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateCapacityReservationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_CLIENT_VPN_ENDPOINT":
        /*



Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.


      Function parameters for this API clientCidrBlock,serverCertificateArn,authentication,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateClientVpnEndpointGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_CLIENT_VPN_ROUTE":
        /*



Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.


      Function parameters for this API clientVpnEndpointId,destinationCidrBlock,targetVpcSubnetId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateClientVpnRouteGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_CUSTOMER_GATEWAY":
        /*



&lt;p&gt;Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and can be behind a device performing network address translation (NAT).&lt;/p&gt; &lt;p&gt;For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the &lt;code&gt;us-east-1&lt;/code&gt; Region, and 9059, which is reserved in the &lt;code&gt;eu-west-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API bgpAsn,type,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateCustomerGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_DEFAULT_SUBNET":
        /*



Creates a default subnet with a size &lt;code&gt;/20&lt;/code&gt; IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet\&quot;&gt;Creating a Default Subnet&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API availabilityZone,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDefaultSubnetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_DEFAULT_VPC":
        /*



&lt;p&gt;Creates a default VPC with a size &lt;code&gt;/16&lt;/code&gt; IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\&quot;&gt;Default VPC and Default Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. You cannot specify the components of the default VPC yourself.&lt;/p&gt; &lt;p&gt;If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.&lt;/p&gt; &lt;p&gt;If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see \&quot;I really want a default VPC for my existing EC2 account. Is that possible?\&quot; in the &lt;a href&#x3D;\&quot;http://aws.amazon.com/vpc/faqs/#Default_VPCs\&quot;&gt;Default VPCs FAQ&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDefaultVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_DHCP_OPTIONS":
        /*



&lt;p&gt;Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name-servers&lt;/code&gt; - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in &lt;code&gt;domain-name&lt;/code&gt;, you must set &lt;code&gt;domain-name-servers&lt;/code&gt; to a custom DNS server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name&lt;/code&gt; - If you&#39;re using AmazonProvidedDNS in &lt;code&gt;us-east-1&lt;/code&gt;, specify &lt;code&gt;ec2.internal&lt;/code&gt;. If you&#39;re using AmazonProvidedDNS in another Region, specify &lt;code&gt;region.compute.internal&lt;/code&gt; (for example, &lt;code&gt;ap-northeast-1.compute.internal&lt;/code&gt;). Otherwise, specify a domain name (for example, &lt;code&gt;MyCompany.com&lt;/code&gt;). This value is used to complete unqualified DNS hostnames. &lt;b&gt;Important&lt;/b&gt;: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ntp-servers&lt;/code&gt; - The IP addresses of up to four Network Time Protocol (NTP) servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-name-servers&lt;/code&gt; - The IP addresses of up to four NetBIOS name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-node-type&lt;/code&gt; - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the &lt;code&gt;domain-name-servers&lt;/code&gt; option either to &lt;code&gt;AmazonProvidedDNS&lt;/code&gt; or to a domain name server of your choice. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API dhcpConfiguration,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDhcpOptionsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_EGRESS_ONLY_INTERNET_GATEWAY":
        /*



[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateEgressOnlyInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_FLEET":
        /*



&lt;p&gt;Launches an EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\&quot;&gt;Launching an EC2 Fleet&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,launchTemplateConfigs,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFleetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_FLOW_LOGS":
        /*



&lt;p&gt;Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. &lt;/p&gt; &lt;p&gt;Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\&quot;&gt;Flow Log Records&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\&quot;&gt;VPC Flow Logs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,resourceId,resourceType,trafficType,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFlowLogsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_FPGA_IMAGE":
        /*



&lt;p&gt;Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).&lt;/p&gt; &lt;p&gt;The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.&lt;/p&gt; &lt;p&gt;An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the &lt;a href&#x3D;\&quot;https://github.com/aws/aws-fpga/\&quot;&gt;AWS FPGA Hardware Development Kit&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFpgaImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_IMAGE":
        /*



&lt;p&gt;Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.&lt;/p&gt; &lt;p&gt;If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\&quot;&gt;Creating Amazon EBS-Backed Linux AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceId,name,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_INSTANCE_EXPORT_TASK":
        /*



&lt;p&gt;Exports a running or stopped instance to an S3 bucket.&lt;/p&gt; &lt;p&gt;For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html\&quot;&gt;Exporting an Instance as a VM Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateInstanceExportTaskGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_INTERNET_GATEWAY":
        /*



&lt;p&gt;Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using &lt;a&gt;AttachInternetGateway&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_KEY_PAIR":
        /*



&lt;p&gt;Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.&lt;/p&gt; &lt;p&gt;You can have up to five thousand key pairs per Region.&lt;/p&gt; &lt;p&gt;The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using &lt;a&gt;ImportKeyPair&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API keyName,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateKeyPairGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_LAUNCH_TEMPLATE":
        /*



Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify a launch template instead of providing the launch parameters in the request.


      Function parameters for this API region,launchTemplateName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLaunchTemplateGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_LAUNCH_TEMPLATE_VERSION":
        /*



&lt;p&gt;Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.&lt;/p&gt; &lt;p&gt;Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLaunchTemplateVersionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_LOCAL_GATEWAY_ROUTE":
        /*



Creates a static route for the specified local gateway route table.


      Function parameters for this API destinationCidrBlock,localGatewayRouteTableId,localGatewayVirtualInterfaceGroupId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLocalGatewayRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION":
        /*



Associates the specified VPC with the specified local gateway route table.


      Function parameters for this API localGatewayRouteTableId,vpcId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLocalGatewayRouteTableVpcAssociationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NAT_GATEWAY":
        /*



Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\&quot;&gt;NAT Gateways&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API allocationId,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNatGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_NETWORK_ACL_ENTRY":
        /*



&lt;p&gt;Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.&lt;/p&gt; &lt;p&gt;We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.&lt;/p&gt; &lt;p&gt;After you add an entry, you can&#39;t modify it you must either replace it, or create an entry and delete the old one.&lt;/p&gt; &lt;p&gt;For more information about network ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,egress,networkAclId,protocol,ruleAction,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkAclEntryGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NETWORK_ACL":
        /*



&lt;p&gt;Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkAclGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_NETWORK_INTERFACE":
        /*



&lt;p&gt;Creates a network interface in the specified subnet.&lt;/p&gt; &lt;p&gt;For more information about network interfaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\&quot;&gt;Elastic Network Interfaces&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkInterfaceGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NETWORK_INTERFACE_PERMISSION":
        /*



&lt;p&gt;Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.&lt;/p&gt; &lt;p&gt;You can grant permission to a single AWS account only, and only one account at a time.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,permission,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkInterfacePermissionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_PLACEMENT_GROUP":
        /*



&lt;p&gt;Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. &lt;/p&gt; &lt;p&gt;A &lt;code&gt;cluster&lt;/code&gt; placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A &lt;code&gt;spread&lt;/code&gt; placement group places instances on distinct hardware. A &lt;code&gt;partition&lt;/code&gt; placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreatePlacementGroupGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_RESERVED_INSTANCES_LISTING":
        /*



&lt;p&gt;Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the &lt;a&gt;DescribeReservedInstances&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the &lt;a&gt;DescribeReservedInstancesListings&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API clientToken,instanceCount,priceSchedules,reservedInstancesId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateReservedInstancesListingGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_ROUTE":
        /*



&lt;p&gt;Creates a route in a route table within a VPC.&lt;/p&gt; &lt;p&gt;You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address &lt;code&gt;192.0.2.3&lt;/code&gt;, and the route table includes the following two IPv4 routes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/24&lt;/code&gt; (goes to some target A)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/28&lt;/code&gt; (goes to some target B)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both routes apply to the traffic destined for &lt;code&gt;192.0.2.3&lt;/code&gt;. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.&lt;/p&gt; &lt;p&gt;For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateRouteGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_ROUTE_TABLE":
        /*



&lt;p&gt;Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateRouteTableGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SECURITY_GROUP":
        /*



&lt;p&gt;Creates a security group.&lt;/p&gt; &lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can&#39;t have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.&lt;/p&gt; &lt;p&gt;You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don&#39;t specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.&lt;/p&gt; &lt;p&gt;You can add or remove rules from your security groups using &lt;a&gt;AuthorizeSecurityGroupIngress&lt;/a&gt;, &lt;a&gt;AuthorizeSecurityGroupEgress&lt;/a&gt;, &lt;a&gt;RevokeSecurityGroupIngress&lt;/a&gt;, and &lt;a&gt;RevokeSecurityGroupEgress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API groupDescription,groupName,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSecurityGroupGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SNAPSHOT":
        /*



&lt;p&gt;Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.&lt;/p&gt; &lt;p&gt;When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.&lt;/p&gt; &lt;p&gt;You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is &lt;code&gt;pending&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.&lt;/p&gt; &lt;p&gt;You can tag your snapshots during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\&quot;&gt;Amazon Elastic Block Store&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSnapshotGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SNAPSHOTS":
        /*



Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSnapshotsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.


      Function parameters for this API bucket,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSpotDatafeedSubscriptionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_SUBNET":
        /*



&lt;p&gt;Creates a subnet in an existing VPC.&lt;/p&gt; &lt;p&gt;When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can&#39;t change its CIDR block. The size of the subnet&#39;s IPv4 CIDR block can be the same as a VPC&#39;s IPv4 CIDR block, or a subset of a VPC&#39;s IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets&#39; CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).&lt;/p&gt; &lt;p&gt;If you&#39;ve associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. &lt;/p&gt; &lt;important&gt; &lt;p&gt;AWS reserves both the first four and the last IPv4 address in each subnet&#39;s CIDR block. They&#39;re not available for use.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you add more than one subnet to a VPC, they&#39;re set up in a star topology with a logical router in the middle.&lt;/p&gt; &lt;p&gt;If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn&#39;t change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It&#39;s therefore possible to have a subnet with no running instances (they&#39;re all stopped), but no remaining IP addresses available.&lt;/p&gt; &lt;p&gt;For more information about subnets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API cidrBlock,vpcId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSubnetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_TAGS":
        /*



&lt;p&gt;Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about creating IAM policies that control users&#39; access to resources based on tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html\&quot;&gt;Supported Resource-Level Permissions for Amazon EC2 API Actions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,resourceId,tag,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTagsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_FILTER":
        /*



&lt;p&gt;Creates a Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;A Traffic Mirror filter is a set of rules that defines the traffic to mirror.&lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. To mirror traffic, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm\&quot;&gt;CreateTrafficMirrorFilterRule&lt;/a&gt; to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html\&quot;&gt;ModifyTrafficMirrorFilterNetworkServices&lt;/a&gt; to mirror supported network services.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorFilterGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_FILTER_RULE":
        /*



&lt;p&gt;Creates a Traffic Mirror filter rule. &lt;/p&gt; &lt;p&gt;A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.&lt;/p&gt; &lt;p&gt;You need the Traffic Mirror filter ID when you create the rule.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,trafficDirection,ruleNumber,ruleAction,destinationCidrBlock,sourceCidrBlock,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorFilterRuleGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_SESSION":
        /*



&lt;p&gt;Creates a Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.&lt;/p&gt; &lt;p&gt;The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. &lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm\&quot;&gt;CreateTrafficMirrorFilter&lt;/a&gt; to create filter rules that specify the traffic to mirror.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,trafficMirrorTargetId,trafficMirrorFilterId,sessionNumber,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorSessionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_TARGET":
        /*



&lt;p&gt;Creates a target for your Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target can be a network interface, or a Network Load Balancer.&lt;/p&gt; &lt;p&gt;To use the target in a Traffic Mirror session, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm\&quot;&gt;CreateTrafficMirrorSession&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorTargetGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY":
        /*



&lt;p&gt;Creates a transit gateway.&lt;/p&gt; &lt;p&gt;You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the &lt;code&gt;available&lt;/code&gt; state, you can attach your VPCs and VPN connections to the transit gateway.&lt;/p&gt; &lt;p&gt;To attach your VPCs, use &lt;a&gt;CreateTransitGatewayVpcAttachment&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To attach a VPN connection, use &lt;a&gt;CreateCustomerGateway&lt;/a&gt; to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to &lt;a&gt;CreateVpnConnection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use &lt;a&gt;CreateTransitGatewayRouteTable&lt;/a&gt; to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use &lt;a&gt;EnableTransitGatewayRouteTablePropagation&lt;/a&gt; to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use &lt;a&gt;AssociateTransitGatewayRouteTable&lt;/a&gt; to associate a resource attachment with a transit gateway route table.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



&lt;p&gt;Creates a multicast domain using the specified transit gateway.&lt;/p&gt; &lt;p&gt;The transit gateway must be in the available state before you create a domain. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html\&quot;&gt;DescribeTransitGateways&lt;/a&gt; to see the state of transit gateway.&lt;/p&gt;


      Function parameters for this API transitGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayMulticastDomainGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



&lt;p&gt;Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. &lt;/p&gt; &lt;p&gt;After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayId,peerTransitGatewayId,peerAccountId,peerRegion,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayPeeringAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_ROUTE":
        /*



Creates a static route for the specified transit gateway route table.


      Function parameters for this API destinationCidrBlock,transitGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Creates a route table for the specified transit gateway.


      Function parameters for this API transitGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayRouteTableGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Attaches the specified VPC to the specified transit gateway.&lt;/p&gt; &lt;p&gt;If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.&lt;/p&gt; &lt;p&gt;To send VPC traffic to an attached transit gateway, add a route to the VPC route table using &lt;a&gt;CreateRoute&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API transitGatewayId,vpcId,subnetIds,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayVpcAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VOLUME":
        /*



&lt;p&gt;Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html\&quot;&gt;Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.&lt;/p&gt; &lt;p&gt;You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can tag your volumes during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html\&quot;&gt;Creating an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPC_ENDPOINT_CONNECTION_NOTIFICATION":
        /*



&lt;p&gt;Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\&quot;&gt;Create a Topic&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can create a connection notification for interface endpoints only.&lt;/p&gt;


      Function parameters for this API region,connectionNotificationArn,connectionEvents,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointConnectionNotificationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPC_ENDPOINT":
        /*



&lt;p&gt;Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;gateway&lt;/code&gt; endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.&lt;/p&gt; &lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeVpcEndpointServices&lt;/a&gt; to get a list of supported services.&lt;/p&gt;


      Function parameters for this API region,vpcId,serviceName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPC_ENDPOINT_SERVICE_CONFIGURATION":
        /*



&lt;p&gt;Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.&lt;/p&gt; &lt;p&gt;To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC Endpoint Services&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. &lt;/p&gt;


      Function parameters for this API region,networkLoadBalancerArn,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointServiceConfigurationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPC":
        /*



&lt;p&gt;Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon&#39;s pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.&lt;/p&gt; &lt;p&gt;By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the instance tenancy value for the VPC when you create it. You can&#39;t change this value for the VPC after you create it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API cidrBlock,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPC_PEERING_CONNECTION":
        /*



&lt;p&gt;Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Limitations and rules apply to a VPC peering connection. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations\&quot;&gt;limitations&lt;/a&gt; section in the &lt;i&gt;VPC Peering Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.&lt;/p&gt; &lt;p&gt;If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of &lt;code&gt;failed&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcPeeringConnectionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPN_CONNECTION":
        /*



&lt;p&gt;Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is &lt;code&gt;ipsec.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response includes information that you need to give to your network administrator to configure your customer gateway.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API customerGatewayId,type,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnConnectionGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPN_CONNECTION_ROUTE":
        /*



&lt;p&gt;Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API destinationCidrBlock,vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnConnectionRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPN_GATEWAY":
        /*



&lt;p&gt;Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API type,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_CLIENT_VPN_ENDPOINT":
        /*



Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteClientVpnEndpointGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_CLIENT_VPN_ROUTE":
        /*



Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the &lt;b&gt;CreateClientVpnRoute&lt;/b&gt; action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,destinationCidrBlock,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteClientVpnRouteGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_CUSTOMER_GATEWAY":
        /*



Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.


      Function parameters for this API customerGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteCustomerGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_DHCP_OPTIONS":
        /*



Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.


      Function parameters for this API dhcpOptionsId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteDhcpOptionsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_EGRESS_ONLY_INTERNET_GATEWAY":
        /*



Deletes an egress-only internet gateway.


      Function parameters for this API region,egressOnlyInternetGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteEgressOnlyInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_FLEETS":
        /*



&lt;p&gt;Deletes the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the &lt;code&gt;deleted_terminating&lt;/code&gt; state. Otherwise, the EC2 Fleet enters the &lt;code&gt;deleted_running&lt;/code&gt; state, and the instances continue to run until they are interrupted or you terminate them manually. &lt;/p&gt;


      Function parameters for this API region,fleetId,terminateInstances,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFleetsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_FLOW_LOGS":
        /*



Deletes one or more flow logs.


      Function parameters for this API region,flowLogId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFlowLogsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_FPGA_IMAGE":
        /*



Deletes the specified Amazon FPGA Image (AFI).


      Function parameters for this API region,fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFpgaImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_INTERNET_GATEWAY":
        /*



Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.


      Function parameters for this API region,internetGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_KEY_PAIR":
        /*



Deletes the specified key pair, by removing the public key from Amazon EC2.


      Function parameters for this API keyName,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteKeyPairGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_LAUNCH_TEMPLATE":
        /*



Deletes a launch template. Deleting a launch template deletes all of its versions.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLaunchTemplateGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_LAUNCH_TEMPLATE_VERSIONS":
        /*



Deletes one or more versions of a launch template. You cannot delete the default version of a launch template you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using &lt;a&gt;DeleteLaunchTemplate&lt;/a&gt;.


      Function parameters for this API region,launchTemplateVersion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLaunchTemplateVersionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_LOCAL_GATEWAY_ROUTE":
        /*



Deletes the specified route from the specified local gateway route table.


      Function parameters for this API destinationCidrBlock,localGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLocalGatewayRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION":
        /*



Deletes the specified association between a VPC and local gateway route table.


      Function parameters for this API localGatewayRouteTableVpcAssociationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLocalGatewayRouteTableVpcAssociationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NAT_GATEWAY":
        /*



Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.


      Function parameters for this API natGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNatGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_NETWORK_ACL_ENTRY":
        /*



Deletes the specified ingress or egress entry (rule) from the specified network ACL.


      Function parameters for this API region,egress,networkAclId,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkAclEntryGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NETWORK_ACL":
        /*



Deletes the specified network ACL. You can&#39;t delete the ACL if it&#39;s associated with any subnets. You can&#39;t delete the default network ACL.


      Function parameters for this API region,networkAclId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkAclGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_NETWORK_INTERFACE":
        /*



Deletes the specified network interface. You must detach the network interface before you can delete it.


      Function parameters for this API region,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkInterfaceGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NETWORK_INTERFACE_PERMISSION":
        /*



Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you&#39;re removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.


      Function parameters for this API networkInterfacePermissionId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkInterfacePermissionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_PLACEMENT_GROUP":
        /*



Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API region,groupName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeletePlacementGroupGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_QUEUED_RESERVED_INSTANCES":
        /*



Deletes the queued purchases for the specified Reserved Instances.


      Function parameters for this API region,reservedInstancesId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteQueuedReservedInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_ROUTE":
        /*



Deletes the specified route from the specified route table.


      Function parameters for this API region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteRouteGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_ROUTE_TABLE":
        /*



Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can&#39;t delete the main route table.


      Function parameters for this API region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteRouteTableGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SECURITY_GROUP":
        /*



&lt;p&gt;Deletes a security group.&lt;/p&gt; &lt;p&gt;If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with &lt;code&gt;InvalidGroup.InUse&lt;/code&gt; in EC2-Classic or &lt;code&gt;DependencyViolation&lt;/code&gt; in EC2-VPC.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSecurityGroupGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SNAPSHOT":
        /*



&lt;p&gt;Deletes the specified snapshot.&lt;/p&gt; &lt;p&gt;When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.&lt;/p&gt; &lt;p&gt;You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html\&quot;&gt;Deleting an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API snapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSnapshotGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Deletes the data feed for Spot Instances.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSpotDatafeedSubscriptionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_SUBNET":
        /*



Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.


      Function parameters for this API subnetId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSubnetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_TAGS":
        /*



&lt;p&gt;Deletes the specified set of tags from the specified set of resources.&lt;/p&gt; &lt;p&gt;To list the current tags, use &lt;a&gt;DescribeTags&lt;/a&gt;. For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,resourceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTagsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_FILTER":
        /*



&lt;p&gt;Deletes the specified Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorFilterGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_FILTER_RULE":
        /*



Deletes the specified Traffic Mirror rule.


      Function parameters for this API trafficMirrorFilterRuleId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorFilterRuleGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_SESSION":
        /*



Deletes the specified Traffic Mirror session.


      Function parameters for this API trafficMirrorSessionId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorSessionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_TARGET":
        /*



&lt;p&gt;Deletes the specified Traffic Mirror target.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.&lt;/p&gt;


      Function parameters for this API trafficMirrorTargetId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorTargetGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY":
        /*



Deletes the specified transit gateway.


      Function parameters for this API transitGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



Deletes the specified transit gateway multicast domain.


      Function parameters for this API transitGatewayMulticastDomainId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayMulticastDomainGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Deletes a transit gateway peering attachment.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayPeeringAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_ROUTE":
        /*



Deletes the specified route from the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,destinationCidrBlock,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.


      Function parameters for this API transitGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayRouteTableGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



Deletes the specified VPC attachment.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayVpcAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VOLUME":
        /*



&lt;p&gt;Deletes the specified EBS volume. The volume must be in the &lt;code&gt;available&lt;/code&gt; state (not attached to an instance).&lt;/p&gt; &lt;p&gt;The volume can remain in the &lt;code&gt;deleting&lt;/code&gt; state for several minutes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html\&quot;&gt;Deleting an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS":
        /*



Deletes one or more VPC endpoint connection notifications.


      Function parameters for this API region,connectionNotificationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointConnectionNotificationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS":
        /*



Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any &lt;code&gt;Available&lt;/code&gt; or &lt;code&gt;PendingAcceptance&lt;/code&gt; interface endpoint connections that are attached to the service.


      Function parameters for this API region,serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointServiceConfigurationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPC_ENDPOINTS":
        /*



Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.


      Function parameters for this API region,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPC":
        /*



Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.


      Function parameters for this API vpcId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPC_PEERING_CONNECTION":
        /*



Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it&#39;s in the &lt;code&gt;active&lt;/code&gt; state. The owner of the requester VPC can delete a VPC peering connection in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. You cannot delete a VPC peering connection that&#39;s in the &lt;code&gt;failed&lt;/code&gt; state.


      Function parameters for this API region,vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcPeeringConnectionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPN_CONNECTION":
        /*



&lt;p&gt;Deletes the specified VPN connection.&lt;/p&gt; &lt;p&gt;If you&#39;re deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.&lt;/p&gt;


      Function parameters for this API vpnConnectionId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnConnectionGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPN_CONNECTION_ROUTE":
        /*



Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.


      Function parameters for this API destinationCidrBlock,vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnConnectionRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPN_GATEWAY":
        /*



Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don&#39;t need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.


      Function parameters for this API vpnGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DEPROVISION_BYOIP_CIDR":
        /*



&lt;p&gt;Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.&lt;/p&gt; &lt;p&gt;Before you can release an address range, you must stop advertising it using &lt;a&gt;WithdrawByoipCidr&lt;/a&gt; and you must not have any IP addresses allocated from its address range.&lt;/p&gt;


      Function parameters for this API cidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeprovisionByoipCidrGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DEREGISTER_IMAGE":
        /*



&lt;p&gt;Deregisters the specified AMI. After you deregister an AMI, it can&#39;t be used to launch new instances however, it doesn&#39;t affect any instances that you&#39;ve already launched from the AMI. You&#39;ll continue to incur usage costs for those instances until you terminate them.&lt;/p&gt; &lt;p&gt;When you deregister an Amazon EBS-backed AMI, it doesn&#39;t affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn&#39;t affect the files that you uploaded to Amazon S3 when you created the AMI.&lt;/p&gt;


      Function parameters for this API imageId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS":
        /*



Deregisters the specified members (network interfaces) from the transit gateway multicast group.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterTransitGatewayMulticastGroupMembersGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES":
        /*



Deregisters the specified sources (network interfaces) from the transit gateway multicast group.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterTransitGatewayMulticastGroupSourcesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ACCOUNT_ATTRIBUTES":
        /*



&lt;p&gt;Describes attributes of your AWS account. The following are the supported account attributes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;supported-platforms&lt;/code&gt;: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;default-vpc&lt;/code&gt;: The ID of the default VPC for your account, or &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-instances&lt;/code&gt;: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits\&quot;&gt;On-Demand Instance Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-security-groups-per-interface&lt;/code&gt;: The maximum number of security groups that you can assign to a network interface.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAccountAttributesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ADDRESSES":
        /*



&lt;p&gt;Describes the specified Elastic IP addresses or all of your Elastic IP addresses.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAddressesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_AGGREGATE_ID_FORMAT":
        /*



&lt;p&gt;Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).&lt;/p&gt; &lt;p&gt;This request only returns information about resource types that support longer IDs.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAggregateIdFormatGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_AVAILABILITY_ZONES":
        /*



&lt;p&gt;Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.&lt;/p&gt; &lt;p&gt;For more information about Availability Zones and Local Zones, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\&quot;&gt;Regions and Availability Zones&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAvailabilityZonesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_BUNDLE_TASKS":
        /*



&lt;p&gt;Describes the specified bundle tasks or all of your bundle tasks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use &lt;code&gt;RegisterImage&lt;/code&gt; with the Amazon S3 bucket name and image manifest name you provided to the bundle task.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeBundleTasksGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_BYOIP_CIDRS":
        /*



&lt;p&gt;Describes the IP address ranges that were specified in calls to &lt;a&gt;ProvisionByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe the address pools that were created when you provisioned the address ranges, use &lt;a&gt;DescribePublicIpv4Pools&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,maxResults,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeByoipCidrsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_CAPACITY_RESERVATIONS":
        /*



Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you&#39;re currently using.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCapacityReservationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLASSIC_LINK_INSTANCES":
        /*



Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClassicLinkInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_AUTHORIZATION_RULES":
        /*



Describes the authorization rules for a specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnAuthorizationRulesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_CONNECTIONS":
        /*



Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_ENDPOINTS":
        /*



Describes one or more Client VPN endpoints in the account.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnEndpointsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_ROUTES":
        /*



Describes the routes for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnRoutesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_TARGET_NETWORKS":
        /*



Describes the target networks associated with the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnTargetNetworksGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_COIP_POOLS":
        /*



Describes the specified customer-owned address pools or all of your customer-owned address pools.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCoipPoolsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_CONVERSION_TASKS":
        /*



&lt;p&gt;Describes the specified conversion tasks or all your conversion tasks. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/\&quot;&gt;VM Import/Export User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeConversionTasksGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CUSTOMER_GATEWAYS":
        /*



&lt;p&gt;Describes one or more of your VPN customer gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCustomerGatewaysGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_DHCP_OPTIONS":
        /*



&lt;p&gt;Describes one or more of your DHCP options sets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeDhcpOptionsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_EGRESS_ONLY_INTERNET_GATEWAYS":
        /*



Describes one or more of your egress-only internet gateways.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeEgressOnlyInternetGatewaysGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ELASTIC_GPUS":
        /*



Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\&quot;&gt;Amazon Elastic Graphics&lt;/a&gt;.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeElasticGpusGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_EXPORT_IMAGE_TASKS":
        /*



Describes the specified export image tasks or all your export image tasks.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeExportImageTasksGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_EXPORT_TASKS":
        /*



Describes the specified export instance tasks or all your export instance tasks.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeExportTasksGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FAST_SNAPSHOT_RESTORES":
        /*



Describes the state of fast snapshot restores for your snapshots.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFastSnapshotRestoresGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FLEET_HISTORY":
        /*



&lt;p&gt;Describes the events for the specified EC2 Fleet during the specified time.&lt;/p&gt; &lt;p&gt;EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.&lt;/p&gt;


      Function parameters for this API region,fleetId,startTime,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetHistoryGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FLEET_INSTANCES":
        /*



Describes the running instances for the specified EC2 Fleet.


      Function parameters for this API region,fleetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FLEETS":
        /*



Describes the specified EC2 Fleets or all of your EC2 Fleets.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FLOW_LOGS":
        /*



Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFlowLogsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FPGA_IMAGE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified Amazon FPGA Image (AFI).


      Function parameters for this API region,fpgaImageId,attribute,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFpgaImageAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FPGA_IMAGES":
        /*



Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFpgaImagesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_HOST_RESERVATION_OFFERINGS":
        /*



&lt;p&gt;Describes the Dedicated Host reservations that are available to purchase.&lt;/p&gt; &lt;p&gt;The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Hosts Overview&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostReservationOfferingsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_HOST_RESERVATIONS":
        /*



Describes reservations that are associated with Dedicated Hosts in your account.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostReservationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_HOSTS":
        /*



&lt;p&gt;Describes the specified Dedicated Hosts or all your Dedicated Hosts.&lt;/p&gt; &lt;p&gt;The results describe only the Dedicated Hosts in the Region you&#39;re currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state &lt;code&gt;released&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IAM_INSTANCE_PROFILE_ASSOCIATIONS":
        /*



Describes your IAM instance profile associations.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIamInstanceProfileAssociationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the IAM user who makes the request they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the &lt;a&gt;ModifyIdFormat&lt;/a&gt; command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIdFormatGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IDENTITY_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.&lt;/p&gt;


      Function parameters for this API principalArn,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIdentityIdFormatGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMAGE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.


      Function parameters for this API attribute,imageId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImageAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMAGES":
        /*



&lt;p&gt;Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.&lt;/p&gt; &lt;p&gt;The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.&lt;/p&gt; &lt;p&gt;Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImagesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IMPORT_IMAGE_TASKS":
        /*



Displays details about an import virtual machine or import snapshot tasks that are already created.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImportImageTasksGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMPORT_SNAPSHOT_TASKS":
        /*



Describes your import snapshot tasks.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImportSnapshotTasksGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: &lt;code&gt;instanceType&lt;/code&gt; | &lt;code&gt;kernel&lt;/code&gt; | &lt;code&gt;ramdisk&lt;/code&gt; | &lt;code&gt;userData&lt;/code&gt; | &lt;code&gt;disableApiTermination&lt;/code&gt; | &lt;code&gt;instanceInitiatedShutdownBehavior&lt;/code&gt; | &lt;code&gt;rootDeviceName&lt;/code&gt; | &lt;code&gt;blockDeviceMapping&lt;/code&gt; | &lt;code&gt;productCodes&lt;/code&gt; | &lt;code&gt;sourceDestCheck&lt;/code&gt; | &lt;code&gt;groupSet&lt;/code&gt; | &lt;code&gt;ebsOptimized&lt;/code&gt; | &lt;code&gt;sriovNetSupport&lt;/code&gt;


      Function parameters for this API attribute,region,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_CREDIT_SPECIFICATIONS":
        /*



&lt;p&gt;Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the &lt;code&gt;unlimited&lt;/code&gt; credit option, as well as instances that were previously configured as T2, T3, and T3a with the &lt;code&gt;unlimited&lt;/code&gt; credit option. For example, if you resize a T2 instance, while it is configured as &lt;code&gt;unlimited&lt;/code&gt;, to an M4 instance, Amazon EC2 returns the M4 instance.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns the credit option (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;unlimited&lt;/code&gt;) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceCreditSpecificationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_STATUS":
        /*



&lt;p&gt;Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.&lt;/p&gt; &lt;p&gt;Instance status includes the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Status checks&lt;/b&gt; - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html\&quot;&gt;Status Checks for Your Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html\&quot;&gt;Troubleshooting Instances with Failed Status Checks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scheduled events&lt;/b&gt; - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html\&quot;&gt;Scheduled Events for Your Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Instance state&lt;/b&gt; - You can manage your instances from the moment you launch them through their termination. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceStatusGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_TYPE_OFFERINGS":
        /*



Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceTypeOfferingsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_TYPES":
        /*



Returns a list of all instance types offered in your current AWS Region. The results can be filtered by the attributes of the instance types.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceTypesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCES":
        /*



&lt;p&gt;Describes the specified instances or all of AWS account&#39;s instances.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_INTERNET_GATEWAYS":
        /*



Describes one or more of your internet gateways.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInternetGatewaysGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_KEY_PAIRS":
        /*



&lt;p&gt;Describes the specified key pairs or all of your key pairs.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeKeyPairsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_LAUNCH_TEMPLATE_VERSIONS":
        /*



Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLaunchTemplateVersionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LAUNCH_TEMPLATES":
        /*



Describes one or more launch templates.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLaunchTemplatesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATIONS":
        /*



Describes the associations between virtual interface groups and local gateway route tables.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATIONS":
        /*



Describes the specified associations between VPCs and local gateway route tables.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTableVpcAssociationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLES":
        /*



Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTablesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUPS":
        /*



Describes the specified local gateway virtual interface groups.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayVirtualInterfaceGroupsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACES":
        /*



Describes the specified local gateway virtual interfaces.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayVirtualInterfacesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAYS":
        /*



Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewaysGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_MOVING_ADDRESSES":
        /*



Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeMovingAddressesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NAT_GATEWAYS":
        /*



Describes one or more of your NAT gateways.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNatGatewaysGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_NETWORK_ACLS":
        /*



&lt;p&gt;Describes one or more of your network ACLs.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkAclsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Describes a network interface attribute. You can specify only one attribute at a time.


      Function parameters for this API region,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfaceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACE_PERMISSIONS":
        /*



Describes the permissions for your network interfaces.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfacePermissionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACES":
        /*



Describes one or more of your network interfaces.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfacesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PLACEMENT_GROUPS":
        /*



Describes the specified placement groups or all of your placement groups. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePlacementGroupsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PREFIX_LISTS":
        /*



Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePrefixListsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_PRINCIPAL_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. &lt;/p&gt; &lt;p&gt;By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePrincipalIdFormatGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PUBLIC_IPV4_POOLS":
        /*



Describes the specified IPv4 address pools.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePublicIpv4PoolsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_REGIONS":
        /*



&lt;p&gt;Describes the Regions that are enabled for your account, or all Regions.&lt;/p&gt; &lt;p&gt;For a list of the Regions supported by Amazon EC2, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region\&quot;&gt; Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about enabling and disabling Regions for your account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\&quot;&gt;Managing AWS Regions&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeRegionsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES":
        /*



&lt;p&gt;Describes one or more of the Reserved Instances that you purchased.&lt;/p&gt; &lt;p&gt;For more information about Reserved Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_LISTINGS":
        /*



&lt;p&gt;Describes your account&#39;s Reserved Instance listings in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.&lt;/p&gt; &lt;p&gt;As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you&#39;re searching for with what&#39;s available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesListingsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_MODIFICATIONS":
        /*



&lt;p&gt;Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesModificationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_OFFERINGS":
        /*



&lt;p&gt;Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.&lt;/p&gt; &lt;p&gt;If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesOfferingsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ROUTE_TABLES":
        /*



&lt;p&gt;Describes one or more of your route tables.&lt;/p&gt; &lt;p&gt;Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeRouteTablesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_SCHEDULED_INSTANCE_AVAILABILITY":
        /*



&lt;p&gt;Finds available schedules that meet the specified criteria.&lt;/p&gt; &lt;p&gt;You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.&lt;/p&gt; &lt;p&gt;After you find a schedule that meets your needs, call &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt; to purchase Scheduled Instances with that schedule.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeScheduledInstanceAvailabilityGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SCHEDULED_INSTANCES":
        /*



Describes the specified Scheduled Instances or all your Scheduled Instances.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeScheduledInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SECURITY_GROUP_REFERENCES":
        /*



[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you&#39;ve specified in this request.


      Function parameters for this API region,groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSecurityGroupReferencesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SECURITY_GROUPS":
        /*



&lt;p&gt;Describes the specified security groups or all of your security groups.&lt;/p&gt; &lt;p&gt;A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSecurityGroupsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,snapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSnapshotAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SNAPSHOTS":
        /*



&lt;p&gt;Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.&lt;/p&gt; &lt;p&gt;The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.&lt;/p&gt; &lt;p&gt;The create volume permissions fall into the following categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;public&lt;/i&gt;: The owner of the snapshot granted create volume permissions for the snapshot to the &lt;code&gt;all&lt;/code&gt; group. All AWS accounts have create volume permissions for these snapshots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;explicit&lt;/i&gt;: The owner of the snapshot granted create volume permissions to a specific AWS account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;implicit&lt;/i&gt;: An AWS account has implicit create volume permissions for all snapshots it owns.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot owners using the &lt;code&gt;OwnerIds&lt;/code&gt; option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, &lt;code&gt;amazon&lt;/code&gt; for snapshots owned by Amazon, or &lt;code&gt;self&lt;/code&gt; for snapshots that you own.&lt;/p&gt; &lt;p&gt;If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), &lt;code&gt;self&lt;/code&gt; for snapshots for which you own or have explicit permissions, or &lt;code&gt;all&lt;/code&gt; for public snapshots.&lt;/p&gt; &lt;p&gt;If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSnapshots&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSnapshotsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Describes the data feed for Spot Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotDatafeedSubscriptionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_INSTANCES":
        /*



Describes the running instances for the specified Spot Fleet.


      Function parameters for this API region,spotFleetRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_REQUEST_HISTORY":
        /*



&lt;p&gt;Describes the events for the specified Spot Fleet request during the specified time.&lt;/p&gt; &lt;p&gt;Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.&lt;/p&gt;


      Function parameters for this API region,spotFleetRequestId,startTime,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetRequestHistoryGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_REQUESTS":
        /*



&lt;p&gt;Describes your Spot Fleet requests.&lt;/p&gt; &lt;p&gt;Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetRequestsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_INSTANCE_REQUESTS":
        /*



&lt;p&gt;Describes the specified Spot Instance requests.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; to find a running Spot Instance by examining the response. If the status of the Spot Instance is &lt;code&gt;fulfilled&lt;/code&gt;, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use &lt;a&gt;DescribeInstances&lt;/a&gt; with a filter to look for instances where the instance lifecycle is &lt;code&gt;spot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We recommend that you set &lt;code&gt;MaxResults&lt;/code&gt; to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotInstanceRequestsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_PRICE_HISTORY":
        /*



&lt;p&gt;Describes the Spot price history. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html\&quot;&gt;Spot Instance Pricing History&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified the response merely indicates the last time that the price changed.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotPriceHistoryGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_STALE_SECURITY_GROUPS":
        /*



[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeStaleSecurityGroupsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SUBNETS":
        /*



&lt;p&gt;Describes one or more of your subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSubnetsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_TAGS":
        /*



&lt;p&gt;Describes the specified tags for your EC2 resources.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTagsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_FILTERS":
        /*



Describes one or more Traffic Mirror filters.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorFiltersGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_SESSIONS":
        /*



Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorSessionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_TARGETS":
        /*



Information about one or more Traffic Mirror targets.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorTargetsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_ATTACHMENTS":
        /*



Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayAttachmentsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_MULTICAST_DOMAINS":
        /*



Describes one or more transit gateway multicast domains.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayMulticastDomainsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_PEERING_ATTACHMENTS":
        /*



Describes your transit gateway peering attachments.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayPeeringAttachmentsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLES":
        /*



Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayRouteTablesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_VPC_ATTACHMENTS":
        /*



Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayVpcAttachmentsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAYS":
        /*



Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewaysGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUME_ATTRIBUTE":
        /*



&lt;p&gt;Describes the specified attribute of the specified volume. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumeAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUME_STATUS":
        /*



&lt;p&gt;Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume&#39;s underlying host. If the volume&#39;s underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DescribeVolumeStatus&lt;/code&gt; operation provides the following information about the specified volumes:&lt;/p&gt; &lt;p&gt; &lt;i&gt;Status&lt;/i&gt;: Reflects the current status of the volume. The possible values are &lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;impaired&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;insufficient-data&lt;/code&gt;. If all checks pass, the overall status of the volume is &lt;code&gt;ok&lt;/code&gt;. If the check fails, the overall status is &lt;code&gt;impaired&lt;/code&gt;. If the status is &lt;code&gt;insufficient-data&lt;/code&gt;, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html\&quot;&gt;Monitoring the Status of Your Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt;: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an &lt;code&gt;impaired&lt;/code&gt; status, then the volume event might be &lt;code&gt;potential-data-inconsistency&lt;/code&gt;. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Actions&lt;/i&gt;: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is &lt;code&gt;impaired&lt;/code&gt; and the volume event shows &lt;code&gt;potential-data-inconsistency&lt;/code&gt;, then the action shows &lt;code&gt;enable-volume-io&lt;/code&gt;. This means that you may want to enable the I/O operations for the volume by calling the &lt;a&gt;EnableVolumeIO&lt;/a&gt; action and then check the volume for data consistency.&lt;/p&gt; &lt;p&gt;Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the &lt;code&gt;error&lt;/code&gt; state (for example, when a volume is incapable of accepting I/O.)&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumeStatusGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VOLUMES":
        /*



&lt;p&gt;Describes the specified EBS volumes or all of your EBS volumes.&lt;/p&gt; &lt;p&gt;If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeVolumes&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VOLUMES_MODIFICATIONS":
        /*



&lt;p&gt;Reports the current modification status of EBS volumes.&lt;/p&gt; &lt;p&gt;Current-generation EBS volumes support modification of attributes including type, size, and (for &lt;code&gt;io1&lt;/code&gt; volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be &lt;code&gt;modifying&lt;/code&gt;, &lt;code&gt;optimizing&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, or &lt;code&gt;failed&lt;/code&gt;. If a volume has never been modified, then certain elements of the returned &lt;code&gt;VolumeModification&lt;/code&gt; objects are null. &lt;/p&gt; &lt;p&gt; You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications\&quot;&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumesModificationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ATTRIBUTE":
        /*



Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.


      Function parameters for this API attribute,vpcId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcAttributeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcClassicLinkDnsSupportGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_CLASSIC_LINK":
        /*



Describes the ClassicLink status of one or more VPCs.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcClassicLinkGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS":
        /*



Describes the connection notifications for VPC endpoints and VPC endpoint services.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointConnectionNotificationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_CONNECTIONS":
        /*



Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS":
        /*



Describes the VPC endpoint service configurations in your account (your services).


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServiceConfigurationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICE_PERMISSIONS":
        /*



Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.


      Function parameters for this API region,serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServicePermissionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICES":
        /*



Describes available services to which you can create a VPC endpoint.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServicesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINTS":
        /*



Describes one or more of your VPC endpoints.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VPC_PEERING_CONNECTIONS":
        /*



Describes one or more of your VPC peering connections.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcPeeringConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPCS":
        /*



Describes one or more of your VPCs.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VPN_CONNECTIONS":
        /*



&lt;p&gt;Describes one or more of your VPN connections.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpnConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPN_GATEWAYS":
        /*



&lt;p&gt;Describes one or more of your virtual private gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpnGatewaysGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DETACH_CLASSIC_LINK_VPC":
        /*



Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it&#39;s stopped.


      Function parameters for this API region,instanceId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachClassicLinkVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DETACH_INTERNET_GATEWAY":
        /*



Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.


      Function parameters for this API region,internetGatewayId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachInternetGatewayGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DETACH_NETWORK_INTERFACE":
        /*



Detaches a network interface from an instance.


      Function parameters for this API attachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachNetworkInterfaceGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DETACH_VOLUME":
        /*



&lt;p&gt;Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the &lt;code&gt;busy&lt;/code&gt; state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can&#39;t be detached while the instance is running. To detach the root volume, stop the instance first.&lt;/p&gt; &lt;p&gt;When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html\&quot;&gt;Detaching an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DETACH_VPN_GATEWAY":
        /*



&lt;p&gt;Detaches a virtual private gateway from a VPC. You do this if you&#39;re planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).&lt;/p&gt; &lt;p&gt;You must wait for the attachment&#39;s state to switch to &lt;code&gt;detached&lt;/code&gt; before you can delete the VPC or attach a different VPC to the virtual private gateway.&lt;/p&gt;


      Function parameters for this API vpcId,vpnGatewayId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachVpnGatewayGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DISABLE_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Disables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.&lt;/p&gt; &lt;p&gt;Disabling encryption by default does not change the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableEbsEncryptionByDefaultGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_FAST_SNAPSHOT_RESTORES":
        /*



Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.


      Function parameters for this API availabilityZone,sourceSnapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableFastSnapshotRestoresGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION":
        /*



Disables the specified resource attachment from propagating routes to the specified propagation route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableTransitGatewayRouteTablePropagationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VGW_ROUTE_PROPAGATION":
        /*



Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.


      Function parameters for this API gatewayId,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVgwRoutePropagationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it&#39;s linked. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVpcClassicLinkDnsSupportGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VPC_CLASSIC_LINK":
        /*



Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVpcClassicLinkGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_ADDRESS":
        /*



&lt;p&gt;Disassociates an Elastic IP address from the instance or network interface it&#39;s associated with.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateAddressGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DISASSOCIATE_CLIENT_VPN_TARGET_NETWORK":
        /*



&lt;p&gt;Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The route that was automatically added for the VPC is deleted&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All active client connections are terminated&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New client connections are disallowed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Client VPN endpoint&#39;s status changes to &lt;code&gt;pending-associate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API clientVpnEndpointId,associationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateClientVpnTargetNetworkGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_IAM_INSTANCE_PROFILE":
        /*



&lt;p&gt;Disassociates an IAM instance profile from a running or stopped instance.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateIamInstanceProfileGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_ROUTE_TABLE":
        /*



&lt;p&gt;Disassociates a subnet from a route table.&lt;/p&gt; &lt;p&gt;After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC&#39;s main route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API associationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateRouteTableGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_SUBNET_CIDR_BLOCK":
        /*



Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateSubnetCidrBlockGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



Disassociates the specified subnets from the transit gateway multicast domain.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateTransitGatewayMulticastDomainGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Disassociates a resource attachment from a transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateTransitGatewayRouteTableGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_VPC_CIDR_BLOCK":
        /*



&lt;p&gt;Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using &lt;a&gt;DescribeVpcs&lt;/a&gt;. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. &lt;/p&gt; &lt;p&gt;You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateVpcCidrBlockGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Enables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enabling encryption by default has no effect on the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\&quot;&gt;Supported Instance Types&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableEbsEncryptionByDefaultGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_FAST_SNAPSHOT_RESTORES":
        /*



&lt;p&gt;Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.&lt;/p&gt; &lt;p&gt;You get the full benefit of fast snapshot restores after they enter the &lt;code&gt;enabled&lt;/code&gt; state. To get the current state of fast snapshot restores, use &lt;a&gt;DescribeFastSnapshotRestores&lt;/a&gt;. To disable fast snapshot restores, use &lt;a&gt;DisableFastSnapshotRestores&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,sourceSnapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableFastSnapshotRestoresGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION":
        /*



Enables the specified attachment to propagate routes to the specified propagation route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableTransitGatewayRouteTablePropagationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VGW_ROUTE_PROPAGATION":
        /*



Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.


      Function parameters for this API gatewayId,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVgwRoutePropagationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VOLUME_I_O":
        /*



Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.


      Function parameters for this API region,volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVolumeIOGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ENABLE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVpcClassicLinkDnsSupportGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VPC_CLASSIC_LINK":
        /*



Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the &lt;code&gt;10.0.0.0/8&lt;/code&gt; IP address range, excluding local routes for VPCs in the &lt;code&gt;10.0.0.0/16&lt;/code&gt; and &lt;code&gt;10.1.0.0/16&lt;/code&gt; IP address ranges. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API region,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVpcClassicLinkGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_EXPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST":
        /*



Downloads the client certificate revocation list for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportClientVpnClientCertificateRevocationListGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_EXPORT_CLIENT_VPN_CLIENT_CONFIGURATION":
        /*



Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportClientVpnClientConfigurationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_EXPORT_IMAGE":
        /*



Exports an Amazon Machine Image (AMI) to a VM file. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html\&quot;&gt;Exporting a VM Directory from an Amazon Machine Image (AMI)&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.


      Function parameters for this API diskImageFormat,region,imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_EXPORT_TRANSIT_GATEWAY_ROUTES":
        /*



Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.


      Function parameters for this API transitGatewayRouteTableId,s3Bucket,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportTransitGatewayRoutesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_CAPACITY_RESERVATION_USAGE":
        /*



Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner&#39;s usage.


      Function parameters for this API capacityReservationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetCapacityReservationUsageGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_COIP_POOL_USAGE":
        /*



Describes the allocations from the specified customer-owned address pool.


      Function parameters for this API poolId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetCoipPoolUsageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_CONSOLE_OUTPUT":
        /*



&lt;p&gt;Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.&lt;/p&gt; &lt;p&gt;By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.&lt;/p&gt; &lt;p&gt;You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output\&quot;&gt;Instance Console Output&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetConsoleOutputGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_CONSOLE_SCREENSHOT":
        /*



&lt;p&gt;Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.&lt;/p&gt; &lt;p&gt;The returned content is Base64-encoded.&lt;/p&gt;


      Function parameters for this API region,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetConsoleScreenshotGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_DEFAULT_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Describes the default credit option for CPU usage of a burstable performance instance family.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceFamily,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetDefaultCreditSpecificationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetEbsDefaultKmsKeyIdGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Describes whether EBS encryption by default is enabled for your account in the current Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetEbsEncryptionByDefaultGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_HOST_RESERVATION_PURCHASE_PREVIEW":
        /*



&lt;p&gt;Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.&lt;/p&gt; &lt;p&gt;This is a preview of the &lt;a&gt;PurchaseHostReservation&lt;/a&gt; action and does not result in the offering being purchased.&lt;/p&gt;


      Function parameters for this API hostIdSet,offeringId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetHostReservationPurchasePreviewGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_LAUNCH_TEMPLATE_DATA":
        /*



Retrieves the configuration data of the specified instance. You can use this data to create a launch template.


      Function parameters for this API region,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetLaunchTemplateDataGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_PASSWORD_DATA":
        /*



&lt;p&gt;Retrieves the encrypted administrator password for a running Windows instance.&lt;/p&gt; &lt;p&gt;The Windows password is generated at boot by the &lt;code&gt;EC2Config&lt;/code&gt; service or &lt;code&gt;EC2Launch&lt;/code&gt; scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html\&quot;&gt;EC2Config&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html\&quot;&gt;EC2Launch&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;EC2Config&lt;/code&gt; service, the password is not generated for rebundled AMIs unless &lt;code&gt;Ec2SetPassword&lt;/code&gt; is enabled before bundling.&lt;/p&gt; &lt;p&gt;The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.&lt;/p&gt; &lt;p&gt;When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it&#39;s available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetPasswordDataGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_RESERVED_INSTANCES_EXCHANGE_QUOTE":
        /*



Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use &lt;a&gt;AcceptReservedInstancesExchangeQuote&lt;/a&gt; to perform the exchange.


      Function parameters for this API region,reservedInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetReservedInstancesExchangeQuoteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ATTACHMENT_PROPAGATIONS":
        /*



Lists the route tables to which the specified resource attachment propagates routes.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayAttachmentPropagationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS":
        /*



Gets information about the associations for the transit gateway multicast domain.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayMulticastDomainAssociationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ROUTE_TABLE_ASSOCIATIONS":
        /*



Gets information about the associations for the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayRouteTableAssociationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATIONS":
        /*



Gets information about the route table propagations for the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayRouteTablePropagationsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_IMPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST":
        /*



&lt;p&gt;Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.&lt;/p&gt; &lt;p&gt;Uploading a client certificate revocation list resets existing client connections.&lt;/p&gt;


      Function parameters for this API clientVpnEndpointId,certificateRevocationList,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportClientVpnClientCertificateRevocationListGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_IMPORT_IMAGE":
        /*



Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html\&quot;&gt;Importing a VM as an Image Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_INSTANCE":
        /*



&lt;p&gt;Creates an import instance task using metadata from the specified disk image. &lt;code&gt;ImportInstance&lt;/code&gt; only supports single-volume VMs. To import multi-volume VMs, use &lt;a&gt;ImportImage&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,platform,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportInstanceGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_KEY_PAIR":
        /*



&lt;p&gt;Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with &lt;a&gt;CreateKeyPair&lt;/a&gt;, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,keyName,publicKeyMaterial,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportKeyPairGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_SNAPSHOT":
        /*



Imports a disk into an EBS snapshot.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportSnapshotGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_VOLUME":
        /*



&lt;p&gt;Creates an import volume task using metadata from the specified disk image.For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html\&quot;&gt;Importing Disks to Amazon EBS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_CAPACITY_RESERVATION":
        /*



Modifies a Capacity Reservation&#39;s capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation&#39;s instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.


      Function parameters for this API capacityReservationId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyCapacityReservationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_CLIENT_VPN_ENDPOINT":
        /*



Modifies the specified Client VPN endpoint. You can only modify an endpoint&#39;s server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyClientVpnEndpointGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_DEFAULT_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ModifyDefaultCreditSpecification&lt;/code&gt; is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call &lt;code&gt;GetDefaultCreditSpecification&lt;/code&gt; and check &lt;code&gt;DefaultCreditSpecification&lt;/code&gt; for updates.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceFamily,cpuCredits,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyDefaultCreditSpecificationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.&lt;/p&gt; &lt;p&gt;AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;. Amazon EBS does not support asymmetric CMKs.&lt;/p&gt; &lt;p&gt;If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API kmsKeyId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyEbsDefaultKmsKeyIdGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_FLEET":
        /*



&lt;p&gt;Modifies the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can only modify an EC2 Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the EC2 Fleet is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;


      Function parameters for this API region,fleetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyFleetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_FPGA_IMAGE_ATTRIBUTE":
        /*



Modifies the specified attribute of the specified Amazon FPGA Image (AFI).


      Function parameters for this API region,fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyFpgaImageAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_HOSTS":
        /*



&lt;p&gt;Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of &lt;code&gt;host&lt;/code&gt; but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.&lt;/p&gt; &lt;p&gt;You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.&lt;/p&gt;


      Function parameters for this API hostId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyHostsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_ID_FORMAT":
        /*



&lt;p&gt;Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.&lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This setting applies to the IAM user who makes the request it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you&#39;re using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API resource,useLongIds,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyIdFormatGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_IDENTITY_ID_FORMAT":
        /*



&lt;p&gt;Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. &lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This setting applies to the principal specified in the request it does not apply to the principal that makes the request. &lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API principalArn,resource,useLongIds,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyIdentityIdFormatGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_IMAGE_ATTRIBUTE":
        /*



&lt;p&gt;Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the &lt;code&gt;Attribute&lt;/code&gt; parameter to specify the attribute or one of the following parameters: &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;LaunchPermission&lt;/code&gt;, or &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.&lt;/p&gt; &lt;p&gt;To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.&lt;/p&gt;


      Function parameters for this API imageId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyImageAttributeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_INSTANCE_ATTRIBUTE":
        /*



&lt;p&gt;Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the &lt;a&gt;ModifyNetworkInterfaceAttribute&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To modify some attributes, the instance must be stopped. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html\&quot;&gt;Modifying Attributes of a Stopped Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_CAPACITY_RESERVATION_ATTRIBUTES":
        /*



Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any &lt;code&gt;open&lt;/code&gt; Capacity Reservation with matching attributes, or run On-Demand Instance capacity.


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceCapacityReservationAttributesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceCreditSpecification,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceCreditSpecificationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_EVENT_START_TIME":
        /*



Modifies the start time for a scheduled Amazon EC2 instance event.


      Function parameters for this API region,instanceId,instanceEventId,notBefore,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceEventStartTimeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_METADATA_OPTIONS":
        /*



Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance Metadata and User Data&lt;/a&gt;.


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceMetadataOptionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_PLACEMENT":
        /*



&lt;p&gt;Modifies the placement attributes for a specified instance. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the affinity between an instance and a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Host&lt;/a&gt;. When affinity is set to &lt;code&gt;host&lt;/code&gt; and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the Dedicated Host with which an instance is associated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the instance tenancy of an instance from &lt;code&gt;host&lt;/code&gt; to &lt;code&gt;dedicated&lt;/code&gt;, or from &lt;code&gt;dedicated&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Move an instance to or from a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;placement group&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.&lt;/p&gt; &lt;p&gt;To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstancePlacementGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_LAUNCH_TEMPLATE":
        /*



Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyLaunchTemplateGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.


      Function parameters for this API region,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyNetworkInterfaceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_RESERVED_INSTANCES":
        /*



&lt;p&gt;Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;


      Function parameters for this API reservedInstancesId,reservedInstancesConfigurationSetItemType,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyReservedInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot&#39;s list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.&lt;/p&gt; &lt;p&gt;Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API snapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySnapshotAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SPOT_FLEET_REQUEST":
        /*



&lt;p&gt;Modifies the specified Spot Fleet request.&lt;/p&gt; &lt;p&gt;You can only modify a Spot Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the Spot Fleet request is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;


      Function parameters for this API spotFleetRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySpotFleetRequestGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SUBNET_ATTRIBUTE":
        /*



Modifies a subnet attribute. You can only modify one attribute at a time.


      Function parameters for this API subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySubnetAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_FILTER_NETWORK_SERVICES":
        /*



&lt;p&gt;Allows or restricts mirroring network services.&lt;/p&gt; &lt;p&gt; By default, Amazon DNS network services are not eligible for Traffic Mirror. Use &lt;code&gt;AddNetworkServices&lt;/code&gt; to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use &lt;code&gt;RemoveNetworkServices&lt;/code&gt; to remove the network services from the Traffic Mirror filter. &lt;/p&gt; &lt;p&gt;For information about filter rule properties, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html\&quot;&gt;Network Services&lt;/a&gt; in the &lt;i&gt;Traffic Mirroring User Guide &lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorFilterNetworkServicesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_FILTER_RULE":
        /*



&lt;p&gt;Modifies the specified Traffic Mirror rule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DestinationCidrBlock&lt;/code&gt; and &lt;code&gt;SourceCidrBlock&lt;/code&gt; must both be an IPv4 range or an IPv6 range.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterRuleId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorFilterRuleGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_SESSION":
        /*



Modifies a Traffic Mirror session.


      Function parameters for this API trafficMirrorSessionId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorSessionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



Modifies the specified VPC attachment.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTransitGatewayVpcAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VOLUME_ATTRIBUTE":
        /*



&lt;p&gt;Modifies a volume attribute.&lt;/p&gt; &lt;p&gt;By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.&lt;/p&gt; &lt;p&gt;You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.&lt;/p&gt;


      Function parameters for this API volumeId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVolumeAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VOLUME":
        /*



&lt;p&gt;You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt;. For more information about modifying an EBS volume running Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you complete a resize operation on your volume, you need to extend the volume&#39;s file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux\&quot;&gt;Extending a Linux File System&lt;/a&gt;. For information about extending a Windows file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows\&quot;&gt;Extending a Windows File System&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. You can also track the status of a modification using &lt;a&gt;DescribeVolumesModifications&lt;/a&gt;. For information about tracking status changes using either method, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.&lt;/p&gt;


      Function parameters for this API region,volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVolumeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ATTRIBUTE":
        /*



Modifies the specified attribute of the specified VPC.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcAttributeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_CONNECTION_NOTIFICATION":
        /*



Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.


      Function parameters for this API region,connectionNotificationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointConnectionNotificationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_ENDPOINT":
        /*



Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API region,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_SERVICE_CONFIGURATION":
        /*



Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.


      Function parameters for this API region,serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointServiceConfigurationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_SERVICE_PERMISSIONS":
        /*



&lt;p&gt;Modifies the permissions for your &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC endpoint service&lt;/a&gt;. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.&lt;/p&gt; &lt;p&gt;If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.&lt;/p&gt;


      Function parameters for this API region,serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointServicePermissionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_PEERING_CONNECTION_OPTIONS":
        /*



&lt;p&gt;Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between an EC2-Classic instance that&#39;s linked to your VPC (using ClassicLink) and instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that&#39;s linked to the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; command.&lt;/p&gt;


      Function parameters for this API region,vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcPeeringConnectionOptionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_TENANCY":
        /*



&lt;p&gt;Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to &lt;code&gt;default&lt;/code&gt; only. You cannot change the instance tenancy attribute to &lt;code&gt;dedicated&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of &lt;code&gt;default&lt;/code&gt;, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,instanceTenancy,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcTenancyGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPN_CONNECTION":
        /*



&lt;p&gt;Modifies the target gateway of an AWS Site-to-Site VPN connection. The following migration options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a new virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a new transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before you perform the migration to the new gateway, you must configure the new gateway. Use &lt;a&gt;CreateVpnGateway&lt;/a&gt; to create a virtual private gateway, or &lt;a&gt;CreateTransitGateway&lt;/a&gt; to create a transit gateway.&lt;/p&gt; &lt;p&gt;This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. &lt;/p&gt; &lt;p&gt;You must delete the static routes before you migrate to the new gateway.&lt;/p&gt; &lt;p&gt;Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.&lt;/p&gt; &lt;p&gt;After you migrate to the new gateway, you might need to modify your VPC route table. Use &lt;a&gt;CreateRoute&lt;/a&gt; and &lt;a&gt;DeleteRoute&lt;/a&gt; to make the changes described in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing\&quot;&gt;VPN Gateway Target Modification Required VPC Route Table Updates&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use &lt;a&gt;CreateTransitGatewayRoute&lt;/a&gt; to add the routes.&lt;/p&gt; &lt;p&gt; If you deleted VPN static routes, you must add the static routes to the transit gateway route table.&lt;/p&gt; &lt;p&gt;After you perform this operation, the AWS VPN endpoint&#39;s IP addresses on the AWS side and the tunnel options remain intact. Your s2slong connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints &lt;/p&gt;


      Function parameters for this API vpnConnectionId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnConnectionGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPN_TUNNEL_CERTIFICATE":
        /*



Modifies the VPN tunnel endpoint certificate.


      Function parameters for this API vpnConnectionId,vpnTunnelOutsideIpAddress,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnTunnelCertificateGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPN_TUNNEL_OPTIONS":
        /*



Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html\&quot;&gt;Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.


      Function parameters for this API vpnConnectionId,vpnTunnelOutsideIpAddress,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnTunnelOptionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MONITOR_INSTANCES":
        /*



&lt;p&gt;Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To disable detailed monitoring, see .&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionMonitorInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MOVE_ADDRESS_TO_VPC":
        /*



Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the &lt;a&gt;RestoreAddressToClassic&lt;/a&gt; request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.


      Function parameters for this API region,publicIp,opts
        */
        return new Promise((resolve, reject) => {
          this.actionMoveAddressToVpcGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_PROVISION_BYOIP_CIDR":
        /*



&lt;p&gt;Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using &lt;a&gt;AdvertiseByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from &lt;code&gt;pending-provision&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;. To monitor the status of an address range, use &lt;a&gt;DescribeByoipCidrs&lt;/a&gt;. To allocate an Elastic IP address from your address pool, use &lt;a&gt;AllocateAddress&lt;/a&gt; with either the specific address from the address pool or the ID of the address pool.&lt;/p&gt;


      Function parameters for this API cidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionProvisionByoipCidrGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_PURCHASE_HOST_RESERVATION":
        /*



Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.


      Function parameters for this API hostIdSet,offeringId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseHostReservationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_PURCHASE_RESERVED_INSTANCES_OFFERING":
        /*



&lt;p&gt;Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeReservedInstancesOfferings&lt;/a&gt; to get a list of Reserved Instance offerings that match your specifications. After you&#39;ve purchased a Reserved Instance, you can check for your new Reserved Instance with &lt;a&gt;DescribeReservedInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceCount,reservedInstancesOfferingId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseReservedInstancesOfferingGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_PURCHASE_SCHEDULED_INSTANCES":
        /*



&lt;p&gt;Purchases the Scheduled Instances with the specified schedule.&lt;/p&gt; &lt;p&gt;Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call &lt;a&gt;DescribeScheduledInstanceAvailability&lt;/a&gt; to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call &lt;a&gt;RunScheduledInstances&lt;/a&gt; during each scheduled time period.&lt;/p&gt; &lt;p&gt;After you purchase a Scheduled Instance, you can&#39;t cancel, modify, or resell your purchase.&lt;/p&gt;


      Function parameters for this API region,purchaseRequest,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseScheduledInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REBOOT_INSTANCES":
        /*



&lt;p&gt;Requests a reboot of the specified instances. This operation is asynchronous it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.&lt;/p&gt; &lt;p&gt;If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html\&quot;&gt;Getting Console Output and Rebooting Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRebootInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REGISTER_IMAGE":
        /*



&lt;p&gt;Registers an AMI. When you&#39;re creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html\&quot;&gt;Creating Your Own AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For Amazon EBS-backed instances, &lt;a&gt;CreateImage&lt;/a&gt; creates and registers the AMI in a single request, so you don&#39;t have to register the AMI yourself.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also use &lt;code&gt;RegisterImage&lt;/code&gt; to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html\&quot;&gt;Launching a Linux Instance from a Backup&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.&lt;/p&gt; &lt;p&gt;Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Launch an instance from an existing AMI with that billing product code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Customize the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new AMI from the instance using &lt;a&gt;CreateImage&lt;/a&gt; to preserve the billing product code association.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. &lt;/p&gt; &lt;p&gt;If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.&lt;/p&gt;


      Function parameters for this API region,name,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterImageGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS":
        /*



&lt;p&gt;Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Consideration&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the members, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the members were added to the transit gateway multicast group.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterTransitGatewayMulticastGroupMembersGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES":
        /*



&lt;p&gt;Registers sources (network interfaces) with the specified transit gateway multicast group.&lt;/p&gt; &lt;p&gt;A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Considerations&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the source, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the source was added to the multicast group.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterTransitGatewayMulticastGroupSourcesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Rejects a transit gateway peering attachment request.


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectTransitGatewayPeeringAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Rejects a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;AcceptTransitGatewayVpcAttachment&lt;/a&gt; to accept a VPC attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayAttachmentId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectTransitGatewayVpcAttachmentGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_VPC_ENDPOINT_CONNECTIONS":
        /*



Rejects one or more VPC endpoint connection requests to your VPC endpoint service.


      Function parameters for this API region,serviceId,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectVpcEndpointConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_VPC_PEERING_CONNECTION":
        /*



Rejects a VPC peering connection request. The VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. Use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use &lt;a&gt;DeleteVpcPeeringConnection&lt;/a&gt;.


      Function parameters for this API region,vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectVpcPeeringConnectionGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RELEASE_ADDRESS":
        /*



&lt;p&gt;Releases the specified Elastic IP address.&lt;/p&gt; &lt;p&gt;[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it&#39;s associated with. To disassociate an Elastic IP address without releasing it, use &lt;a&gt;DisassociateAddress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;[Nondefault VPC] You must use &lt;a&gt;DisassociateAddress&lt;/a&gt; to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (&lt;code&gt;InvalidIPAddress.InUse&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you&#39;ll get an &lt;code&gt;AuthFailure&lt;/code&gt; error if the address is already allocated to another AWS account.&lt;/p&gt; &lt;p&gt;[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see &lt;a&gt;AllocateAddress&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReleaseAddressGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RELEASE_HOSTS":
        /*



&lt;p&gt;When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into &lt;code&gt;released&lt;/code&gt; state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.&lt;/p&gt; &lt;p&gt;When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.&lt;/p&gt; &lt;p&gt;Released hosts still appear in a &lt;a&gt;DescribeHosts&lt;/a&gt; response.&lt;/p&gt;


      Function parameters for this API hostId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReleaseHostsGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REPLACE_IAM_INSTANCE_PROFILE_ASSOCIATION":
        /*



&lt;p&gt;Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that&#39;s associated with an instance without having to disassociate the existing IAM instance profile first.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceIamInstanceProfileAssociationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_NETWORK_ACL_ASSOCIATION":
        /*



&lt;p&gt;Changes which network ACL a subnet is associated with. By default when you create a subnet, it&#39;s automatically associated with the default network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation.&lt;/p&gt;


      Function parameters for this API associationId,region,networkAclId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceNetworkAclAssociationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_NETWORK_ACL_ENTRY":
        /*



Replaces an entry (rule) in a network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API region,egress,networkAclId,protocol,ruleAction,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceNetworkAclEntryGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_ROUTE":
        /*



&lt;p&gt;Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceRouteGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REPLACE_ROUTE_TABLE_ASSOCIATION":
        /*



&lt;p&gt;Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can also use this operation to change which table is the main route table in the VPC. Specify the main route table&#39;s association ID and the route table ID of the new main route table.&lt;/p&gt;


      Function parameters for this API associationId,region,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceRouteTableAssociationGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_TRANSIT_GATEWAY_ROUTE":
        /*



Replaces the specified route in the specified transit gateway route table.


      Function parameters for this API destinationCidrBlock,transitGatewayRouteTableId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceTransitGatewayRouteGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPORT_INSTANCE_STATUS":
        /*



&lt;p&gt;Submits feedback about the status of an instance. The instance must be in the &lt;code&gt;running&lt;/code&gt; state. If your experience with the instance differs from the instance status returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;, use &lt;a&gt;ReportInstanceStatus&lt;/a&gt; to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.&lt;/p&gt; &lt;p&gt;Use of this action does not change the value returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API region,instanceId,reasonCode,status,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReportInstanceStatusGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REQUEST_SPOT_FLEET":
        /*



&lt;p&gt;Creates a Spot Fleet request.&lt;/p&gt; &lt;p&gt;The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.&lt;/p&gt; &lt;p&gt;You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.&lt;/p&gt; &lt;p&gt;Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.&lt;/p&gt; &lt;p&gt;You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the &lt;code&gt;instance&lt;/code&gt; resource type is supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html\&quot;&gt;Spot Fleet Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRequestSpotFleetGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REQUEST_SPOT_INSTANCES":
        /*



&lt;p&gt;Creates a Spot Instance request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html\&quot;&gt;Spot Instance Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRequestSpotInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RESET_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.&lt;/p&gt; &lt;p&gt;After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetEbsDefaultKmsKeyIdGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_FPGA_IMAGE_ATTRIBUTE":
        /*



Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.


      Function parameters for this API region,fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetFpgaImageAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_IMAGE_ATTRIBUTE":
        /*



&lt;p&gt;Resets an attribute of an AMI to its default value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The productCodes attribute can&#39;t be reset.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API attribute,imageId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetImageAttributeGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RESET_INSTANCE_ATTRIBUTE":
        /*



&lt;p&gt;Resets an attribute of an instance to its default value. To reset the &lt;code&gt;kernel&lt;/code&gt; or &lt;code&gt;ramdisk&lt;/code&gt;, the instance must be in a stopped state. To reset the &lt;code&gt;sourceDestCheck&lt;/code&gt;, the instance can be either running or stopped.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;sourceDestCheck&lt;/code&gt; attribute controls whether source/destination checking is enabled. The default value is &lt;code&gt;true&lt;/code&gt;, which means checking is enabled. This value must be &lt;code&gt;false&lt;/code&gt; for a NAT instance to perform NAT. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\&quot;&gt;NAT Instances&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,region,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetInstanceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Resets a network interface attribute. You can specify only one attribute at a time.


      Function parameters for this API region,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetNetworkInterfaceAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Resets permission settings for the specified snapshot.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,snapshotId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetSnapshotAttributeGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESTORE_ADDRESS_TO_CLASSIC":
        /*



Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.


      Function parameters for this API region,publicIp,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRestoreAddressToClassicGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_CLIENT_VPN_INGRESS":
        /*



Removes an ingress authorization rule from a Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,targetNetworkCidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeClientVpnIngressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_SECURITY_GROUP_EGRESS":
        /*



&lt;p&gt;[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn&#39;t apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;p&gt;Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;


      Function parameters for this API region,groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeSecurityGroupEgressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_SECURITY_GROUP_INGRESS":
        /*



&lt;p&gt;Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;note&gt; &lt;p&gt;[EC2-Classic only] If the values you specify do not match the existing rule&#39;s values, no error is returned. Use &lt;a&gt;DescribeSecurityGroups&lt;/a&gt; to verify that the rule has been removed.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeSecurityGroupIngressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RUN_INSTANCES":
        /*



&lt;p&gt;Launches the specified number of instances using an AMI for which you have permissions. &lt;/p&gt; &lt;p&gt;You can specify a number of options, or leave the default options. The following rules apply:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] If you don&#39;t specify a subnet ID, we choose a default subnet from your default VPC for you. If you don&#39;t have a default VPC, you must specify a subnet ID in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-Classic] If don&#39;t specify an Availability Zone, we choose one for you.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types\&quot;&gt;Instance Types Available Only in a VPC&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don&#39;t specify this address, we choose one from the IPv4 range of your subnet.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Not all instance types support IPv6 addresses. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify a security group ID, we use the default security group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Security Groups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\&quot;&gt;launch template&lt;/a&gt;, which is a resource that contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify the launch template instead of specifying the launch parameters.&lt;/p&gt; &lt;p&gt;To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.&lt;/p&gt; &lt;p&gt;An instance is ready for you to use when it&#39;s in the &lt;code&gt;running&lt;/code&gt; state. You can check the state of your instance using &lt;a&gt;DescribeInstances&lt;/a&gt;. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see &lt;a&gt;CreateTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html\&quot;&gt;What To Do If An Instance Immediately Terminates&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html\&quot;&gt;Troubleshooting Connecting to Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API maxCount,minCount,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRunInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RUN_SCHEDULED_INSTANCES":
        /*



&lt;p&gt;Launches the specified Scheduled Instances.&lt;/p&gt; &lt;p&gt;Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You must launch a Scheduled Instance during its scheduled time period. You can&#39;t stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html\&quot;&gt;Scheduled Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API region,scheduledInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRunScheduledInstancesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_LOCAL_GATEWAY_ROUTES":
        /*



Searches for routes in the specified local gateway route table.


      Function parameters for this API localGatewayRouteTableId,filter,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchLocalGatewayRoutesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_TRANSIT_GATEWAY_MULTICAST_GROUPS":
        /*



Searches one or more transit gateway multicast groups and returns the group membership information.


      Function parameters for this API region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchTransitGatewayMulticastGroupsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_TRANSIT_GATEWAY_ROUTES":
        /*



Searches for routes in the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,filter,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchTransitGatewayRoutesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEND_DIAGNOSTIC_INTERRUPT":
        /*



&lt;p&gt;Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a &lt;i&gt;kernel panic&lt;/i&gt; (on Linux instances), or a &lt;i&gt;blue screen&lt;/i&gt;/&lt;i&gt;stop error&lt;/i&gt; (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a &lt;i&gt;non-maskable interrupt&lt;/i&gt; (NMI).&lt;/p&gt; &lt;p&gt;In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.&lt;/p&gt; &lt;p&gt;Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.&lt;/p&gt; &lt;p&gt;For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Linux instances) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Windows instances).&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSendDiagnosticInterruptGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_START_INSTANCES":
        /*



&lt;p&gt;Starts an Amazon EBS-backed instance that you&#39;ve previously stopped.&lt;/p&gt; &lt;p&gt;Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.&lt;/p&gt; &lt;p&gt;Performing this operation on an instance that uses an instance store as its root device returns an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html\&quot;&gt;Stopping Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionStartInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_STOP_INSTANCES":
        /*



&lt;p&gt;Stops an Amazon EBS-backed instance.&lt;/p&gt; &lt;p&gt;You can use the Stop action to hibernate an instance if the instance is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation\&quot;&gt;enabled for hibernation&lt;/a&gt; and it meets the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\&quot;&gt;hibernation prerequisites&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\&quot;&gt;Hibernate Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;We don&#39;t charge usage for a stopped instance, or data transfer fees however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;You can&#39;t start, stop, or hibernate Spot Instances, and you can&#39;t stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances\&quot;&gt;Hibernating Interrupted Spot Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.&lt;/p&gt; &lt;p&gt;Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html\&quot;&gt;Troubleshooting Stopping Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionStopInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_TERMINATE_CLIENT_VPN_CONNECTIONS":
        /*



Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.


      Function parameters for this API clientVpnEndpointId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionTerminateClientVpnConnectionsGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_TERMINATE_INSTANCES":
        /*



&lt;p&gt;Shuts down the specified instances. This operation is idempotent if you terminate an instance more than once, each call succeeds. &lt;/p&gt; &lt;p&gt;If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.&lt;/p&gt; &lt;p&gt;Terminated instances remain visible after termination (for approximately one hour).&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.&lt;/p&gt; &lt;p&gt;You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the &lt;code&gt;DeleteOnTermination&lt;/code&gt; block device mapping parameter set to &lt;code&gt;true&lt;/code&gt; are automatically deleted. For more information about the differences between stopping and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html\&quot;&gt;Troubleshooting Terminating Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionTerminateInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_UNASSIGN_IPV6_ADDRESSES":
        /*



Unassigns one or more IPv6 addresses from a network interface.


      Function parameters for this API ipv6Addresses,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnassignIpv6AddressesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UNASSIGN_PRIVATE_IP_ADDRESSES":
        /*



Unassigns one or more secondary private IP addresses from a network interface.


      Function parameters for this API networkInterfaceId,privateIpAddress,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnassignPrivateIpAddressesGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UNMONITOR_INSTANCES":
        /*



Disables detailed monitoring for a running instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API instanceId,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnmonitorInstancesGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_EGRESS":
        /*



&lt;p&gt;[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;


      Function parameters for this API region,ipPermissions,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUpdateSecurityGroupRuleDescriptionsEgressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_INGRESS":
        /*



&lt;p&gt;Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;


      Function parameters for this API region,ipPermissions,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUpdateSecurityGroupRuleDescriptionsIngressGet(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_WITHDRAW_BYOIP_CIDR":
        /*



&lt;p&gt;Stops advertising an IPv4 address range that is provisioned as an address pool.&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.&lt;/p&gt;


      Function parameters for this API cidr,region,opts
        */
        return new Promise((resolve, reject) => {
          this.actionWithdrawByoipCidrGet(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      default:
        throw ErrorHelper.getError(`Can't get entity`, 404);
    }
  }
  // This is a function for actionAcceptReservedInstancesExchangeQuoteGet
  /*


Accepts the Convertible Reserved Instance exchange quote described in the &lt;a&gt;GetReservedInstancesExchangeQuote&lt;/a&gt; call.

 */
  actionAcceptReservedInstancesExchangeQuoteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
    /*let region = "region_example";*/ /*let reservedInstanceId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      targetConfiguration: ["null"], // [String] | The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptReservedInstancesExchangeQuoteGet(
      incomingOptions.region,
      incomingOptions.reservedInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptTransitGatewayPeeringAttachmentGet
  /*


Accepts a transit gateway peering attachment request. The peering attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state.

 */
  actionAcceptTransitGatewayPeeringAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptTransitGatewayPeeringAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptTransitGatewayVpcAttachmentGet
  /*


&lt;p&gt;Accepts a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;RejectTransitGatewayVpcAttachment&lt;/a&gt; to reject a VPC attachment request.&lt;/p&gt;

 */
  actionAcceptTransitGatewayVpcAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptTransitGatewayVpcAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptVpcEndpointConnectionsGet
  /*


Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.

 */
  actionAcceptVpcEndpointConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the endpoint service // [String] | The IDs of one or more interface VPC endpoints.
    /*let region = "region_example";*/ /*let serviceId = "serviceId_example";*/ /*let vpcEndpointId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptVpcEndpointConnectionsGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptVpcPeeringConnectionGet
  /*


&lt;p&gt;Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state, and you must be the owner of the peer VPC. Use &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; to view your outstanding VPC peering connection requests.&lt;/p&gt; &lt;p&gt;For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.&lt;/p&gt;

 */
  actionAcceptVpcPeeringConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example", // String | The ID of the VPC peering connection. You must specify this parameter in the request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptVpcPeeringConnectionGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAdvertiseByoipCidrGet
  /*


&lt;p&gt;Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.&lt;/p&gt; &lt;p&gt;To stop advertising the BYOIP CIDR, use &lt;a&gt;WithdrawByoipCidr&lt;/a&gt;.&lt;/p&gt;

 */
  actionAdvertiseByoipCidrGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range // String | Region where you are making the request
    /*let cidr = "cidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAdvertiseByoipCidrGet(
      incomingOptions.cidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAllocateAddressGet
  /*


&lt;p&gt;Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.&lt;/p&gt; &lt;p&gt;You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAllocateAddressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'domain': "domain_example", // String | <p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p>
      //  'address': "address_example", // String | [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
      //  'publicIpv4Pool': "publicIpv4Pool_example", // String | The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the <code>Address</code> parameter instead.
      //  'networkBorderGroup': "networkBorderGroup_example", // String | <p>The location from which the IP address is advertised. Use this parameter to limit the address to this location.</p> <p>Use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html\">DescribeVpcs</a> to view the network border groups.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\">Error Codes</a>.</p> </note>
      //  'customerOwnedIpv4Pool': "customerOwnedIpv4Pool_example", // String | The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAllocateAddressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAllocateHostsGet
  /*


Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.

 */
  actionAllocateHostsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to allocate the Dedicated Host // Number | The number of Dedicated Hosts to allocate to your account with these parameters.
    /*let availabilityZone = "availabilityZone_example";*/ /*let quantity = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'autoPlacement': "autoPlacement_example", // String | <p>Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding\"> Understanding Instance Placement and Host Affinity</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>Default: <code>on</code> </p>
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'instanceType': "instanceType_example", // String | <p>Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.</p> <p>If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p>
      //  'instanceFamily': "instanceFamily_example", // String | <p>Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.</p> <p>If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p>
      tagSpecification: ["null"], // [String] | The tags to apply to the Dedicated Host during creation.
      //  'hostRecovery': "hostRecovery_example", // String | <p>Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>off</code> </p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAllocateHostsGet(
      incomingOptions.availabilityZone,
      incomingOptions.quantity,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionApplySecurityGroupsToClientVpnTargetNetworkGet
  /*


Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.

 */
  actionApplySecurityGroupsToClientVpnTargetNetworkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The ID of the VPC in which the associated target network is located // [String] | The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let vpcId = "vpcId_example";*/ /*let securityGroupId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionApplySecurityGroupsToClientVpnTargetNetworkGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.vpcId,
      incomingOptions.securityGroupId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssignIpv6AddressesGet
  /*


Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet&#39;s IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\&quot;&gt;IP Addresses Per Network Interface Per Instance Type&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionAssignIpv6AddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      ipv6AddressCount: 56, // Number | The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
      ipv6Addresses: ["null"], // [String] | One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssignIpv6AddressesGet(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssignPrivateIpAddressesGet
  /*


&lt;p&gt;Assigns one or more secondary private IP addresses to the specified network interface.&lt;/p&gt; &lt;p&gt;You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet&#39;s CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about Elastic IP addresses, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.&lt;/p&gt; &lt;p&gt;Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check &lt;code&gt;network/interfaces/macs/mac/local-ipv4s&lt;/code&gt; in the instance metadata to confirm that the remapping is complete.&lt;/p&gt;

 */
  actionAssignPrivateIpAddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      allowReassignment: true, // Boolean | Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
      privateIpAddress: ["null"], // [String] | <p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
      secondaryPrivateIpAddressCount: 56, // Number | The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssignPrivateIpAddressesGet(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateAddressGet
  /*


&lt;p&gt;Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.&lt;/p&gt; &lt;p&gt;[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.&lt;/p&gt; &lt;p&gt;You cannot associate an Elastic IP address with an interface in a different network border group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the &lt;i&gt;Elastic IP Addresses&lt;/i&gt; section of &lt;a href&#x3D;\&quot;http://aws.amazon.com/ec2/pricing/\&quot;&gt;Amazon EC2 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;

 */
  actionAssociateAddressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'allocationId': "allocationId_example", // String | [EC2-VPC] The allocation ID. This is required for EC2-VPC.
      //  'instanceId': "instanceId_example", // String | The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      //  'publicIp': "publicIp_example", // String | The Elastic IP address to associate with the instance. This is required for EC2-Classic.
      allowReassociation: true, // Boolean | [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | <p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p> <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p>
      //  'privateIpAddress': "privateIpAddress_example", // String | [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateAddressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateClientVpnTargetNetworkGet
  /*


Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.

 */
  actionAssociateClientVpnTargetNetworkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The ID of the subnet to associate with the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let subnetId = "subnetId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateClientVpnTargetNetworkGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.subnetId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateDhcpOptionsGet
  /*


&lt;p&gt;Associates a set of DHCP options (that you&#39;ve previously created) with the specified VPC, or associates no DHCP options with the VPC.&lt;/p&gt; &lt;p&gt;After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don&#39;t need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateDhcpOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC // String | The ID of the VPC // String | Region where you are making the request
    /*let dhcpOptionsId = "dhcpOptionsId_example";*/ /*let vpcId = "vpcId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateDhcpOptionsGet(
      incomingOptions.dhcpOptionsId,
      incomingOptions.vpcId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAssociateIamInstanceProfileGet
  /*


Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.

 */
  actionAssociateIamInstanceProfileGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example", // String | Describes an IAM instance profile. The name of the instance profile.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateIamInstanceProfileGet(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateRouteTableGet
  /*


&lt;p&gt;Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the route table.
    /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'subnetId': "subnetId_example", // String | The ID of the subnet.
      //  'gatewayId': "gatewayId_example", // String | The ID of the internet gateway or virtual private gateway.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateRouteTableGet(
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateSubnetCidrBlockGet
  /*


Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.

 */
  actionAssociateSubnetCidrBlockGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length // String | The ID of your subnet.
    /*let ipv6CidrBlock = "ipv6CidrBlock_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateSubnetCidrBlockGet(
      incomingOptions.ipv6CidrBlock,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateTransitGatewayMulticastDomainGet
  /*


&lt;p&gt;Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.&lt;/p&gt; &lt;p&gt;The transit gateway attachment must be in the available state before you can add a resource. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html\&quot;&gt;DescribeTransitGatewayAttachments&lt;/a&gt; to see the state of the attachment.&lt;/p&gt;

 */
  actionAssociateTransitGatewayMulticastDomainGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
      subnetIds: ["null"], // [String] | The IDs of the subnets to associate with the transit gateway multicast domain.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateTransitGatewayMulticastDomainGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateTransitGatewayRouteTableGet
  /*


Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.

 */
  actionAssociateTransitGatewayRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateTransitGatewayRouteTableGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateVpcCidrBlockGet
  /*


&lt;p&gt;Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.&lt;/p&gt; &lt;p&gt;For more information about associating CIDR blocks with your VPC and applicable restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing\&quot;&gt;VPC and Subnet Sizing&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateVpcCidrBlockGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      amazonProvidedIpv6CidrBlock: true, // Boolean | Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
      //  'cidrBlock': "cidrBlock_example", // String | An IPv4 CIDR block to associate with the VPC.
      //  'ipv6CidrBlockNetworkBorderGroup': "ipv6CidrBlockNetworkBorderGroup_example", // String | <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CiDR block to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p> <p> You can have one IPv6 CIDR block association per network border group.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateVpcCidrBlockGet(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachClassicLinkVpcGet
  /*


&lt;p&gt;Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC&#39;s security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that&#39;s in the &lt;code&gt;running&lt;/code&gt; state. An instance is automatically unlinked from a VPC when it&#39;s stopped - you can link it to the VPC again when you restart it.&lt;/p&gt; &lt;p&gt;After you&#39;ve linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.&lt;/p&gt; &lt;p&gt;Linking your instance to a VPC is sometimes referred to as &lt;i&gt;attaching&lt;/i&gt; your instance.&lt;/p&gt;

 */
  actionAttachClassicLinkVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC // String | The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC // String | The ID of a ClassicLink-enabled VPC.
    /*let region = "region_example";*/ /*let securityGroupId = ["null"];*/ /*let instanceId = "instanceId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachClassicLinkVpcGet(
      incomingOptions.region,
      incomingOptions.securityGroupId,
      incomingOptions.instanceId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachInternetGatewayGet
  /*


Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.

 */
  actionAttachInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the internet gateway // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let internetGatewayId = "internetGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.internetGatewayId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAttachNetworkInterfaceGet
  /*


Attaches a network interface to an instance.

 */
  actionAttachNetworkInterfaceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | The index of the device for the network interface attachment // String | Region where you are making the reques // String | The ID of the instance // String | The ID of the network interface.
    /*let deviceIndex = 56;*/ /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachNetworkInterfaceGet(
      incomingOptions.deviceIndex,
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachVolumeGet
  /*


&lt;p&gt;Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.&lt;/p&gt; &lt;p&gt;Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you attach an EBS volume, you must make it available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\&quot;&gt;Making an EBS Volume Available For Use&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If a volume has an AWS Marketplace product code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The volume can be attached only to a stopped instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;AWS Marketplace product codes are copied from the volume to the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must be subscribed to the product.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The instance type and operating system of the instance must support the product. For example, you can&#39;t detach a volume from a Windows instance and attach it to a Linux instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html\&quot;&gt;Attaching Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAttachVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>) // String | The ID of the instance // String | The ID of the EBS volume. The volume and instance must be within the same Availability Zone // String | Region where you are making the request
    /*let device = "device_example";*/ /*let instanceId = "instanceId_example";*/ /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachVolumeGet(
      incomingOptions.device,
      incomingOptions.instanceId,
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachVpnGatewayGet
  /*


&lt;p&gt;Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAttachVpnGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The ID of the virtual private gateway // String | Region where you are making the request
    /*let vpcId = "vpcId_example";*/ /*let vpnGatewayId = "vpnGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachVpnGatewayGet(
      incomingOptions.vpcId,
      incomingOptions.vpnGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeClientVpnIngressGet
  /*


Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.

 */
  actionAuthorizeClientVpnIngressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The IPv4 address range, in CIDR notation, of the network for which access is being authorized // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let targetNetworkCidr = "targetNetworkCidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'accessGroupId': "accessGroupId_example", // String | The ID of the Active Directory group to grant access.
      authorizeAllGroups: true, // Boolean | Indicates whether to grant access to all clients. Use <code>true</code> to grant all clients who successfully establish a VPN connection access to the network.
      //  'description': "description_example", // String | A brief description of the authorization rule.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeClientVpnIngressGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.targetNetworkCidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeSecurityGroupEgressGet
  /*


&lt;p&gt;[VPC only] Adds the specified egress rules to a security group for use with a VPC.&lt;/p&gt; &lt;p&gt;An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionAuthorizeSecurityGroupEgressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the security group.
    /*let region = "region_example";*/ /*let groupId = "groupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      ipPermissions: ["null"], // [String] | The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      //  'cidrIp': "cidrIp_example", // String | Not supported. Use a set of IP permissions to specify the CIDR.
      fromPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'ipProtocol': "ipProtocol_example", // String | Not supported. Use a set of IP permissions to specify the protocol name or number.
      toPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeSecurityGroupEgressGet(
      incomingOptions.region,
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeSecurityGroupIngressGet
  /*


&lt;p&gt;Adds the specified ingress rules to a security group.&lt;/p&gt; &lt;p&gt;An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionAuthorizeSecurityGroupIngressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cidrIp': "cidrIp_example", // String | <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      fromPort: 56, // Number | <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all types. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      ipPermissions: ["null"], // [String] | The sets of IP permissions.
      //  'ipProtocol': "ipProtocol_example", // String | <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p> <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed, regardless of any ports you specify.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | [nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
      toPort: 56, // Number | <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all codes. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeSecurityGroupIngressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionBundleInstanceGet
  /*


&lt;p&gt;Bundles an Amazon instance store-backed Windows instance.&lt;/p&gt; &lt;p&gt;During bundling, only the root device volume (C:\\) is bundled. Data on other instance store volumes is not preserved.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.&lt;/p&gt; &lt;/note&gt;

 */
  actionBundleInstanceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'storageS3': "storageS3_example", // String | Describes the storage location for an instance store-backed AMI. An Amazon S3 storage location.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionBundleInstanceGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelBundleTaskGet
  /*


Cancels a bundling operation for an instance store-backed Windows instance.

 */
  actionCancelBundleTaskGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the bundle task // String | Region where you are making the request
    /*let bundleId = "bundleId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelBundleTaskGet(
      incomingOptions.bundleId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelCapacityReservationGet
  /*


&lt;p&gt;Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation&#39;s state to &lt;code&gt;cancelled&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.&lt;/p&gt;

 */
  actionCancelCapacityReservationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation to be cancelled // String | Region where you are making the request
    /*let capacityReservationId = "capacityReservationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelCapacityReservationGet(
      incomingOptions.capacityReservationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelConversionTaskGet
  /*


&lt;p&gt;Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt;

 */
  actionCancelConversionTaskGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the conversion task // String | Region where you are making the request
    /*let conversionTaskId = "conversionTaskId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'reasonMessage': "reasonMessage_example", // String | The reason for canceling the conversion task.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelConversionTaskGet(
      incomingOptions.conversionTaskId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCancelExportTaskGet
  /*


Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.

 */
  actionCancelExportTaskGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.
    /*let exportTaskId = "exportTaskId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelExportTaskGet(
      incomingOptions.exportTaskId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCancelImportTaskGet
  /*


Cancels an in-process import virtual machine or import snapshot task.

 */
  actionCancelImportTaskGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cancelReason': "cancelReason_example", // String | The reason for canceling the task.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'importTaskId': "importTaskId_example", // String | The ID of the import image or import snapshot task to be canceled.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelImportTaskGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelReservedInstancesListingGet
  /*


&lt;p&gt;Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCancelReservedInstancesListingGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Reserved Instance listing.
    /*let reservedInstancesListingId = "reservedInstancesListingId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelReservedInstancesListingGet(
      incomingOptions.reservedInstancesListingId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelSpotFleetRequestsGet
  /*


&lt;p&gt;Cancels the specified Spot Fleet requests.&lt;/p&gt; &lt;p&gt;After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the &lt;code&gt;cancelled_terminating&lt;/code&gt; state. Otherwise, the Spot Fleet request enters the &lt;code&gt;cancelled_running&lt;/code&gt; state and the instances continue to run until they are interrupted or you terminate them manually.&lt;/p&gt;

 */
  actionCancelSpotFleetRequestsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the Spot Fleet requests // Boolean | Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
    /*let region = "region_example";*/ /*let spotFleetRequestId = ["null"];*/ /*let terminateInstances = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelSpotFleetRequestsGet(
      incomingOptions.region,
      incomingOptions.spotFleetRequestId,
      incomingOptions.terminateInstances,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelSpotInstanceRequestsGet
  /*


&lt;p&gt;Cancels one or more Spot Instance requests.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.&lt;/p&gt; &lt;/important&gt;

 */
  actionCancelSpotInstanceRequestsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | One or more Spot Instance request IDs.
    /*let region = "region_example";*/ /*let spotInstanceRequestId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelSpotInstanceRequestsGet(
      incomingOptions.region,
      incomingOptions.spotInstanceRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionConfirmProductInstanceGet
  /*


Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user&#39;s instance is eligible for support.

 */
  actionConfirmProductInstanceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | The product code. This must be a product code that you own // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let productCode = "productCode_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionConfirmProductInstanceGet(
      incomingOptions.instanceId,
      incomingOptions.productCode,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopyFpgaImageGet
  /*


Copies the specified Amazon FPGA Image (AFI) to the current Region.

 */
  actionCopyFpgaImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the source AFI // String | The Region that contains the source AFI.
    /*let region = "region_example";*/ /*let sourceFpgaImageId = "sourceFpgaImageId_example";*/ /*let sourceRegion = "sourceRegion_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'description': "description_example", // String | The description for the new AFI.
      //  'name': "name_example", // String | The name for the new AFI. The default is the name of the source AFI.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopyFpgaImageGet(
      incomingOptions.region,
      incomingOptions.sourceFpgaImageId,
      incomingOptions.sourceRegion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopyImageGet
  /*


&lt;p&gt;Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.&lt;/p&gt; &lt;p&gt;Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set &lt;code&gt;Encrypted&lt;/code&gt; during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.&lt;/p&gt; &lt;p&gt;For more information about the prerequisites and limits when copying an AMI, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html\&quot;&gt;Copying an AMI&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCopyImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The name of the new AMI in the destination Region // String | The ID of the AMI to copy // String | The name of the Region that contains the AMI to copy // String | Region where you are making the request
    /*let name = "name_example";*/ /*let sourceImageId = "sourceImageId_example";*/ /*let sourceRegion = "sourceRegion_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'description': "description_example", // String | A description for the new AMI in the destination Region.
      encrypted: true, // Boolean | Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with \"alias/\". For example:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to. </p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopyImageGet(
      incomingOptions.name,
      incomingOptions.sourceImageId,
      incomingOptions.sourceRegion,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopySnapshotGet
  /*


&lt;p&gt;Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).&lt;/p&gt; &lt;p&gt;Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK) however, you can specify a different CMK.&lt;/p&gt; &lt;p&gt;To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html\&quot;&gt;Copying an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCopySnapshotGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Region that contains the snapshot to be copied // String | The ID of the EBS snapshot to copy // String | Region where you are making the request
    /*let sourceRegion = "sourceRegion_example";*/ /*let sourceSnapshotId = "sourceSnapshotId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description for the EBS snapshot.
      //  'destinationRegion': "destinationRegion_example", // String | <p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a <code>PresignedUrl</code> parameter, where it is required.</p> <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the AWS CLI, this is specified using the <code>--region</code> parameter or the default Region in your AWS configuration file.</p>
      encrypted: true, // Boolean | To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p>
      //  'presignedUrl': "presignedUrl_example", // String | <p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html\">Query Requests</a>.</p> <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p>
      tagSpecification: ["null"], // [String] | The tags to apply to the new snapshot.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopySnapshotGet(
      incomingOptions.sourceRegion,
      incomingOptions.sourceSnapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateCapacityReservationGet
  /*


&lt;p&gt;Creates a new Capacity Reservation with the specified attributes.&lt;/p&gt; &lt;p&gt;Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\&quot;&gt;Capacity Reservations&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.&lt;/p&gt; &lt;p&gt;Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html\&quot;&gt;Amazon EC2 Service Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateCapacityReservationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The instance type for which to reserve capacity. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> // String | The type of operating system for which to reserve capacity // Number | The number of instances for which to reserve capacity // String | Region where you are making the request
    /*let instanceType = "instanceType_example";*/ /*let instancePlatform = "instancePlatform_example";*/ /*let instanceCount = 56;*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone in which to create the Capacity Reservation.
      //  'availabilityZoneId': "availabilityZoneId_example", // String | The ID of the Availability Zone in which to create the Capacity Reservation.
      //  'tenancy': "tenancy_example", // String | <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul>
      ebsOptimized: true, // Boolean | Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
      ephemeralStorage: true, // Boolean | Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
      endDate: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p> <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
      //  'endDateType': "endDateType_example", // String | <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> if the <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if the <code>EndDateType</code> value is <code>limited</code>.</p> </li> </ul>
      //  'instanceMatchCriteria': "instanceMatchCriteria_example", // String | <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul> <p>Default: <code>open</code> </p>
      tagSpecifications: ["null"], // [String] | The tags to apply to the Capacity Reservation during launch.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateCapacityReservationGet(
      incomingOptions.instanceType,
      incomingOptions.instancePlatform,
      incomingOptions.instanceCount,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateClientVpnEndpointGet
  /*


Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.

 */
  actionCreateClientVpnEndpointGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater // String | The ARN of the server certificate. For more information, see the <a href=\"https://docs.aws.amazon.com/acm/latest/userguide/\">AWS Certificate Manager User Guide</a> // [String] | Information about the authentication method to be used to authenticate clients // String | Region where you are making the request
    /*let clientCidrBlock = "clientCidrBlock_example";*/ /*let serverCertificateArn = "serverCertificateArn_example";*/ /*let authentication = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'connectionLogOptionsEnabled': "connectionLogOptionsEnabled_example", // String | Describes the client connection logging options for the Client VPN endpoint. Indicates whether connection logging is enabled.
      //  'connectionLogOptionsCloudwatchLogGroup': "connectionLogOptionsCloudwatchLogGroup_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log group.
      //  'connectionLogOptionsCloudwatchLogStream': "connectionLogOptionsCloudwatchLogStream_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log stream to which the connection data is published.
      dnsServers: ["null"], // [String] | Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.
      //  'transportProtocol': "transportProtocol_example", // String | <p>The transport protocol to be used by the VPN session.</p> <p>Default value: <code>udp</code> </p>
      //  'description': "description_example", // String | A brief description of the Client VPN endpoint.
      splitTunnel: true, // Boolean | <p>Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.</p> <p>By default, split-tunnel on a VPN endpoint is disabled.</p> <p>For information about split-tunnel VPN endpoints, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      tagSpecification: ["null"], // [String] | The tags to apply to the Client VPN endpoint during creation.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateClientVpnEndpointGet(
      incomingOptions.clientCidrBlock,
      incomingOptions.serverCertificateArn,
      incomingOptions.authentication,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateClientVpnRouteGet
  /*


Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.

 */
  actionCreateClientVpnRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which to add the route // String | <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p> <ul> <li> <p>To add a route for Internet access, enter <code>0.0.0.0/0</code> </p> </li> <li> <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p> </li> <li> <p>To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range</p> </li> </ul> <p>Route address ranges cannot overlap with the CIDR range specified for client allocation.</p // String | The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let targetVpcSubnetId = "targetVpcSubnetId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A brief description of the route.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateClientVpnRouteGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.targetVpcSubnetId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateCustomerGatewayGet
  /*


&lt;p&gt;Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and can be behind a device performing network address translation (NAT).&lt;/p&gt; &lt;p&gt;For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the &lt;code&gt;us-east-1&lt;/code&gt; Region, and 9059, which is reserved in the &lt;code&gt;eu-west-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.&lt;/p&gt; &lt;/important&gt;

 */
  actionCreateCustomerGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | <p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p // String | The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>) // String | Region where you are making the request
    /*let bgpAsn = 56;*/ /*let type = "type_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'ipAddress': "ipAddress_example", // String | The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
      //  'certificateArn': "certificateArn_example", // String | The Amazon Resource Name (ARN) for the customer gateway certificate.
      //  'deviceName': "deviceName_example", // String | <p>A name for the customer gateway device.</p> <p>Length Constraints: Up to 255 characters.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateCustomerGatewayGet(
      incomingOptions.bgpAsn,
      incomingOptions.type,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDefaultSubnetGet
  /*


Creates a default subnet with a size &lt;code&gt;/20&lt;/code&gt; IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet\&quot;&gt;Creating a Default Subnet&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionCreateDefaultSubnetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to create the default subnet // String | Region where you are making the request
    /*let availabilityZone = "availabilityZone_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDefaultSubnetGet(
      incomingOptions.availabilityZone,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDefaultVpcGet
  /*


&lt;p&gt;Creates a default VPC with a size &lt;code&gt;/16&lt;/code&gt; IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\&quot;&gt;Default VPC and Default Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. You cannot specify the components of the default VPC yourself.&lt;/p&gt; &lt;p&gt;If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.&lt;/p&gt; &lt;p&gt;If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see \&quot;I really want a default VPC for my existing EC2 account. Is that possible?\&quot; in the &lt;a href&#x3D;\&quot;http://aws.amazon.com/vpc/faqs/#Default_VPCs\&quot;&gt;Default VPCs FAQ&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateDefaultVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDefaultVpcGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDhcpOptionsGet
  /*


&lt;p&gt;Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name-servers&lt;/code&gt; - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in &lt;code&gt;domain-name&lt;/code&gt;, you must set &lt;code&gt;domain-name-servers&lt;/code&gt; to a custom DNS server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name&lt;/code&gt; - If you&#39;re using AmazonProvidedDNS in &lt;code&gt;us-east-1&lt;/code&gt;, specify &lt;code&gt;ec2.internal&lt;/code&gt;. If you&#39;re using AmazonProvidedDNS in another Region, specify &lt;code&gt;region.compute.internal&lt;/code&gt; (for example, &lt;code&gt;ap-northeast-1.compute.internal&lt;/code&gt;). Otherwise, specify a domain name (for example, &lt;code&gt;MyCompany.com&lt;/code&gt;). This value is used to complete unqualified DNS hostnames. &lt;b&gt;Important&lt;/b&gt;: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ntp-servers&lt;/code&gt; - The IP addresses of up to four Network Time Protocol (NTP) servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-name-servers&lt;/code&gt; - The IP addresses of up to four NetBIOS name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-node-type&lt;/code&gt; - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the &lt;code&gt;domain-name-servers&lt;/code&gt; option either to &lt;code&gt;AmazonProvidedDNS&lt;/code&gt; or to a domain name server of your choice. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateDhcpOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | A DHCP configuration option // String | Region where you are making the request
    /*let dhcpConfiguration = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDhcpOptionsGet(
      incomingOptions.dhcpConfiguration,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateEgressOnlyInternetGatewayGet
  /*


[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.

 */
  actionCreateEgressOnlyInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC for which to create the egress-only internet gateway.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateEgressOnlyInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFleetGet
  /*


&lt;p&gt;Launches an EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\&quot;&gt;Launching an EC2 Fleet&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateFleetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The configuration for the EC2 Fleet.
    /*let region = "region_example";*/ /*let launchTemplateConfigs = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      //  'spotOptionsAllocationStrategy': "spotOptionsAllocationStrategy_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet.</p> <p>If the allocation strategy is <code>lowest-price</code>, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.</p> <p>If the allocation strategy is <code>diversified</code>, EC2 Fleet launches instances from all of the Spot Instance pools that you specify.</p> <p>If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p>
      //  'spotOptionsInstanceInterruptionBehavior': "spotOptionsInstanceInterruptionBehavior_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
      //  'spotOptionsInstancePoolsToUseCount': "spotOptionsInstancePoolsToUseCount_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      //  'spotOptionsSingleInstanceType': "spotOptionsSingleInstanceType_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type <code>instant</code>.
      //  'spotOptionsSingleAvailabilityZone': "spotOptionsSingleAvailabilityZone_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type <code>instant</code>.
      //  'spotOptionsMinTargetCapacity': "spotOptionsMinTargetCapacity_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      //  'spotOptionsMaxTotalPrice': "spotOptionsMaxTotalPrice_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The maximum amount per hour for Spot Instances that you're willing to pay.
      //  'onDemandOptionsAllocationStrategy': "onDemandOptionsAllocationStrategy_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.
      //  'onDemandOptionsCapacityReservationOptions': "onDemandOptionsCapacityReservationOptions_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsSingleInstanceType': "onDemandOptionsSingleInstanceType_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsSingleAvailabilityZone': "onDemandOptionsSingleAvailabilityZone_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsMinTargetCapacity': "onDemandOptionsMinTargetCapacity_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      //  'onDemandOptionsMaxTotalPrice': "onDemandOptionsMaxTotalPrice_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The maximum amount per hour for On-Demand Instances that you're willing to pay.
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      //  'targetCapacitySpecificationTotalTargetCapacity': "targetCapacitySpecificationTotalTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of units to request, filled using <code>DefaultTargetCapacityType</code>.
      //  'targetCapacitySpecificationOnDemandTargetCapacity': "targetCapacitySpecificationOnDemandTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of On-Demand units to request.
      //  'targetCapacitySpecificationSpotTargetCapacity': "targetCapacitySpecificationSpotTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of Spot units to request.
      //  'targetCapacitySpecificationDefaultTargetCapacityType': "targetCapacitySpecificationDefaultTargetCapacityType_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.
      terminateInstancesWithExpiration: true, // Boolean | Indicates whether running instances should be terminated when the EC2 Fleet expires.
      //  'type': "type_example", // String | The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (<code>maintain</code>). A value of <code>instant</code> places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of <code>request</code> places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type\">EC2 Fleet Request Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      validFrom: new Date("2013-10-20T19:20:30+01:00"), // Date | The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.
      validUntil: new Date("2013-10-20T19:20:30+01:00"), // Date | The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
      replaceUnhealthyInstances: true, // Boolean | Indicates whether EC2 Fleet should replace unhealthy instances.
      tagSpecification: ["null"], // [String] | The key-value pair for tagging the EC2 Fleet request on creation. The value for <code>ResourceType</code> must be <code>fleet</code>, otherwise the fleet request fails. To tag instances at launch, specify the tags in the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template\">launch template</a>. For information about tagging after launch, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources\">Tagging Your Resources</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFleetGet(
      incomingOptions.region,
      incomingOptions.launchTemplateConfigs,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFlowLogsGet
  /*


&lt;p&gt;Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. &lt;/p&gt; &lt;p&gt;Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\&quot;&gt;Flow Log Records&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\&quot;&gt;VPC Flow Logs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateFlowLogsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | <p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p> <p>Constraints: Maximum of 1000 resources</p // String | The type of resource for which to create the flow log. For example, if you specified a VPC ID for the <code>ResourceId</code> property, specify <code>VPC</code> for this property // String | The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    /*let region = "region_example";*/ /*let resourceId = ["null"];*/ /*let resourceType = "resourceType_example";*/ /*let trafficType = "trafficType_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'deliverLogsPermissionArn': "deliverLogsPermissionArn_example", // String | <p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
      //  'logGroupName': "logGroupName_example", // String | <p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
      //  'logDestinationType': "logDestinationType_example", // String | <p>Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To publish flow log data to Amazon S3, specify <code>s3</code>.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p> <p>Default: <code>cloud-watch-logs</code> </p>
      //  'logDestination': "logDestination_example", // String | <p>Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for <code>LogDestinationType</code>.</p> <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called <code>my-logs</code>, specify <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively, use <code>LogGroupName</code> instead.</p> <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>
      //  'logFormat': "logFormat_example", // String | <p>The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see <a href=\"https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\">Flow Log Records</a>. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field.</p> <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value.</p> <p>Only applicable to flow logs that are published to an Amazon S3 bucket.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFlowLogsGet(
      incomingOptions.region,
      incomingOptions.resourceId,
      incomingOptions.resourceType,
      incomingOptions.trafficType,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFpgaImageGet
  /*


&lt;p&gt;Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).&lt;/p&gt; &lt;p&gt;The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.&lt;/p&gt; &lt;p&gt;An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the &lt;a href&#x3D;\&quot;https://github.com/aws/aws-fpga/\&quot;&gt;AWS FPGA Hardware Development Kit&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateFpgaImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'inputStorageLocationBucket': "inputStorageLocationBucket_example", // String | Describes a storage location in Amazon S3. The name of the S3 bucket.
      //  'inputStorageLocationKey': "inputStorageLocationKey_example", // String | Describes a storage location in Amazon S3. The key.
      //  'logsStorageLocationBucket': "logsStorageLocationBucket_example", // String | Describes a storage location in Amazon S3. The name of the S3 bucket.
      //  'logsStorageLocationKey': "logsStorageLocationKey_example", // String | Describes a storage location in Amazon S3. The key.
      //  'description': "description_example", // String | A description for the AFI.
      //  'name': "name_example", // String | A name for the AFI.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      tagSpecification: ["null"], // [String] | The tags to apply to the FPGA image during creation.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFpgaImageGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateImageGet
  /*


&lt;p&gt;Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.&lt;/p&gt; &lt;p&gt;If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\&quot;&gt;Creating Amazon EBS-Backed Linux AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance // String | <p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ /*let name = "name_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      blockDeviceMapping: ["null"], // [String] | The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the <a>CopyImage</a> action.
      //  'description': "description_example", // String | A description for the new image.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      noReboot: true, // Boolean | By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateImageGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.name,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateInstanceExportTaskGet
  /*


&lt;p&gt;Exports a running or stopped instance to an S3 bucket.&lt;/p&gt; &lt;p&gt;For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html\&quot;&gt;Exporting an Instance as a VM Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateInstanceExportTaskGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description for the conversion task or the resource being exported. The maximum length is 255 bytes.
      //  'exportToS3ContainerFormat': "exportToS3ContainerFormat_example", // String | Describes an instance export task. The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
      //  'exportToS3DiskImageFormat': "exportToS3DiskImageFormat_example", // String | Describes an instance export task. The format for the exported image.
      //  'exportToS3S3Bucket': "exportToS3S3Bucket_example", // String | Describes an instance export task. The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.
      //  'exportToS3S3Prefix': "exportToS3S3Prefix_example", // String | Describes an instance export task. The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
      //  'targetEnvironment': "targetEnvironment_example", // String | The target virtualization environment.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateInstanceExportTaskGet(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateInternetGatewayGet
  /*


&lt;p&gt;Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using &lt;a&gt;AttachInternetGateway&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateKeyPairGet
  /*


&lt;p&gt;Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.&lt;/p&gt; &lt;p&gt;You can have up to five thousand key pairs per Region.&lt;/p&gt; &lt;p&gt;The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using &lt;a&gt;ImportKeyPair&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateKeyPairGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p // String | Region where you are making the request
    /*let keyName = "keyName_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateKeyPairGet(
      incomingOptions.keyName,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLaunchTemplateGet
  /*


Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify a launch template instead of providing the launch parameters in the request.

 */
  actionCreateLaunchTemplateGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | A name for the launch template.
    /*let region = "region_example";*/ /*let launchTemplateName = "launchTemplateName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'versionDescription': "versionDescription_example", // String | A description for the first version of the launch template.
      //  'launchTemplateDataKernelId': "launchTemplateDataKernelId_example", // String | The information to include in the launch template. <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataEbsOptimized': "launchTemplateDataEbsOptimized_example", // String | The information to include in the launch template. Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
      //  'launchTemplateDataIamInstanceProfile': "launchTemplateDataIamInstanceProfile_example", // String | The information to include in the launch template. The IAM instance profile.
      launchTemplateDataBlockDeviceMappings: ["null"], // [String] | The information to include in the launch template. <p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
      launchTemplateDataNetworkInterfaces: ["null"], // [String] | The information to include in the launch template. One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'launchTemplateDataImageId': "launchTemplateDataImageId_example", // String | The information to include in the launch template. The ID of the AMI.
      //  'launchTemplateDataInstanceType': "launchTemplateDataInstanceType_example", // String | The information to include in the launch template. The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataKeyName': "launchTemplateDataKeyName_example", // String | The information to include in the launch template. <p>The name of the key pair. You can create a key pair using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\">CreateKeyPair</a> or <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'launchTemplateDataMonitoring': "launchTemplateDataMonitoring_example", // String | The information to include in the launch template. The monitoring for the instance.
      //  'launchTemplateDataPlacement': "launchTemplateDataPlacement_example", // String | The information to include in the launch template. The placement for the instance.
      //  'launchTemplateDataRamDiskId': "launchTemplateDataRamDiskId_example", // String | The information to include in the launch template. <p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataDisableApiTermination': "launchTemplateDataDisableApiTermination_example", // String | The information to include in the launch template. If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.
      //  'launchTemplateDataInstanceInitiatedShutdownBehavior': "launchTemplateDataInstanceInitiatedShutdownBehavior_example", // String | The information to include in the launch template. <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      //  'launchTemplateDataUserData': "launchTemplateDataUserData_example", // String | The information to include in the launch template. The Base64-encoded user data to make available to the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\">Adding User Data</a> (Windows).
      launchTemplateDataTagSpecifications: ["null"], // [String] | The information to include in the launch template. The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      launchTemplateDataElasticGpuSpecifications: ["null"], // [String] | The information to include in the launch template. An elastic GPU to associate with the instance.
      launchTemplateDataElasticInferenceAccelerators: ["null"], // [String] | The information to include in the launch template.  The elastic inference accelerator for the instance.
      launchTemplateDataSecurityGroupIds: ["null"], // [String] | The information to include in the launch template. One or more security group IDs. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>. You cannot specify both a security group ID and security name in the same request.
      launchTemplateDataSecurityGroups: ["null"], // [String] | The information to include in the launch template. [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataInstanceMarketOptions': "launchTemplateDataInstanceMarketOptions_example", // String | The information to include in the launch template. The market (purchasing) option for the instances.
      //  'launchTemplateDataCreditSpecification': "launchTemplateDataCreditSpecification_example", // String | The information to include in the launch template. The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
      //  'launchTemplateDataCpuOptions': "launchTemplateDataCpuOptions_example", // String | The information to include in the launch template. The CPU options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataCapacityReservationSpecification': "launchTemplateDataCapacityReservationSpecification_example", // String | The information to include in the launch template. The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      launchTemplateDataLicenseSpecifications: ["null"], // [String] | The information to include in the launch template. The license configurations.
      //  'launchTemplateDataHibernationOptions': "launchTemplateDataHibernationOptions_example", // String | The information to include in the launch template. Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      tagSpecification: ["null"], // [String] | The tags to apply to the launch template during creation.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLaunchTemplateGet(
      incomingOptions.region,
      incomingOptions.launchTemplateName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLaunchTemplateVersionGet
  /*


&lt;p&gt;Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.&lt;/p&gt; &lt;p&gt;Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.&lt;/p&gt;

 */
  actionCreateLaunchTemplateVersionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'sourceVersion': "sourceVersion_example", // String | The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in <code>LaunchTemplateData</code>. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.
      //  'versionDescription': "versionDescription_example", // String | A description for the version of the launch template.
      //  'launchTemplateDataKernelId': "launchTemplateDataKernelId_example", // String | The information to include in the launch template. <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataEbsOptimized': "launchTemplateDataEbsOptimized_example", // String | The information to include in the launch template. Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
      //  'launchTemplateDataIamInstanceProfile': "launchTemplateDataIamInstanceProfile_example", // String | The information to include in the launch template. The IAM instance profile.
      launchTemplateDataBlockDeviceMappings: ["null"], // [String] | The information to include in the launch template. <p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
      launchTemplateDataNetworkInterfaces: ["null"], // [String] | The information to include in the launch template. One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'launchTemplateDataImageId': "launchTemplateDataImageId_example", // String | The information to include in the launch template. The ID of the AMI.
      //  'launchTemplateDataInstanceType': "launchTemplateDataInstanceType_example", // String | The information to include in the launch template. The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataKeyName': "launchTemplateDataKeyName_example", // String | The information to include in the launch template. <p>The name of the key pair. You can create a key pair using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\">CreateKeyPair</a> or <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'launchTemplateDataMonitoring': "launchTemplateDataMonitoring_example", // String | The information to include in the launch template. The monitoring for the instance.
      //  'launchTemplateDataPlacement': "launchTemplateDataPlacement_example", // String | The information to include in the launch template. The placement for the instance.
      //  'launchTemplateDataRamDiskId': "launchTemplateDataRamDiskId_example", // String | The information to include in the launch template. <p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataDisableApiTermination': "launchTemplateDataDisableApiTermination_example", // String | The information to include in the launch template. If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.
      //  'launchTemplateDataInstanceInitiatedShutdownBehavior': "launchTemplateDataInstanceInitiatedShutdownBehavior_example", // String | The information to include in the launch template. <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      //  'launchTemplateDataUserData': "launchTemplateDataUserData_example", // String | The information to include in the launch template. The Base64-encoded user data to make available to the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\">Adding User Data</a> (Windows).
      launchTemplateDataTagSpecifications: ["null"], // [String] | The information to include in the launch template. The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      launchTemplateDataElasticGpuSpecifications: ["null"], // [String] | The information to include in the launch template. An elastic GPU to associate with the instance.
      launchTemplateDataElasticInferenceAccelerators: ["null"], // [String] | The information to include in the launch template.  The elastic inference accelerator for the instance.
      launchTemplateDataSecurityGroupIds: ["null"], // [String] | The information to include in the launch template. One or more security group IDs. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>. You cannot specify both a security group ID and security name in the same request.
      launchTemplateDataSecurityGroups: ["null"], // [String] | The information to include in the launch template. [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataInstanceMarketOptions': "launchTemplateDataInstanceMarketOptions_example", // String | The information to include in the launch template. The market (purchasing) option for the instances.
      //  'launchTemplateDataCreditSpecification': "launchTemplateDataCreditSpecification_example", // String | The information to include in the launch template. The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
      //  'launchTemplateDataCpuOptions': "launchTemplateDataCpuOptions_example", // String | The information to include in the launch template. The CPU options for the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataCapacityReservationSpecification': "launchTemplateDataCapacityReservationSpecification_example", // String | The information to include in the launch template. The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      launchTemplateDataLicenseSpecifications: ["null"], // [String] | The information to include in the launch template. The license configurations.
      //  'launchTemplateDataHibernationOptions': "launchTemplateDataHibernationOptions_example", // String | The information to include in the launch template. Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLaunchTemplateVersionGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLocalGatewayRouteGet
  /*


Creates a static route for the specified local gateway route table.

 */
  actionCreateLocalGatewayRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for destination matches. Routing decisions are based on the most specific match // String | The ID of the local gateway route table // String | The ID of the virtual interface group // String | Region where you are making the request
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLocalGatewayRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.localGatewayVirtualInterfaceGroupId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLocalGatewayRouteTableVpcAssociationGet
  /*


Associates the specified VPC with the specified local gateway route table.

 */
  actionCreateLocalGatewayRouteTableVpcAssociationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the local gateway route table // String | The ID of the VPC // String | Region where you are making the request
    /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let vpcId = "vpcId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLocalGatewayRouteTableVpcAssociationGet(
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.vpcId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNatGatewayGet
  /*


Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\&quot;&gt;NAT Gateways&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionCreateNatGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it // String | The subnet in which to create the NAT gateway.
    /*let allocationId = "allocationId_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNatGatewayGet(
      incomingOptions.allocationId,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkAclEntryGet
  /*


&lt;p&gt;Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.&lt;/p&gt; &lt;p&gt;We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.&lt;/p&gt; &lt;p&gt;After you add an entry, you can&#39;t modify it you must either replace it, or create an entry and delete the old one.&lt;/p&gt; &lt;p&gt;For more information about network ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkAclEntryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // Boolean | Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet) // String | The ID of the network ACL // String | The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code // String | Indicates whether to allow or deny the traffic that matches the rule // Number | <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    /*let region = "region_example";*/ /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let protocol = "protocol_example";*/ /*let ruleAction = "ruleAction_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cidrBlock': "cidrBlock_example", // String | The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'icmpCode': "icmpCode_example", // String | Describes the ICMP type and code. The ICMP code. A value of -1 means all codes for the specified ICMP type.
      //  'icmpType': "icmpType_example", // String | Describes the ICMP type and code. The ICMP type. A value of -1 means all types.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).
      //  'portRangeFrom': "portRangeFrom_example", // String | Describes a range of ports. The first port in the range.
      //  'portRangeTo': "portRangeTo_example", // String | Describes a range of ports. The last port in the range.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkAclEntryGet(
      incomingOptions.region,
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.protocol,
      incomingOptions.ruleAction,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkAclGet
  /*


&lt;p&gt;Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkAclGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkAclGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkInterfaceGet
  /*


&lt;p&gt;Creates a network interface in the specified subnet.&lt;/p&gt; &lt;p&gt;For more information about network interfaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\&quot;&gt;Elastic Network Interfaces&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkInterfaceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the subnet to associate with the network interface.
    /*let region = "region_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description for the network interface.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      securityGroupId: ["null"], // [String] | The IDs of one or more security groups.
      ipv6AddressCount: 56, // Number | The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set to <code>true</code>, you can specify <code>0</code> to override this setting.
      ipv6Addresses: ["null"], // [String] | One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
      //  'privateIpAddress': "privateIpAddress_example", // String | The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).
      privateIpAddresses: ["null"], // [String] | One or more private IPv4 addresses.
      secondaryPrivateIpAddressCount: 56, // Number | <p>The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\">IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
      //  'interfaceType': "interfaceType_example", // String | Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html\"> Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkInterfaceGet(
      incomingOptions.region,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkInterfacePermissionGet
  /*


&lt;p&gt;Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.&lt;/p&gt; &lt;p&gt;You can grant permission to a single AWS account only, and only one account at a time.&lt;/p&gt;

 */
  actionCreateNetworkInterfacePermissionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface // String | The type of permission to grant // String | Region where you are making the request
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let permission = "permission_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'awsAccountId': "awsAccountId_example", // String | The AWS account ID.
      //  'awsService': "awsService_example", // String | The AWS service. Currently not supported.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkInterfacePermissionGet(
      incomingOptions.networkInterfaceId,
      incomingOptions.permission,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreatePlacementGroupGet
  /*


&lt;p&gt;Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. &lt;/p&gt; &lt;p&gt;A &lt;code&gt;cluster&lt;/code&gt; placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A &lt;code&gt;spread&lt;/code&gt; placement group places instances on distinct hardware. A &lt;code&gt;partition&lt;/code&gt; placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreatePlacementGroupGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupName': "groupName_example", // String | <p>A name for the placement group. Must be unique within the scope of your account for the Region.</p> <p>Constraints: Up to 255 ASCII characters</p>
      //  'strategy': "strategy_example", // String | The placement strategy.
      partitionCount: 56, // Number | The number of partitions. Valid only when <b>Strategy</b> is set to <code>partition</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreatePlacementGroupGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateReservedInstancesListingGet
  /*


&lt;p&gt;Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the &lt;a&gt;DescribeReservedInstances&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the &lt;a&gt;DescribeReservedInstancesListings&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateReservedInstancesListingGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a> // Number | The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call // [String] | A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term // String | The ID of the active Standard Reserved Instance.
    /*let clientToken = "clientToken_example";*/ /*let instanceCount = 56;*/ /*let priceSchedules = ["null"];*/ /*let reservedInstancesId = "reservedInstancesId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateReservedInstancesListingGet(
      incomingOptions.clientToken,
      incomingOptions.instanceCount,
      incomingOptions.priceSchedules,
      incomingOptions.reservedInstancesId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateRouteGet
  /*


&lt;p&gt;Creates a route in a route table within a VPC.&lt;/p&gt; &lt;p&gt;You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address &lt;code&gt;192.0.2.3&lt;/code&gt;, and the route table includes the following two IPv4 routes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/24&lt;/code&gt; (goes to some target A)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/28&lt;/code&gt; (goes to some target B)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both routes apply to the traffic destined for &lt;code&gt;192.0.2.3&lt;/code&gt;. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.&lt;/p&gt; &lt;p&gt;For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the route table for the route.
    /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'egressOnlyInternetGatewayId': "egressOnlyInternetGatewayId_example", // String | [IPv6 traffic only] The ID of an egress-only internet gateway.
      //  'gatewayId': "gatewayId_example", // String | The ID of an internet gateway or virtual private gateway attached to your VPC.
      //  'instanceId': "instanceId_example", // String | The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      //  'natGatewayId': "natGatewayId_example", // String | [IPv4 traffic only] The ID of a NAT gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of a transit gateway.
      //  'localGatewayId': "localGatewayId_example", // String | The ID of the local gateway.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The ID of a network interface.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example", // String | The ID of a VPC peering connection.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateRouteGet(
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateRouteTableGet
  /*


&lt;p&gt;Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateRouteTableGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSecurityGroupGet
  /*


&lt;p&gt;Creates a security group.&lt;/p&gt; &lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can&#39;t have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.&lt;/p&gt; &lt;p&gt;You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don&#39;t specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.&lt;/p&gt; &lt;p&gt;You can add or remove rules from your security groups using &lt;a&gt;AuthorizeSecurityGroupIngress&lt;/a&gt;, &lt;a&gt;AuthorizeSecurityGroupEgress&lt;/a&gt;, &lt;a&gt;RevokeSecurityGroupIngress&lt;/a&gt;, and &lt;a&gt;RevokeSecurityGroupEgress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateSecurityGroupGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp{}!$*</p // String | <p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length. Cannot start with <code>sg-</code>.</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp{}!$*</p // String | Region where you are making the request
    /*let groupDescription = "groupDescription_example";*/ /*let groupName = "groupName_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'vpcId': "vpcId_example", // String | [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSecurityGroupGet(
      incomingOptions.groupDescription,
      incomingOptions.groupName,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSnapshotGet
  /*


&lt;p&gt;Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.&lt;/p&gt; &lt;p&gt;When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.&lt;/p&gt; &lt;p&gt;You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is &lt;code&gt;pending&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.&lt;/p&gt; &lt;p&gt;You can tag your snapshots during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\&quot;&gt;Amazon Elastic Block Store&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateSnapshotGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EBS volume // String | Region where you are making the request
    /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description for the snapshot.
      tagSpecification: ["null"], // [String] | The tags to apply to the snapshot during creation.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSnapshotGet(
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSnapshotsGet
  /*


Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.

 */
  actionCreateSnapshotsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String |  A description propagated to every snapshot specified by the instance.
      //  'instanceSpecificationInstanceId': "instanceSpecificationInstanceId_example", // String | The instance details to specify which volumes should be snapshotted. The instance to specify which volumes should be snapshotted.
      //  'instanceSpecificationExcludeBootVolume': "instanceSpecificationExcludeBootVolume_example", // String | The instance details to specify which volumes should be snapshotted. Excludes the root volume from being snapshotted.
      tagSpecification: ["null"], // [String] | Tags to apply to every snapshot specified by the instance.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'copyTagsFromSource': "copyTagsFromSource_example", // String | Copies the tags from the specified volume to corresponding snapshot.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSnapshotsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSpotDatafeedSubscriptionGet
  /*


Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.

 */
  actionCreateSpotDatafeedSubscriptionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Amazon S3 bucket in which to store the Spot Instance data feed // String | Region where you are making the request
    /*let bucket = "bucket_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'prefix': "prefix_example", // String | A prefix for the data feed file names.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSpotDatafeedSubscriptionGet(
      incomingOptions.bucket,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSubnetGet
  /*


&lt;p&gt;Creates a subnet in an existing VPC.&lt;/p&gt; &lt;p&gt;When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can&#39;t change its CIDR block. The size of the subnet&#39;s IPv4 CIDR block can be the same as a VPC&#39;s IPv4 CIDR block, or a subset of a VPC&#39;s IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets&#39; CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).&lt;/p&gt; &lt;p&gt;If you&#39;ve associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. &lt;/p&gt; &lt;important&gt; &lt;p&gt;AWS reserves both the first four and the last IPv4 address in each subnet&#39;s CIDR block. They&#39;re not available for use.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you add more than one subnet to a VPC, they&#39;re set up in a star topology with a logical router in the middle.&lt;/p&gt; &lt;p&gt;If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn&#39;t change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It&#39;s therefore possible to have a subnet with no running instances (they&#39;re all stopped), but no remaining IP addresses available.&lt;/p&gt; &lt;p&gt;For more information about subnets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateSubnetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code> // String | The ID of the VPC // String | Region where you are making the request
    /*let cidrBlock = "cidrBlock_example";*/ /*let vpcId = "vpcId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'availabilityZone': "availabilityZone_example", // String | <p>The Availability Zone or Local Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet.</p> <p>To create a subnet in a Local Zone, set this value to the Local Zone ID, for example <code>us-west-2-lax-1a</code>. For information about the Regions that support Local Zones, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\">Available Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      //  'availabilityZoneId': "availabilityZoneId_example", // String | The AZ ID or the Local Zone ID of the subnet.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
      //  'outpostArn': "outpostArn_example", // String | The Amazon Resource Name (ARN) of the Outpost.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSubnetGet(
      incomingOptions.cidrBlock,
      incomingOptions.vpcId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTagsGet
  /*


&lt;p&gt;Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about creating IAM policies that control users&#39; access to resources based on tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html\&quot;&gt;Supported Resource-Level Permissions for Amazon EC2 API Actions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateTagsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p // [String] | The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
    /*let region = "region_example";*/ /*let resourceId = ["null"];*/ /*let tag = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTagsGet(
      incomingOptions.region,
      incomingOptions.resourceId,
      incomingOptions.tag,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorFilterGet
  /*


&lt;p&gt;Creates a Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;A Traffic Mirror filter is a set of rules that defines the traffic to mirror.&lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. To mirror traffic, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm\&quot;&gt;CreateTrafficMirrorFilterRule&lt;/a&gt; to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html\&quot;&gt;ModifyTrafficMirrorFilterNetworkServices&lt;/a&gt; to mirror supported network services.&lt;/p&gt;

 */
  actionCreateTrafficMirrorFilterGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | The description of the Traffic Mirror filter.
      tagSpecification: ["null"], // [String] | The tags to assign to a Traffic Mirror filter.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorFilterGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorFilterRuleGet
  /*


&lt;p&gt;Creates a Traffic Mirror filter rule. &lt;/p&gt; &lt;p&gt;A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.&lt;/p&gt; &lt;p&gt;You need the Traffic Mirror filter ID when you create the rule.&lt;/p&gt;

 */
  actionCreateTrafficMirrorFilterRuleGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the filter that this rule is associated with // String | The type of traffic (<code>ingress</code> | <code>egress</code>) // Number | The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number // String | The action to take (<code>accept</code> | <code>reject</code>) on the filtered traffic // String | The destination CIDR block to assign to the Traffic Mirror rule // String | The source CIDR block to assign to the Traffic Mirror rule // String | Region where you are making the request
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let trafficDirection = "trafficDirection_example";*/ /*let ruleNumber = 56;*/ /*let ruleAction = "ruleAction_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let sourceCidrBlock = "sourceCidrBlock_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'destinationPortRangeFromPort': "destinationPortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'destinationPortRangeToPort': "destinationPortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeFromPort': "sourcePortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeToPort': "sourcePortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      protocol: 56, // Number | <p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href=\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p>
      //  'description': "description_example", // String | The description of the Traffic Mirror rule.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorFilterRuleGet(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.trafficDirection,
      incomingOptions.ruleNumber,
      incomingOptions.ruleAction,
      incomingOptions.destinationCidrBlock,
      incomingOptions.sourceCidrBlock,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorSessionGet
  /*


&lt;p&gt;Creates a Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.&lt;/p&gt; &lt;p&gt;The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. &lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm\&quot;&gt;CreateTrafficMirrorFilter&lt;/a&gt; to create filter rules that specify the traffic to mirror.&lt;/p&gt;

 */
  actionCreateTrafficMirrorSessionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the source network interface // String | The ID of the Traffic Mirror target // String | The ID of the Traffic Mirror filter // Number | <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p // String | Region where you are making the request
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let trafficMirrorTargetId = "trafficMirrorTargetId_example";*/ /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let sessionNumber = 56;*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      packetLength: 56, // Number | <p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target.</p> <p>If you do not want to mirror the entire packet, use the <code>PacketLength</code> parameter to specify the number of bytes in each packet to mirror.</p>
      virtualNetworkId: 56, // Number | The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see <a href=\"https://tools.ietf.org/html/rfc7348\">RFC 7348</a>. If you do not specify a <code>VirtualNetworkId</code>, an account-wide unique id is chosen at random.
      //  'description': "description_example", // String | The description of the Traffic Mirror session.
      tagSpecification: ["null"], // [String] | The tags to assign to a Traffic Mirror session.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorSessionGet(
      incomingOptions.networkInterfaceId,
      incomingOptions.trafficMirrorTargetId,
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.sessionNumber,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorTargetGet
  /*


&lt;p&gt;Creates a target for your Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target can be a network interface, or a Network Load Balancer.&lt;/p&gt; &lt;p&gt;To use the target in a Traffic Mirror session, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm\&quot;&gt;CreateTrafficMirrorSession&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateTrafficMirrorTargetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The network interface ID that is associated with the target.
      //  'networkLoadBalancerArn': "networkLoadBalancerArn_example", // String | The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
      //  'description': "description_example", // String | The description of the Traffic Mirror target.
      tagSpecification: ["null"], // [String] | The tags to assign to the Traffic Mirror target.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorTargetGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayGet
  /*


&lt;p&gt;Creates a transit gateway.&lt;/p&gt; &lt;p&gt;You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the &lt;code&gt;available&lt;/code&gt; state, you can attach your VPCs and VPN connections to the transit gateway.&lt;/p&gt; &lt;p&gt;To attach your VPCs, use &lt;a&gt;CreateTransitGatewayVpcAttachment&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To attach a VPN connection, use &lt;a&gt;CreateCustomerGateway&lt;/a&gt; to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to &lt;a&gt;CreateVpnConnection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use &lt;a&gt;CreateTransitGatewayRouteTable&lt;/a&gt; to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use &lt;a&gt;EnableTransitGatewayRouteTablePropagation&lt;/a&gt; to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use &lt;a&gt;AssociateTransitGatewayRouteTable&lt;/a&gt; to associate a resource attachment with a transit gateway route table.&lt;/p&gt;

 */
  actionCreateTransitGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description of the transit gateway.
      //  'optionsAmazonSideAsn': "optionsAmazonSideAsn_example", // String | Describes the options for a transit gateway. A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
      //  'optionsAutoAcceptSharedAttachments': "optionsAutoAcceptSharedAttachments_example", // String | Describes the options for a transit gateway. Enable or disable automatic acceptance of attachment requests. The default is <code>disable</code>.
      //  'optionsDefaultRouteTableAssociation': "optionsDefaultRouteTableAssociation_example", // String | Describes the options for a transit gateway. Enable or disable automatic association with the default association route table. The default is <code>enable</code>.
      //  'optionsDefaultRouteTablePropagation': "optionsDefaultRouteTablePropagation_example", // String | Describes the options for a transit gateway. Enable or disable automatic propagation of routes to the default propagation route table. The default is <code>enable</code>.
      //  'optionsVpnEcmpSupport': "optionsVpnEcmpSupport_example", // String | Describes the options for a transit gateway. Enable or disable Equal Cost Multipath Protocol support.
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a transit gateway. Enable or disable DNS support.
      //  'optionsMulticastSupport': "optionsMulticastSupport_example", // String | Describes the options for a transit gateway. Indicates whether multicast is enabled on the transit gateway
      tagSpecification: ["null"], // [String] | The tags to apply to the transit gateway.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayMulticastDomainGet
  /*


&lt;p&gt;Creates a multicast domain using the specified transit gateway.&lt;/p&gt; &lt;p&gt;The transit gateway must be in the available state before you create a domain. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html\&quot;&gt;DescribeTransitGateways&lt;/a&gt; to see the state of transit gateway.&lt;/p&gt;

 */
  actionCreateTransitGatewayMulticastDomainGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | Region where you are making the request
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      tagSpecification: ["null"], // [String] | The tags for the transit gateway multicast domain.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayMulticastDomainGet(
      incomingOptions.transitGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayPeeringAttachmentGet
  /*


&lt;p&gt;Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. &lt;/p&gt; &lt;p&gt;After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.&lt;/p&gt;

 */
  actionCreateTransitGatewayPeeringAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | The ID of the peer transit gateway with which to create the peering attachment // String | The AWS account ID of the owner of the peer transit gateway // String | The Region where the peer transit gateway is located // String | Region where you are making the request
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let peerTransitGatewayId = "peerTransitGatewayId_example";*/ /*let peerAccountId = "peerAccountId_example";*/ /*let peerRegion = "peerRegion_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      tagSpecification: ["null"], // [String] | The tags to apply to the transit gateway peering attachment.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayPeeringAttachmentGet(
      incomingOptions.transitGatewayId,
      incomingOptions.peerTransitGatewayId,
      incomingOptions.peerAccountId,
      incomingOptions.peerRegion,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayRouteGet
  /*


Creates a static route for the specified transit gateway route table.

 */
  actionCreateTransitGatewayRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for destination matches. Routing decisions are based on the most specific match // String | The ID of the transit gateway route table // String | Region where you are making the request
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      blackhole: true, // Boolean | Indicates whether to drop traffic that matches this route.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayRouteTableGet
  /*


Creates a route table for the specified transit gateway.

 */
  actionCreateTransitGatewayRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | Region where you are making the request
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      tagSpecifications: ["null"], // [String] | The tags to apply to the transit gateway route table.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayRouteTableGet(
      incomingOptions.transitGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayVpcAttachmentGet
  /*


&lt;p&gt;Attaches the specified VPC to the specified transit gateway.&lt;/p&gt; &lt;p&gt;If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.&lt;/p&gt; &lt;p&gt;To send VPC traffic to an attached transit gateway, add a route to the VPC route table using &lt;a&gt;CreateRoute&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateTransitGatewayVpcAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | The ID of the VPC // [String] | The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet // String | Region where you are making the request
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ /*let subnetIds = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a VPC attachment. Enable or disable DNS support. The default is <code>enable</code>.
      //  'optionsIpv6Support': "optionsIpv6Support_example", // String | Describes the options for a VPC attachment. Enable or disable IPv6 support. The default is <code>enable</code>.
      tagSpecifications: ["null"], // [String] | The tags to apply to the VPC attachment.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayVpcAttachmentGet(
      incomingOptions.transitGatewayId,
      incomingOptions.vpcId,
      incomingOptions.subnetIds,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVolumeGet
  /*


&lt;p&gt;Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html\&quot;&gt;Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.&lt;/p&gt; &lt;p&gt;You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can tag your volumes during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html\&quot;&gt;Creating an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to create the volume // String | Region where you are making the request
    /*let availabilityZone = "availabilityZone_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      encrypted: true, // Boolean | <p>Specifies whether the volume should be encrypted. The effect of setting the encryption state to <code>true</code> depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\">Encryption by Default</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\">Supported Instance Types</a>.</p>
      iops: 56, // Number | <p>The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This parameter is valid only for Provisioned IOPS SSD (io1) volumes.</p>
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p>
      //  'outpostArn': "outpostArn_example", // String | The Amazon Resource Name (ARN) of the Outpost.
      size: 56, // Number | <p>The size of the volume, in GiBs.</p> <p>Constraints: 1-16,384 for <code>gp2</code>, 4-16,384 for <code>io1</code>, 500-16,384 for <code>st1</code>, 500-16,384 for <code>sc1</code>, and 1-1,024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p> <note> <p>At least one of Size or SnapshotId is required.</p> </note>
      //  'snapshotId': "snapshotId_example", // String | <p>The snapshot from which to create the volume.</p> <note> <p>At least one of Size or SnapshotId are required.</p> </note>
      //  'volumeType': "volumeType_example", // String | <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Default: <code>gp2</code> </p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      tagSpecification: ["null"], // [String] | The tags to apply to the volume during creation.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVolumeGet(
      incomingOptions.availabilityZone,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointConnectionNotificationGet
  /*


&lt;p&gt;Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\&quot;&gt;Create a Topic&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can create a connection notification for interface endpoints only.&lt;/p&gt;

 */
  actionCreateVpcEndpointConnectionNotificationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ARN of the SNS topic for the notifications // [String] | One or more endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
    /*let region = "region_example";*/ /*let connectionNotificationArn = "connectionNotificationArn_example";*/ /*let connectionEvents = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'serviceId': "serviceId_example", // String | The ID of the endpoint service.
      //  'vpcEndpointId': "vpcEndpointId_example", // String | The ID of the endpoint.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointConnectionNotificationGet(
      incomingOptions.region,
      incomingOptions.connectionNotificationArn,
      incomingOptions.connectionEvents,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointGet
  /*


&lt;p&gt;Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;gateway&lt;/code&gt; endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.&lt;/p&gt; &lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeVpcEndpointServices&lt;/a&gt; to get a list of supported services.&lt;/p&gt;

 */
  actionCreateVpcEndpointGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC in which the endpoint will be used // String | The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service provider.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ /*let serviceName = "serviceName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcEndpointType': "vpcEndpointType_example", // String | <p>The type of endpoint.</p> <p>Default: Gateway</p>
      //  'policyDocument': "policyDocument_example", // String | A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
      routeTableId: ["null"], // [String] | (Gateway endpoint) One or more route table IDs.
      subnetId: ["null"], // [String] | (Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.
      securityGroupId: ["null"], // [String] | (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      privateDnsEnabled: true, // Boolean | <p>(Interface endpoint) Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, <code>kinesis.us-east-1.amazonaws.com</code>) which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.</p> <p>To use a private hosted zone, you must set the following VPC attributes to <code>true</code>: <code>enableDnsHostnames</code> and <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC attributes.</p> <p>Default: <code>true</code> </p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.serviceName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointServiceConfigurationGet
  /*


&lt;p&gt;Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.&lt;/p&gt; &lt;p&gt;To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC Endpoint Services&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. &lt;/p&gt;

 */
  actionCreateVpcEndpointServiceConfigurationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
    /*let region = "region_example";*/ /*let networkLoadBalancerArn = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      acceptanceRequired: true, // Boolean | Indicate whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointServiceConfigurationGet(
      incomingOptions.region,
      incomingOptions.networkLoadBalancerArn,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcGet
  /*


&lt;p&gt;Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon&#39;s pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.&lt;/p&gt; &lt;p&gt;By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the instance tenancy value for the VPC when you create it. You can&#39;t change this value for the VPC after you create it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code> // String | Region where you are making the request
    /*let cidrBlock = "cidrBlock_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      amazonProvidedIpv6CidrBlock: true, // Boolean | Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceTenancy': "instanceTenancy_example", // String | <p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
      //  'ipv6CidrBlockNetworkBorderGroup': "ipv6CidrBlockNetworkBorderGroup_example", // String | <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcGet(
      incomingOptions.cidrBlock,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcPeeringConnectionGet
  /*


&lt;p&gt;Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Limitations and rules apply to a VPC peering connection. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations\&quot;&gt;limitations&lt;/a&gt; section in the &lt;i&gt;VPC Peering Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.&lt;/p&gt; &lt;p&gt;If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of &lt;code&gt;failed&lt;/code&gt;.&lt;/p&gt;

 */
  actionCreateVpcPeeringConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'peerOwnerId': "peerOwnerId_example", // String | <p>The AWS account ID of the owner of the accepter VPC.</p> <p>Default: Your AWS account ID</p>
      //  'peerVpcId': "peerVpcId_example", // String | The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
      //  'vpcId': "vpcId_example", // String | The ID of the requester VPC. You must specify this parameter in the request.
      //  'peerRegion': "peerRegion_example", // String | <p>The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.</p> <p>Default: The Region in which you make the request.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcPeeringConnectionGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnConnectionGet
  /*


&lt;p&gt;Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is &lt;code&gt;ipsec.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response includes information that you need to give to your network administrator to configure your customer gateway.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the customer gateway // String | The type of VPN connection (<code>ipsec.1</code>) // String | Region where you are making the request
    /*let customerGatewayId = "customerGatewayId_example";*/ /*let type = "type_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'vpnGatewayId': "vpnGatewayId_example", // String | The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'optionsEnableAcceleration': "optionsEnableAcceleration_example", // String | Describes VPN connection options. <p>Indicate whether to enable acceleration for the VPN connection.</p> <p>Default: <code>false</code> </p>
      //  'optionsStaticRoutesOnly': "optionsStaticRoutesOnly_example", // String | Describes VPN connection options. <p>Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a static route.</p> <p>Default: <code>false</code> </p>
      optionsTunnelOptions: ["null"], // [String] | Describes VPN connection options. The tunnel options for the VPN connection.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnConnectionGet(
      incomingOptions.customerGatewayId,
      incomingOptions.type,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnConnectionRouteGet
  /*


&lt;p&gt;Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnConnectionRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR block associated with the local subnet of the customer network // String | The ID of the VPN connection.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnConnectionRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnGatewayGet
  /*


&lt;p&gt;Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The type of VPN connection this virtual private gateway supports // String | Region where you are making the request
    /*let type = "type_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone for the virtual private gateway.
      amazonSideAsn: 56, // Number | <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p> <p>Default: 64512</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnGatewayGet(
      incomingOptions.type,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteClientVpnEndpointGet
  /*


Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.

 */
  actionDeleteClientVpnEndpointGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN to be deleted // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteClientVpnEndpointGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteClientVpnRouteGet
  /*


Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the &lt;b&gt;CreateClientVpnRoute&lt;/b&gt; action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.

 */
  actionDeleteClientVpnRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint from which the route is to be deleted // String | The IPv4 address range, in CIDR notation, of the route to be deleted // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'targetVpcSubnetId': "targetVpcSubnetId_example", // String | The ID of the target subnet used by the route.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteClientVpnRouteGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteCustomerGatewayGet
  /*


Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.

 */
  actionDeleteCustomerGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the customer gateway // String | Region where you are making the request
    /*let customerGatewayId = "customerGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteCustomerGatewayGet(
      incomingOptions.customerGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteDhcpOptionsGet
  /*


Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.

 */
  actionDeleteDhcpOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the DHCP options set // String | Region where you are making the request
    /*let dhcpOptionsId = "dhcpOptionsId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteDhcpOptionsGet(
      incomingOptions.dhcpOptionsId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteEgressOnlyInternetGatewayGet
  /*


Deletes an egress-only internet gateway.

 */
  actionDeleteEgressOnlyInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the egress-only internet gateway.
    /*let region = "region_example";*/ /*let egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteEgressOnlyInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.egressOnlyInternetGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFleetsGet
  /*


&lt;p&gt;Deletes the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the &lt;code&gt;deleted_terminating&lt;/code&gt; state. Otherwise, the EC2 Fleet enters the &lt;code&gt;deleted_running&lt;/code&gt; state, and the instances continue to run until they are interrupted or you terminate them manually. &lt;/p&gt;

 */
  actionDeleteFleetsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the EC2 Fleets // Boolean | Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.
    /*let region = "region_example";*/ /*let fleetId = ["null"];*/ /*let terminateInstances = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFleetsGet(
      incomingOptions.region,
      incomingOptions.fleetId,
      incomingOptions.terminateInstances,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFlowLogsGet
  /*


Deletes one or more flow logs.

 */
  actionDeleteFlowLogsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
    /*let region = "region_example";*/ /*let flowLogId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFlowLogsGet(
      incomingOptions.region,
      incomingOptions.flowLogId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFpgaImageGet
  /*


Deletes the specified Amazon FPGA Image (AFI).

 */
  actionDeleteFpgaImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the AFI.
    /*let region = "region_example";*/ /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFpgaImageGet(
      incomingOptions.region,
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteInternetGatewayGet
  /*


Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.

 */
  actionDeleteInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the internet gateway.
    /*let region = "region_example";*/ /*let internetGatewayId = "internetGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.internetGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteKeyPairGet
  /*


Deletes the specified key pair, by removing the public key from Amazon EC2.

 */
  actionDeleteKeyPairGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The name of the key pair // String | Region where you are making the request
    /*let keyName = "keyName_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteKeyPairGet(
      incomingOptions.keyName,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteLaunchTemplateGet
  /*


Deletes a launch template. Deleting a launch template deletes all of its versions.

 */
  actionDeleteLaunchTemplateGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLaunchTemplateGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLaunchTemplateVersionsGet
  /*


Deletes one or more versions of a launch template. You cannot delete the default version of a launch template you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using &lt;a&gt;DeleteLaunchTemplate&lt;/a&gt;.

 */
  actionDeleteLaunchTemplateVersionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The version numbers of one or more launch template versions to delete.
    /*let region = "region_example";*/ /*let launchTemplateVersion = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLaunchTemplateVersionsGet(
      incomingOptions.region,
      incomingOptions.launchTemplateVersion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLocalGatewayRouteGet
  /*


Deletes the specified route from the specified local gateway route table.

 */
  actionDeleteLocalGatewayRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range for the route. This must match the CIDR for the route exactly // String | The ID of the local gateway route table // String | Region where you are making the request
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLocalGatewayRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLocalGatewayRouteTableVpcAssociationGet
  /*


Deletes the specified association between a VPC and local gateway route table.

 */
  actionDeleteLocalGatewayRouteTableVpcAssociationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the association // String | Region where you are making the request
    /*let localGatewayRouteTableVpcAssociationId = "localGatewayRouteTableVpcAssociationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLocalGatewayRouteTableVpcAssociationGet(
      incomingOptions.localGatewayRouteTableVpcAssociationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteNatGatewayGet
  /*


Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.

 */
  actionDeleteNatGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the NAT gateway.
    /*let natGatewayId = "natGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNatGatewayGet(
      incomingOptions.natGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkAclEntryGet
  /*


Deletes the specified ingress or egress entry (rule) from the specified network ACL.

 */
  actionDeleteNetworkAclEntryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // Boolean | Indicates whether the rule is an egress rule // String | The ID of the network ACL // Number | The rule number of the entry to delete.
    /*let region = "region_example";*/ /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkAclEntryGet(
      incomingOptions.region,
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkAclGet
  /*


Deletes the specified network ACL. You can&#39;t delete the ACL if it&#39;s associated with any subnets. You can&#39;t delete the default network ACL.

 */
  actionDeleteNetworkAclGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the network ACL.
    /*let region = "region_example";*/ /*let networkAclId = "networkAclId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkAclGet(
      incomingOptions.region,
      incomingOptions.networkAclId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkInterfaceGet
  /*


Deletes the specified network interface. You must detach the network interface before you can delete it.

 */
  actionDeleteNetworkInterfaceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the network interface.
    /*let region = "region_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkInterfaceGet(
      incomingOptions.region,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkInterfacePermissionGet
  /*


Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you&#39;re removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.

 */
  actionDeleteNetworkInterfacePermissionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface permission // String | Region where you are making the request
    /*let networkInterfacePermissionId = "networkInterfacePermissionId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      force: true, // Boolean | Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkInterfacePermissionGet(
      incomingOptions.networkInterfacePermissionId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeletePlacementGroupGet
  /*


Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDeletePlacementGroupGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The name of the placement group.
    /*let region = "region_example";*/ /*let groupName = "groupName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeletePlacementGroupGet(
      incomingOptions.region,
      incomingOptions.groupName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteQueuedReservedInstancesGet
  /*


Deletes the queued purchases for the specified Reserved Instances.

 */
  actionDeleteQueuedReservedInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the Reserved Instances.
    /*let region = "region_example";*/ /*let reservedInstancesId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteQueuedReservedInstancesGet(
      incomingOptions.region,
      incomingOptions.reservedInstancesId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteRouteGet
  /*


Deletes the specified route from the specified route table.

 */
  actionDeleteRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the route table.
    /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteRouteGet(
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteRouteTableGet
  /*


Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can&#39;t delete the main route table.

 */
  actionDeleteRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the route table.
    /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteRouteTableGet(
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSecurityGroupGet
  /*


&lt;p&gt;Deletes a security group.&lt;/p&gt; &lt;p&gt;If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with &lt;code&gt;InvalidGroup.InUse&lt;/code&gt; in EC2-Classic or &lt;code&gt;DependencyViolation&lt;/code&gt; in EC2-VPC.&lt;/p&gt;

 */
  actionDeleteSecurityGroupGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'groupId': "groupId_example", // String | The ID of the security group. Required for a nondefault VPC.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSecurityGroupGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSnapshotGet
  /*


&lt;p&gt;Deletes the specified snapshot.&lt;/p&gt; &lt;p&gt;When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.&lt;/p&gt; &lt;p&gt;You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html\&quot;&gt;Deleting an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteSnapshotGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EBS snapshot // String | Region where you are making the request
    /*let snapshotId = "snapshotId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSnapshotGet(
      incomingOptions.snapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSpotDatafeedSubscriptionGet
  /*


Deletes the data feed for Spot Instances.

 */
  actionDeleteSpotDatafeedSubscriptionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSpotDatafeedSubscriptionGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSubnetGet
  /*


Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.

 */
  actionDeleteSubnetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the subnet // String | Region where you are making the request
    /*let subnetId = "subnetId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSubnetGet(
      incomingOptions.subnetId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteTagsGet
  /*


&lt;p&gt;Deletes the specified set of tags from the specified set of resources.&lt;/p&gt; &lt;p&gt;To list the current tags, use &lt;a&gt;DescribeTags&lt;/a&gt;. For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteTagsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    /*let region = "region_example";*/ /*let resourceId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      tag: ["null"], // [String] | <p>The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string.</p> <p>If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the <code>aws:</code> prefix).</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTagsGet(
      incomingOptions.region,
      incomingOptions.resourceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorFilterGet
  /*


&lt;p&gt;Deletes the specified Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.&lt;/p&gt;

 */
  actionDeleteTrafficMirrorFilterGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror filter // String | Region where you are making the request
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorFilterGet(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorFilterRuleGet
  /*


Deletes the specified Traffic Mirror rule.

 */
  actionDeleteTrafficMirrorFilterRuleGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror rule // String | Region where you are making the request
    /*let trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorFilterRuleGet(
      incomingOptions.trafficMirrorFilterRuleId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorSessionGet
  /*


Deletes the specified Traffic Mirror session.

 */
  actionDeleteTrafficMirrorSessionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror session // String | Region where you are making the request
    /*let trafficMirrorSessionId = "trafficMirrorSessionId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorSessionGet(
      incomingOptions.trafficMirrorSessionId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorTargetGet
  /*


&lt;p&gt;Deletes the specified Traffic Mirror target.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.&lt;/p&gt;

 */
  actionDeleteTrafficMirrorTargetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror target // String | Region where you are making the request
    /*let trafficMirrorTargetId = "trafficMirrorTargetId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorTargetGet(
      incomingOptions.trafficMirrorTargetId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayGet
  /*


Deletes the specified transit gateway.

 */
  actionDeleteTransitGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | Region where you are making the request
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayGet(
      incomingOptions.transitGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayMulticastDomainGet
  /*


Deletes the specified transit gateway multicast domain.

 */
  actionDeleteTransitGatewayMulticastDomainGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway multicast domain // String | Region where you are making the request
    /*let transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayMulticastDomainGet(
      incomingOptions.transitGatewayMulticastDomainId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayPeeringAttachmentGet
  /*


Deletes a transit gateway peering attachment.

 */
  actionDeleteTransitGatewayPeeringAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway peering attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayPeeringAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayRouteGet
  /*


Deletes the specified route from the specified transit gateway route table.

 */
  actionDeleteTransitGatewayRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The CIDR range for the route. This must match the CIDR for the route exactly // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayRouteGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayRouteTableGet
  /*


Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.

 */
  actionDeleteTransitGatewayRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayRouteTableGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayVpcAttachmentGet
  /*


Deletes the specified VPC attachment.

 */
  actionDeleteTransitGatewayVpcAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayVpcAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVolumeGet
  /*


&lt;p&gt;Deletes the specified EBS volume. The volume must be in the &lt;code&gt;available&lt;/code&gt; state (not attached to an instance).&lt;/p&gt; &lt;p&gt;The volume can remain in the &lt;code&gt;deleting&lt;/code&gt; state for several minutes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html\&quot;&gt;Deleting an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume // String | Region where you are making the request
    /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVolumeGet(
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointConnectionNotificationsGet
  /*


Deletes one or more VPC endpoint connection notifications.

 */
  actionDeleteVpcEndpointConnectionNotificationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | One or more notification IDs.
    /*let region = "region_example";*/ /*let connectionNotificationId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointConnectionNotificationsGet(
      incomingOptions.region,
      incomingOptions.connectionNotificationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointServiceConfigurationsGet
  /*


Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any &lt;code&gt;Available&lt;/code&gt; or &lt;code&gt;PendingAcceptance&lt;/code&gt; interface endpoint connections that are attached to the service.

 */
  actionDeleteVpcEndpointServiceConfigurationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of one or more services.
    /*let region = "region_example";*/ /*let serviceId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointServiceConfigurationsGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointsGet
  /*


Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.

 */
  actionDeleteVpcEndpointsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | One or more VPC endpoint IDs.
    /*let region = "region_example";*/ /*let vpcEndpointId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointsGet(
      incomingOptions.region,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcGet
  /*


Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.

 */
  actionDeleteVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | Region where you are making the request
    /*let vpcId = "vpcId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcGet(
      incomingOptions.vpcId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcPeeringConnectionGet
  /*


Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it&#39;s in the &lt;code&gt;active&lt;/code&gt; state. The owner of the requester VPC can delete a VPC peering connection in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. You cannot delete a VPC peering connection that&#39;s in the &lt;code&gt;failed&lt;/code&gt; state.

 */
  actionDeleteVpcPeeringConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC peering connection.
    /*let region = "region_example";*/ /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcPeeringConnectionGet(
      incomingOptions.region,
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnConnectionGet
  /*


&lt;p&gt;Deletes the specified VPN connection.&lt;/p&gt; &lt;p&gt;If you&#39;re deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.&lt;/p&gt;

 */
  actionDeleteVpnConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPN connection // String | Region where you are making the request
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnConnectionGet(
      incomingOptions.vpnConnectionId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnConnectionRouteGet
  /*


Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.

 */
  actionDeleteVpnConnectionRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR block associated with the local subnet of the customer network // String | The ID of the VPN connection.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnConnectionRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnGatewayGet
  /*


Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don&#39;t need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.

 */
  actionDeleteVpnGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway // String | Region where you are making the request
    /*let vpnGatewayId = "vpnGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnGatewayGet(
      incomingOptions.vpnGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeprovisionByoipCidrGet
  /*


&lt;p&gt;Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.&lt;/p&gt; &lt;p&gt;Before you can release an address range, you must stop advertising it using &lt;a&gt;WithdrawByoipCidr&lt;/a&gt; and you must not have any IP addresses allocated from its address range.&lt;/p&gt;

 */
  actionDeprovisionByoipCidrGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range // String | Region where you are making the request
    /*let cidr = "cidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeprovisionByoipCidrGet(
      incomingOptions.cidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeregisterImageGet
  /*


&lt;p&gt;Deregisters the specified AMI. After you deregister an AMI, it can&#39;t be used to launch new instances however, it doesn&#39;t affect any instances that you&#39;ve already launched from the AMI. You&#39;ll continue to incur usage costs for those instances until you terminate them.&lt;/p&gt; &lt;p&gt;When you deregister an Amazon EBS-backed AMI, it doesn&#39;t affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn&#39;t affect the files that you uploaded to Amazon S3 when you created the AMI.&lt;/p&gt;

 */
  actionDeregisterImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AMI // String | Region where you are making the request
    /*let imageId = "imageId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterImageGet(
      incomingOptions.imageId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeregisterTransitGatewayMulticastGroupMembersGet
  /*


Deregisters the specified members (network interfaces) from the transit gateway multicast group.

 */
  actionDeregisterTransitGatewayMulticastGroupMembersGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      networkInterfaceIds: ["null"], // [String] | The IDs of the group members' network interfaces.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterTransitGatewayMulticastGroupMembersGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeregisterTransitGatewayMulticastGroupSourcesGet
  /*


Deregisters the specified sources (network interfaces) from the transit gateway multicast group.

 */
  actionDeregisterTransitGatewayMulticastGroupSourcesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      networkInterfaceIds: ["null"], // [String] | The IDs of the group sources' network interfaces.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterTransitGatewayMulticastGroupSourcesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAccountAttributesGet
  /*


&lt;p&gt;Describes attributes of your AWS account. The following are the supported account attributes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;supported-platforms&lt;/code&gt;: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;default-vpc&lt;/code&gt;: The ID of the default VPC for your account, or &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-instances&lt;/code&gt;: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits\&quot;&gt;On-Demand Instance Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-security-groups-per-interface&lt;/code&gt;: The maximum number of security groups that you can assign to a network interface.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDescribeAccountAttributesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      attributeName: ["null"], // [String] | The account attribute names.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAccountAttributesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAddressesGet
  /*


&lt;p&gt;Describes the specified Elastic IP addresses or all of your Elastic IP addresses.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeAddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-border-group</code> - The location from where the IP address is advertised.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      publicIp: ["null"], // [String] | <p>One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p>
      allocationId: ["null"], // [String] | [EC2-VPC] Information about the allocation IDs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAddressesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAggregateIdFormatGet
  /*


&lt;p&gt;Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).&lt;/p&gt; &lt;p&gt;This request only returns information about resource types that support longer IDs.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt;

 */
  actionDescribeAggregateIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAggregateIdFormatGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAvailabilityZonesGet
  /*


&lt;p&gt;Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.&lt;/p&gt; &lt;p&gt;For more information about Availability Zones and Local Zones, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\&quot;&gt;Regions and Availability Zones&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeAvailabilityZonesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>group-name</code> - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, <code>us-west-2-lax-1</code>).</p> </li> <li> <p> <code>message</code> - The Availability Zone or Local Zone message.</p> </li> <li> <p> <code>opt-in-status</code> - The opt in status (<code>opted-in</code>, and <code>not-opted-in</code> | <code>opt-in-not-required</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region for the Availability Zone or Local Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone or Local Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-id</code> - The ID of the Availability Zone (for example, <code>use1-az1</code>) or the Local Zone (for example, use <code>usw2-lax1-az1</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>) or the Local Zone (for example, use <code>us-west-2-lax-1a</code>).</p> </li> </ul>
      zoneName: ["null"], // [String] | The names of the Availability Zones and Local Zones.
      zoneId: ["null"], // [String] | The IDs of the Availability Zones and Local Zones.
      allAvailabilityZones: true, // Boolean | <p>Include all Availability Zones and Local Zones regardless of your opt in status.</p> <p>If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAvailabilityZonesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeBundleTasksGet
  /*


&lt;p&gt;Describes the specified bundle tasks or all of your bundle tasks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use &lt;code&gt;RegisterImage&lt;/code&gt; with the Amazon S3 bucket name and image manifest name you provided to the bundle task.&lt;/p&gt; &lt;/note&gt;

 */
  actionDescribeBundleTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      bundleId: ["null"], // [String] | <p>The bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p>
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeBundleTasksGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeByoipCidrsGet
  /*


&lt;p&gt;Describes the IP address ranges that were specified in calls to &lt;a&gt;ProvisionByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe the address pools that were created when you provisioned the address ranges, use &lt;a&gt;DescribePublicIpv4Pools&lt;/a&gt;.&lt;/p&gt;

 */
  actionDescribeByoipCidrsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    /*let region = "region_example";*/ /*let maxResults = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeByoipCidrsGet(
      incomingOptions.region,
      incomingOptions.maxResults,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCapacityReservationsGet
  /*


Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you&#39;re currently using.

 */
  actionDescribeCapacityReservationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      capacityReservationId: ["null"], // [String] | The ID of the Capacity Reservation.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.
      filter: ["null"], // [String] | One or more filters.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCapacityReservationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClassicLinkInstancesGet
  /*


Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.

 */
  actionDescribeClassicLinkInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC to which the instance is linked.</p> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceId: ["null"], // [String] | One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
      maxResults: 56, // Number | <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClassicLinkInstancesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnAuthorizationRulesGet
  /*


Describes the authorization rules for a specified Client VPN endpoint.

 */
  actionDescribeClientVpnAuthorizationRulesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      filter: ["null"], // [String] | One or more filters. Filter names and values are case-sensitive.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnAuthorizationRulesGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnConnectionsGet
  /*


Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.

 */
  actionDescribeClientVpnConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | One or more filters. Filter names and values are case-sensitive.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnConnectionsGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnEndpointsGet
  /*


Describes one or more Client VPN endpoints in the account.

 */
  actionDescribeClientVpnEndpointsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      clientVpnEndpointId: ["null"], // [String] | The ID of the Client VPN endpoint.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      filter: ["null"], // [String] | One or more filters. Filter names and values are case-sensitive.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnEndpointsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnRoutesGet
  /*


Describes the routes for the specified Client VPN endpoint.

 */
  actionDescribeClientVpnRoutesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | One or more filters. Filter names and values are case-sensitive.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnRoutesGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnTargetNetworksGet
  /*


Describes the target networks associated with the specified Client VPN endpoint.

 */
  actionDescribeClientVpnTargetNetworksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      associationIds: ["null"], // [String] | The IDs of the target network associations.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      filter: ["null"], // [String] | One or more filters. Filter names and values are case-sensitive.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnTargetNetworksGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCoipPoolsGet
  /*


Describes the specified customer-owned address pools or all of your customer-owned address pools.

 */
  actionDescribeCoipPoolsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      poolId: ["null"], // [String] | The IDs of the address pools.
      filter: ["null"], // [String] | <p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-pool.pool-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-pool.local-gateway-route-table-id</code> </p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCoipPoolsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeConversionTasksGet
  /*


&lt;p&gt;Describes the specified conversion tasks or all your conversion tasks. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/\&quot;&gt;VM Import/Export User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionDescribeConversionTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      conversionTaskId: ["null"], // [String] | The conversion task IDs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeConversionTasksGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCustomerGatewaysGet
  /*


&lt;p&gt;Describes one or more of your VPN customer gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeCustomerGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      customerGatewayId: ["null"], // [String] | <p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p>
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway's Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCustomerGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeDhcpOptionsGet
  /*


&lt;p&gt;Describes one or more of your DHCP options sets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeDhcpOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dhcpOptionsId: ["null"], // [String] | <p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p>
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a DHCP options set.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the DHCP options set.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeDhcpOptionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeEgressOnlyInternetGatewaysGet
  /*


Describes one or more of your egress-only internet gateways.

 */
  actionDescribeEgressOnlyInternetGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      egressOnlyInternetGatewayId: ["null"], // [String] | One or more egress-only internet gateway IDs.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeEgressOnlyInternetGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeElasticGpusGet
  /*


Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\&quot;&gt;Amazon Elastic Graphics&lt;/a&gt;.

 */
  actionDescribeElasticGpusGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      elasticGpuId: ["null"], // [String] | The Elastic Graphics accelerator IDs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone in which the Elastic Graphics accelerator resides.</p> </li> <li> <p> <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator (<code>OK</code> | <code>IMPAIRED</code>).</p> </li> <li> <p> <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator (<code>ATTACHED</code>).</p> </li> <li> <p> <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator for example, <code>eg1.medium</code>.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance to which the Elastic Graphics accelerator is associated.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeElasticGpusGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeExportImageTasksGet
  /*


Describes the specified export image tasks or all your export image tasks.

 */
  actionDescribeExportImageTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.
      exportImageTaskId: ["null"], // [String] | The IDs of the export image tasks.
      maxResults: 56, // Number | The maximum number of results to return in a single call.
      //  'nextToken': "nextToken_example", // String | A token that indicates the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeExportImageTasksGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeExportTasksGet
  /*


Describes the specified export instance tasks or all your export instance tasks.

 */
  actionDescribeExportTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      exportTaskId: ["null"], // [String] | The export task IDs.
      filter: ["null"], // [String] |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeExportTasksGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFastSnapshotRestoresGet
  /*


Describes the state of fast snapshot restores for your snapshots.

 */
  actionDescribeFastSnapshotRestoresGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters. The possible values are:</p> <ul> <li> <p> <code>availability-zone</code>: The Availability Zone of the snapshot.</p> </li> <li> <p> <code>owner-id</code>: The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>snapshot-id</code>: The ID of the snapshot.</p> </li> <li> <p> <code>state</code>: The state of fast snapshot restores for the snapshot (<code>enabling</code> | <code>optimizing</code> | <code>enabled</code> | <code>disabling</code> | <code>disabled</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFastSnapshotRestoresGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetHistoryGet
  /*


&lt;p&gt;Describes the events for the specified EC2 Fleet during the specified time.&lt;/p&gt; &lt;p&gt;EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.&lt;/p&gt;

 */
  actionDescribeFleetHistoryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the EC2 Fleet // Date | The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /*let region = "region_example";*/ /*let fleetId = "fleetId_example";*/ /*let startTime = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'eventType': "eventType_example", // String | The type of events to describe. By default, all events are described.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetHistoryGet(
      incomingOptions.region,
      incomingOptions.fleetId,
      incomingOptions.startTime,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetInstancesGet
  /*


Describes the running instances for the specified EC2 Fleet.

 */
  actionDescribeFleetInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the EC2 Fleet.
    /*let region = "region_example";*/ /*let fleetId = "fleetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetInstancesGet(
      incomingOptions.region,
      incomingOptions.fleetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetsGet
  /*


Describes the specified EC2 Fleets or all of your EC2 Fleets.

 */
  actionDescribeFleetsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      fleetId: ["null"], // [String] | The ID of the EC2 Fleets.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> | <code>pending-fulfillment</code> | <code>pending-termination</code> | <code>fulfilled</code>).</p> </li> <li> <p> <code>excess-capacity-termination-policy</code> - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> | <code>active</code> | <code>deleted</code> | <code>failed</code> | <code>deleted-running</code> | <code>deleted-terminating</code> | <code>modifying</code>).</p> </li> <li> <p> <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace unhealthy instances (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>type</code> - The type of request (<code>instant</code> | <code>request</code> | <code>maintain</code>).</p> </li> </ul>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFlowLogsGet
  /*


Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.

 */
  actionDescribeFlowLogsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>log-destination-type</code> - The type of destination to which the flow log publishes data. Possible destination types include <code>cloud-watch-logs</code> and <code>S3</code>.</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>).</p> </li> </ul>
      flowLogId: ["null"], // [String] | <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFlowLogsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFpgaImageAttributeGet
  /*


Describes the specified attribute of the specified Amazon FPGA Image (AFI).

 */
  actionDescribeFpgaImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the AFI // String | The AFI attribute.
    /*let region = "region_example";*/ /*let fpgaImageId = "fpgaImageId_example";*/ /*let attribute = "attribute_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFpgaImageAttributeGet(
      incomingOptions.region,
      incomingOptions.fpgaImageId,
      incomingOptions.attribute,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFpgaImagesGet
  /*


Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.

 */
  actionDescribeFpgaImagesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      fpgaImageId: ["null"], // [String] | The AFI IDs.
      owner: ["null"], // [String] | Filters the AFI by owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>create-time</code> - The creation time of the AFI.</p> </li> <li> <p> <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p> </li> <li> <p> <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p> </li> <li> <p> <code>name</code> - The name of the AFI.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the AFI owner.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>shell-version</code> - The version of the AWS Shell that was used to create the bitstream.</p> </li> <li> <p> <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update.</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of results to return in a single call.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFpgaImagesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostReservationOfferingsGet
  /*


&lt;p&gt;Describes the Dedicated Host reservations that are available to purchase.&lt;/p&gt; &lt;p&gt;The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Hosts Overview&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt;

 */
  actionDescribeHostReservationOfferingsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> </ul>
      maxDuration: 56, // Number | This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.
      minDuration: 56, // Number | This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
      //  'nextToken': "nextToken_example", // String | The token to use to retrieve the next page of results.
      //  'offeringId': "offeringId_example", // String | The ID of the reservation offering.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostReservationOfferingsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostReservationsGet
  /*


Describes reservations that are associated with Dedicated Hosts in your account.

 */
  actionDescribeHostReservationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      hostReservationIdSet: ["null"], // [String] | The host reservation IDs.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.
      //  'nextToken': "nextToken_example", // String | The token to use to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostReservationsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostsGet
  /*


&lt;p&gt;Describes the specified Dedicated Hosts or all your Dedicated Hosts.&lt;/p&gt; &lt;p&gt;The results describe only the Dedicated Hosts in the Region you&#39;re currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state &lt;code&gt;released&lt;/code&gt;.&lt;/p&gt;

 */
  actionDescribeHostsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token that you provided when you allocated the host.</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>state</code> - The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      hostId: ["null"], // [String] | The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
      maxResults: 56, // Number | <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> <p>You cannot specify this parameter and the host IDs parameter in the same request.</p>
      //  'nextToken': "nextToken_example", // String | The token to use to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIamInstanceProfileAssociationsGet
  /*


Describes your IAM instance profile associations.

 */
  actionDescribeIamInstanceProfileAssociationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      associationId: ["null"], // [String] | The IAM instance profile associations.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code> | <code>disassociated</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIamInstanceProfileAssociationsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIdFormatGet
  /*


&lt;p&gt;Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the IAM user who makes the request they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the &lt;a&gt;ModifyIdFormat&lt;/a&gt; command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionDescribeIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'resource': "resource_example", // String | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIdFormatGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIdentityIdFormatGet
  /*


&lt;p&gt;Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.&lt;/p&gt;

 */
  actionDescribeIdentityIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ARN of the principal, which can be an IAM role, IAM user, or the root user.
    /*let principalArn = "principalArn_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'resource': "resource_example", // String | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIdentityIdFormatGet(
      incomingOptions.principalArn,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImageAttributeGet
  /*


Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.

 */
  actionDescribeImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p // String | The ID of the AMI // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let imageId = "imageId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImageAttributeGet(
      incomingOptions.attribute,
      incomingOptions.imageId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImagesGet
  /*


&lt;p&gt;Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.&lt;/p&gt; &lt;p&gt;The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.&lt;/p&gt; &lt;p&gt;Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.&lt;/p&gt;

 */
  actionDescribeImagesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      executableBy: ["null"], // [String] | Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the EBS volume is encrypted.</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>ena-support</code> - A Boolean that indicates whether enhanced networking with ENA is enabled.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>sriov-net-support</code> - A value of <code>simple</code> indicates that enhanced networking with the Intel 82599 VF interface is enabled.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul>
      imageId: ["null"], // [String] | <p>The image IDs.</p> <p>Default: Describes all images available to you.</p>
      owner: ["null"], // [String] | Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImagesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImportImageTasksGet
  /*


Displays details about an import virtual machine or import snapshot tasks that are already created.

 */
  actionDescribeImportImageTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filters: ["null"], // [String] | Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.
      importTaskId: ["null"], // [String] | The IDs of the import image tasks.
      maxResults: 56, // Number | The maximum number of results to return in a single call.
      //  'nextToken': "nextToken_example", // String | A token that indicates the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImportImageTasksGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImportSnapshotTasksGet
  /*


Describes your import snapshot tasks.

 */
  actionDescribeImportSnapshotTasksGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filters: ["null"], // [String] | The filters.
      importTaskId: ["null"], // [String] | A list of import snapshot task IDs.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | A token that indicates the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImportSnapshotTasksGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceAttributeGet
  /*


Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: &lt;code&gt;instanceType&lt;/code&gt; | &lt;code&gt;kernel&lt;/code&gt; | &lt;code&gt;ramdisk&lt;/code&gt; | &lt;code&gt;userData&lt;/code&gt; | &lt;code&gt;disableApiTermination&lt;/code&gt; | &lt;code&gt;instanceInitiatedShutdownBehavior&lt;/code&gt; | &lt;code&gt;rootDeviceName&lt;/code&gt; | &lt;code&gt;blockDeviceMapping&lt;/code&gt; | &lt;code&gt;productCodes&lt;/code&gt; | &lt;code&gt;sourceDestCheck&lt;/code&gt; | &lt;code&gt;groupSet&lt;/code&gt; | &lt;code&gt;ebsOptimized&lt;/code&gt; | &lt;code&gt;sriovNetSupport&lt;/code&gt;

 */
  actionDescribeInstanceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p // String | Region where you are making the reques // String | The ID of the instance.
    /*let attribute = "attribute_example";*/ /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceAttributeGet(
      incomingOptions.attribute,
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceCreditSpecificationsGet
  /*


&lt;p&gt;Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the &lt;code&gt;unlimited&lt;/code&gt; credit option, as well as instances that were previously configured as T2, T3, and T3a with the &lt;code&gt;unlimited&lt;/code&gt; credit option. For example, if you resize a T2 instance, while it is configured as &lt;code&gt;unlimited&lt;/code&gt;, to an M4 instance, Amazon EC2 returns the M4 instance.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns the credit option (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;unlimited&lt;/code&gt;) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeInstanceCreditSpecificationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> </ul>
      instanceId: ["null"], // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceCreditSpecificationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceStatusGet
  /*


&lt;p&gt;Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.&lt;/p&gt; &lt;p&gt;Instance status includes the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Status checks&lt;/b&gt; - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html\&quot;&gt;Status Checks for Your Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html\&quot;&gt;Troubleshooting Instances with Failed Status Checks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scheduled events&lt;/b&gt; - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html\&quot;&gt;Scheduled Events for Your Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Instance state&lt;/b&gt; - You can manage your instances from the moment you launch them through their termination. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDescribeInstanceStatusGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.instance-event-id</code> - The ID of the event whose date and time you are modifying.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before-deadline</code> - The deadline for starting the event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul>
      instanceId: ["null"], // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      includeAllInstances: true, // Boolean | <p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceStatusGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceTypeOfferingsGet
  /*


Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.

 */
  actionDescribeInstanceTypeOfferingsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'locationType': "locationType_example", // String | The location type.
      filter: ["null"], // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>location</code> - This depends on the location type. For example, if the location type is <code>region</code> (default), the location is the Region code (for example, <code>us-east-2</code>.)</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceTypeOfferingsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceTypesGet
  /*


Returns a list of all instance types offered in your current AWS Region. The results can be filtered by the attributes of the instance types.

 */
  actionDescribeInstanceTypesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceType: ["null"], // [String] | The instance types. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      filter: ["null"], // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>auto-recovery-supported</code> - Indicates whether auto recovery is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>bare-metal</code> - Indicates whether it is a bare metal instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>burstable-performance-supported</code> - Indicates whether it is a burstable performance instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>current-generation</code> - Indicates whether this instance type is the latest generation instance type of an instance family. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>ebs-info.ebs-optimized-support</code> - Indicates whether the instance type is EBS-optimized. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>ebs-info.encryption-support</code> - Indicates whether EBS encryption is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>free-tier-eligible</code> - Indicates whether the instance type is eligible to use in the free tier. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hibernation-supported</code> - Indicates whether On-Demand hibernation is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor used. (<code>nitro</code> | <code>xen</code>)</p> </li> <li> <p> <code>instance-storage-info.disk.count</code> - The number of local disks.</p> </li> <li> <p> <code>instance-storage-info.disk.size-in-gb</code> - The storage size of each instance storage disk, in GB.</p> </li> <li> <p> <code>instance-storage-info.disk.type</code> - The storage technology for the local instance storage disks. (<code>hdd</code> | <code>ssd</code>)</p> </li> <li> <p> <code>instance-storage-info.total-size-in-gb</code> - The total amount of storage available from all local instance storage, in GB.</p> </li> <li> <p> <code>instance-storage-supported</code> - Indicates whether the instance type has local instance storage. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>memory-info.size-in-mib</code> - The memory size.</p> </li> <li> <p> <code>network-info.ena-support</code> - Indicates whether Elastic Network Adapter (ENA) is supported or required. (<code>required</code> | <code>supported</code> | <code>unsupported</code>)</p> </li> <li> <p> <code>network-info.ipv4-addresses-per-interface</code> - The maximum number of private IPv4 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-addresses-per-interface</code> - The maximum number of private IPv6 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-supported</code> - Indicates whether the instance type supports IPv6. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>network-info.maximum-network-interfaces</code> - The maximum number of network interfaces per instance.</p> </li> <li> <p> <code>network-info.network-performance</code> - Describes the network performance.</p> </li> <li> <p> <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock speed, in GHz.</p> </li> <li> <p> <code>vcpu-info.default-cores</code> - The default number of cores for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-threads-per-core</code> - The default number of threads per cores for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the instance type.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceTypesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstancesGet
  /*


&lt;p&gt;Describes the specified instances or all of AWS account&#39;s instances.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.&lt;/p&gt;

 */
  actionDescribeInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows \"User Initiated [date]\" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> </ul>
      instanceId: ["null"], // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstancesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInternetGatewaysGet
  /*


Describes one or more of your internet gateways.

 */
  actionDescribeInternetGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the internet gateway.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      internetGatewayId: ["null"], // [String] | <p>One or more internet gateway IDs.</p> <p>Default: Describes all your internet gateways.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInternetGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeKeyPairsGet
  /*


&lt;p&gt;Describes the specified key pairs or all of your key pairs.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeKeyPairsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> </ul>
      keyName: ["null"], // [String] | <p>The key pair names.</p> <p>Default: Describes all your key pairs.</p>
      keyPairId: ["null"], // [String] | The IDs of the key pairs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeKeyPairsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLaunchTemplateVersionsGet
  /*


Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.

 */
  actionDescribeLaunchTemplateVersionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      launchTemplateVersion: ["null"], // [String] | One or more versions of the launch template.
      //  'minVersion': "minVersion_example", // String | The version number after which to describe launch template versions.
      //  'maxVersion': "maxVersion_example", // String | The version number up to which to describe launch template versions.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li> <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li> <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li> <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li> </ul>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLaunchTemplateVersionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLaunchTemplatesGet
  /*


Describes one or more launch templates.

 */
  actionDescribeLaunchTemplatesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      launchTemplateId: ["null"], // [String] | One or more launch template IDs.
      launchTemplateName: ["null"], // [String] | One or more launch template names.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template was created.</p> </li> <li> <p> <code>launch-template-name</code> - The name of the launch template.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLaunchTemplatesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsGet
  /*


Describes the associations between virtual interface groups and local gateway route tables.

 */
  actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsGet(
    incomingOptions,
    cb
  ) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayRouteTableVirtualInterfaceGroupAssociationId: ["null"], // [String] | The IDs of the associations.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTableVpcAssociationsGet
  /*


Describes the specified associations between VPCs and local gateway route tables.

 */
  actionDescribeLocalGatewayRouteTableVpcAssociationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayRouteTableVpcAssociationId: ["null"], // [String] | The IDs of the associations.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTableVpcAssociationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTablesGet
  /*


Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.

 */
  actionDescribeLocalGatewayRouteTablesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayRouteTableId: ["null"], // [String] | The IDs of the local gateway route tables.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTablesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayVirtualInterfaceGroupsGet
  /*


Describes the specified local gateway virtual interface groups.

 */
  actionDescribeLocalGatewayVirtualInterfaceGroupsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayVirtualInterfaceGroupId: ["null"], // [String] | The IDs of the virtual interface groups.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayVirtualInterfaceGroupsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayVirtualInterfacesGet
  /*


Describes the specified local gateway virtual interfaces.

 */
  actionDescribeLocalGatewayVirtualInterfacesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayVirtualInterfaceId: ["null"], // [String] | The IDs of the virtual interfaces.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayVirtualInterfacesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewaysGet
  /*


Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.

 */
  actionDescribeLocalGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      localGatewayId: ["null"], // [String] | The IDs of the local gateways.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeMovingAddressesGet
  /*


Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.

 */
  actionDescribeMovingAddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      publicIp: ["null"], // [String] | One or more Elastic IP addresses.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeMovingAddressesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNatGatewaysGet
  /*


Describes one or more of your NAT gateways.

 */
  actionDescribeNatGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      natGatewayId: ["null"], // [String] | One or more NAT gateway IDs.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNatGatewaysGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkAclsGet
  /*


&lt;p&gt;Describes one or more of your network ACLs.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeNetworkAclsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the network ACL.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      networkAclId: ["null"], // [String] | <p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkAclsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfaceAttributeGet
  /*


Describes a network interface attribute. You can specify only one attribute at a time.

 */
  actionDescribeNetworkInterfaceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the network interface.
    /*let region = "region_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'attribute': "attribute_example", // String | The attribute of the network interface. This parameter is required.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfaceAttributeGet(
      incomingOptions.region,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfacePermissionsGet
  /*


Describes the permissions for your network interfaces.

 */
  actionDescribeNetworkInterfacePermissionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      networkInterfacePermissionId: ["null"], // [String] | One or more network interface permission IDs.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>network-interface-permission.network-interface-permission-id</code> - The ID of the permission.</p> </li> <li> <p> <code>network-interface-permission.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface-permission.aws-account-id</code> - The AWS account ID.</p> </li> <li> <p> <code>network-interface-permission.aws-service</code> - The AWS service.</p> </li> <li> <p> <code>network-interface-permission.permission</code> - The type of permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfacePermissionsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfacesGet
  /*


Describes one or more of your network interfaces.

 */
  actionDescribeNetworkInterfacesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IPv4 addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IPv4 address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface (IPv4).</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code> if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      networkInterfaceId: ["null"], // [String] | <p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfacesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePlacementGroupsGet
  /*


Describes the specified placement groups or all of your placement groups. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDescribePlacementGroupsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code> | <code>spread</code> | <code>partition</code>).</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      groupName: ["null"], // [String] | <p>The names of the placement groups.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p>
      groupId: ["null"], // [String] | The IDs of the placement groups.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePlacementGroupsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePrefixListsGet
  /*


Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.

 */
  actionDescribePrefixListsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      prefixListId: ["null"], // [String] | One or more prefix list IDs.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePrefixListsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePrincipalIdFormatGet
  /*


&lt;p&gt;Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. &lt;/p&gt; &lt;p&gt;By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt;

 */
  actionDescribePrincipalIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      resource: ["null"], // [String] | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePrincipalIdFormatGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePublicIpv4PoolsGet
  /*


Describes the specified IPv4 address pools.

 */
  actionDescribePublicIpv4PoolsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      poolId: ["null"], // [String] | The IDs of the address pools.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePublicIpv4PoolsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeRegionsGet
  /*


&lt;p&gt;Describes the Regions that are enabled for your account, or all Regions.&lt;/p&gt; &lt;p&gt;For a list of the Regions supported by Amazon EC2, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region\&quot;&gt; Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about enabling and disabling Regions for your account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\&quot;&gt;Managing AWS Regions&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeRegionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>opt-in-status</code> - The opt-in status of the Region (<code>opt-in-not-required</code> | <code>opted-in</code> | <code>not-opted-in</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p> </li> </ul>
      regionName: ["null"], // [String] | The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      allRegions: true, // Boolean | Indicates whether to display all Regions, including Regions that are disabled for your account.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeRegionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesGet
  /*


&lt;p&gt;Describes one or more of the Reserved Instances that you purchased.&lt;/p&gt; &lt;p&gt;For more information about Reserved Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      //  'offeringClass': "offeringClass_example", // String | Describes whether the Reserved Instance is Standard or Convertible.
      reservedInstancesId: ["null"], // [String] | <p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'offeringType': "offeringType_example", // String | The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesListingsGet
  /*


&lt;p&gt;Describes your account&#39;s Reserved Instance listings in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.&lt;/p&gt; &lt;p&gt;As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you&#39;re searching for with what&#39;s available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesListingsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul>
      //  'reservedInstancesId': "reservedInstancesId_example", // String | One or more Reserved Instance IDs.
      //  'reservedInstancesListingId': "reservedInstancesListingId_example", // String | One or more Reserved Instance listing IDs.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesListingsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesModificationsGet
  /*


&lt;p&gt;Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;

 */
  actionDescribeReservedInstancesModificationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul>
      reservedInstancesModificationId: ["null"], // [String] | IDs for the submitted modification request.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesModificationsGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesOfferingsGet
  /*


&lt;p&gt;Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.&lt;/p&gt; &lt;p&gt;If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesOfferingsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone in which the Reserved Instance can be used.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      includeMarketplace: true, // Boolean | Include Reserved Instance Marketplace offerings in the response.
      //  'instanceType': "instanceType_example", // String | The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      maxDuration: 56, // Number | <p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p>
      maxInstanceCount: 56, // Number | <p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p>
      minDuration: 56, // Number | <p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p>
      //  'offeringClass': "offeringClass_example", // String | The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.
      //  'productDescription': "productDescription_example", // String | The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.
      reservedInstancesOfferingId: ["null"], // [String] | One or more Reserved Instances offering IDs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceTenancy': "instanceTenancy_example", // String | <p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
      maxResults: 56, // Number | <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'offeringType': "offeringType_example", // String | The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesOfferingsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeRouteTablesGet
  /*


&lt;p&gt;Describes one or more of your route tables.&lt;/p&gt; &lt;p&gt;Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeRouteTablesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created <code>CreateRoute</code> indicates that the route was manually added to the route table <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      routeTableId: ["null"], // [String] | <p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeRouteTablesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeScheduledInstanceAvailabilityGet
  /*


&lt;p&gt;Finds available schedules that meet the specified criteria.&lt;/p&gt; &lt;p&gt;You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.&lt;/p&gt; &lt;p&gt;After you find a schedule that meets your needs, call &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt; to purchase Scheduled Instances with that schedule.&lt;/p&gt;

 */
  actionDescribeScheduledInstanceAvailabilityGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      //  'firstSlotStartTimeRangeEarliestTime': "firstSlotStartTimeRangeEarliestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day. The earliest date and time, in UTC, for the Scheduled Instance to start.
      //  'firstSlotStartTimeRangeLatestTime': "firstSlotStartTimeRangeLatestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day. The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
      maxResults: 56, // Number | The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      maxSlotDurationInHours: 56, // Number | The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.
      minSlotDurationInHours: 56, // Number | The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'recurrenceFrequency': "recurrenceFrequency_example", // String | Describes the recurring schedule for a Scheduled Instance. The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).
      //  'recurrenceInterval': "recurrenceInterval_example", // String | Describes the recurring schedule for a Scheduled Instance. The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 weeks or every 2 months.
      recurrenceOccurrenceDays: ["null"], // [String] | Describes the recurring schedule for a Scheduled Instance. The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
      //  'recurrenceOccurrenceRelativeToEnd': "recurrenceOccurrenceRelativeToEnd_example", // String | Describes the recurring schedule for a Scheduled Instance. Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
      //  'recurrenceOccurrenceUnit': "recurrenceOccurrenceUnit_example", // String | Describes the recurring schedule for a Scheduled Instance. The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>). This value is required for a monthly schedule. You can't specify <code>DayOfWeek</code> with a weekly schedule. You can't specify this value with a daily schedule.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeScheduledInstanceAvailabilityGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeScheduledInstancesGet
  /*


Describes the specified Scheduled Instances or all your Scheduled Instances.

 */
  actionDescribeScheduledInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      scheduledInstanceId: ["null"], // [String] | The Scheduled Instance IDs.
      //  'slotStartTimeRangeEarliestTime': "slotStartTimeRangeEarliestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The earliest date and time, in UTC, for the Scheduled Instance to start.
      //  'slotStartTimeRangeLatestTime': "slotStartTimeRangeLatestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The latest date and time, in UTC, for the Scheduled Instance to start.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeScheduledInstancesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSecurityGroupReferencesGet
  /*


[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you&#39;ve specified in this request.

 */
  actionDescribeSecurityGroupReferencesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the security groups in your account.
    /*let region = "region_example";*/ /*let groupId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSecurityGroupReferencesGet(
      incomingOptions.region,
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSecurityGroupsGet
  /*


&lt;p&gt;Describes the specified security groups or all of your security groups.&lt;/p&gt; &lt;p&gt;A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSecurityGroupsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.from-port</code> - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>egress.ip-permission.group-id</code> - The ID of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.group-name</code> - The name of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which a security group rule allows outbound access.</p> </li> <li> <p> <code>egress.ip-permission.protocol</code> - The IP protocol for an outbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>egress.ip-permission.to-port</code> - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>egress.ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.from-port</code> - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service from which a security group rule allows inbound access.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for an inbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul>
      groupId: ["null"], // [String] | <p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p>
      groupName: ["null"], // [String] | <p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSecurityGroupsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSnapshotAttributeGet
  /*


&lt;p&gt;Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSnapshotAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The snapshot attribute you would like to view // String | The ID of the EBS snapshot // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let snapshotId = "snapshotId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSnapshotAttributeGet(
      incomingOptions.attribute,
      incomingOptions.snapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSnapshotsGet
  /*


&lt;p&gt;Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.&lt;/p&gt; &lt;p&gt;The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.&lt;/p&gt; &lt;p&gt;The create volume permissions fall into the following categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;public&lt;/i&gt;: The owner of the snapshot granted create volume permissions for the snapshot to the &lt;code&gt;all&lt;/code&gt; group. All AWS accounts have create volume permissions for these snapshots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;explicit&lt;/i&gt;: The owner of the snapshot granted create volume permissions to a specific AWS account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;implicit&lt;/i&gt;: An AWS account has implicit create volume permissions for all snapshots it owns.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot owners using the &lt;code&gt;OwnerIds&lt;/code&gt; option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, &lt;code&gt;amazon&lt;/code&gt; for snapshots owned by Amazon, or &lt;code&gt;self&lt;/code&gt; for snapshots that you own.&lt;/p&gt; &lt;p&gt;If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), &lt;code&gt;self&lt;/code&gt; for snapshots for which you own or have explicit permissions, or &lt;code&gt;all&lt;/code&gt; for public snapshots.&lt;/p&gt; &lt;p&gt;If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSnapshots&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSnapshotsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the snapshot is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>self</code> | <code>all</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
      //  'nextToken': "nextToken_example", // String | The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.
      owner: ["null"], // [String] | Describes the snapshots owned by these owners.
      restorableBy: ["null"], // [String] | The IDs of the AWS accounts that can create volumes from the snapshot.
      snapshotId: ["null"], // [String] | <p>The snapshot IDs.</p> <p>Default: Describes the snapshots for which you have create volume permissions.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSnapshotsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotDatafeedSubscriptionGet
  /*


Describes the data feed for Spot Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.

 */
  actionDescribeSpotDatafeedSubscriptionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotDatafeedSubscriptionGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetInstancesGet
  /*


Describes the running instances for the specified Spot Fleet.

 */
  actionDescribeSpotFleetInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the Spot Fleet request.
    /*let region = "region_example";*/ /*let spotFleetRequestId = "spotFleetRequestId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetInstancesGet(
      incomingOptions.region,
      incomingOptions.spotFleetRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetRequestHistoryGet
  /*


&lt;p&gt;Describes the events for the specified Spot Fleet request during the specified time.&lt;/p&gt; &lt;p&gt;Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.&lt;/p&gt;

 */
  actionDescribeSpotFleetRequestHistoryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the Spot Fleet request // Date | The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /*let region = "region_example";*/ /*let spotFleetRequestId = "spotFleetRequestId_example";*/ /*let startTime = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'eventType': "eventType_example", // String | The type of events to describe. By default, all events are described.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetRequestHistoryGet(
      incomingOptions.region,
      incomingOptions.spotFleetRequestId,
      incomingOptions.startTime,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetRequestsGet
  /*


&lt;p&gt;Describes your Spot Fleet requests.&lt;/p&gt; &lt;p&gt;Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.&lt;/p&gt;

 */
  actionDescribeSpotFleetRequestsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      spotFleetRequestId: ["null"], // [String] | The IDs of the Spot Fleet requests.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetRequestsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotInstanceRequestsGet
  /*


&lt;p&gt;Describes the specified Spot Instance requests.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; to find a running Spot Instance by examining the response. If the status of the Spot Instance is &lt;code&gt;fulfilled&lt;/code&gt;, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use &lt;a&gt;DescribeInstances&lt;/a&gt; with a filter to look for instances where the instance lifecycle is &lt;code&gt;spot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We recommend that you set &lt;code&gt;MaxResults&lt;/code&gt; to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.&lt;/p&gt;

 */
  actionDescribeSpotInstanceRequestsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li> <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html\">Spot Request Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      spotInstanceRequestId: ["null"], // [String] | One or more Spot Instance request IDs.
      //  'nextToken': "nextToken_example", // String | The token to request the next set of results. This value is <code>null</code> when there are no more results to return.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotInstanceRequestsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotPriceHistoryGet
  /*


&lt;p&gt;Describes the Spot price history. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html\&quot;&gt;Spot Instance Pricing History&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified the response merely indicates the last time that the price changed.&lt;/p&gt;

 */
  actionDescribeSpotPriceHistoryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The time stamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul>
      //  'availabilityZone': "availabilityZone_example", // String | Filters the results by the specified Availability Zone.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      endTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
      instanceType: ["null"], // [String] | Filters the results by the specified instance types.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      productDescription: ["null"], // [String] | Filters the results by the specified basic product descriptions.
      startTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotPriceHistoryGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeStaleSecurityGroupsGet
  /*


[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.

 */
  actionDescribeStaleSecurityGroupsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      //  'nextToken': "nextToken_example", // String | The token for the next set of items to return. (You received this token from a prior call.)
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeStaleSecurityGroupsGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSubnetsGet
  /*


&lt;p&gt;Describes one or more of your subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSubnetsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for the subnet. You can also use <code>availabilityZone</code> as the filter name.</p> </li> <li> <p> <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet. You can also use <code>availabilityZoneId</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IPv4 addresses in the subnet that are available.</p> </li> <li> <p> <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidrBlock</code> as the filter names.</p> </li> <li> <p> <code>default-for-az</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>defaultForAz</code> as the filter name.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - An association ID for an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the subnet.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul>
      subnetId: ["null"], // [String] | <p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSubnetsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTagsGet
  /*


&lt;p&gt;Describes the specified tags for your EC2 resources.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeTagsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>image</code> | <code>instance</code> | <code>host-reservation</code> | <code>internet-gateway</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of the tag. For example, specify \"tag:Owner\" for the filter name and \"TeamA\" for the filter value to find resources with the tag \"Owner=TeamA\".</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTagsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorFiltersGet
  /*


Describes one or more Traffic Mirror filters.

 */
  actionDescribeTrafficMirrorFiltersGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      trafficMirrorFilterId: ["null"], // [String] | The ID of the Traffic Mirror filter.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror filter description.</p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorFiltersGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorSessionsGet
  /*


Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.

 */
  actionDescribeTrafficMirrorSessionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      trafficMirrorSessionId: ["null"], // [String] | The ID of the Traffic Mirror session.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror session description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>packet-length</code>: The assigned number of packets to mirror. </p> </li> <li> <p> <code>session-number</code>: The assigned session number. </p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> <li> <p> <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> <li> <p> <code>virtual-network-id</code>: The virtual network ID of the Traffic Mirror session.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorSessionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorTargetsGet
  /*


Information about one or more Traffic Mirror targets.

 */
  actionDescribeTrafficMirrorTargetsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      trafficMirrorTargetId: ["null"], // [String] | The ID of the Traffic Mirror targets.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror target description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorTargetsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayAttachmentsGet
  /*


Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.

 */
  actionDescribeTransitGatewayAttachmentsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayAttachmentIds: ["null"], // [String] | The IDs of the attachments.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li> <li> <p> <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-owner-id</code> - The ID of the AWS account that owns the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayAttachmentsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayMulticastDomainsGet
  /*


Describes one or more transit gateway multicast domains.

 */
  actionDescribeTransitGatewayMulticastDomainsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayMulticastDomainIds: ["null"], // [String] | The ID of the transit gateway multicast domain.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the transit gateway multicast domain. Valid values are <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-multicast-domain-id</code> - The ID of the transit gateway multicast domain.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayMulticastDomainsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayPeeringAttachmentsGet
  /*


Describes your transit gateway peering attachments.

 */
  actionDescribeTransitGatewayPeeringAttachmentsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayAttachmentIds: ["null"], // [String] | One or more IDs of the transit gateway peering attachments.
      filter: ["null"], // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayPeeringAttachmentsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayRouteTablesGet
  /*


Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewayRouteTablesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayRouteTableIds: ["null"], // [String] | The IDs of the transit gateway route tables.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>default-association-route-table</code> - Indicates whether this is the default association route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>default-propagation-route-table</code> - Indicates whether this is the default propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayRouteTablesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayVpcAttachmentsGet
  /*


Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewayVpcAttachmentsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayAttachmentIds: ["null"], // [String] | The IDs of the attachments.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayVpcAttachmentsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewaysGet
  /*


Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      transitGatewayIds: ["null"], // [String] | The IDs of the transit gateways.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p> </li> <li> <p> <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p> </li> <li> <p> <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p> </li> <li> <p> <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically associated with the default association route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumeAttributeGet
  /*


&lt;p&gt;Describes the specified attribute of the specified volume. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumeAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute of the volume. This parameter is required // String | The ID of the volume // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumeAttributeGet(
      incomingOptions.attribute,
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumeStatusGet
  /*


&lt;p&gt;Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume&#39;s underlying host. If the volume&#39;s underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DescribeVolumeStatus&lt;/code&gt; operation provides the following information about the specified volumes:&lt;/p&gt; &lt;p&gt; &lt;i&gt;Status&lt;/i&gt;: Reflects the current status of the volume. The possible values are &lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;impaired&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;insufficient-data&lt;/code&gt;. If all checks pass, the overall status of the volume is &lt;code&gt;ok&lt;/code&gt;. If the check fails, the overall status is &lt;code&gt;impaired&lt;/code&gt;. If the status is &lt;code&gt;insufficient-data&lt;/code&gt;, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html\&quot;&gt;Monitoring the Status of Your Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt;: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an &lt;code&gt;impaired&lt;/code&gt; status, then the volume event might be &lt;code&gt;potential-data-inconsistency&lt;/code&gt;. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Actions&lt;/i&gt;: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is &lt;code&gt;impaired&lt;/code&gt; and the volume event shows &lt;code&gt;potential-data-inconsistency&lt;/code&gt;, then the action shows &lt;code&gt;enable-volume-io&lt;/code&gt;. This means that you may want to enable the I/O operations for the volume by calling the &lt;a&gt;EnableVolumeIO&lt;/a&gt; action and then check the volume for data consistency.&lt;/p&gt; &lt;p&gt;Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the &lt;code&gt;error&lt;/code&gt; state (for example, when a volume is incapable of accepting I/O.)&lt;/p&gt;

 */
  actionDescribeVolumeStatusGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code> for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code> for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      //  'nextToken': "nextToken_example", // String | The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
      volumeId: ["null"], // [String] | <p>The IDs of the volumes.</p> <p>Default: Describes all your volumes.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumeStatusGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumesGet
  /*


&lt;p&gt;Describes the specified EBS volumes or all of your EBS volumes.&lt;/p&gt; &lt;p&gt;If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeVolumes&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name specified in the block device mapping (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul>
      volumeId: ["null"], // [String] | The volume IDs.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56, // Number | The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 500 if <code>MaxResults</code> is given a value larger than 500, only 500 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      //  'nextToken': "nextToken_example", // String | The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumesModificationsGet
  /*


&lt;p&gt;Reports the current modification status of EBS volumes.&lt;/p&gt; &lt;p&gt;Current-generation EBS volumes support modification of attributes including type, size, and (for &lt;code&gt;io1&lt;/code&gt; volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be &lt;code&gt;modifying&lt;/code&gt;, &lt;code&gt;optimizing&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, or &lt;code&gt;failed&lt;/code&gt;. If a volume has never been modified, then certain elements of the returned &lt;code&gt;VolumeModification&lt;/code&gt; objects are null. &lt;/p&gt; &lt;p&gt; You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications\&quot;&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumesModificationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      volumeId: ["null"], // [String] | The IDs of the volumes for which in-progress modifications will be described.
      filter: ["null"], // [String] | The filters. Supported filters: <code>volume-id</code>, <code>modification-state</code>, <code>target-size</code>, <code>target-iops</code>, <code>target-volume-type</code>, <code>original-size</code>, <code>original-iops</code>, <code>original-volume-type</code>, <code>start-time</code>.
      //  'nextToken': "nextToken_example", // String | The <code>nextToken</code> value returned by a previous paginated request.
      maxResults: 56, // Number | The maximum number of results (up to a limit of 500) to be returned in a paginated request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumesModificationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcAttributeGet
  /*


Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.

 */
  actionDescribeVpcAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The VPC attribute // String | The ID of the VPC // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let vpcId = "vpcId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcAttributeGet(
      incomingOptions.attribute,
      incomingOptions.vpcId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcClassicLinkDnsSupportGet
  /*


Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDescribeVpcClassicLinkDnsSupportGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      vpcIds: ["null"], // [String] | One or more VPC IDs.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcClassicLinkDnsSupportGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcClassicLinkGet
  /*


Describes the ClassicLink status of one or more VPCs.

 */
  actionDescribeVpcClassicLinkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      vpcId: ["null"], // [String] | One or more VPCs for which you want to describe the ClassicLink status.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcClassicLinkGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointConnectionNotificationsGet
  /*


Describes the connection notifications for VPC endpoints and VPC endpoint services.

 */
  actionDescribeVpcEndpointConnectionNotificationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'connectionNotificationId': "connectionNotificationId_example", // String | The ID of the notification.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>connection-notification-arn</code> - The ARN of SNS topic for the notification.</p> </li> <li> <p> <code>connection-notification-id</code> - The ID of the notification.</p> </li> <li> <p> <code>connection-notification-state</code> - The state of the notification (<code>Enabled</code> | <code>Disabled</code>).</p> </li> <li> <p> <code>connection-notification-type</code> - The type of notification (<code>Topic</code>).</p> </li> <li> <p> <code>service-id</code> - The ID of the endpoint service.</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointConnectionNotificationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointConnectionsGet
  /*


Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.

 */
  actionDescribeVpcEndpointConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>vpc-endpoint-owner</code> - The AWS account number of the owner of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the endpoint.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointConnectionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServiceConfigurationsGet
  /*


Describes the VPC endpoint service configurations in your account (your services).

 */
  actionDescribeVpcEndpointServiceConfigurationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      serviceId: ["null"], // [String] | The IDs of one or more services.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>service-state</code> - The state of the service (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> | <code>Failed</code>). </p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServiceConfigurationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServicePermissionsGet
  /*


Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.

 */
  actionDescribeVpcEndpointServicePermissionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the service.
    /*let region = "region_example";*/ /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>principal</code> - The ARN of the principal.</p> </li> <li> <p> <code>principal-type</code> - The principal type (<code>All</code> | <code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code> | <code>User</code> | <code>Role</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServicePermissionsGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServicesGet
  /*


Describes available services to which you can create a VPC endpoint.

 */
  actionDescribeVpcEndpointServicesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      serviceName: ["null"], // [String] | One or more service names.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56, // Number | <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next set of items to return. (You received this token from a prior call.)
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServicesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointsGet
  /*


Describes one or more of your VPC endpoints.

 */
  actionDescribeVpcEndpointsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      vpcEndpointId: ["null"], // [String] | One or more endpoint IDs.
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>vpc-id</code>: The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code>: The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56, // Number | <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next set of items to return. (You received this token from a prior call.)
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcPeeringConnectionsGet
  /*


Describes one or more of your VPC peering connections.

 */
  actionDescribeVpcPeeringConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the requester's VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      vpcPeeringConnectionId: ["null"], // [String] | <p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcPeeringConnectionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcsGet
  /*


Describes one or more of your VPCs.

 */
  actionDescribeVpcsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.association-id</code> - The association ID for an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - The association ID for an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
      vpcId: ["null"], // [String] | <p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpnConnectionsGet
  /*


&lt;p&gt;Describes one or more of your VPN connections.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVpnConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway associated with the VPN connection.</p> </li> </ul>
      vpnConnectionId: ["null"], // [String] | <p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpnConnectionsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpnGatewaysGet
  /*


&lt;p&gt;Describes one or more of your virtual private gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVpnGatewaysGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the Amazon side of the gateway.</p> </li> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul>
      vpnGatewayId: ["null"], // [String] | <p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpnGatewaysGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachClassicLinkVpcGet
  /*


Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it&#39;s stopped.

 */
  actionDetachClassicLinkVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance to unlink from the VPC // String | The ID of the VPC to which the instance is linked.
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachClassicLinkVpcGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachInternetGatewayGet
  /*


Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.

 */
  actionDetachInternetGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the internet gateway // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let internetGatewayId = "internetGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachInternetGatewayGet(
      incomingOptions.region,
      incomingOptions.internetGatewayId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDetachNetworkInterfaceGet
  /*


Detaches a network interface from an instance.

 */
  actionDetachNetworkInterfaceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let attachmentId = "attachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      force: true, // Boolean | <p>Specifies whether to force a detachment.</p> <note> <ul> <li> <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p> </li> <li> <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p> </li> <li> <p>If you force the detachment of a network interface, the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\">instance metadata</a> might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.</p> </li> </ul> </note>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachNetworkInterfaceGet(
      incomingOptions.attachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDetachVolumeGet
  /*


&lt;p&gt;Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the &lt;code&gt;busy&lt;/code&gt; state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can&#39;t be detached while the instance is running. To detach the root volume, stop the instance first.&lt;/p&gt; &lt;p&gt;When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html\&quot;&gt;Detaching an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDetachVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume // String | Region where you are making the request
    /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'device': "device_example", // String | The device name.
      force: true, // Boolean | Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
      //  'instanceId': "instanceId_example", // String | The ID of the instance.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachVolumeGet(
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachVpnGatewayGet
  /*


&lt;p&gt;Detaches a virtual private gateway from a VPC. You do this if you&#39;re planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).&lt;/p&gt; &lt;p&gt;You must wait for the attachment&#39;s state to switch to &lt;code&gt;detached&lt;/code&gt; before you can delete the VPC or attach a different VPC to the virtual private gateway.&lt;/p&gt;

 */
  actionDetachVpnGatewayGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The ID of the virtual private gateway // String | Region where you are making the request
    /*let vpcId = "vpcId_example";*/ /*let vpnGatewayId = "vpnGatewayId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachVpnGatewayGet(
      incomingOptions.vpcId,
      incomingOptions.vpnGatewayId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisableEbsEncryptionByDefaultGet
  /*


&lt;p&gt;Disables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.&lt;/p&gt; &lt;p&gt;Disabling encryption by default does not change the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDisableEbsEncryptionByDefaultGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableEbsEncryptionByDefaultGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableFastSnapshotRestoresGet
  /*


Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.

 */
  actionDisableFastSnapshotRestoresGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more Availability Zones. For example, <code>us-east-2a</code> // [String] | The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code> // String | Region where you are making the request
    /*let availabilityZone = ["null"];*/ /*let sourceSnapshotId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableFastSnapshotRestoresGet(
      incomingOptions.availabilityZone,
      incomingOptions.sourceSnapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableTransitGatewayRouteTablePropagationGet
  /*


Disables the specified resource attachment from propagating routes to the specified propagation route table.

 */
  actionDisableTransitGatewayRouteTablePropagationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the propagation route table // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableTransitGatewayRouteTablePropagationGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableVgwRoutePropagationGet
  /*


Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.

 */
  actionDisableVgwRoutePropagationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway // String | The ID of the route table.
    /*let gatewayId = "gatewayId_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVgwRoutePropagationGet(
      incomingOptions.gatewayId,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisableVpcClassicLinkDnsSupportGet
  /*


Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it&#39;s linked. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDisableVpcClassicLinkDnsSupportGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'vpcId': "vpcId_example", // String | The ID of the VPC.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVpcClassicLinkDnsSupportGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableVpcClassicLinkGet
  /*


Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.

 */
  actionDisableVpcClassicLinkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVpcClassicLinkGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateAddressGet
  /*


&lt;p&gt;Disassociates an Elastic IP address from the instance or network interface it&#39;s associated with.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt;

 */
  actionDisassociateAddressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'associationId': "associationId_example", // String | [EC2-VPC] The association ID. Required for EC2-VPC.
      //  'publicIp': "publicIp_example", // String | [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateAddressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisassociateClientVpnTargetNetworkGet
  /*


&lt;p&gt;Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The route that was automatically added for the VPC is deleted&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All active client connections are terminated&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New client connections are disallowed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Client VPN endpoint&#39;s status changes to &lt;code&gt;pending-associate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDisassociateClientVpnTargetNetworkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint from which to disassociate the target network // String | The ID of the target network association // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let associationId = "associationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateClientVpnTargetNetworkGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.associationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateIamInstanceProfileGet
  /*


&lt;p&gt;Disassociates an IAM instance profile from a running or stopped instance.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;

 */
  actionDisassociateIamInstanceProfileGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the IAM instance profile association.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateIamInstanceProfileGet(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateRouteTableGet
  /*


&lt;p&gt;Disassociates a subnet from a route table.&lt;/p&gt; &lt;p&gt;After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC&#39;s main route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDisassociateRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID representing the current association between the route table and subnet // String | Region where you are making the request
    /*let associationId = "associationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateRouteTableGet(
      incomingOptions.associationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisassociateSubnetCidrBlockGet
  /*


Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.

 */
  actionDisassociateSubnetCidrBlockGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID for the CIDR block.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateSubnetCidrBlockGet(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateTransitGatewayMulticastDomainGet
  /*


Disassociates the specified subnets from the transit gateway multicast domain.

 */
  actionDisassociateTransitGatewayMulticastDomainGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      subnetIds: ["null"], // [String] | The IDs of the subnets
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateTransitGatewayMulticastDomainGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateTransitGatewayRouteTableGet
  /*


Disassociates a resource attachment from a transit gateway route table.

 */
  actionDisassociateTransitGatewayRouteTableGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateTransitGatewayRouteTableGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateVpcCidrBlockGet
  /*


&lt;p&gt;Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using &lt;a&gt;DescribeVpcs&lt;/a&gt;. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. &lt;/p&gt; &lt;p&gt;You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).&lt;/p&gt;

 */
  actionDisassociateVpcCidrBlockGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID for the CIDR block.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateVpcCidrBlockGet(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableEbsEncryptionByDefaultGet
  /*


&lt;p&gt;Enables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enabling encryption by default has no effect on the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\&quot;&gt;Supported Instance Types&lt;/a&gt;.&lt;/p&gt;

 */
  actionEnableEbsEncryptionByDefaultGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableEbsEncryptionByDefaultGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableFastSnapshotRestoresGet
  /*


&lt;p&gt;Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.&lt;/p&gt; &lt;p&gt;You get the full benefit of fast snapshot restores after they enter the &lt;code&gt;enabled&lt;/code&gt; state. To get the current state of fast snapshot restores, use &lt;a&gt;DescribeFastSnapshotRestores&lt;/a&gt;. To disable fast snapshot restores, use &lt;a&gt;DisableFastSnapshotRestores&lt;/a&gt;.&lt;/p&gt;

 */
  actionEnableFastSnapshotRestoresGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more Availability Zones. For example, <code>us-east-2a</code> // [String] | The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>. You can specify a snapshot that was shared with you from another AWS account // String | Region where you are making the request
    /*let availabilityZone = ["null"];*/ /*let sourceSnapshotId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableFastSnapshotRestoresGet(
      incomingOptions.availabilityZone,
      incomingOptions.sourceSnapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableTransitGatewayRouteTablePropagationGet
  /*


Enables the specified attachment to propagate routes to the specified propagation route table.

 */
  actionEnableTransitGatewayRouteTablePropagationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the propagation route table // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableTransitGatewayRouteTablePropagationGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableVgwRoutePropagationGet
  /*


Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.

 */
  actionEnableVgwRoutePropagationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with. // String | The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
    /*let gatewayId = "gatewayId_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVgwRoutePropagationGet(
      incomingOptions.gatewayId,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionEnableVolumeIOGet
  /*


Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.

 */
  actionEnableVolumeIOGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the volume.
    /*let region = "region_example";*/ /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVolumeIOGet(
      incomingOptions.region,
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionEnableVpcClassicLinkDnsSupportGet
  /*


Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionEnableVpcClassicLinkDnsSupportGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'vpcId': "vpcId_example", // String | The ID of the VPC.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVpcClassicLinkDnsSupportGet(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableVpcClassicLinkGet
  /*


Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the &lt;code&gt;10.0.0.0/8&lt;/code&gt; IP address range, excluding local routes for VPCs in the &lt;code&gt;10.0.0.0/16&lt;/code&gt; and &lt;code&gt;10.1.0.0/16&lt;/code&gt; IP address ranges. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionEnableVpcClassicLinkGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC.
    /*let region = "region_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVpcClassicLinkGet(
      incomingOptions.region,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportClientVpnClientCertificateRevocationListGet
  /*


Downloads the client certificate revocation list for the specified Client VPN endpoint.

 */
  actionExportClientVpnClientCertificateRevocationListGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportClientVpnClientCertificateRevocationListGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportClientVpnClientConfigurationGet
  /*


Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.

 */
  actionExportClientVpnClientConfigurationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportClientVpnClientConfigurationGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportImageGet
  /*


Exports an Amazon Machine Image (AMI) to a VM file. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html\&quot;&gt;Exporting a VM Directory from an Amazon Machine Image (AMI)&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.

 */
  actionExportImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The disk image format // String | Region where you are making the reques // String | The ID of the image.
    /*let diskImageFormat = "diskImageFormat_example";*/ /*let region = "region_example";*/ /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Token to enable idempotency for export image requests.
      //  'description': "description_example", // String | A description of the image being exported. The maximum length is 255 bytes.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  's3ExportLocationS3Bucket': "s3ExportLocationS3Bucket_example", // String | Describes the destination for an export image task. The destination S3 bucket.
      //  's3ExportLocationS3Prefix': "s3ExportLocationS3Prefix_example", // String | Describes the destination for an export image task. The prefix (logical hierarchy) in the bucket.
      //  'roleName': "roleName_example", // String | The name of the role that grants VM Import/Export permission to export images to your S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportImageGet(
      incomingOptions.diskImageFormat,
      incomingOptions.region,
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportTransitGatewayRoutesGet
  /*


Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.

 */
  actionExportTransitGatewayRoutesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table // String | The name of the S3 bucket // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let s3Bucket = "s3Bucket_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p> </li> <li> <p> <code>type</code> - The type of route (<code>active</code> | <code>blackhole</code>).</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportTransitGatewayRoutesGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.s3Bucket,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetCapacityReservationUsageGet
  /*


Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner&#39;s usage.

 */
  actionGetCapacityReservationUsageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation // String | Region where you are making the request
    /*let capacityReservationId = "capacityReservationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.</p> <p>Valid range: Minimum value of 1. Maximum value of 1000.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetCapacityReservationUsageGet(
      incomingOptions.capacityReservationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetCoipPoolUsageGet
  /*


Describes the allocations from the specified customer-owned address pool.

 */
  actionGetCoipPoolUsageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the address pool // String | Region where you are making the request
    /*let poolId = "poolId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-address-usage.allocation-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-account-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-service</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.co-ip</code> </p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetCoipPoolUsageGet(
      incomingOptions.poolId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetConsoleOutputGet
  /*


&lt;p&gt;Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.&lt;/p&gt; &lt;p&gt;By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.&lt;/p&gt; &lt;p&gt;You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output\&quot;&gt;Instance Console Output&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetConsoleOutputGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      latest: true, // Boolean | <p>When enabled, retrieves the latest console output for the instance.</p> <p>Default: disabled (<code>false</code>)</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetConsoleOutputGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetConsoleScreenshotGet
  /*


&lt;p&gt;Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.&lt;/p&gt; &lt;p&gt;The returned content is Base64-encoded.&lt;/p&gt;

 */
  actionGetConsoleScreenshotGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance.
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      wakeUp: true, // Boolean | When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or \"sleep\" mode.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetConsoleScreenshotGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetDefaultCreditSpecificationGet
  /*


&lt;p&gt;Describes the default credit option for CPU usage of a burstable performance instance family.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetDefaultCreditSpecificationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The instance family.
    /*let region = "region_example";*/ /*let instanceFamily = "instanceFamily_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetDefaultCreditSpecificationGet(
      incomingOptions.region,
      incomingOptions.instanceFamily,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetEbsDefaultKmsKeyIdGet
  /*


&lt;p&gt;Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetEbsDefaultKmsKeyIdGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetEbsDefaultKmsKeyIdGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetEbsEncryptionByDefaultGet
  /*


&lt;p&gt;Describes whether EBS encryption by default is enabled for your account in the current Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetEbsEncryptionByDefaultGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetEbsEncryptionByDefaultGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetHostReservationPurchasePreviewGet
  /*


&lt;p&gt;Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.&lt;/p&gt; &lt;p&gt;This is a preview of the &lt;a&gt;PurchaseHostReservation&lt;/a&gt; action and does not result in the offering being purchased.&lt;/p&gt;

 */
  actionGetHostReservationPurchasePreviewGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts with which the reservation is associated // String | The offering ID of the reservation.
    /*let hostIdSet = ["null"];*/ /*let offeringId = "offeringId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetHostReservationPurchasePreviewGet(
      incomingOptions.hostIdSet,
      incomingOptions.offeringId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetLaunchTemplateDataGet
  /*


Retrieves the configuration data of the specified instance. You can use this data to create a launch template.

 */
  actionGetLaunchTemplateDataGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance.
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetLaunchTemplateDataGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetPasswordDataGet
  /*


&lt;p&gt;Retrieves the encrypted administrator password for a running Windows instance.&lt;/p&gt; &lt;p&gt;The Windows password is generated at boot by the &lt;code&gt;EC2Config&lt;/code&gt; service or &lt;code&gt;EC2Launch&lt;/code&gt; scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html\&quot;&gt;EC2Config&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html\&quot;&gt;EC2Launch&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;EC2Config&lt;/code&gt; service, the password is not generated for rebundled AMIs unless &lt;code&gt;Ec2SetPassword&lt;/code&gt; is enabled before bundling.&lt;/p&gt; &lt;p&gt;The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.&lt;/p&gt; &lt;p&gt;When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it&#39;s available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.&lt;/p&gt;

 */
  actionGetPasswordDataGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Windows instance // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetPasswordDataGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetReservedInstancesExchangeQuoteGet
  /*


Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use &lt;a&gt;AcceptReservedInstancesExchangeQuote&lt;/a&gt; to perform the exchange.

 */
  actionGetReservedInstancesExchangeQuoteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IDs of the Convertible Reserved Instances to exchange.
    /*let region = "region_example";*/ /*let reservedInstanceId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      targetConfiguration: ["null"], // [String] | The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetReservedInstancesExchangeQuoteGet(
      incomingOptions.region,
      incomingOptions.reservedInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayAttachmentPropagationsGet
  /*


Lists the route tables to which the specified resource attachment propagates routes.

 */
  actionGetTransitGatewayAttachmentPropagationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayAttachmentPropagationsGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayMulticastDomainAssociationsGet
  /*


Gets information about the associations for the transit gateway multicast domain.

 */
  actionGetTransitGatewayMulticastDomainAssociationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. The valid value is: <code>vpc</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associating</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayMulticastDomainAssociationsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayRouteTableAssociationsGet
  /*


Gets information about the associations for the specified transit gateway route table.

 */
  actionGetTransitGatewayRouteTableAssociationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayRouteTableAssociationsGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayRouteTablePropagationsGet
  /*


Gets information about the route table propagations for the specified transit gateway route table.

 */
  actionGetTransitGatewayRouteTablePropagationsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayRouteTablePropagationsGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportClientVpnClientCertificateRevocationListGet
  /*


&lt;p&gt;Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.&lt;/p&gt; &lt;p&gt;Uploading a client certificate revocation list resets existing client connections.&lt;/p&gt;

 */
  actionImportClientVpnClientCertificateRevocationListGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which the client certificate revocation list applies // String | The client certificate revocation list file. For more information, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate\">Generate a Client Certificate Revocation List</a> in the <i>AWS Client VPN Administrator Guide</i> // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let certificateRevocationList = "certificateRevocationList_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportClientVpnClientCertificateRevocationListGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.certificateRevocationList,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportImageGet
  /*


Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html\&quot;&gt;Importing a VM as an Image Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.

 */
  actionImportImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'architecture': "architecture_example", // String | <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code> </p>
      //  'clientDataComment': "clientDataComment_example", // String | Describes the client-specific data. A user-defined comment about the disk upload.
      //  'clientDataUploadEnd': "clientDataUploadEnd_example", // String | Describes the client-specific data. The time that the disk upload ends.
      //  'clientDataUploadSize': "clientDataUploadSize_example", // String | Describes the client-specific data. The size of the uploaded disk image, in GiB.
      //  'clientDataUploadStart': "clientDataUploadStart_example", // String | Describes the client-specific data. The time that the disk upload starts.
      //  'clientToken': "clientToken_example", // String | The token to enable idempotency for VM import requests.
      //  'description': "description_example", // String | A description string for the import image task.
      diskContainer: ["null"], // [String] | Information about the disk containers.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      encrypted: true, // Boolean | Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'hypervisor': "hypervisor_example", // String | <p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p>
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the AMI is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      //  'licenseType': "licenseType_example", // String | <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify <code>AWS</code> to replace the source-system license with an AWS license, if appropriate. Specify <code>BYOL</code> to retain the source-system license, if appropriate.</p> <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see <a href=\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image\">Prerequisites</a> in the VM Import/Export User Guide.</p>
      //  'platform': "platform_example", // String | <p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
      //  'roleName': "roleName_example", // String | The name of the role to use when not using the default role, 'vmimport'.
      licenseSpecifications: ["null"], // [String] | The ARNs of the license configurations.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportImageGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportInstanceGet
  /*


&lt;p&gt;Creates an import instance task using metadata from the specified disk image. &lt;code&gt;ImportInstance&lt;/code&gt; only supports single-volume VMs. To import multi-volume VMs, use &lt;a&gt;ImportImage&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionImportInstanceGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The instance operating system.
    /*let region = "region_example";*/ /*let platform = "platform_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description for the instance being imported.
      diskImage: ["null"], // [String] | The disk image.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchSpecificationAdditionalInfo': "launchSpecificationAdditionalInfo_example", // String | Describes the launch specification for VM import. Reserved.
      //  'launchSpecificationArchitecture': "launchSpecificationArchitecture_example", // String | Describes the launch specification for VM import. The architecture of the instance.
      launchSpecificationGroupIds: ["null"], // [String] | Describes the launch specification for VM import. The security group IDs.
      launchSpecificationGroupNames: ["null"], // [String] | Describes the launch specification for VM import. The security group names.
      //  'launchSpecificationInstanceInitiatedShutdownBehavior': "launchSpecificationInstanceInitiatedShutdownBehavior_example", // String | Describes the launch specification for VM import. Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | Describes the launch specification for VM import. The instance type. For more information about the instance types that you can import, see <a href=\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types\">Instance Types</a> in the VM Import/Export User Guide.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | Describes the launch specification for VM import. Indicates whether monitoring is enabled.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | Describes the launch specification for VM import. The placement information for the instance.
      //  'launchSpecificationPrivateIpAddress': "launchSpecificationPrivateIpAddress_example", // String | Describes the launch specification for VM import. [EC2-VPC] An available IP address from the IP address range of the subnet.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | Describes the launch specification for VM import. [EC2-VPC] The ID of the subnet in which to launch the instance.
      //  'launchSpecificationUserData': "launchSpecificationUserData_example", // String | Describes the launch specification for VM import. The Base64-encoded user data to make available to the instance.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportInstanceGet(
      incomingOptions.region,
      incomingOptions.platform,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportKeyPairGet
  /*


&lt;p&gt;Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with &lt;a&gt;CreateKeyPair&lt;/a&gt;, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionImportKeyPairGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | A unique name for the key pair // String | The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
    /*let region = "region_example";*/ /*let keyName = "keyName_example";*/ /*let publicKeyMaterial = "publicKeyMaterial_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportKeyPairGet(
      incomingOptions.region,
      incomingOptions.keyName,
      incomingOptions.publicKeyMaterial,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportSnapshotGet
  /*


Imports a disk into an EBS snapshot.

 */
  actionImportSnapshotGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientDataComment': "clientDataComment_example", // String | Describes the client-specific data. A user-defined comment about the disk upload.
      //  'clientDataUploadEnd': "clientDataUploadEnd_example", // String | Describes the client-specific data. The time that the disk upload ends.
      //  'clientDataUploadSize': "clientDataUploadSize_example", // String | Describes the client-specific data. The size of the uploaded disk image, in GiB.
      //  'clientDataUploadStart': "clientDataUploadStart_example", // String | Describes the client-specific data. The time that the disk upload starts.
      //  'clientToken': "clientToken_example", // String | Token to enable idempotency for VM import requests.
      //  'description': "description_example", // String | The description string for the import snapshot task.
      //  'diskContainerDescription': "diskContainerDescription_example", // String | The disk container object for the import snapshot request. The description of the disk image being imported.
      //  'diskContainerFormat': "diskContainerFormat_example", // String | The disk container object for the import snapshot request. <p>The format of the disk image being imported.</p> <p>Valid values: <code>VHD</code> | <code>VMDK</code> </p>
      //  'diskContainerUrl': "diskContainerUrl_example", // String | The disk container object for the import snapshot request. The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
      //  'diskContainerUserBucket': "diskContainerUserBucket_example", // String | The disk container object for the import snapshot request. The S3 bucket for the disk image.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      encrypted: true, // Boolean | Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      //  'roleName': "roleName_example", // String | The name of the role to use when not using the default role, 'vmimport'.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportSnapshotGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportVolumeGet
  /*


&lt;p&gt;Creates an import volume task using metadata from the specified disk image.For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html\&quot;&gt;Importing Disks to Amazon EBS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionImportVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone for the resulting EBS volume // String | Region where you are making the request
    /*let availabilityZone = "availabilityZone_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | A description of the volume.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'imageBytes': "imageBytes_example", // String | Describes a disk image. The size of the disk image, in GiB.
      //  'imageFormat': "imageFormat_example", // String | Describes a disk image. The disk image format.
      //  'imageImportManifestUrl': "imageImportManifestUrl_example", // String | Describes a disk image. <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the \"Query String Request Authentication Alternative\" section of the <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\">VM Import Manifest</a>.</p>
      //  'volumeSize': "volumeSize_example", // String | Describes an EBS volume. The size of the volume, in GiB.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportVolumeGet(
      incomingOptions.availabilityZone,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyCapacityReservationGet
  /*


Modifies a Capacity Reservation&#39;s capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation&#39;s instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.

 */
  actionModifyCapacityReservationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation // String | Region where you are making the request
    /*let capacityReservationId = "capacityReservationId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      instanceCount: 56, // Number | The number of instances for which to reserve capacity.
      endDate: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p>
      //  'endDateType': "endDateType_example", // String | <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>.</p> </li> </ul>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyCapacityReservationGet(
      incomingOptions.capacityReservationId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyClientVpnEndpointGet
  /*


Modifies the specified Client VPN endpoint. You can only modify an endpoint&#39;s server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.

 */
  actionModifyClientVpnEndpointGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to modify // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'serverCertificateArn': "serverCertificateArn_example", // String | The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).
      //  'connectionLogOptionsEnabled': "connectionLogOptionsEnabled_example", // String | Describes the client connection logging options for the Client VPN endpoint. Indicates whether connection logging is enabled.
      //  'connectionLogOptionsCloudwatchLogGroup': "connectionLogOptionsCloudwatchLogGroup_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log group.
      //  'connectionLogOptionsCloudwatchLogStream': "connectionLogOptionsCloudwatchLogStream_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log stream to which the connection data is published.
      dnsServersCustomDnsServers: ["null"], // [String] | Information about the DNS server to be used. The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
      //  'dnsServersEnabled': "dnsServersEnabled_example", // String | Information about the DNS server to be used. Indicates whether DNS servers should be used. Specify <code>False</code> to delete the existing DNS servers.
      //  'description': "description_example", // String | A brief description of the Client VPN endpoint.
      splitTunnel: true, // Boolean | <p>Indicates whether the VPN is split-tunnel.</p> <p>For information about split-tunnel VPN endpoints, see <a href=\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyClientVpnEndpointGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyDefaultCreditSpecificationGet
  /*


&lt;p&gt;Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ModifyDefaultCreditSpecification&lt;/code&gt; is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call &lt;code&gt;GetDefaultCreditSpecification&lt;/code&gt; and check &lt;code&gt;DefaultCreditSpecification&lt;/code&gt; for updates.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyDefaultCreditSpecificationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The instance family // String | <p>The credit option for CPU usage of the instance family.</p> <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p>
    /*let region = "region_example";*/ /*let instanceFamily = "instanceFamily_example";*/ /*let cpuCredits = "cpuCredits_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyDefaultCreditSpecificationGet(
      incomingOptions.region,
      incomingOptions.instanceFamily,
      incomingOptions.cpuCredits,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyEbsDefaultKmsKeyIdGet
  /*


&lt;p&gt;Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.&lt;/p&gt; &lt;p&gt;AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;. Amazon EBS does not support asymmetric CMKs.&lt;/p&gt; &lt;p&gt;If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyEbsDefaultKmsKeyIdGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p> <p>Amazon EBS does not support asymmetric CMKs.</p // String | Region where you are making the request
    /*let kmsKeyId = "kmsKeyId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyEbsDefaultKmsKeyIdGet(
      incomingOptions.kmsKeyId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyFleetGet
  /*


&lt;p&gt;Modifies the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can only modify an EC2 Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the EC2 Fleet is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;

 */
  actionModifyFleetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the EC2 Fleet.
    /*let region = "region_example";*/ /*let fleetId = "fleetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      //  'targetCapacitySpecificationTotalTargetCapacity': "targetCapacitySpecificationTotalTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of units to request, filled using <code>DefaultTargetCapacityType</code>.
      //  'targetCapacitySpecificationOnDemandTargetCapacity': "targetCapacitySpecificationOnDemandTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of On-Demand units to request.
      //  'targetCapacitySpecificationSpotTargetCapacity': "targetCapacitySpecificationSpotTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of Spot units to request.
      //  'targetCapacitySpecificationDefaultTargetCapacityType': "targetCapacitySpecificationDefaultTargetCapacityType_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyFleetGet(
      incomingOptions.region,
      incomingOptions.fleetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyFpgaImageAttributeGet
  /*


Modifies the specified attribute of the specified Amazon FPGA Image (AFI).

 */
  actionModifyFpgaImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the AFI.
    /*let region = "region_example";*/ /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'attribute': "attribute_example", // String | The name of the attribute.
      //  'operationType': "operationType_example", // String | The operation type.
      userId: ["null"], // [String] | The AWS account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.
      userGroup: ["null"], // [String] | The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.
      productCode: ["null"], // [String] | The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.
      loadPermissionAdd: ["null"], // [String] | Describes modifications to the load permissions of an Amazon FPGA image (AFI). The load permissions to add.
      loadPermissionRemove: ["null"], // [String] | Describes modifications to the load permissions of an Amazon FPGA image (AFI). The load permissions to remove.
      //  'description': "description_example", // String | A description for the AFI.
      //  'name': "name_example", // String | A name for the AFI.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyFpgaImageAttributeGet(
      incomingOptions.region,
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyHostsGet
  /*


&lt;p&gt;Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of &lt;code&gt;host&lt;/code&gt; but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.&lt;/p&gt; &lt;p&gt;You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.&lt;/p&gt;

 */
  actionModifyHostsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts to modify.
    /*let hostId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'autoPlacement': "autoPlacement_example", // String | Specify whether to enable or disable auto-placement.
      //  'hostRecovery': "hostRecovery_example", // String | Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'instanceType': "instanceType_example", // String | <p>Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type.</p> <p>If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p>
      //  'instanceFamily': "instanceFamily_example", // String | <p>Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family.</p> <p>If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyHostsGet(
      incomingOptions.hostId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyIdFormatGet
  /*


&lt;p&gt;Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.&lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This setting applies to the IAM user who makes the request it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you&#39;re using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionModifyIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p // Boolean | Indicate whether the resource should use longer IDs (17-character IDs).
    /*let resource = "resource_example";*/ /*let useLongIds = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyIdFormatGet(
      incomingOptions.resource,
      incomingOptions.useLongIds,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyIdentityIdFormatGet
  /*


&lt;p&gt;Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. &lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This setting applies to the principal specified in the request it does not apply to the principal that makes the request. &lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionModifyIdentityIdFormatGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account // String | <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p // Boolean | Indicates whether the resource should use longer IDs (17-character IDs)
    /*let principalArn = "principalArn_example";*/ /*let resource = "resource_example";*/ /*let useLongIds = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyIdentityIdFormatGet(
      incomingOptions.principalArn,
      incomingOptions.resource,
      incomingOptions.useLongIds,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyImageAttributeGet
  /*


&lt;p&gt;Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the &lt;code&gt;Attribute&lt;/code&gt; parameter to specify the attribute or one of the following parameters: &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;LaunchPermission&lt;/code&gt;, or &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.&lt;/p&gt; &lt;p&gt;To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.&lt;/p&gt;

 */
  actionModifyImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AMI // String | Region where you are making the request
    /*let imageId = "imageId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'attribute': "attribute_example", // String | The name of the attribute to modify. The valid values are <code>description</code>, <code>launchPermission</code>, and <code>productCodes</code>.
      //  'descriptionValue': "descriptionValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      launchPermissionAdd: ["null"], // [String] | Describes a launch permission modification. The AWS account ID to add to the list of launch permissions for the AMI.
      launchPermissionRemove: ["null"], // [String] | Describes a launch permission modification. The AWS account ID to remove from the list of launch permissions for the AMI.
      //  'operationType': "operationType_example", // String | The operation type. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      productCode: ["null"], // [String] | The DevPay product codes. After you add a product code to an AMI, it can't be removed.
      userGroup: ["null"], // [String] | The user groups. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      userId: ["null"], // [String] | The AWS account IDs. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      //  'value': "value_example", // String | The value of the attribute being modified. This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code> or <code>productCodes</code>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyImageAttributeGet(
      incomingOptions.imageId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceAttributeGet
  /*


&lt;p&gt;Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the &lt;a&gt;ModifyNetworkInterfaceAttribute&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To modify some attributes, the instance must be stopped. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html\&quot;&gt;Modifying Attributes of a Stopped Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyInstanceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance.
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'sourceDestCheckValue': "sourceDestCheckValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'attribute': "attribute_example", // String | The name of the attribute.
      blockDeviceMapping: ["null"], // [String] | <p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM\">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      //  'disableApiTerminationValue': "disableApiTerminationValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'ebsOptimizedValue': "ebsOptimizedValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'enaSupportValue': "enaSupportValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      groupId: ["null"], // [String] | [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
      //  'instanceInitiatedShutdownBehaviorValue': "instanceInitiatedShutdownBehaviorValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'instanceTypeValue': "instanceTypeValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'kernelValue': "kernelValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'ramdiskValue': "ramdiskValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'sriovNetSupportValue': "sriovNetSupportValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'userDataValue': "userDataValue_example", // String | Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
      //  'value': "value_example", // String | A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceAttributeGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceCapacityReservationAttributesGet
  /*


Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any &lt;code&gt;open&lt;/code&gt; Capacity Reservation with matching attributes, or run On-Demand Instance capacity.

 */
  actionModifyInstanceCapacityReservationAttributesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance to be modified // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'capacityReservationSpecificationCapacityReservationPreference': "capacityReservationSpecificationCapacityReservationPreference_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul>
      //  'capacityReservationSpecificationCapacityReservationTarget': "capacityReservationSpecificationCapacityReservationTarget_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> Information about the target Capacity Reservation.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceCapacityReservationAttributesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceCreditSpecificationGet
  /*


&lt;p&gt;Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyInstanceCreditSpecificationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | Information about the credit option for CPU usage.
    /*let region = "region_example";*/ /*let instanceCreditSpecification = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceCreditSpecificationGet(
      incomingOptions.region,
      incomingOptions.instanceCreditSpecification,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceEventStartTimeGet
  /*


Modifies the start time for a scheduled Amazon EC2 instance event.

 */
  actionModifyInstanceEventStartTimeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the instance with the scheduled event // String | The ID of the event whose date and time you are modifying // Date | The new date and time when the event will take place.
    /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ /*let instanceEventId = "instanceEventId_example";*/ /*let notBefore = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceEventStartTimeGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.instanceEventId,
      incomingOptions.notBefore,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceMetadataOptionsGet
  /*


Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance Metadata and User Data&lt;/a&gt;.

 */
  actionModifyInstanceMetadataOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'httpTokens': "httpTokens_example", // String | <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p> <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.</p> <p>If the state is <code>required</code>, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials the version 1.0 credentials are not available.</p>
      httpPutResponseHopLimit: 56, // Number | <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained.</p> <p>Possible values: Integers from 1 to 64</p>
      //  'httpEndpoint': "httpEndpoint_example", // String | <p>This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained.</p> <note> <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p> </note>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceMetadataOptionsGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstancePlacementGet
  /*


&lt;p&gt;Modifies the placement attributes for a specified instance. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the affinity between an instance and a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Host&lt;/a&gt;. When affinity is set to &lt;code&gt;host&lt;/code&gt; and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the Dedicated Host with which an instance is associated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the instance tenancy of an instance from &lt;code&gt;host&lt;/code&gt; to &lt;code&gt;dedicated&lt;/code&gt;, or from &lt;code&gt;dedicated&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Move an instance to or from a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;placement group&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.&lt;/p&gt; &lt;p&gt;To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt;

 */
  actionModifyInstancePlacementGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance that you are modifying.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'affinity': "affinity_example", // String | The affinity setting for the instance.
      //  'groupName': "groupName_example", // String | <p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string (\"\").</p>
      //  'hostId': "hostId_example", // String | The ID of the Dedicated Host with which to associate the instance.
      //  'tenancy': "tenancy_example", // String | The tenancy for the instance.
      partitionNumber: 56, // Number | Reserved for future use.
      //  'hostResourceGroupArn': "hostResourceGroupArn_example", // String | The ARN of the host resource group in which to place the instance.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstancePlacementGet(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyLaunchTemplateGet
  /*


Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.

 */
  actionModifyLaunchTemplateGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'setDefaultVersion': "setDefaultVersion_example", // String | The version number of the launch template to set as the default version.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyLaunchTemplateGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyNetworkInterfaceAttributeGet
  /*


Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.

 */
  actionModifyNetworkInterfaceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the network interface.
    /*let region = "region_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'attachmentAttachmentId': "attachmentAttachmentId_example", // String | Describes an attachment change. The ID of the network interface attachment.
      //  'attachmentDeleteOnTermination': "attachmentDeleteOnTermination_example", // String | Describes an attachment change. Indicates whether the network interface is deleted when the instance is terminated.
      //  'descriptionValue': "descriptionValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      securityGroupId: ["null"], // [String] | Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
      //  'sourceDestCheckValue': "sourceDestCheckValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyNetworkInterfaceAttributeGet(
      incomingOptions.region,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyReservedInstancesGet
  /*


&lt;p&gt;Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;

 */
  actionModifyReservedInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Reserved Instances to modify // [String] | The configuration settings for the Reserved Instances to modify.
    /*let reservedInstancesId = ["null"];*/ /*let reservedInstancesConfigurationSetItemType = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyReservedInstancesGet(
      incomingOptions.reservedInstancesId,
      incomingOptions.reservedInstancesConfigurationSetItemType,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifySnapshotAttributeGet
  /*


&lt;p&gt;Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot&#39;s list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.&lt;/p&gt; &lt;p&gt;Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifySnapshotAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the snapshot // String | Region where you are making the request
    /*let snapshotId = "snapshotId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'attribute': "attribute_example", // String | The snapshot attribute to modify. Only volume creation permissions can be modified.
      createVolumePermissionAdd: ["null"], // [String] | Describes modifications to the list of create volume permissions for a volume. Adds the specified AWS account ID or group to the list.
      createVolumePermissionRemove: ["null"], // [String] | Describes modifications to the list of create volume permissions for a volume. Removes the specified AWS account ID or group from the list.
      userGroup: ["null"], // [String] | The group to modify for the snapshot.
      //  'operationType': "operationType_example", // String | The type of operation to perform to the attribute.
      userId: ["null"], // [String] | The account ID to modify for the snapshot.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySnapshotAttributeGet(
      incomingOptions.snapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifySpotFleetRequestGet
  /*


&lt;p&gt;Modifies the specified Spot Fleet request.&lt;/p&gt; &lt;p&gt;You can only modify a Spot Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the Spot Fleet request is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;

 */
  actionModifySpotFleetRequestGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Spot Fleet request.
    /*let spotFleetRequestId = "spotFleetRequestId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
      targetCapacity: 56, // Number | The size of the fleet.
      onDemandTargetCapacity: 56, // Number | The number of On-Demand Instances in the fleet.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySpotFleetRequestGet(
      incomingOptions.spotFleetRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifySubnetAttributeGet
  /*


Modifies a subnet attribute. You can only modify one attribute at a time.

 */
  actionModifySubnetAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the subnet.
    /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'assignIpv6AddressOnCreationValue': "assignIpv6AddressOnCreationValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'mapPublicIpOnLaunchValue': "mapPublicIpOnLaunchValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySubnetAttributeGet(
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorFilterNetworkServicesGet
  /*


&lt;p&gt;Allows or restricts mirroring network services.&lt;/p&gt; &lt;p&gt; By default, Amazon DNS network services are not eligible for Traffic Mirror. Use &lt;code&gt;AddNetworkServices&lt;/code&gt; to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use &lt;code&gt;RemoveNetworkServices&lt;/code&gt; to remove the network services from the Traffic Mirror filter. &lt;/p&gt; &lt;p&gt;For information about filter rule properties, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html\&quot;&gt;Network Services&lt;/a&gt; in the &lt;i&gt;Traffic Mirroring User Guide &lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyTrafficMirrorFilterNetworkServicesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror filter // String | Region where you are making the request
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      addNetworkService: ["null"], // [String] | The network service, for example Amazon DNS, that you want to mirror.
      removeNetworkService: ["null"], // [String] | The network service, for example Amazon DNS, that you no longer want to mirror.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorFilterNetworkServicesGet(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorFilterRuleGet
  /*


&lt;p&gt;Modifies the specified Traffic Mirror rule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DestinationCidrBlock&lt;/code&gt; and &lt;code&gt;SourceCidrBlock&lt;/code&gt; must both be an IPv4 range or an IPv6 range.&lt;/p&gt;

 */
  actionModifyTrafficMirrorFilterRuleGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror rule // String | Region where you are making the request
    /*let trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'trafficDirection': "trafficDirection_example", // String | The type of traffic (<code>ingress</code> | <code>egress</code>) to assign to the rule.
      ruleNumber: 56, // Number | The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
      //  'ruleAction': "ruleAction_example", // String | The action to assign to the rule.
      //  'destinationPortRangeFromPort': "destinationPortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'destinationPortRangeToPort': "destinationPortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeFromPort': "sourcePortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeToPort': "sourcePortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      protocol: 56, // Number | The protocol, for example TCP, to assign to the Traffic Mirror rule.
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The destination CIDR block to assign to the Traffic Mirror rule.
      //  'sourceCidrBlock': "sourceCidrBlock_example", // String | The source CIDR block to assign to the Traffic Mirror rule.
      //  'description': "description_example", // String | The description to assign to the Traffic Mirror rule.
      removeField: ["null"], // [String] | <p>The properties that you want to remove from the Traffic Mirror filter rule.</p> <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorFilterRuleGet(
      incomingOptions.trafficMirrorFilterRuleId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorSessionGet
  /*


Modifies a Traffic Mirror session.

 */
  actionModifyTrafficMirrorSessionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror session // String | Region where you are making the request
    /*let trafficMirrorSessionId = "trafficMirrorSessionId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'trafficMirrorTargetId': "trafficMirrorTargetId_example", // String | The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
      //  'trafficMirrorFilterId': "trafficMirrorFilterId_example", // String | The ID of the Traffic Mirror filter.
      packetLength: 56, // Number | The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
      sessionNumber: 56, // Number | <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p>
      virtualNetworkId: 56, // Number | The virtual network ID of the Traffic Mirror session.
      //  'description': "description_example", // String | The description to assign to the Traffic Mirror session.
      removeField: ["null"], // [String] | <p>The properties that you want to remove from the Traffic Mirror session.</p> <p>When you remove a property from a Traffic Mirror session, the property is set to the default.</p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorSessionGet(
      incomingOptions.trafficMirrorSessionId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTransitGatewayVpcAttachmentGet
  /*


Modifies the specified VPC attachment.

 */
  actionModifyTransitGatewayVpcAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      addSubnetIds: ["null"], // [String] | The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
      removeSubnetIds: ["null"], // [String] | The IDs of one or more subnets to remove.
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a VPC attachment. Enable or disable DNS support. The default is <code>enable</code>.
      //  'optionsIpv6Support': "optionsIpv6Support_example", // String | Describes the options for a VPC attachment. Enable or disable IPv6 support. The default is <code>enable</code>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTransitGatewayVpcAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVolumeAttributeGet
  /*


&lt;p&gt;Modifies a volume attribute.&lt;/p&gt; &lt;p&gt;By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.&lt;/p&gt; &lt;p&gt;You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.&lt;/p&gt;

 */
  actionModifyVolumeAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume // String | Region where you are making the request
    /*let volumeId = "volumeId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'autoEnableIOValue': "autoEnableIOValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVolumeAttributeGet(
      incomingOptions.volumeId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyVolumeGet
  /*


&lt;p&gt;You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt;. For more information about modifying an EBS volume running Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you complete a resize operation on your volume, you need to extend the volume&#39;s file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux\&quot;&gt;Extending a Linux File System&lt;/a&gt;. For information about extending a Windows file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows\&quot;&gt;Extending a Windows File System&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. You can also track the status of a modification using &lt;a&gt;DescribeVolumesModifications&lt;/a&gt;. For information about tracking status changes using either method, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.&lt;/p&gt;

 */
  actionModifyVolumeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the volume.
    /*let region = "region_example";*/ /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      size: 56, // Number | <p>The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\">Amazon EBS Volume Types</a>.</p> <p>Default: If no size is specified, the existing size is retained.</p>
      //  'volumeType': "volumeType_example", // String | <p>The target EBS volume type of the volume.</p> <p>Default: If no type is specified, the existing type is retained.</p>
      iops: 56, // Number | <p>The target IOPS rate of the volume.</p> <p>This is only valid for Provisioned IOPS SSD (<code>io1</code>) volumes. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops\">Provisioned IOPS SSD (io1) Volumes</a>.</p> <p>Default: If no IOPS value is specified, the existing value is retained.</p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVolumeGet(
      incomingOptions.region,
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcAttributeGet
  /*


Modifies the specified attribute of the specified VPC.

 */
  actionModifyVpcAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'enableDnsHostnamesValue': "enableDnsHostnamesValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'enableDnsSupportValue': "enableDnsSupportValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcAttributeGet(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointConnectionNotificationGet
  /*


Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.

 */
  actionModifyVpcEndpointConnectionNotificationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the notification.
    /*let region = "region_example";*/ /*let connectionNotificationId = "connectionNotificationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'connectionNotificationArn': "connectionNotificationArn_example", // String | The ARN for the SNS topic for the notification.
      connectionEvents: ["null"], // [String] | One or more events for the endpoint. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointConnectionNotificationGet(
      incomingOptions.region,
      incomingOptions.connectionNotificationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointGet
  /*


Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionModifyVpcEndpointGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the endpoint.
    /*let region = "region_example";*/ /*let vpcEndpointId = "vpcEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      resetPolicy: true, // Boolean | (Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service.
      //  'policyDocument': "policyDocument_example", // String | A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
      addRouteTableId: ["null"], // [String] | (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
      removeRouteTableId: ["null"], // [String] | (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
      addSubnetId: ["null"], // [String] | (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
      removeSubnetId: ["null"], // [String] | (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
      addSecurityGroupId: ["null"], // [String] | (Interface endpoint) One or more security group IDs to associate with the network interface.
      removeSecurityGroupId: ["null"], // [String] | (Interface endpoint) One or more security group IDs to disassociate from the network interface.
      privateDnsEnabled: true, // Boolean | (Interface endpoint) Indicate whether a private hosted zone is associated with the VPC.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointGet(
      incomingOptions.region,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointServiceConfigurationGet
  /*


Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.

 */
  actionModifyVpcEndpointServiceConfigurationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the service.
    /*let region = "region_example";*/ /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      acceptanceRequired: true, // Boolean | Indicate whether requests to create an endpoint to your service must be accepted.
      addNetworkLoadBalancerArn: ["null"], // [String] | The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
      removeNetworkLoadBalancerArn: ["null"], // [String] | The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointServiceConfigurationGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointServicePermissionsGet
  /*


&lt;p&gt;Modifies the permissions for your &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC endpoint service&lt;/a&gt;. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.&lt;/p&gt; &lt;p&gt;If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.&lt;/p&gt;

 */
  actionModifyVpcEndpointServicePermissionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the service.
    /*let region = "region_example";*/ /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      addAllowedPrincipals: ["null"], // [String] | The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
      removeAllowedPrincipals: ["null"], // [String] | The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointServicePermissionsGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcPeeringConnectionOptionsGet
  /*


&lt;p&gt;Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between an EC2-Classic instance that&#39;s linked to your VPC (using ClassicLink) and instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that&#39;s linked to the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; command.&lt;/p&gt;

 */
  actionModifyVpcPeeringConnectionOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC peering connection.
    /*let region = "region_example";*/ /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'accepterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc': "accepterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc_example", // String | The VPC peering connection options. If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
      //  'accepterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc': "accepterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc_example", // String | The VPC peering connection options. If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      //  'accepterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink': "accepterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink_example", // String | The VPC peering connection options. If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'requesterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc': "requesterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc_example", // String | The VPC peering connection options. If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
      //  'requesterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc': "requesterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc_example", // String | The VPC peering connection options. If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      //  'requesterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink': "requesterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink_example", // String | The VPC peering connection options. If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcPeeringConnectionOptionsGet(
      incomingOptions.region,
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcTenancyGet
  /*


&lt;p&gt;Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to &lt;code&gt;default&lt;/code&gt; only. You cannot change the instance tenancy attribute to &lt;code&gt;dedicated&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of &lt;code&gt;default&lt;/code&gt;, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyVpcTenancyGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The instance tenancy attribute for the VPC. // String | Region where you are making the request
    /*let vpcId = "vpcId_example";*/ /*let instanceTenancy = "instanceTenancy_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcTenancyGet(
      incomingOptions.vpcId,
      incomingOptions.instanceTenancy,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnConnectionGet
  /*


&lt;p&gt;Modifies the target gateway of an AWS Site-to-Site VPN connection. The following migration options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a new virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a new transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before you perform the migration to the new gateway, you must configure the new gateway. Use &lt;a&gt;CreateVpnGateway&lt;/a&gt; to create a virtual private gateway, or &lt;a&gt;CreateTransitGateway&lt;/a&gt; to create a transit gateway.&lt;/p&gt; &lt;p&gt;This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. &lt;/p&gt; &lt;p&gt;You must delete the static routes before you migrate to the new gateway.&lt;/p&gt; &lt;p&gt;Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.&lt;/p&gt; &lt;p&gt;After you migrate to the new gateway, you might need to modify your VPC route table. Use &lt;a&gt;CreateRoute&lt;/a&gt; and &lt;a&gt;DeleteRoute&lt;/a&gt; to make the changes described in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing\&quot;&gt;VPN Gateway Target Modification Required VPC Route Table Updates&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use &lt;a&gt;CreateTransitGatewayRoute&lt;/a&gt; to add the routes.&lt;/p&gt; &lt;p&gt; If you deleted VPN static routes, you must add the static routes to the transit gateway route table.&lt;/p&gt; &lt;p&gt;After you perform this operation, the AWS VPN endpoint&#39;s IP addresses on the AWS side and the tunnel options remain intact. Your s2slong connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints &lt;/p&gt;

 */
  actionModifyVpnConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPN connection // String | Region where you are making the request
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of the transit gateway.
      //  'customerGatewayId': "customerGatewayId_example", // String | The ID of the customer gateway at your end of the VPN connection.
      //  'vpnGatewayId': "vpnGatewayId_example", // String | The ID of the virtual private gateway at the AWS side of the VPN connection.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnConnectionGet(
      incomingOptions.vpnConnectionId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnTunnelCertificateGet
  /*


Modifies the VPN tunnel endpoint certificate.

 */
  actionModifyVpnTunnelCertificateGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AWS Site-to-Site VPN connection // String | The external IP address of the VPN tunnel // String | Region where you are making the request
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let vpnTunnelOutsideIpAddress = "vpnTunnelOutsideIpAddress_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnTunnelCertificateGet(
      incomingOptions.vpnConnectionId,
      incomingOptions.vpnTunnelOutsideIpAddress,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnTunnelOptionsGet
  /*


Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html\&quot;&gt;Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.

 */
  actionModifyVpnTunnelOptionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AWS Site-to-Site VPN connection // String | The external IP address of the VPN tunnel // String | Region where you are making the request
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let vpnTunnelOutsideIpAddress = "vpnTunnelOutsideIpAddress_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'tunnelOptionsTunnelInsideCidr': "tunnelOptionsTunnelInsideCidr_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. </p> <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The following CIDR blocks are reserved and cannot be used:</p> <ul> <li> <p> <code>169.254.0.0/30</code> </p> </li> <li> <p> <code>169.254.1.0/30</code> </p> </li> <li> <p> <code>169.254.2.0/30</code> </p> </li> <li> <p> <code>169.254.3.0/30</code> </p> </li> <li> <p> <code>169.254.4.0/30</code> </p> </li> <li> <p> <code>169.254.5.0/30</code> </p> </li> <li> <p> <code>169.254.169.252/30</code> </p> </li> </ul>
      //  'tunnelOptionsPreSharedKey': "tunnelOptionsPreSharedKey_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.</p> <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).</p>
      //  'tunnelOptionsPhase1LifetimeSeconds': "tunnelOptionsPhase1LifetimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 28,800.</p> <p>Default: <code>28800</code> </p>
      //  'tunnelOptionsPhase2LifetimeSeconds': "tunnelOptionsPhase2LifetimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 3,600. The value must be less than the value for <code>Phase1LifetimeSeconds</code>.</p> <p>Default: <code>3600</code> </p>
      //  'tunnelOptionsRekeyMarginTimeSeconds': "tunnelOptionsRekeyMarginTimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for <code>RekeyFuzzPercentage</code>.</p> <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p> <p>Default: <code>540</code> </p>
      //  'tunnelOptionsRekeyFuzzPercentage': "tunnelOptionsRekeyFuzzPercentage_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly selected.</p> <p>Constraints: A value between 0 and 100.</p> <p>Default: <code>100</code> </p>
      //  'tunnelOptionsReplayWindowSize': "tunnelOptionsReplayWindowSize_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The number of packets in an IKE replay window.</p> <p>Constraints: A value between 64 and 2048.</p> <p>Default: <code>1024</code> </p>
      //  'tunnelOptionsDPDTimeoutSeconds': "tunnelOptionsDPDTimeoutSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The number of seconds after which a DPD timeout occurs.</p> <p>Constraints: A value between 0 and 30.</p> <p>Default: <code>30</code> </p>
      tunnelOptionsPhase1EncryptionAlgorithms: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> </p>
      tunnelOptionsPhase2EncryptionAlgorithms: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> </p>
      tunnelOptionsPhase1IntegrityAlgorithms: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> </p>
      tunnelOptionsPhase2IntegrityAlgorithms: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> </p>
      tunnelOptionsPhase1DHGroupNumbers: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>
      tunnelOptionsPhase2DHGroupNumbers: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>
      tunnelOptionsIKEVersions: ["null"], // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>The IKE versions that are permitted for the VPN tunnel.</p> <p>Valid values: <code>ikev1</code> | <code>ikev2</code> </p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnTunnelOptionsGet(
      incomingOptions.vpnConnectionId,
      incomingOptions.vpnTunnelOutsideIpAddress,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionMonitorInstancesGet
  /*


&lt;p&gt;Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To disable detailed monitoring, see .&lt;/p&gt;

 */
  actionMonitorInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionMonitorInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionMoveAddressToVpcGet
  /*


Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the &lt;a&gt;RestoreAddressToClassic&lt;/a&gt; request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.

 */
  actionMoveAddressToVpcGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The Elastic IP address.
    /*let region = "region_example";*/ /*let publicIp = "publicIp_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionMoveAddressToVpcGet(
      incomingOptions.region,
      incomingOptions.publicIp,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionProvisionByoipCidrGet
  /*


&lt;p&gt;Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using &lt;a&gt;AdvertiseByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from &lt;code&gt;pending-provision&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;. To monitor the status of an address range, use &lt;a&gt;DescribeByoipCidrs&lt;/a&gt;. To allocate an Elastic IP address from your address pool, use &lt;a&gt;AllocateAddress&lt;/a&gt; with either the specific address from the address pool or the ID of the address pool.&lt;/p&gt;

 */
  actionProvisionByoipCidrGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation. The most specific prefix that you can specify is /24. The address range cannot overlap with another address range that you've brought to this or another Region // String | Region where you are making the request
    /*let cidr = "cidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cidrAuthorizationContextMessage': "cidrAuthorizationContextMessage_example", // String | Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip\">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. The plain-text authorization message for the prefix and account.
      //  'cidrAuthorizationContextSignature': "cidrAuthorizationContextSignature_example", // String | Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip\">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. The signed authorization message for the prefix and account.
      //  'description': "description_example", // String | A description for the address range and the address pool.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionProvisionByoipCidrGet(
      incomingOptions.cidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseHostReservationGet
  /*


Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.

 */
  actionPurchaseHostReservationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts with which the reservation will be associated // String | The ID of the offering.
    /*let hostIdSet = ["null"];*/ /*let offeringId = "offeringId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a>.
      //  'currencyCode': "currencyCode_example", // String | The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.
      //  'limitPrice': "limitPrice_example", // String | The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseHostReservationGet(
      incomingOptions.hostIdSet,
      incomingOptions.offeringId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseReservedInstancesOfferingGet
  /*


&lt;p&gt;Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeReservedInstancesOfferings&lt;/a&gt; to get a list of Reserved Instance offerings that match your specifications. After you&#39;ve purchased a Reserved Instance, you can check for your new Reserved Instance with &lt;a&gt;DescribeReservedInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionPurchaseReservedInstancesOfferingGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | The number of Reserved Instances to purchase // String | The ID of the Reserved Instance offering to purchase // String | Region where you are making the request
    /*let instanceCount = 56;*/ /*let reservedInstancesOfferingId = "reservedInstancesOfferingId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'limitPriceAmount': "limitPriceAmount_example", // String | Describes the limit price of a Reserved Instance offering. Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
      //  'limitPriceCurrencyCode': "limitPriceCurrencyCode_example", // String | Describes the limit price of a Reserved Instance offering. The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.
      purchaseTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseReservedInstancesOfferingGet(
      incomingOptions.instanceCount,
      incomingOptions.reservedInstancesOfferingId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseScheduledInstancesGet
  /*


&lt;p&gt;Purchases the Scheduled Instances with the specified schedule.&lt;/p&gt; &lt;p&gt;Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call &lt;a&gt;DescribeScheduledInstanceAvailability&lt;/a&gt; to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call &lt;a&gt;RunScheduledInstances&lt;/a&gt; during each scheduled time period.&lt;/p&gt; &lt;p&gt;After you purchase a Scheduled Instance, you can&#39;t cancel, modify, or resell your purchase.&lt;/p&gt;

 */
  actionPurchaseScheduledInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The purchase requests.
    /*let region = "region_example";*/ /*let purchaseRequest = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseScheduledInstancesGet(
      incomingOptions.region,
      incomingOptions.purchaseRequest,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRebootInstancesGet
  /*


&lt;p&gt;Requests a reboot of the specified instances. This operation is asynchronous it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.&lt;/p&gt; &lt;p&gt;If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html\&quot;&gt;Getting Console Output and Rebooting Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRebootInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The instance IDs // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRebootInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRegisterImageGet
  /*


&lt;p&gt;Registers an AMI. When you&#39;re creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html\&quot;&gt;Creating Your Own AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For Amazon EBS-backed instances, &lt;a&gt;CreateImage&lt;/a&gt; creates and registers the AMI in a single request, so you don&#39;t have to register the AMI yourself.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also use &lt;code&gt;RegisterImage&lt;/code&gt; to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html\&quot;&gt;Launching a Linux Instance from a Backup&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.&lt;/p&gt; &lt;p&gt;Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Launch an instance from an existing AMI with that billing product code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Customize the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new AMI from the instance using &lt;a&gt;CreateImage&lt;/a&gt; to preserve the billing product code association.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. &lt;/p&gt; &lt;p&gt;If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.&lt;/p&gt;

 */
  actionRegisterImageGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | <p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    /*let region = "region_example";*/ /*let name = "name_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'imageLocation': "imageLocation_example", // String | The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the <code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\">Canned ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.
      //  'architecture': "architecture_example", // String | <p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
      blockDeviceMapping: ["null"], // [String] | The block device mapping entries.
      //  'description': "description_example", // String | A description for your AMI.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      enaSupport: true, // Boolean | <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      //  'kernelId': "kernelId_example", // String | The ID of the kernel.
      billingProduct: ["null"], // [String] | The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
      //  'ramdiskId': "ramdiskId_example", // String | The ID of the RAM disk.
      //  'rootDeviceName': "rootDeviceName_example", // String | The device name of the root device volume (for example, <code>/dev/sda1</code>).
      //  'sriovNetSupport': "sriovNetSupport_example", // String | <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      //  'virtualizationType': "virtualizationType_example", // String | <p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p> <p>Default: <code>paravirtual</code> </p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterImageGet(
      incomingOptions.region,
      incomingOptions.name,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRegisterTransitGatewayMulticastGroupMembersGet
  /*


&lt;p&gt;Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Consideration&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the members, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the members were added to the transit gateway multicast group.&lt;/p&gt;

 */
  actionRegisterTransitGatewayMulticastGroupMembersGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      networkInterfaceIds: ["null"], // [String] | The group members' network interface IDs to register with the transit gateway multicast group.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterTransitGatewayMulticastGroupMembersGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRegisterTransitGatewayMulticastGroupSourcesGet
  /*


&lt;p&gt;Registers sources (network interfaces) with the specified transit gateway multicast group.&lt;/p&gt; &lt;p&gt;A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Considerations&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the source, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the source was added to the multicast group.&lt;/p&gt;

 */
  actionRegisterTransitGatewayMulticastGroupSourcesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      networkInterfaceIds: ["null"], // [String] | The group sources' network interface IDs to register with the transit gateway multicast group.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterTransitGatewayMulticastGroupSourcesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectTransitGatewayPeeringAttachmentGet
  /*


Rejects a transit gateway peering attachment request.

 */
  actionRejectTransitGatewayPeeringAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway peering attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectTransitGatewayPeeringAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectTransitGatewayVpcAttachmentGet
  /*


&lt;p&gt;Rejects a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;AcceptTransitGatewayVpcAttachment&lt;/a&gt; to accept a VPC attachment request.&lt;/p&gt;

 */
  actionRejectTransitGatewayVpcAttachmentGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment // String | Region where you are making the request
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectTransitGatewayVpcAttachmentGet(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectVpcEndpointConnectionsGet
  /*


Rejects one or more VPC endpoint connection requests to your VPC endpoint service.

 */
  actionRejectVpcEndpointConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the service // [String] | The IDs of one or more VPC endpoints.
    /*let region = "region_example";*/ /*let serviceId = "serviceId_example";*/ /*let vpcEndpointId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectVpcEndpointConnectionsGet(
      incomingOptions.region,
      incomingOptions.serviceId,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectVpcPeeringConnectionGet
  /*


Rejects a VPC peering connection request. The VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. Use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use &lt;a&gt;DeleteVpcPeeringConnection&lt;/a&gt;.

 */
  actionRejectVpcPeeringConnectionGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the VPC peering connection.
    /*let region = "region_example";*/ /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectVpcPeeringConnectionGet(
      incomingOptions.region,
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReleaseAddressGet
  /*


&lt;p&gt;Releases the specified Elastic IP address.&lt;/p&gt; &lt;p&gt;[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it&#39;s associated with. To disassociate an Elastic IP address without releasing it, use &lt;a&gt;DisassociateAddress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;[Nondefault VPC] You must use &lt;a&gt;DisassociateAddress&lt;/a&gt; to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (&lt;code&gt;InvalidIPAddress.InUse&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you&#39;ll get an &lt;code&gt;AuthFailure&lt;/code&gt; error if the address is already allocated to another AWS account.&lt;/p&gt; &lt;p&gt;[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see &lt;a&gt;AllocateAddress&lt;/a&gt;.&lt;/p&gt;

 */
  actionReleaseAddressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'allocationId': "allocationId_example", // String | [EC2-VPC] The allocation ID. Required for EC2-VPC.
      //  'publicIp': "publicIp_example", // String | [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      //  'networkBorderGroup': "networkBorderGroup_example", // String | <p>The location that the IP address is released from.</p> <p>If you provide an incorrect network border group, you will receive an <code>InvalidAddress.NotFound</code> error. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\">Error Codes</a>.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\">Error Codes</a>.</p> </note>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReleaseAddressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReleaseHostsGet
  /*


&lt;p&gt;When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into &lt;code&gt;released&lt;/code&gt; state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.&lt;/p&gt; &lt;p&gt;When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.&lt;/p&gt; &lt;p&gt;Released hosts still appear in a &lt;a&gt;DescribeHosts&lt;/a&gt; response.&lt;/p&gt;

 */
  actionReleaseHostsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts to release.
    /*let hostId = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReleaseHostsGet(
      incomingOptions.hostId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceIamInstanceProfileAssociationGet
  /*


&lt;p&gt;Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that&#39;s associated with an instance without having to disassociate the existing IAM instance profile first.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;

 */
  actionReplaceIamInstanceProfileAssociationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the existing IAM instance profile association.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example", // String | Describes an IAM instance profile. The name of the instance profile.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceIamInstanceProfileAssociationGet(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceNetworkAclAssociationGet
  /*


&lt;p&gt;Changes which network ACL a subnet is associated with. By default when you create a subnet, it&#39;s automatically associated with the default network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation.&lt;/p&gt;

 */
  actionReplaceNetworkAclAssociationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the current association between the original network ACL and the subnet // String | Region where you are making the reques // String | The ID of the new network ACL to associate with the subnet.
    /*let associationId = "associationId_example";*/ /*let region = "region_example";*/ /*let networkAclId = "networkAclId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceNetworkAclAssociationGet(
      incomingOptions.associationId,
      incomingOptions.region,
      incomingOptions.networkAclId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceNetworkAclEntryGet
  /*


Replaces an entry (rule) in a network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionReplaceNetworkAclEntryGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // Boolean | <p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p // String | The ID of the ACL // String | The protocol number. A value of \"-1\" means all protocols. If you specify \"-1\" or a protocol number other than \"6\" (TCP), \"17\" (UDP), or \"1\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \"58\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code // String | Indicates whether to allow or deny the traffic that matches the rule // Number | The rule number of the entry to replace.
    /*let region = "region_example";*/ /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let protocol = "protocol_example";*/ /*let ruleAction = "ruleAction_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cidrBlock': "cidrBlock_example", // String | The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'icmpCode': "icmpCode_example", // String | Describes the ICMP type and code. The ICMP code. A value of -1 means all codes for the specified ICMP type.
      //  'icmpType': "icmpType_example", // String | Describes the ICMP type and code. The ICMP type. A value of -1 means all types.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:bd8:1234:1a00::/64</code>).
      //  'portRangeFrom': "portRangeFrom_example", // String | Describes a range of ports. The first port in the range.
      //  'portRangeTo': "portRangeTo_example", // String | Describes a range of ports. The last port in the range.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceNetworkAclEntryGet(
      incomingOptions.region,
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.protocol,
      incomingOptions.ruleAction,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReplaceRouteGet
  /*


&lt;p&gt;Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionReplaceRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the route table.
    /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'egressOnlyInternetGatewayId': "egressOnlyInternetGatewayId_example", // String | [IPv6 traffic only] The ID of an egress-only internet gateway.
      //  'gatewayId': "gatewayId_example", // String | The ID of an internet gateway or virtual private gateway.
      //  'instanceId': "instanceId_example", // String | The ID of a NAT instance in your VPC.
      localTarget: true, // Boolean | Specifies whether to reset the local route to its default target (<code>local</code>).
      //  'natGatewayId': "natGatewayId_example", // String | [IPv4 traffic only] The ID of a NAT gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of a transit gateway.
      //  'localGatewayId': "localGatewayId_example", // String | The ID of the local gateway.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The ID of a network interface.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example", // String | The ID of a VPC peering connection.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceRouteGet(
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReplaceRouteTableAssociationGet
  /*


&lt;p&gt;Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can also use this operation to change which table is the main route table in the VPC. Specify the main route table&#39;s association ID and the route table ID of the new main route table.&lt;/p&gt;

 */
  actionReplaceRouteTableAssociationGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID // String | Region where you are making the reques // String | The ID of the new route table to associate with the subnet.
    /*let associationId = "associationId_example";*/ /*let region = "region_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceRouteTableAssociationGet(
      incomingOptions.associationId,
      incomingOptions.region,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceTransitGatewayRouteGet
  /*


Replaces the specified route in the specified transit gateway route table.

 */
  actionReplaceTransitGatewayRouteGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for the destination match. Routing decisions are based on the most specific match // String | The ID of the route table // String | Region where you are making the request
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      blackhole: true, // Boolean | Indicates whether traffic matching this route is to be dropped.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceTransitGatewayRouteGet(
      incomingOptions.destinationCidrBlock,
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReportInstanceStatusGet
  /*


&lt;p&gt;Submits feedback about the status of an instance. The instance must be in the &lt;code&gt;running&lt;/code&gt; state. If your experience with the instance differs from the instance status returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;, use &lt;a&gt;ReportInstanceStatus&lt;/a&gt; to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.&lt;/p&gt; &lt;p&gt;Use of this action does not change the value returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;.&lt;/p&gt;

 */
  actionReportInstanceStatusGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The instances // [String] | <p>The reason codes that describe the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems that I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems that I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems that I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul // String | The status of all instances listed.
    /*let region = "region_example";*/ /*let instanceId = ["null"];*/ /*let reasonCode = ["null"];*/ /*let status = "status_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'description': "description_example", // String | Descriptive text about the health state of your instance.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      endTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The time at which the reported instance health state ended.
      startTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The time at which the reported instance health state began.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReportInstanceStatusGet(
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.reasonCode,
      incomingOptions.status,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRequestSpotFleetGet
  /*


&lt;p&gt;Creates a Spot Fleet request.&lt;/p&gt; &lt;p&gt;The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.&lt;/p&gt; &lt;p&gt;You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.&lt;/p&gt; &lt;p&gt;Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.&lt;/p&gt; &lt;p&gt;You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the &lt;code&gt;instance&lt;/code&gt; resource type is supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html\&quot;&gt;Spot Fleet Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;

 */
  actionRequestSpotFleetGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'spotFleetRequestConfigAllocationStrategy': "spotFleetRequestConfigAllocationStrategy_example", // String | Describes the configuration of a Spot Fleet request. <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request.</p> <p>If the allocation strategy is <code>lowestPrice</code>, Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.</p> <p>If the allocation strategy is <code>diversified</code>, Spot Fleet launches instances from all the Spot Instance pools that you specify.</p> <p>If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p>
      //  'spotFleetRequestConfigOnDemandAllocationStrategy': "spotFleetRequestConfigOnDemandAllocationStrategy_example", // String | Describes the configuration of a Spot Fleet request. The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowestPrice</code>, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to <code>lowestPrice</code>.
      //  'spotFleetRequestConfigClientToken': "spotFleetRequestConfigClientToken_example", // String | Describes the configuration of a Spot Fleet request. A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      //  'spotFleetRequestConfigExcessCapacityTerminationPolicy': "spotFleetRequestConfigExcessCapacityTerminationPolicy_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
      //  'spotFleetRequestConfigFulfilledCapacity': "spotFleetRequestConfigFulfilledCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
      //  'spotFleetRequestConfigOnDemandFulfilledCapacity': "spotFleetRequestConfigOnDemandFulfilledCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
      //  'spotFleetRequestConfigIamFleetRole': "spotFleetRequestConfigIamFleetRole_example", // String | Describes the configuration of a Spot Fleet request. The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites\">Spot Fleet Prerequisites</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using <a>CancelSpotFleetRequests</a> or when the Spot Fleet request expires, if you set <code>TerminateInstancesWithExpiration</code>.
      spotFleetRequestConfigLaunchSpecifications: ["null"], // [String] | Describes the configuration of a Spot Fleet request. The launch specifications for the Spot Fleet request. If you specify <code>LaunchSpecifications</code>, you can't specify <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.
      spotFleetRequestConfigLaunchTemplateConfigs: ["null"], // [String] | Describes the configuration of a Spot Fleet request. The launch template and overrides. If you specify <code>LaunchTemplateConfigs</code>, you can't specify <code>LaunchSpecifications</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.
      //  'spotFleetRequestConfigSpotPrice': "spotFleetRequestConfigSpotPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      //  'spotFleetRequestConfigTargetCapacity': "spotFleetRequestConfigTargetCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.
      //  'spotFleetRequestConfigOnDemandTargetCapacity': "spotFleetRequestConfigOnDemandTargetCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.
      //  'spotFleetRequestConfigOnDemandMaxTotalPrice': "spotFleetRequestConfigOnDemandMaxTotalPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the <code>onDemandMaxTotalPrice</code> parameter, the <code>spotMaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
      //  'spotFleetRequestConfigSpotMaxTotalPrice': "spotFleetRequestConfigSpotMaxTotalPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum amount per hour for Spot Instances that you're willing to pay. You can use the <code>spotdMaxTotalPrice</code> parameter, the <code>onDemandMaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
      //  'spotFleetRequestConfigTerminateInstancesWithExpiration': "spotFleetRequestConfigTerminateInstancesWithExpiration_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
      //  'spotFleetRequestConfigType': "spotFleetRequestConfigType_example", // String | Describes the configuration of a Spot Fleet request. The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is <code>request</code>, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is <code>maintain</code>, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: <code>maintain</code>. <code>instant</code> is listed but is not used by Spot Fleet.
      //  'spotFleetRequestConfigValidFrom': "spotFleetRequestConfigValidFrom_example", // String | Describes the configuration of a Spot Fleet request. The start date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). By default, Amazon EC2 starts fulfilling the request immediately.
      //  'spotFleetRequestConfigValidUntil': "spotFleetRequestConfigValidUntil_example", // String | Describes the configuration of a Spot Fleet request. The end date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
      //  'spotFleetRequestConfigReplaceUnhealthyInstances': "spotFleetRequestConfigReplaceUnhealthyInstances_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether Spot Fleet should replace unhealthy instances.
      //  'spotFleetRequestConfigInstanceInterruptionBehavior': "spotFleetRequestConfigInstanceInterruptionBehavior_example", // String | Describes the configuration of a Spot Fleet request. The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
      //  'spotFleetRequestConfigLoadBalancersConfig': "spotFleetRequestConfigLoadBalancersConfig_example", // String | Describes the configuration of a Spot Fleet request. <p>One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.</p> <p>With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.</p>
      //  'spotFleetRequestConfigInstancePoolsToUseCount': "spotFleetRequestConfigInstancePoolsToUseCount_example", // String | Describes the configuration of a Spot Fleet request. The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRequestSpotFleetGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRequestSpotInstancesGet
  /*


&lt;p&gt;Creates a Spot Instance request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html\&quot;&gt;Spot Instance Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;

 */
  actionRequestSpotInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'availabilityZoneGroup': "availabilityZoneGroup_example", // String | <p>The user-specified name for a logical grouping of requests.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p>
      blockDurationMinutes: 56, // Number | <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>You can't specify an Availability Zone group or a launch group if you specify a duration.</p>
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\">How to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceCount: 56, // Number | <p>The maximum number of Spot Instances to launch.</p> <p>Default: 1</p>
      //  'launchGroup': "launchGroup_example", // String | <p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p>
      launchSpecificationSecurityGroupIds: ["null"], // [String] | Describes the launch specification for an instance. One or more security group IDs.
      launchSpecificationSecurityGroups: ["null"], // [String] | Describes the launch specification for an instance. One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
      //  'launchSpecificationAddressingType': "launchSpecificationAddressingType_example", // String | Describes the launch specification for an instance. Deprecated.
      launchSpecificationBlockDeviceMappings: ["null"], // [String] | Describes the launch specification for an instance. One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
      //  'launchSpecificationEbsOptimized': "launchSpecificationEbsOptimized_example", // String | Describes the launch specification for an instance. <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'launchSpecificationIamInstanceProfile': "launchSpecificationIamInstanceProfile_example", // String | Describes the launch specification for an instance. The IAM instance profile.
      //  'launchSpecificationImageId': "launchSpecificationImageId_example", // String | Describes the launch specification for an instance. The ID of the AMI.
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | Describes the launch specification for an instance. The instance type.
      //  'launchSpecificationKernelId': "launchSpecificationKernelId_example", // String | Describes the launch specification for an instance. The ID of the kernel.
      //  'launchSpecificationKeyName': "launchSpecificationKeyName_example", // String | Describes the launch specification for an instance. The name of the key pair.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | Describes the launch specification for an instance. <p>Indicates whether basic or detailed monitoring is enabled for the instance.</p> <p>Default: Disabled</p>
      launchSpecificationNetworkInterfaces: ["null"], // [String] | Describes the launch specification for an instance. One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | Describes the launch specification for an instance. The placement information for the instance.
      //  'launchSpecificationRamdiskId': "launchSpecificationRamdiskId_example", // String | Describes the launch specification for an instance. The ID of the RAM disk.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | Describes the launch specification for an instance. The IDs of the subnets in which to launch the instance. To specify multiple subnets, separate them using commas for example, \"subnet-1234abcdeexample1, subnet-0987cdef6example2\".
      //  'launchSpecificationUserData': "launchSpecificationUserData_example", // String | Describes the launch specification for an instance. The Base64-encoded user data for the instance. User data is limited to 16 KB.
      //  'spotPrice': "spotPrice_example", // String | The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      //  'type': "type_example", // String | <p>The Spot Instance request type.</p> <p>Default: <code>one-time</code> </p>
      validFrom: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p> <p>The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.</p>
      validUntil: new Date("2013-10-20T19:20:30+01:00"), // Date | The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
      //  'instanceInterruptionBehavior': "instanceInterruptionBehavior_example", // String | The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRequestSpotInstancesGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetEbsDefaultKmsKeyIdGet
  /*


&lt;p&gt;Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.&lt;/p&gt; &lt;p&gt;After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetEbsDefaultKmsKeyIdGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetEbsDefaultKmsKeyIdGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetFpgaImageAttributeGet
  /*


Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.

 */
  actionResetFpgaImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the AFI.
    /*let region = "region_example";*/ /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'attribute': "attribute_example", // String | The attribute.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetFpgaImageAttributeGet(
      incomingOptions.region,
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetImageAttributeGet
  /*


&lt;p&gt;Resets an attribute of an AMI to its default value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The productCodes attribute can&#39;t be reset.&lt;/p&gt; &lt;/note&gt;

 */
  actionResetImageAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute to reset (currently you can only reset the launch permission attribute) // String | The ID of the AMI // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let imageId = "imageId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetImageAttributeGet(
      incomingOptions.attribute,
      incomingOptions.imageId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetInstanceAttributeGet
  /*


&lt;p&gt;Resets an attribute of an instance to its default value. To reset the &lt;code&gt;kernel&lt;/code&gt; or &lt;code&gt;ramdisk&lt;/code&gt;, the instance must be in a stopped state. To reset the &lt;code&gt;sourceDestCheck&lt;/code&gt;, the instance can be either running or stopped.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;sourceDestCheck&lt;/code&gt; attribute controls whether source/destination checking is enabled. The default value is &lt;code&gt;true&lt;/code&gt;, which means checking is enabled. This value must be &lt;code&gt;false&lt;/code&gt; for a NAT instance to perform NAT. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\&quot;&gt;NAT Instances&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetInstanceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important // String | Region where you are making the reques // String | The ID of the instance.
    /*let attribute = "attribute_example";*/ /*let region = "region_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetInstanceAttributeGet(
      incomingOptions.attribute,
      incomingOptions.region,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetNetworkInterfaceAttributeGet
  /*


Resets a network interface attribute. You can specify only one attribute at a time.

 */
  actionResetNetworkInterfaceAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the network interface.
    /*let region = "region_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'sourceDestCheck': "sourceDestCheck_example", // String | The source/destination checking attribute. Resets the value to <code>true</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetNetworkInterfaceAttributeGet(
      incomingOptions.region,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetSnapshotAttributeGet
  /*


&lt;p&gt;Resets permission settings for the specified snapshot.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetSnapshotAttributeGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute to reset. Currently, only the attribute for permission to create volumes can be reset // String | The ID of the snapshot // String | Region where you are making the request
    /*let attribute = "attribute_example";*/ /*let snapshotId = "snapshotId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetSnapshotAttributeGet(
      incomingOptions.attribute,
      incomingOptions.snapshotId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRestoreAddressToClassicGet
  /*


Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.

 */
  actionRestoreAddressToClassicGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The Elastic IP address.
    /*let region = "region_example";*/ /*let publicIp = "publicIp_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRestoreAddressToClassicGet(
      incomingOptions.region,
      incomingOptions.publicIp,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRevokeClientVpnIngressGet
  /*


Removes an ingress authorization rule from a Client VPN endpoint.

 */
  actionRevokeClientVpnIngressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint with which the authorization rule is associated // String | The IPv4 address range, in CIDR notation, of the network for which access is being removed // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let targetNetworkCidr = "targetNetworkCidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'accessGroupId': "accessGroupId_example", // String | The ID of the Active Directory group for which to revoke access.
      revokeAllGroups: true, // Boolean | Indicates whether access should be revoked for all clients.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeClientVpnIngressGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.targetNetworkCidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRevokeSecurityGroupEgressGet
  /*


&lt;p&gt;[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn&#39;t apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;p&gt;Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;

 */
  actionRevokeSecurityGroupEgressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The ID of the security group.
    /*let region = "region_example";*/ /*let groupId = "groupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      ipPermissions: ["null"], // [String] | The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      //  'cidrIp': "cidrIp_example", // String | Not supported. Use a set of IP permissions to specify the CIDR.
      fromPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'ipProtocol': "ipProtocol_example", // String | Not supported. Use a set of IP permissions to specify the protocol name or number.
      toPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeSecurityGroupEgressGet(
      incomingOptions.region,
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRevokeSecurityGroupIngressGet
  /*


&lt;p&gt;Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;note&gt; &lt;p&gt;[EC2-Classic only] If the values you specify do not match the existing rule&#39;s values, no error is returned. Use &lt;a&gt;DescribeSecurityGroups&lt;/a&gt; to verify that the rule has been removed.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;

 */
  actionRevokeSecurityGroupIngressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'cidrIp': "cidrIp_example", // String | The CIDR IP address range. You can't specify this parameter when specifying a source security group.
      fromPort: 56, // Number | The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      ipPermissions: ["null"], // [String] | The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
      //  'ipProtocol': "ipProtocol_example", // String | The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href=\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\">Protocol Numbers</a>). Use <code>-1</code> to specify all.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      toPort: 56, // Number | The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeSecurityGroupIngressGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRunInstancesGet
  /*


&lt;p&gt;Launches the specified number of instances using an AMI for which you have permissions. &lt;/p&gt; &lt;p&gt;You can specify a number of options, or leave the default options. The following rules apply:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] If you don&#39;t specify a subnet ID, we choose a default subnet from your default VPC for you. If you don&#39;t have a default VPC, you must specify a subnet ID in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-Classic] If don&#39;t specify an Availability Zone, we choose one for you.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types\&quot;&gt;Instance Types Available Only in a VPC&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don&#39;t specify this address, we choose one from the IPv4 range of your subnet.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Not all instance types support IPv6 addresses. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify a security group ID, we use the default security group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Security Groups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\&quot;&gt;launch template&lt;/a&gt;, which is a resource that contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify the launch template instead of specifying the launch parameters.&lt;/p&gt; &lt;p&gt;To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.&lt;/p&gt; &lt;p&gt;An instance is ready for you to use when it&#39;s in the &lt;code&gt;running&lt;/code&gt; state. You can check the state of your instance using &lt;a&gt;DescribeInstances&lt;/a&gt;. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see &lt;a&gt;CreateTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html\&quot;&gt;What To Do If An Instance Immediately Terminates&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html\&quot;&gt;Troubleshooting Connecting to Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRunInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href=\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p // Number | <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href=\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p // String | Region where you are making the request
    /*let maxCount = 56;*/ /*let minCount = 56;*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      blockDeviceMapping: ["null"], // [String] | The block device mapping entries.
      //  'imageId': "imageId_example", // String | The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
      //  'instanceType': "instanceType_example", // String | <p>The instance type. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p>
      ipv6AddressCount: 56, // Number | <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      ipv6Address: ["null"], // [String] | <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      //  'kernelId': "kernelId_example", // String | <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'keyName': "keyName_example", // String | <p>The name of the key pair. You can create a key pair using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\">CreateKeyPair</a> or <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'monitoringEnabled': "monitoringEnabled_example", // String | Describes the monitoring of an instance. Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
      //  'placementAvailabilityZone': "placementAvailabilityZone_example", // String | Describes the placement of an instance. <p>The Availability Zone of the instance.</p> <p>If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region.</p>
      //  'placementAffinity': "placementAffinity_example", // String | Describes the placement of an instance. The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <a>ImportInstance</a> command.
      //  'placementGroupName': "placementGroupName_example", // String | Describes the placement of an instance. The name of the placement group the instance is in.
      //  'placementPartitionNumber': "placementPartitionNumber_example", // String | Describes the placement of an instance. The number of the partition the instance is in. Valid only if the placement group strategy is set to <code>partition</code>.
      //  'placementHostId': "placementHostId_example", // String | Describes the placement of an instance. The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the <a>ImportInstance</a> command.
      //  'placementTenancy': "placementTenancy_example", // String | Describes the placement of an instance. The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for the <a>ImportInstance</a> command.
      //  'placementSpreadDomain': "placementSpreadDomain_example", // String | Describes the placement of an instance. Reserved for future use.
      //  'placementHostResourceGroupArn': "placementHostResourceGroupArn_example", // String | Describes the placement of an instance. The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the <b>Tenancy</b> parameter or set it to <code>host</code>.
      //  'ramdiskId': "ramdiskId_example", // String | <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      securityGroupId: ["null"], // [String] | <p>The IDs of the security groups. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
      securityGroup: ["null"], // [String] | <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> <p>Default: Amazon EC2 uses the default security group.</p>
      //  'subnetId': "subnetId_example", // String | <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
      //  'userData': "userData_example", // String | The user data to make available to the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\">Adding User Data</a> (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
      //  'additionalInfo': "additionalInfo_example", // String | Reserved.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
      disableApiTermination: true, // Boolean | <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      ebsOptimized: true, // Boolean | <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example", // String | Describes an IAM instance profile. The name of the instance profile.
      //  'instanceInitiatedShutdownBehavior': "instanceInitiatedShutdownBehavior_example", // String | <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      networkInterface: ["null"], // [String] | The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'privateIpAddress': "privateIpAddress_example", // String | <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      elasticGpuSpecification: ["null"], // [String] | An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\"> Amazon EC2 Elastic GPUs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      elasticInferenceAccelerator: ["null"], // [String] | An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.
      tagSpecification: ["null"], // [String] | The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      //  'launchTemplateLaunchTemplateId': "launchTemplateLaunchTemplateId_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. The ID of the launch template.
      //  'launchTemplateLaunchTemplateName': "launchTemplateLaunchTemplateName_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. The name of the launch template.
      //  'launchTemplateVersion': "launchTemplateVersion_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. <p>The version number of the launch template.</p> <p>Default: The default version for the launch template.</p>
      //  'instanceMarketOptionsMarketType': "instanceMarketOptionsMarketType_example", // String | Describes the market (purchasing) option for the instances. The market type.
      //  'instanceMarketOptionsSpotOptions': "instanceMarketOptionsSpotOptions_example", // String | Describes the market (purchasing) option for the instances. The options for Spot Instances.
      //  'creditSpecificationCpuCredits': "creditSpecificationCpuCredits_example", // String | The credit option for CPU usage of a T2 or T3 instance. The credit option for CPU usage of a T2 or T3 instance. Valid values are <code>standard</code> and <code>unlimited</code>.
      //  'cpuOptionsCoreCount': "cpuOptionsCoreCount_example", // String | The CPU options for the instance. Both the core count and threads per core must be specified in the request. The number of CPU cores for the instance.
      //  'cpuOptionsThreadsPerCore': "cpuOptionsThreadsPerCore_example", // String | The CPU options for the instance. Both the core count and threads per core must be specified in the request. The number of threads per CPU core. To disable multithreading for the instance, specify a value of <code>1</code>. Otherwise, specify the default value of <code>2</code>.
      //  'capacityReservationSpecificationCapacityReservationPreference': "capacityReservationSpecificationCapacityReservationPreference_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul>
      //  'capacityReservationSpecificationCapacityReservationTarget': "capacityReservationSpecificationCapacityReservationTarget_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> Information about the target Capacity Reservation.
      //  'hibernationOptionsConfigured': "hibernationOptionsConfigured_example", // String | Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\">hibernation prerequisites</a>. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. <p>If you set this parameter to <code>true</code>, your instance is enabled for hibernation.</p> <p>Default: <code>false</code> </p>
      licenseSpecification: ["null"], // [String] | The license configurations.
      //  'metadataOptionsHttpTokens': "metadataOptionsHttpTokens_example", // String | The metadata options for the instance. <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p> <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.</p> <p>If the state is <code>required</code>, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials the version 1.0 credentials are not available.</p>
      //  'metadataOptionsHttpPutResponseHopLimit': "metadataOptionsHttpPutResponseHopLimit_example", // String | The metadata options for the instance. <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p> <p>Default: 1</p> <p>Possible values: Integers from 1 to 64</p>
      //  'metadataOptionsHttpEndpoint': "metadataOptionsHttpEndpoint_example", // String | The metadata options for the instance. <p>This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p> <note> <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p> </note>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRunInstancesGet(
      incomingOptions.maxCount,
      incomingOptions.minCount,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRunScheduledInstancesGet
  /*


&lt;p&gt;Launches the specified Scheduled Instances.&lt;/p&gt; &lt;p&gt;Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You must launch a Scheduled Instance during its scheduled time period. You can&#39;t stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html\&quot;&gt;Scheduled Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRunScheduledInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // String | The Scheduled Instance ID.
    /*let region = "region_example";*/ /*let scheduledInstanceId = "scheduledInstanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\">Ensuring Idempotency</a>.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceCount: 56, // Number | <p>The number of instances.</p> <p>Default: 1</p>
      launchSpecificationBlockDeviceMappings: ["null"], // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The block device mapping entries.
      //  'launchSpecificationEbsOptimized': "launchSpecificationEbsOptimized_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'launchSpecificationIamInstanceProfile': "launchSpecificationIamInstanceProfile_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The IAM instance profile.
      //  'launchSpecificationImageId': "launchSpecificationImageId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the Amazon Machine Image (AMI).
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The instance type.
      //  'launchSpecificationKernelId': "launchSpecificationKernelId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the kernel.
      //  'launchSpecificationKeyName': "launchSpecificationKeyName_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The name of the key pair.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> Enable or disable monitoring for the instances.
      launchSpecificationNetworkInterfaces: ["null"], // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The network interfaces.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The placement information.
      //  'launchSpecificationRamdiskId': "launchSpecificationRamdiskId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the RAM disk.
      launchSpecificationSecurityGroupIds: ["null"], // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The IDs of the security groups.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the subnet in which to launch the instances.
      //  'launchSpecificationUserData': "launchSpecificationUserData_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The base64-encoded MIME user data.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRunScheduledInstancesGet(
      incomingOptions.region,
      incomingOptions.scheduledInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchLocalGatewayRoutesGet
  /*


Searches for routes in the specified local gateway route table.

 */
  actionSearchLocalGatewayRoutesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the local gateway route table // [String] | One or more filters // String | Region where you are making the request
    /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let filter = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchLocalGatewayRoutesGet(
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.filter,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchTransitGatewayMulticastGroupsGet
  /*


Searches one or more transit gateway multicast groups and returns the group membership information.

 */
  actionSearchTransitGatewayMulticastGroupsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the request
    /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      filter: ["null"], // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>group-ip-address</code> - The IP address of the transit gateway multicast group.</p> </li> <li> <p> <code>is-group-member</code> - The resource is a group member. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>is-group-source</code> - The resource is a group source. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>member-type</code> - The member type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>tgw-peering</code>.</p> </li> <li> <p> <code>source-type</code> - The source type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associated</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchTransitGatewayMulticastGroupsGet(
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchTransitGatewayRoutesGet
  /*


Searches for routes in the specified transit gateway route table.

 */
  actionSearchTransitGatewayRoutesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-type</code> - The attachment resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p> </li> <li> <p> <code>type</code> - The type of route (<code>propagated</code> | <code>static</code>).</p> </li> </ul // String | Region where you are making the request
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let filter = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      maxResults: 56, // Number | The maximum number of routes to return.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchTransitGatewayRoutesGet(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.filter,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSendDiagnosticInterruptGet
  /*


&lt;p&gt;Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a &lt;i&gt;kernel panic&lt;/i&gt; (on Linux instances), or a &lt;i&gt;blue screen&lt;/i&gt;/&lt;i&gt;stop error&lt;/i&gt; (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a &lt;i&gt;non-maskable interrupt&lt;/i&gt; (NMI).&lt;/p&gt; &lt;p&gt;In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.&lt;/p&gt; &lt;p&gt;Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.&lt;/p&gt; &lt;p&gt;For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Linux instances) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Windows instances).&lt;/p&gt;

 */
  actionSendDiagnosticInterruptGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | Region where you are making the request
    /*let instanceId = "instanceId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSendDiagnosticInterruptGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionStartInstancesGet
  /*


&lt;p&gt;Starts an Amazon EBS-backed instance that you&#39;ve previously stopped.&lt;/p&gt; &lt;p&gt;Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.&lt;/p&gt; &lt;p&gt;Performing this operation on an instance that uses an instance store as its root device returns an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html\&quot;&gt;Stopping Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionStartInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'additionalInfo': "additionalInfo_example", // String | Reserved.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionStartInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionStopInstancesGet
  /*


&lt;p&gt;Stops an Amazon EBS-backed instance.&lt;/p&gt; &lt;p&gt;You can use the Stop action to hibernate an instance if the instance is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation\&quot;&gt;enabled for hibernation&lt;/a&gt; and it meets the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\&quot;&gt;hibernation prerequisites&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\&quot;&gt;Hibernate Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;We don&#39;t charge usage for a stopped instance, or data transfer fees however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;You can&#39;t start, stop, or hibernate Spot Instances, and you can&#39;t stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances\&quot;&gt;Hibernating Interrupted Spot Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.&lt;/p&gt; &lt;p&gt;Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html\&quot;&gt;Troubleshooting Stopping Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionStopInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      hibernate: true, // Boolean | <p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> Default: <code>false</code> </p>
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      force: true, // Boolean | <p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionStopInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionTerminateClientVpnConnectionsGet
  /*


Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.

 */
  actionTerminateClientVpnConnectionsGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which the client is connected // String | Region where you are making the request
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'connectionId': "connectionId_example", // String | The ID of the client connection to be terminated.
      //  'username': "username_example", // String | The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionTerminateClientVpnConnectionsGet(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionTerminateInstancesGet
  /*


&lt;p&gt;Shuts down the specified instances. This operation is idempotent if you terminate an instance more than once, each call succeeds. &lt;/p&gt; &lt;p&gt;If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.&lt;/p&gt; &lt;p&gt;Terminated instances remain visible after termination (for approximately one hour).&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.&lt;/p&gt; &lt;p&gt;You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the &lt;code&gt;DeleteOnTermination&lt;/code&gt; block device mapping parameter set to &lt;code&gt;true&lt;/code&gt; are automatically deleted. For more information about the differences between stopping and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html\&quot;&gt;Troubleshooting Terminating Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionTerminateInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>The IDs of the instances.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionTerminateInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUnassignIpv6AddressesGet
  /*


Unassigns one or more IPv6 addresses from a network interface.

 */
  actionUnassignIpv6AddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IPv6 addresses to unassign from the network interface // String | The ID of the network interface.
    /*let ipv6Addresses = ["null"];*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnassignIpv6AddressesGet(
      incomingOptions.ipv6Addresses,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUnassignPrivateIpAddressesGet
  /*


Unassigns one or more secondary private IP addresses from a network interface.

 */
  actionUnassignPrivateIpAddressesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface // [String] | The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let privateIpAddress = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnassignPrivateIpAddressesGet(
      incomingOptions.networkInterfaceId,
      incomingOptions.privateIpAddress,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionUnmonitorInstancesGet
  /*


Disables detailed monitoring for a running instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionUnmonitorInstancesGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances // String | Region where you are making the request
    /*let instanceId = ["null"];*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnmonitorInstancesGet(
      incomingOptions.instanceId,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUpdateSecurityGroupRuleDescriptionsEgressGet
  /*


&lt;p&gt;[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;

 */
  actionUpdateSecurityGroupRuleDescriptionsEgressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IP permissions for the security group rule.
    /*let region = "region_example";*/ /*let ipPermissions = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUpdateSecurityGroupRuleDescriptionsEgressGet(
      incomingOptions.region,
      incomingOptions.ipPermissions,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUpdateSecurityGroupRuleDescriptionsIngressGet
  /*


&lt;p&gt;Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;

 */
  actionUpdateSecurityGroupRuleDescriptionsIngressGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Region where you are making the reques // [String] | The IP permissions for the security group rule.
    /*let region = "region_example";*/ /*let ipPermissions = ["null"];*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUpdateSecurityGroupRuleDescriptionsIngressGet(
      incomingOptions.region,
      incomingOptions.ipPermissions,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionWithdrawByoipCidrGet
  /*


&lt;p&gt;Stops advertising an IPv4 address range that is provisioned as an address pool.&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.&lt;/p&gt;

 */
  actionWithdrawByoipCidrGet(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation // String | Region where you are making the request
    /*let cidr = "cidr_example";*/ /*let region = "region_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      dryRun: false, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionWithdrawByoipCidrGet(
      incomingOptions.cidr,
      incomingOptions.region,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  async post(entity, options) {
    switch (entity) {
      case "ACTION_ACCEPT_RESERVED_INSTANCES_EXCHANGE_QUOTE":
        /*



Accepts the Convertible Reserved Instance exchange quote described in the &lt;a&gt;GetReservedInstancesExchangeQuote&lt;/a&gt; call.


      Function parameters for this API reservedInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptReservedInstancesExchangeQuotePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Accepts a transit gateway peering attachment request. The peering attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptTransitGatewayPeeringAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Accepts a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;RejectTransitGatewayVpcAttachment&lt;/a&gt; to reject a VPC attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptTransitGatewayVpcAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_VPC_ENDPOINT_CONNECTIONS":
        /*



Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.


      Function parameters for this API serviceId,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptVpcEndpointConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ACCEPT_VPC_PEERING_CONNECTION":
        /*



&lt;p&gt;Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state, and you must be the owner of the peer VPC. Use &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; to view your outstanding VPC peering connection requests.&lt;/p&gt; &lt;p&gt;For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionAcceptVpcPeeringConnectionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ADVERTISE_BYOIP_CIDR":
        /*



&lt;p&gt;Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.&lt;/p&gt; &lt;p&gt;To stop advertising the BYOIP CIDR, use &lt;a&gt;WithdrawByoipCidr&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API cidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAdvertiseByoipCidrPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ALLOCATE_ADDRESS":
        /*



&lt;p&gt;Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.&lt;/p&gt; &lt;p&gt;You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionAllocateAddressPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ALLOCATE_HOSTS":
        /*



Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.


      Function parameters for this API availabilityZone,quantity,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAllocateHostsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_APPLY_SECURITY_GROUPS_TO_CLIENT_VPN_TARGET_NETWORK":
        /*



Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.


      Function parameters for this API clientVpnEndpointId,vpcId,securityGroupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionApplySecurityGroupsToClientVpnTargetNetworkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSIGN_IPV6_ADDRESSES":
        /*



Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet&#39;s IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\&quot;&gt;IP Addresses Per Network Interface Per Instance Type&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssignIpv6AddressesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSIGN_PRIVATE_IP_ADDRESSES":
        /*



&lt;p&gt;Assigns one or more secondary private IP addresses to the specified network interface.&lt;/p&gt; &lt;p&gt;You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet&#39;s CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about Elastic IP addresses, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.&lt;/p&gt; &lt;p&gt;Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check &lt;code&gt;network/interfaces/macs/mac/local-ipv4s&lt;/code&gt; in the instance metadata to confirm that the remapping is complete.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssignPrivateIpAddressesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_ADDRESS":
        /*



&lt;p&gt;Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.&lt;/p&gt; &lt;p&gt;[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.&lt;/p&gt; &lt;p&gt;You cannot associate an Elastic IP address with an interface in a different network border group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the &lt;i&gt;Elastic IP Addresses&lt;/i&gt; section of &lt;a href&#x3D;\&quot;http://aws.amazon.com/ec2/pricing/\&quot;&gt;Amazon EC2 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateAddressPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSOCIATE_CLIENT_VPN_TARGET_NETWORK":
        /*



Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.


      Function parameters for this API clientVpnEndpointId,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateClientVpnTargetNetworkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_DHCP_OPTIONS":
        /*



&lt;p&gt;Associates a set of DHCP options (that you&#39;ve previously created) with the specified VPC, or associates no DHCP options with the VPC.&lt;/p&gt; &lt;p&gt;After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don&#39;t need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API dhcpOptionsId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateDhcpOptionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_IAM_INSTANCE_PROFILE":
        /*



Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateIamInstanceProfilePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_ROUTE_TABLE":
        /*



&lt;p&gt;Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateRouteTablePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ASSOCIATE_SUBNET_CIDR_BLOCK":
        /*



Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.


      Function parameters for this API ipv6CidrBlock,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateSubnetCidrBlockPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



&lt;p&gt;Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.&lt;/p&gt; &lt;p&gt;The transit gateway attachment must be in the available state before you can add a resource. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html\&quot;&gt;DescribeTransitGatewayAttachments&lt;/a&gt; to see the state of the attachment.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateTransitGatewayMulticastDomainPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateTransitGatewayRouteTablePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ASSOCIATE_VPC_CIDR_BLOCK":
        /*



&lt;p&gt;Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.&lt;/p&gt; &lt;p&gt;For more information about associating CIDR blocks with your VPC and applicable restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing\&quot;&gt;VPC and Subnet Sizing&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAssociateVpcCidrBlockPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_CLASSIC_LINK_VPC":
        /*



&lt;p&gt;Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC&#39;s security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that&#39;s in the &lt;code&gt;running&lt;/code&gt; state. An instance is automatically unlinked from a VPC when it&#39;s stopped - you can link it to the VPC again when you restart it.&lt;/p&gt; &lt;p&gt;After you&#39;ve linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.&lt;/p&gt; &lt;p&gt;Linking your instance to a VPC is sometimes referred to as &lt;i&gt;attaching&lt;/i&gt; your instance.&lt;/p&gt;


      Function parameters for this API securityGroupId,instanceId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachClassicLinkVpcPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_INTERNET_GATEWAY":
        /*



Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.


      Function parameters for this API internetGatewayId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_NETWORK_INTERFACE":
        /*



Attaches a network interface to an instance.


      Function parameters for this API deviceIndex,instanceId,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachNetworkInterfacePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ATTACH_VOLUME":
        /*



&lt;p&gt;Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.&lt;/p&gt; &lt;p&gt;Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you attach an EBS volume, you must make it available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\&quot;&gt;Making an EBS Volume Available For Use&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If a volume has an AWS Marketplace product code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The volume can be attached only to a stopped instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;AWS Marketplace product codes are copied from the volume to the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must be subscribed to the product.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The instance type and operating system of the instance must support the product. For example, you can&#39;t detach a volume from a Windows instance and attach it to a Linux instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html\&quot;&gt;Attaching Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API device,instanceId,volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ATTACH_VPN_GATEWAY":
        /*



&lt;p&gt;Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,vpnGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAttachVpnGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_AUTHORIZE_CLIENT_VPN_INGRESS":
        /*



Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.


      Function parameters for this API clientVpnEndpointId,targetNetworkCidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeClientVpnIngressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_AUTHORIZE_SECURITY_GROUP_EGRESS":
        /*



&lt;p&gt;[VPC only] Adds the specified egress rules to a security group for use with a VPC.&lt;/p&gt; &lt;p&gt;An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeSecurityGroupEgressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_AUTHORIZE_SECURITY_GROUP_INGRESS":
        /*



&lt;p&gt;Adds the specified ingress rules to a security group.&lt;/p&gt; &lt;p&gt;An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionAuthorizeSecurityGroupIngressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_BUNDLE_INSTANCE":
        /*



&lt;p&gt;Bundles an Amazon instance store-backed Windows instance.&lt;/p&gt; &lt;p&gt;During bundling, only the root device volume (C:\\) is bundled. Data on other instance store volumes is not preserved.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionBundleInstancePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_BUNDLE_TASK":
        /*



Cancels a bundling operation for an instance store-backed Windows instance.


      Function parameters for this API bundleId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelBundleTaskPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_CAPACITY_RESERVATION":
        /*



&lt;p&gt;Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation&#39;s state to &lt;code&gt;cancelled&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.&lt;/p&gt;


      Function parameters for this API capacityReservationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelCapacityReservationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_CONVERSION_TASK":
        /*



&lt;p&gt;Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API conversionTaskId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelConversionTaskPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_EXPORT_TASK":
        /*



Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.


      Function parameters for this API exportTaskId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelExportTaskPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_IMPORT_TASK":
        /*



Cancels an in-process import virtual machine or import snapshot task.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelImportTaskPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CANCEL_RESERVED_INSTANCES_LISTING":
        /*



&lt;p&gt;Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API reservedInstancesListingId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelReservedInstancesListingPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_SPOT_FLEET_REQUESTS":
        /*



&lt;p&gt;Cancels the specified Spot Fleet requests.&lt;/p&gt; &lt;p&gt;After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the &lt;code&gt;cancelled_terminating&lt;/code&gt; state. Otherwise, the Spot Fleet request enters the &lt;code&gt;cancelled_running&lt;/code&gt; state and the instances continue to run until they are interrupted or you terminate them manually.&lt;/p&gt;


      Function parameters for this API spotFleetRequestId,terminateInstances,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelSpotFleetRequestsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CANCEL_SPOT_INSTANCE_REQUESTS":
        /*



&lt;p&gt;Cancels one or more Spot Instance requests.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API spotInstanceRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCancelSpotInstanceRequestsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CONFIRM_PRODUCT_INSTANCE":
        /*



Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user&#39;s instance is eligible for support.


      Function parameters for this API instanceId,productCode,opts
        */
        return new Promise((resolve, reject) => {
          this.actionConfirmProductInstancePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_COPY_FPGA_IMAGE":
        /*



Copies the specified Amazon FPGA Image (AFI) to the current Region.


      Function parameters for this API sourceFpgaImageId,sourceRegion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopyFpgaImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_COPY_IMAGE":
        /*



&lt;p&gt;Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.&lt;/p&gt; &lt;p&gt;Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set &lt;code&gt;Encrypted&lt;/code&gt; during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.&lt;/p&gt; &lt;p&gt;For more information about the prerequisites and limits when copying an AMI, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html\&quot;&gt;Copying an AMI&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API name,sourceImageId,sourceRegion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopyImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_COPY_SNAPSHOT":
        /*



&lt;p&gt;Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).&lt;/p&gt; &lt;p&gt;Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK) however, you can specify a different CMK.&lt;/p&gt; &lt;p&gt;To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html\&quot;&gt;Copying an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API sourceRegion,sourceSnapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCopySnapshotPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_CAPACITY_RESERVATION":
        /*



&lt;p&gt;Creates a new Capacity Reservation with the specified attributes.&lt;/p&gt; &lt;p&gt;Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\&quot;&gt;Capacity Reservations&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.&lt;/p&gt; &lt;p&gt;Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html\&quot;&gt;Amazon EC2 Service Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceType,instancePlatform,instanceCount,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateCapacityReservationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_CLIENT_VPN_ENDPOINT":
        /*



Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.


      Function parameters for this API clientCidrBlock,serverCertificateArn,authentication,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateClientVpnEndpointPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_CLIENT_VPN_ROUTE":
        /*



Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.


      Function parameters for this API clientVpnEndpointId,destinationCidrBlock,targetVpcSubnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateClientVpnRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_CUSTOMER_GATEWAY":
        /*



&lt;p&gt;Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and can be behind a device performing network address translation (NAT).&lt;/p&gt; &lt;p&gt;For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the &lt;code&gt;us-east-1&lt;/code&gt; Region, and 9059, which is reserved in the &lt;code&gt;eu-west-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.&lt;/p&gt; &lt;/important&gt;


      Function parameters for this API bgpAsn,type,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateCustomerGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_DEFAULT_SUBNET":
        /*



Creates a default subnet with a size &lt;code&gt;/20&lt;/code&gt; IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet\&quot;&gt;Creating a Default Subnet&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API availabilityZone,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDefaultSubnetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_DEFAULT_VPC":
        /*



&lt;p&gt;Creates a default VPC with a size &lt;code&gt;/16&lt;/code&gt; IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\&quot;&gt;Default VPC and Default Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. You cannot specify the components of the default VPC yourself.&lt;/p&gt; &lt;p&gt;If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.&lt;/p&gt; &lt;p&gt;If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see \&quot;I really want a default VPC for my existing EC2 account. Is that possible?\&quot; in the &lt;a href&#x3D;\&quot;http://aws.amazon.com/vpc/faqs/#Default_VPCs\&quot;&gt;Default VPCs FAQ&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDefaultVpcPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_DHCP_OPTIONS":
        /*



&lt;p&gt;Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name-servers&lt;/code&gt; - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in &lt;code&gt;domain-name&lt;/code&gt;, you must set &lt;code&gt;domain-name-servers&lt;/code&gt; to a custom DNS server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name&lt;/code&gt; - If you&#39;re using AmazonProvidedDNS in &lt;code&gt;us-east-1&lt;/code&gt;, specify &lt;code&gt;ec2.internal&lt;/code&gt;. If you&#39;re using AmazonProvidedDNS in another Region, specify &lt;code&gt;region.compute.internal&lt;/code&gt; (for example, &lt;code&gt;ap-northeast-1.compute.internal&lt;/code&gt;). Otherwise, specify a domain name (for example, &lt;code&gt;MyCompany.com&lt;/code&gt;). This value is used to complete unqualified DNS hostnames. &lt;b&gt;Important&lt;/b&gt;: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ntp-servers&lt;/code&gt; - The IP addresses of up to four Network Time Protocol (NTP) servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-name-servers&lt;/code&gt; - The IP addresses of up to four NetBIOS name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-node-type&lt;/code&gt; - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the &lt;code&gt;domain-name-servers&lt;/code&gt; option either to &lt;code&gt;AmazonProvidedDNS&lt;/code&gt; or to a domain name server of your choice. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API dhcpConfiguration,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateDhcpOptionsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_EGRESS_ONLY_INTERNET_GATEWAY":
        /*



[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateEgressOnlyInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_FLEET":
        /*



&lt;p&gt;Launches an EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\&quot;&gt;Launching an EC2 Fleet&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API launchTemplateConfigs,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFleetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_FLOW_LOGS":
        /*



&lt;p&gt;Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. &lt;/p&gt; &lt;p&gt;Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\&quot;&gt;Flow Log Records&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\&quot;&gt;VPC Flow Logs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API resourceId,resourceType,trafficType,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFlowLogsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_FPGA_IMAGE":
        /*



&lt;p&gt;Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).&lt;/p&gt; &lt;p&gt;The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.&lt;/p&gt; &lt;p&gt;An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the &lt;a href&#x3D;\&quot;https://github.com/aws/aws-fpga/\&quot;&gt;AWS FPGA Hardware Development Kit&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateFpgaImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_IMAGE":
        /*



&lt;p&gt;Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.&lt;/p&gt; &lt;p&gt;If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\&quot;&gt;Creating Amazon EBS-Backed Linux AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,name,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_INSTANCE_EXPORT_TASK":
        /*



&lt;p&gt;Exports a running or stopped instance to an S3 bucket.&lt;/p&gt; &lt;p&gt;For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html\&quot;&gt;Exporting an Instance as a VM Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateInstanceExportTaskPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_INTERNET_GATEWAY":
        /*



&lt;p&gt;Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using &lt;a&gt;AttachInternetGateway&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_KEY_PAIR":
        /*



&lt;p&gt;Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.&lt;/p&gt; &lt;p&gt;You can have up to five thousand key pairs per Region.&lt;/p&gt; &lt;p&gt;The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using &lt;a&gt;ImportKeyPair&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API keyName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateKeyPairPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_LAUNCH_TEMPLATE":
        /*



Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify a launch template instead of providing the launch parameters in the request.


      Function parameters for this API launchTemplateName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLaunchTemplatePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_LAUNCH_TEMPLATE_VERSION":
        /*



&lt;p&gt;Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.&lt;/p&gt; &lt;p&gt;Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLaunchTemplateVersionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_LOCAL_GATEWAY_ROUTE":
        /*



Creates a static route for the specified local gateway route table.


      Function parameters for this API destinationCidrBlock,localGatewayRouteTableId,localGatewayVirtualInterfaceGroupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLocalGatewayRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION":
        /*



Associates the specified VPC with the specified local gateway route table.


      Function parameters for this API localGatewayRouteTableId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateLocalGatewayRouteTableVpcAssociationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NAT_GATEWAY":
        /*



Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\&quot;&gt;NAT Gateways&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API allocationId,subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNatGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_NETWORK_ACL_ENTRY":
        /*



&lt;p&gt;Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.&lt;/p&gt; &lt;p&gt;We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.&lt;/p&gt; &lt;p&gt;After you add an entry, you can&#39;t modify it you must either replace it, or create an entry and delete the old one.&lt;/p&gt; &lt;p&gt;For more information about network ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API egress,networkAclId,protocol,ruleAction,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkAclEntryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NETWORK_ACL":
        /*



&lt;p&gt;Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkAclPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_NETWORK_INTERFACE_PERMISSION":
        /*



&lt;p&gt;Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.&lt;/p&gt; &lt;p&gt;You can grant permission to a single AWS account only, and only one account at a time.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,permission,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkInterfacePermissionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_NETWORK_INTERFACE":
        /*



&lt;p&gt;Creates a network interface in the specified subnet.&lt;/p&gt; &lt;p&gt;For more information about network interfaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\&quot;&gt;Elastic Network Interfaces&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateNetworkInterfacePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_PLACEMENT_GROUP":
        /*



&lt;p&gt;Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. &lt;/p&gt; &lt;p&gt;A &lt;code&gt;cluster&lt;/code&gt; placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A &lt;code&gt;spread&lt;/code&gt; placement group places instances on distinct hardware. A &lt;code&gt;partition&lt;/code&gt; placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreatePlacementGroupPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_RESERVED_INSTANCES_LISTING":
        /*



&lt;p&gt;Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the &lt;a&gt;DescribeReservedInstances&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the &lt;a&gt;DescribeReservedInstancesListings&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API clientToken,instanceCount,priceSchedules,reservedInstancesId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateReservedInstancesListingPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_ROUTE":
        /*



&lt;p&gt;Creates a route in a route table within a VPC.&lt;/p&gt; &lt;p&gt;You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address &lt;code&gt;192.0.2.3&lt;/code&gt;, and the route table includes the following two IPv4 routes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/24&lt;/code&gt; (goes to some target A)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/28&lt;/code&gt; (goes to some target B)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both routes apply to the traffic destined for &lt;code&gt;192.0.2.3&lt;/code&gt;. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.&lt;/p&gt; &lt;p&gt;For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateRoutePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_ROUTE_TABLE":
        /*



&lt;p&gt;Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateRouteTablePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SECURITY_GROUP":
        /*



&lt;p&gt;Creates a security group.&lt;/p&gt; &lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can&#39;t have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.&lt;/p&gt; &lt;p&gt;You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don&#39;t specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.&lt;/p&gt; &lt;p&gt;You can add or remove rules from your security groups using &lt;a&gt;AuthorizeSecurityGroupIngress&lt;/a&gt;, &lt;a&gt;AuthorizeSecurityGroupEgress&lt;/a&gt;, &lt;a&gt;RevokeSecurityGroupIngress&lt;/a&gt;, and &lt;a&gt;RevokeSecurityGroupEgress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API groupDescription,groupName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSecurityGroupPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SNAPSHOT":
        /*



&lt;p&gt;Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.&lt;/p&gt; &lt;p&gt;When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.&lt;/p&gt; &lt;p&gt;You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is &lt;code&gt;pending&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.&lt;/p&gt; &lt;p&gt;You can tag your snapshots during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\&quot;&gt;Amazon Elastic Block Store&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSnapshotPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SNAPSHOTS":
        /*



Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSnapshotsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.


      Function parameters for this API bucket,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSpotDatafeedSubscriptionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_SUBNET":
        /*



&lt;p&gt;Creates a subnet in an existing VPC.&lt;/p&gt; &lt;p&gt;When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can&#39;t change its CIDR block. The size of the subnet&#39;s IPv4 CIDR block can be the same as a VPC&#39;s IPv4 CIDR block, or a subset of a VPC&#39;s IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets&#39; CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).&lt;/p&gt; &lt;p&gt;If you&#39;ve associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. &lt;/p&gt; &lt;important&gt; &lt;p&gt;AWS reserves both the first four and the last IPv4 address in each subnet&#39;s CIDR block. They&#39;re not available for use.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you add more than one subnet to a VPC, they&#39;re set up in a star topology with a logical router in the middle.&lt;/p&gt; &lt;p&gt;If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn&#39;t change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It&#39;s therefore possible to have a subnet with no running instances (they&#39;re all stopped), but no remaining IP addresses available.&lt;/p&gt; &lt;p&gt;For more information about subnets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API cidrBlock,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateSubnetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_TAGS":
        /*



&lt;p&gt;Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about creating IAM policies that control users&#39; access to resources based on tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html\&quot;&gt;Supported Resource-Level Permissions for Amazon EC2 API Actions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API resourceId,tag,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTagsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_FILTER":
        /*



&lt;p&gt;Creates a Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;A Traffic Mirror filter is a set of rules that defines the traffic to mirror.&lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. To mirror traffic, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm\&quot;&gt;CreateTrafficMirrorFilterRule&lt;/a&gt; to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html\&quot;&gt;ModifyTrafficMirrorFilterNetworkServices&lt;/a&gt; to mirror supported network services.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorFilterPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_FILTER_RULE":
        /*



&lt;p&gt;Creates a Traffic Mirror filter rule. &lt;/p&gt; &lt;p&gt;A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.&lt;/p&gt; &lt;p&gt;You need the Traffic Mirror filter ID when you create the rule.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,trafficDirection,ruleNumber,ruleAction,destinationCidrBlock,sourceCidrBlock,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorFilterRulePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_SESSION":
        /*



&lt;p&gt;Creates a Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.&lt;/p&gt; &lt;p&gt;The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. &lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm\&quot;&gt;CreateTrafficMirrorFilter&lt;/a&gt; to create filter rules that specify the traffic to mirror.&lt;/p&gt;


      Function parameters for this API networkInterfaceId,trafficMirrorTargetId,trafficMirrorFilterId,sessionNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorSessionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRAFFIC_MIRROR_TARGET":
        /*



&lt;p&gt;Creates a target for your Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target can be a network interface, or a Network Load Balancer.&lt;/p&gt; &lt;p&gt;To use the target in a Traffic Mirror session, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm\&quot;&gt;CreateTrafficMirrorSession&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTrafficMirrorTargetPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



&lt;p&gt;Creates a multicast domain using the specified transit gateway.&lt;/p&gt; &lt;p&gt;The transit gateway must be in the available state before you create a domain. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html\&quot;&gt;DescribeTransitGateways&lt;/a&gt; to see the state of transit gateway.&lt;/p&gt;


      Function parameters for this API transitGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayMulticastDomainPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



&lt;p&gt;Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. &lt;/p&gt; &lt;p&gt;After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayId,peerTransitGatewayId,peerAccountId,peerRegion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayPeeringAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY":
        /*



&lt;p&gt;Creates a transit gateway.&lt;/p&gt; &lt;p&gt;You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the &lt;code&gt;available&lt;/code&gt; state, you can attach your VPCs and VPN connections to the transit gateway.&lt;/p&gt; &lt;p&gt;To attach your VPCs, use &lt;a&gt;CreateTransitGatewayVpcAttachment&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To attach a VPN connection, use &lt;a&gt;CreateCustomerGateway&lt;/a&gt; to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to &lt;a&gt;CreateVpnConnection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use &lt;a&gt;CreateTransitGatewayRouteTable&lt;/a&gt; to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use &lt;a&gt;EnableTransitGatewayRouteTablePropagation&lt;/a&gt; to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use &lt;a&gt;AssociateTransitGatewayRouteTable&lt;/a&gt; to associate a resource attachment with a transit gateway route table.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_ROUTE":
        /*



Creates a static route for the specified transit gateway route table.


      Function parameters for this API destinationCidrBlock,transitGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Creates a route table for the specified transit gateway.


      Function parameters for this API transitGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayRouteTablePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Attaches the specified VPC to the specified transit gateway.&lt;/p&gt; &lt;p&gt;If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.&lt;/p&gt; &lt;p&gt;To send VPC traffic to an attached transit gateway, add a route to the VPC route table using &lt;a&gt;CreateRoute&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API transitGatewayId,vpcId,subnetIds,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateTransitGatewayVpcAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VOLUME":
        /*



&lt;p&gt;Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html\&quot;&gt;Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.&lt;/p&gt; &lt;p&gt;You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can tag your volumes during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html\&quot;&gt;Creating an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPC_ENDPOINT_CONNECTION_NOTIFICATION":
        /*



&lt;p&gt;Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\&quot;&gt;Create a Topic&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can create a connection notification for interface endpoints only.&lt;/p&gt;


      Function parameters for this API connectionNotificationArn,connectionEvents,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointConnectionNotificationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPC_ENDPOINT":
        /*



&lt;p&gt;Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;gateway&lt;/code&gt; endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.&lt;/p&gt; &lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeVpcEndpointServices&lt;/a&gt; to get a list of supported services.&lt;/p&gt;


      Function parameters for this API vpcId,serviceName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPC_ENDPOINT_SERVICE_CONFIGURATION":
        /*



&lt;p&gt;Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.&lt;/p&gt; &lt;p&gt;To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC Endpoint Services&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. &lt;/p&gt;


      Function parameters for this API networkLoadBalancerArn,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcEndpointServiceConfigurationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPC_PEERING_CONNECTION":
        /*



&lt;p&gt;Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Limitations and rules apply to a VPC peering connection. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations\&quot;&gt;limitations&lt;/a&gt; section in the &lt;i&gt;VPC Peering Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.&lt;/p&gt; &lt;p&gt;If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of &lt;code&gt;failed&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcPeeringConnectionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPC":
        /*



&lt;p&gt;Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon&#39;s pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.&lt;/p&gt; &lt;p&gt;By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the instance tenancy value for the VPC when you create it. You can&#39;t change this value for the VPC after you create it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API cidrBlock,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpcPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPN_CONNECTION":
        /*



&lt;p&gt;Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is &lt;code&gt;ipsec.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response includes information that you need to give to your network administrator to configure your customer gateway.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API customerGatewayId,type,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnConnectionPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_CREATE_VPN_CONNECTION_ROUTE":
        /*



&lt;p&gt;Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API destinationCidrBlock,vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnConnectionRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_CREATE_VPN_GATEWAY":
        /*



&lt;p&gt;Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API type,opts
        */
        return new Promise((resolve, reject) => {
          this.actionCreateVpnGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_CLIENT_VPN_ENDPOINT":
        /*



Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteClientVpnEndpointPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_CLIENT_VPN_ROUTE":
        /*



Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the &lt;b&gt;CreateClientVpnRoute&lt;/b&gt; action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,destinationCidrBlock,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteClientVpnRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_CUSTOMER_GATEWAY":
        /*



Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.


      Function parameters for this API customerGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteCustomerGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_DHCP_OPTIONS":
        /*



Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.


      Function parameters for this API dhcpOptionsId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteDhcpOptionsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_EGRESS_ONLY_INTERNET_GATEWAY":
        /*



Deletes an egress-only internet gateway.


      Function parameters for this API egressOnlyInternetGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteEgressOnlyInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_FLEETS":
        /*



&lt;p&gt;Deletes the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the &lt;code&gt;deleted_terminating&lt;/code&gt; state. Otherwise, the EC2 Fleet enters the &lt;code&gt;deleted_running&lt;/code&gt; state, and the instances continue to run until they are interrupted or you terminate them manually. &lt;/p&gt;


      Function parameters for this API fleetId,terminateInstances,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFleetsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_FLOW_LOGS":
        /*



Deletes one or more flow logs.


      Function parameters for this API flowLogId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFlowLogsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_FPGA_IMAGE":
        /*



Deletes the specified Amazon FPGA Image (AFI).


      Function parameters for this API fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteFpgaImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_INTERNET_GATEWAY":
        /*



Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.


      Function parameters for this API internetGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_KEY_PAIR":
        /*



Deletes the specified key pair, by removing the public key from Amazon EC2.


      Function parameters for this API keyName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteKeyPairPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_LAUNCH_TEMPLATE":
        /*



Deletes a launch template. Deleting a launch template deletes all of its versions.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLaunchTemplatePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_LAUNCH_TEMPLATE_VERSIONS":
        /*



Deletes one or more versions of a launch template. You cannot delete the default version of a launch template you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using &lt;a&gt;DeleteLaunchTemplate&lt;/a&gt;.


      Function parameters for this API launchTemplateVersion,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLaunchTemplateVersionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_LOCAL_GATEWAY_ROUTE":
        /*



Deletes the specified route from the specified local gateway route table.


      Function parameters for this API destinationCidrBlock,localGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLocalGatewayRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATION":
        /*



Deletes the specified association between a VPC and local gateway route table.


      Function parameters for this API localGatewayRouteTableVpcAssociationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteLocalGatewayRouteTableVpcAssociationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NAT_GATEWAY":
        /*



Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.


      Function parameters for this API natGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNatGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_NETWORK_ACL_ENTRY":
        /*



Deletes the specified ingress or egress entry (rule) from the specified network ACL.


      Function parameters for this API egress,networkAclId,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkAclEntryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NETWORK_ACL":
        /*



Deletes the specified network ACL. You can&#39;t delete the ACL if it&#39;s associated with any subnets. You can&#39;t delete the default network ACL.


      Function parameters for this API networkAclId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkAclPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_NETWORK_INTERFACE_PERMISSION":
        /*



Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you&#39;re removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.


      Function parameters for this API networkInterfacePermissionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkInterfacePermissionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_NETWORK_INTERFACE":
        /*



Deletes the specified network interface. You must detach the network interface before you can delete it.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteNetworkInterfacePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_PLACEMENT_GROUP":
        /*



Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API groupName,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeletePlacementGroupPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_QUEUED_RESERVED_INSTANCES":
        /*



Deletes the queued purchases for the specified Reserved Instances.


      Function parameters for this API reservedInstancesId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteQueuedReservedInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_ROUTE":
        /*



Deletes the specified route from the specified route table.


      Function parameters for this API routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteRoutePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_ROUTE_TABLE":
        /*



Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can&#39;t delete the main route table.


      Function parameters for this API routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteRouteTablePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SECURITY_GROUP":
        /*



&lt;p&gt;Deletes a security group.&lt;/p&gt; &lt;p&gt;If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with &lt;code&gt;InvalidGroup.InUse&lt;/code&gt; in EC2-Classic or &lt;code&gt;DependencyViolation&lt;/code&gt; in EC2-VPC.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSecurityGroupPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SNAPSHOT":
        /*



&lt;p&gt;Deletes the specified snapshot.&lt;/p&gt; &lt;p&gt;When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.&lt;/p&gt; &lt;p&gt;You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html\&quot;&gt;Deleting an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API snapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSnapshotPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Deletes the data feed for Spot Instances.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSpotDatafeedSubscriptionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_SUBNET":
        /*



Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.


      Function parameters for this API subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteSubnetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_TAGS":
        /*



&lt;p&gt;Deletes the specified set of tags from the specified set of resources.&lt;/p&gt; &lt;p&gt;To list the current tags, use &lt;a&gt;DescribeTags&lt;/a&gt;. For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API resourceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTagsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_FILTER":
        /*



&lt;p&gt;Deletes the specified Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorFilterPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_FILTER_RULE":
        /*



Deletes the specified Traffic Mirror rule.


      Function parameters for this API trafficMirrorFilterRuleId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorFilterRulePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_SESSION":
        /*



Deletes the specified Traffic Mirror session.


      Function parameters for this API trafficMirrorSessionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorSessionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRAFFIC_MIRROR_TARGET":
        /*



&lt;p&gt;Deletes the specified Traffic Mirror target.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.&lt;/p&gt;


      Function parameters for this API trafficMirrorTargetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTrafficMirrorTargetPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



Deletes the specified transit gateway multicast domain.


      Function parameters for this API transitGatewayMulticastDomainId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayMulticastDomainPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Deletes a transit gateway peering attachment.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayPeeringAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY":
        /*



Deletes the specified transit gateway.


      Function parameters for this API transitGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_ROUTE":
        /*



Deletes the specified route from the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,destinationCidrBlock,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.


      Function parameters for this API transitGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayRouteTablePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



Deletes the specified VPC attachment.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteTransitGatewayVpcAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VOLUME":
        /*



&lt;p&gt;Deletes the specified EBS volume. The volume must be in the &lt;code&gt;available&lt;/code&gt; state (not attached to an instance).&lt;/p&gt; &lt;p&gt;The volume can remain in the &lt;code&gt;deleting&lt;/code&gt; state for several minutes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html\&quot;&gt;Deleting an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS":
        /*



Deletes one or more VPC endpoint connection notifications.


      Function parameters for this API connectionNotificationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointConnectionNotificationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS":
        /*



Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any &lt;code&gt;Available&lt;/code&gt; or &lt;code&gt;PendingAcceptance&lt;/code&gt; interface endpoint connections that are attached to the service.


      Function parameters for this API serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointServiceConfigurationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPC_ENDPOINTS":
        /*



Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.


      Function parameters for this API vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcEndpointsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPC_PEERING_CONNECTION":
        /*



Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it&#39;s in the &lt;code&gt;active&lt;/code&gt; state. The owner of the requester VPC can delete a VPC peering connection in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. You cannot delete a VPC peering connection that&#39;s in the &lt;code&gt;failed&lt;/code&gt; state.


      Function parameters for this API vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcPeeringConnectionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPC":
        /*



Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpcPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPN_CONNECTION":
        /*



&lt;p&gt;Deletes the specified VPN connection.&lt;/p&gt; &lt;p&gt;If you&#39;re deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.&lt;/p&gt;


      Function parameters for this API vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnConnectionPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DELETE_VPN_CONNECTION_ROUTE":
        /*



Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.


      Function parameters for this API destinationCidrBlock,vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnConnectionRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DELETE_VPN_GATEWAY":
        /*



Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don&#39;t need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.


      Function parameters for this API vpnGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeleteVpnGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DEPROVISION_BYOIP_CIDR":
        /*



&lt;p&gt;Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.&lt;/p&gt; &lt;p&gt;Before you can release an address range, you must stop advertising it using &lt;a&gt;WithdrawByoipCidr&lt;/a&gt; and you must not have any IP addresses allocated from its address range.&lt;/p&gt;


      Function parameters for this API cidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeprovisionByoipCidrPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DEREGISTER_IMAGE":
        /*



&lt;p&gt;Deregisters the specified AMI. After you deregister an AMI, it can&#39;t be used to launch new instances however, it doesn&#39;t affect any instances that you&#39;ve already launched from the AMI. You&#39;ll continue to incur usage costs for those instances until you terminate them.&lt;/p&gt; &lt;p&gt;When you deregister an Amazon EBS-backed AMI, it doesn&#39;t affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn&#39;t affect the files that you uploaded to Amazon S3 when you created the AMI.&lt;/p&gt;


      Function parameters for this API imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS":
        /*



Deregisters the specified members (network interfaces) from the transit gateway multicast group.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterTransitGatewayMulticastGroupMembersPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DEREGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES":
        /*



Deregisters the specified sources (network interfaces) from the transit gateway multicast group.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDeregisterTransitGatewayMulticastGroupSourcesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ACCOUNT_ATTRIBUTES":
        /*



&lt;p&gt;Describes attributes of your AWS account. The following are the supported account attributes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;supported-platforms&lt;/code&gt;: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;default-vpc&lt;/code&gt;: The ID of the default VPC for your account, or &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-instances&lt;/code&gt;: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits\&quot;&gt;On-Demand Instance Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-security-groups-per-interface&lt;/code&gt;: The maximum number of security groups that you can assign to a network interface.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAccountAttributesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ADDRESSES":
        /*



&lt;p&gt;Describes the specified Elastic IP addresses or all of your Elastic IP addresses.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAddressesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_AGGREGATE_ID_FORMAT":
        /*



&lt;p&gt;Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).&lt;/p&gt; &lt;p&gt;This request only returns information about resource types that support longer IDs.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAggregateIdFormatPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_AVAILABILITY_ZONES":
        /*



&lt;p&gt;Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.&lt;/p&gt; &lt;p&gt;For more information about Availability Zones and Local Zones, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\&quot;&gt;Regions and Availability Zones&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeAvailabilityZonesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_BUNDLE_TASKS":
        /*



&lt;p&gt;Describes the specified bundle tasks or all of your bundle tasks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use &lt;code&gt;RegisterImage&lt;/code&gt; with the Amazon S3 bucket name and image manifest name you provided to the bundle task.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeBundleTasksPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_BYOIP_CIDRS":
        /*



&lt;p&gt;Describes the IP address ranges that were specified in calls to &lt;a&gt;ProvisionByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe the address pools that were created when you provisioned the address ranges, use &lt;a&gt;DescribePublicIpv4Pools&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API maxResults,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeByoipCidrsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_CAPACITY_RESERVATIONS":
        /*



Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you&#39;re currently using.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCapacityReservationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLASSIC_LINK_INSTANCES":
        /*



Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClassicLinkInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_AUTHORIZATION_RULES":
        /*



Describes the authorization rules for a specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnAuthorizationRulesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_CONNECTIONS":
        /*



Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_ENDPOINTS":
        /*



Describes one or more Client VPN endpoints in the account.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnEndpointsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_ROUTES":
        /*



Describes the routes for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnRoutesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CLIENT_VPN_TARGET_NETWORKS":
        /*



Describes the target networks associated with the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeClientVpnTargetNetworksPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_COIP_POOLS":
        /*



Describes the specified customer-owned address pools or all of your customer-owned address pools.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCoipPoolsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_CONVERSION_TASKS":
        /*



&lt;p&gt;Describes the specified conversion tasks or all your conversion tasks. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/\&quot;&gt;VM Import/Export User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeConversionTasksPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_CUSTOMER_GATEWAYS":
        /*



&lt;p&gt;Describes one or more of your VPN customer gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeCustomerGatewaysPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_DHCP_OPTIONS":
        /*



&lt;p&gt;Describes one or more of your DHCP options sets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeDhcpOptionsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_EGRESS_ONLY_INTERNET_GATEWAYS":
        /*



Describes one or more of your egress-only internet gateways.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeEgressOnlyInternetGatewaysPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ELASTIC_GPUS":
        /*



Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\&quot;&gt;Amazon Elastic Graphics&lt;/a&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeElasticGpusPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_EXPORT_IMAGE_TASKS":
        /*



Describes the specified export image tasks or all your export image tasks.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeExportImageTasksPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_EXPORT_TASKS":
        /*



Describes the specified export instance tasks or all your export instance tasks.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeExportTasksPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FAST_SNAPSHOT_RESTORES":
        /*



Describes the state of fast snapshot restores for your snapshots.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFastSnapshotRestoresPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FLEET_HISTORY":
        /*



&lt;p&gt;Describes the events for the specified EC2 Fleet during the specified time.&lt;/p&gt; &lt;p&gt;EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.&lt;/p&gt;


      Function parameters for this API fleetId,startTime,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetHistoryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FLEET_INSTANCES":
        /*



Describes the running instances for the specified EC2 Fleet.


      Function parameters for this API fleetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FLEETS":
        /*



Describes the specified EC2 Fleets or all of your EC2 Fleets.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFleetsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FLOW_LOGS":
        /*



Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFlowLogsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_FPGA_IMAGE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified Amazon FPGA Image (AFI).


      Function parameters for this API fpgaImageId,attribute,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFpgaImageAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_FPGA_IMAGES":
        /*



Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeFpgaImagesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_HOST_RESERVATION_OFFERINGS":
        /*



&lt;p&gt;Describes the Dedicated Host reservations that are available to purchase.&lt;/p&gt; &lt;p&gt;The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Hosts Overview&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostReservationOfferingsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_HOST_RESERVATIONS":
        /*



Describes reservations that are associated with Dedicated Hosts in your account.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostReservationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_HOSTS":
        /*



&lt;p&gt;Describes the specified Dedicated Hosts or all your Dedicated Hosts.&lt;/p&gt; &lt;p&gt;The results describe only the Dedicated Hosts in the Region you&#39;re currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state &lt;code&gt;released&lt;/code&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeHostsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IAM_INSTANCE_PROFILE_ASSOCIATIONS":
        /*



Describes your IAM instance profile associations.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIamInstanceProfileAssociationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the IAM user who makes the request they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the &lt;a&gt;ModifyIdFormat&lt;/a&gt; command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIdFormatPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IDENTITY_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.&lt;/p&gt;


      Function parameters for this API principalArn,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeIdentityIdFormatPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMAGE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.


      Function parameters for this API attribute,imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImageAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMAGES":
        /*



&lt;p&gt;Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.&lt;/p&gt; &lt;p&gt;The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.&lt;/p&gt; &lt;p&gt;Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImagesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_IMPORT_IMAGE_TASKS":
        /*



Displays details about an import virtual machine or import snapshot tasks that are already created.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImportImageTasksPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_IMPORT_SNAPSHOT_TASKS":
        /*



Describes your import snapshot tasks.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeImportSnapshotTasksPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_ATTRIBUTE":
        /*



Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: &lt;code&gt;instanceType&lt;/code&gt; | &lt;code&gt;kernel&lt;/code&gt; | &lt;code&gt;ramdisk&lt;/code&gt; | &lt;code&gt;userData&lt;/code&gt; | &lt;code&gt;disableApiTermination&lt;/code&gt; | &lt;code&gt;instanceInitiatedShutdownBehavior&lt;/code&gt; | &lt;code&gt;rootDeviceName&lt;/code&gt; | &lt;code&gt;blockDeviceMapping&lt;/code&gt; | &lt;code&gt;productCodes&lt;/code&gt; | &lt;code&gt;sourceDestCheck&lt;/code&gt; | &lt;code&gt;groupSet&lt;/code&gt; | &lt;code&gt;ebsOptimized&lt;/code&gt; | &lt;code&gt;sriovNetSupport&lt;/code&gt;


      Function parameters for this API attribute,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_CREDIT_SPECIFICATIONS":
        /*



&lt;p&gt;Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the &lt;code&gt;unlimited&lt;/code&gt; credit option, as well as instances that were previously configured as T2, T3, and T3a with the &lt;code&gt;unlimited&lt;/code&gt; credit option. For example, if you resize a T2 instance, while it is configured as &lt;code&gt;unlimited&lt;/code&gt;, to an M4 instance, Amazon EC2 returns the M4 instance.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns the credit option (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;unlimited&lt;/code&gt;) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceCreditSpecificationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_STATUS":
        /*



&lt;p&gt;Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.&lt;/p&gt; &lt;p&gt;Instance status includes the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Status checks&lt;/b&gt; - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html\&quot;&gt;Status Checks for Your Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html\&quot;&gt;Troubleshooting Instances with Failed Status Checks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scheduled events&lt;/b&gt; - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html\&quot;&gt;Scheduled Events for Your Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Instance state&lt;/b&gt; - You can manage your instances from the moment you launch them through their termination. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceStatusPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_TYPE_OFFERINGS":
        /*



Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceTypeOfferingsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCE_TYPES":
        /*



Returns a list of all instance types offered in your current AWS Region. The results can be filtered by the attributes of the instance types.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstanceTypesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_INSTANCES":
        /*



&lt;p&gt;Describes the specified instances or all of AWS account&#39;s instances.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_INTERNET_GATEWAYS":
        /*



Describes one or more of your internet gateways.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeInternetGatewaysPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_KEY_PAIRS":
        /*



&lt;p&gt;Describes the specified key pairs or all of your key pairs.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeKeyPairsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_LAUNCH_TEMPLATE_VERSIONS":
        /*



Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLaunchTemplateVersionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LAUNCH_TEMPLATES":
        /*



Describes one or more launch templates.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLaunchTemplatesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VIRTUAL_INTERFACE_GROUP_ASSOCIATIONS":
        /*



Describes the associations between virtual interface groups and local gateway route tables.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLE_VPC_ASSOCIATIONS":
        /*



Describes the specified associations between VPCs and local gateway route tables.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTableVpcAssociationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_ROUTE_TABLES":
        /*



Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayRouteTablesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACE_GROUPS":
        /*



Describes the specified local gateway virtual interface groups.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayVirtualInterfaceGroupsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAY_VIRTUAL_INTERFACES":
        /*



Describes the specified local gateway virtual interfaces.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewayVirtualInterfacesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_LOCAL_GATEWAYS":
        /*



Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeLocalGatewaysPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_MOVING_ADDRESSES":
        /*



Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeMovingAddressesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NAT_GATEWAYS":
        /*



Describes one or more of your NAT gateways.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNatGatewaysPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_NETWORK_ACLS":
        /*



&lt;p&gt;Describes one or more of your network ACLs.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkAclsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Describes a network interface attribute. You can specify only one attribute at a time.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfaceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACE_PERMISSIONS":
        /*



Describes the permissions for your network interfaces.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfacePermissionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_NETWORK_INTERFACES":
        /*



Describes one or more of your network interfaces.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeNetworkInterfacesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PLACEMENT_GROUPS":
        /*



Describes the specified placement groups or all of your placement groups. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePlacementGroupsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PREFIX_LISTS":
        /*



Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePrefixListsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_PRINCIPAL_ID_FORMAT":
        /*



&lt;p&gt;Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. &lt;/p&gt; &lt;p&gt;By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePrincipalIdFormatPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_PUBLIC_IPV4_POOLS":
        /*



Describes the specified IPv4 address pools.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribePublicIpv4PoolsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_REGIONS":
        /*



&lt;p&gt;Describes the Regions that are enabled for your account, or all Regions.&lt;/p&gt; &lt;p&gt;For a list of the Regions supported by Amazon EC2, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region\&quot;&gt; Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about enabling and disabling Regions for your account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\&quot;&gt;Managing AWS Regions&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeRegionsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_LISTINGS":
        /*



&lt;p&gt;Describes your account&#39;s Reserved Instance listings in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.&lt;/p&gt; &lt;p&gt;As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you&#39;re searching for with what&#39;s available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesListingsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_MODIFICATIONS":
        /*



&lt;p&gt;Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesModificationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES_OFFERINGS":
        /*



&lt;p&gt;Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.&lt;/p&gt; &lt;p&gt;If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesOfferingsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_RESERVED_INSTANCES":
        /*



&lt;p&gt;Describes one or more of the Reserved Instances that you purchased.&lt;/p&gt; &lt;p&gt;For more information about Reserved Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeReservedInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_ROUTE_TABLES":
        /*



&lt;p&gt;Describes one or more of your route tables.&lt;/p&gt; &lt;p&gt;Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeRouteTablesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_SCHEDULED_INSTANCE_AVAILABILITY":
        /*



&lt;p&gt;Finds available schedules that meet the specified criteria.&lt;/p&gt; &lt;p&gt;You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.&lt;/p&gt; &lt;p&gt;After you find a schedule that meets your needs, call &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt; to purchase Scheduled Instances with that schedule.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeScheduledInstanceAvailabilityPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SCHEDULED_INSTANCES":
        /*



Describes the specified Scheduled Instances or all your Scheduled Instances.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeScheduledInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SECURITY_GROUP_REFERENCES":
        /*



[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you&#39;ve specified in this request.


      Function parameters for this API groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSecurityGroupReferencesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SECURITY_GROUPS":
        /*



&lt;p&gt;Describes the specified security groups or all of your security groups.&lt;/p&gt; &lt;p&gt;A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSecurityGroupsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,snapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSnapshotAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SNAPSHOTS":
        /*



&lt;p&gt;Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.&lt;/p&gt; &lt;p&gt;The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.&lt;/p&gt; &lt;p&gt;The create volume permissions fall into the following categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;public&lt;/i&gt;: The owner of the snapshot granted create volume permissions for the snapshot to the &lt;code&gt;all&lt;/code&gt; group. All AWS accounts have create volume permissions for these snapshots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;explicit&lt;/i&gt;: The owner of the snapshot granted create volume permissions to a specific AWS account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;implicit&lt;/i&gt;: An AWS account has implicit create volume permissions for all snapshots it owns.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot owners using the &lt;code&gt;OwnerIds&lt;/code&gt; option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, &lt;code&gt;amazon&lt;/code&gt; for snapshots owned by Amazon, or &lt;code&gt;self&lt;/code&gt; for snapshots that you own.&lt;/p&gt; &lt;p&gt;If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), &lt;code&gt;self&lt;/code&gt; for snapshots for which you own or have explicit permissions, or &lt;code&gt;all&lt;/code&gt; for public snapshots.&lt;/p&gt; &lt;p&gt;If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSnapshots&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSnapshotsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_SPOT_DATAFEED_SUBSCRIPTION":
        /*



Describes the data feed for Spot Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotDatafeedSubscriptionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_INSTANCES":
        /*



Describes the running instances for the specified Spot Fleet.


      Function parameters for this API spotFleetRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_REQUEST_HISTORY":
        /*



&lt;p&gt;Describes the events for the specified Spot Fleet request during the specified time.&lt;/p&gt; &lt;p&gt;Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.&lt;/p&gt;


      Function parameters for this API spotFleetRequestId,startTime,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetRequestHistoryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_FLEET_REQUESTS":
        /*



&lt;p&gt;Describes your Spot Fleet requests.&lt;/p&gt; &lt;p&gt;Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotFleetRequestsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_INSTANCE_REQUESTS":
        /*



&lt;p&gt;Describes the specified Spot Instance requests.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; to find a running Spot Instance by examining the response. If the status of the Spot Instance is &lt;code&gt;fulfilled&lt;/code&gt;, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use &lt;a&gt;DescribeInstances&lt;/a&gt; with a filter to look for instances where the instance lifecycle is &lt;code&gt;spot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We recommend that you set &lt;code&gt;MaxResults&lt;/code&gt; to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotInstanceRequestsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SPOT_PRICE_HISTORY":
        /*



&lt;p&gt;Describes the Spot price history. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html\&quot;&gt;Spot Instance Pricing History&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified the response merely indicates the last time that the price changed.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSpotPriceHistoryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_STALE_SECURITY_GROUPS":
        /*



[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeStaleSecurityGroupsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_SUBNETS":
        /*



&lt;p&gt;Describes one or more of your subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeSubnetsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_TAGS":
        /*



&lt;p&gt;Describes the specified tags for your EC2 resources.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTagsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_FILTERS":
        /*



Describes one or more Traffic Mirror filters.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorFiltersPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_SESSIONS":
        /*



Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorSessionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRAFFIC_MIRROR_TARGETS":
        /*



Information about one or more Traffic Mirror targets.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTrafficMirrorTargetsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_ATTACHMENTS":
        /*



Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayAttachmentsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_MULTICAST_DOMAINS":
        /*



Describes one or more transit gateway multicast domains.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayMulticastDomainsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_PEERING_ATTACHMENTS":
        /*



Describes your transit gateway peering attachments.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayPeeringAttachmentsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_ROUTE_TABLES":
        /*



Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayRouteTablesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAY_VPC_ATTACHMENTS":
        /*



Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewayVpcAttachmentsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_TRANSIT_GATEWAYS":
        /*



Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeTransitGatewaysPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUME_ATTRIBUTE":
        /*



&lt;p&gt;Describes the specified attribute of the specified volume. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumeAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUME_STATUS":
        /*



&lt;p&gt;Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume&#39;s underlying host. If the volume&#39;s underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DescribeVolumeStatus&lt;/code&gt; operation provides the following information about the specified volumes:&lt;/p&gt; &lt;p&gt; &lt;i&gt;Status&lt;/i&gt;: Reflects the current status of the volume. The possible values are &lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;impaired&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;insufficient-data&lt;/code&gt;. If all checks pass, the overall status of the volume is &lt;code&gt;ok&lt;/code&gt;. If the check fails, the overall status is &lt;code&gt;impaired&lt;/code&gt;. If the status is &lt;code&gt;insufficient-data&lt;/code&gt;, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html\&quot;&gt;Monitoring the Status of Your Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt;: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an &lt;code&gt;impaired&lt;/code&gt; status, then the volume event might be &lt;code&gt;potential-data-inconsistency&lt;/code&gt;. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Actions&lt;/i&gt;: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is &lt;code&gt;impaired&lt;/code&gt; and the volume event shows &lt;code&gt;potential-data-inconsistency&lt;/code&gt;, then the action shows &lt;code&gt;enable-volume-io&lt;/code&gt;. This means that you may want to enable the I/O operations for the volume by calling the &lt;a&gt;EnableVolumeIO&lt;/a&gt; action and then check the volume for data consistency.&lt;/p&gt; &lt;p&gt;Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the &lt;code&gt;error&lt;/code&gt; state (for example, when a volume is incapable of accepting I/O.)&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumeStatusPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUMES_MODIFICATIONS":
        /*



&lt;p&gt;Reports the current modification status of EBS volumes.&lt;/p&gt; &lt;p&gt;Current-generation EBS volumes support modification of attributes including type, size, and (for &lt;code&gt;io1&lt;/code&gt; volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be &lt;code&gt;modifying&lt;/code&gt;, &lt;code&gt;optimizing&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, or &lt;code&gt;failed&lt;/code&gt;. If a volume has never been modified, then certain elements of the returned &lt;code&gt;VolumeModification&lt;/code&gt; objects are null. &lt;/p&gt; &lt;p&gt; You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications\&quot;&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumesModificationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VOLUMES":
        /*



&lt;p&gt;Describes the specified EBS volumes or all of your EBS volumes.&lt;/p&gt; &lt;p&gt;If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeVolumes&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVolumesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VPC_ATTRIBUTE":
        /*



Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.


      Function parameters for this API attribute,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcClassicLinkDnsSupportPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_CLASSIC_LINK":
        /*



Describes the ClassicLink status of one or more VPCs.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcClassicLinkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_CONNECTION_NOTIFICATIONS":
        /*



Describes the connection notifications for VPC endpoints and VPC endpoint services.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointConnectionNotificationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_CONNECTIONS":
        /*



Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICE_CONFIGURATIONS":
        /*



Describes the VPC endpoint service configurations in your account (your services).


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServiceConfigurationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICE_PERMISSIONS":
        /*



Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.


      Function parameters for this API serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServicePermissionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINT_SERVICES":
        /*



Describes available services to which you can create a VPC endpoint.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointServicesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_ENDPOINTS":
        /*



Describes one or more of your VPC endpoints.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcEndpointsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPC_PEERING_CONNECTIONS":
        /*



Describes one or more of your VPC peering connections.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcPeeringConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPCS":
        /*



Describes one or more of your VPCs.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpcsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DESCRIBE_VPN_CONNECTIONS":
        /*



&lt;p&gt;Describes one or more of your VPN connections.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpnConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DESCRIBE_VPN_GATEWAYS":
        /*



&lt;p&gt;Describes one or more of your virtual private gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDescribeVpnGatewaysPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DETACH_CLASSIC_LINK_VPC":
        /*



Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it&#39;s stopped.


      Function parameters for this API instanceId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachClassicLinkVpcPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DETACH_INTERNET_GATEWAY":
        /*



Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.


      Function parameters for this API internetGatewayId,vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachInternetGatewayPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DETACH_NETWORK_INTERFACE":
        /*



Detaches a network interface from an instance.


      Function parameters for this API attachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachNetworkInterfacePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DETACH_VOLUME":
        /*



&lt;p&gt;Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the &lt;code&gt;busy&lt;/code&gt; state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can&#39;t be detached while the instance is running. To detach the root volume, stop the instance first.&lt;/p&gt; &lt;p&gt;When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html\&quot;&gt;Detaching an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DETACH_VPN_GATEWAY":
        /*



&lt;p&gt;Detaches a virtual private gateway from a VPC. You do this if you&#39;re planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).&lt;/p&gt; &lt;p&gt;You must wait for the attachment&#39;s state to switch to &lt;code&gt;detached&lt;/code&gt; before you can delete the VPC or attach a different VPC to the virtual private gateway.&lt;/p&gt;


      Function parameters for this API vpcId,vpnGatewayId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDetachVpnGatewayPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DISABLE_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Disables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.&lt;/p&gt; &lt;p&gt;Disabling encryption by default does not change the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableEbsEncryptionByDefaultPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_FAST_SNAPSHOT_RESTORES":
        /*



Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.


      Function parameters for this API availabilityZone,sourceSnapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableFastSnapshotRestoresPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION":
        /*



Disables the specified resource attachment from propagating routes to the specified propagation route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableTransitGatewayRouteTablePropagationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VGW_ROUTE_PROPAGATION":
        /*



Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.


      Function parameters for this API gatewayId,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVgwRoutePropagationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it&#39;s linked. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVpcClassicLinkDnsSupportPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISABLE_VPC_CLASSIC_LINK":
        /*



Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisableVpcClassicLinkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_ADDRESS":
        /*



&lt;p&gt;Disassociates an Elastic IP address from the instance or network interface it&#39;s associated with.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateAddressPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_DISASSOCIATE_CLIENT_VPN_TARGET_NETWORK":
        /*



&lt;p&gt;Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The route that was automatically added for the VPC is deleted&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All active client connections are terminated&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New client connections are disallowed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Client VPN endpoint&#39;s status changes to &lt;code&gt;pending-associate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;


      Function parameters for this API clientVpnEndpointId,associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateClientVpnTargetNetworkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_IAM_INSTANCE_PROFILE":
        /*



&lt;p&gt;Disassociates an IAM instance profile from a running or stopped instance.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateIamInstanceProfilePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_ROUTE_TABLE":
        /*



&lt;p&gt;Disassociates a subnet from a route table.&lt;/p&gt; &lt;p&gt;After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC&#39;s main route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateRouteTablePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_SUBNET_CIDR_BLOCK":
        /*



Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateSubnetCidrBlockPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_TRANSIT_GATEWAY_MULTICAST_DOMAIN":
        /*



Disassociates the specified subnets from the transit gateway multicast domain.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateTransitGatewayMulticastDomainPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_TRANSIT_GATEWAY_ROUTE_TABLE":
        /*



Disassociates a resource attachment from a transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateTransitGatewayRouteTablePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_DISASSOCIATE_VPC_CIDR_BLOCK":
        /*



&lt;p&gt;Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using &lt;a&gt;DescribeVpcs&lt;/a&gt;. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. &lt;/p&gt; &lt;p&gt;You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionDisassociateVpcCidrBlockPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Enables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enabling encryption by default has no effect on the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\&quot;&gt;Supported Instance Types&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableEbsEncryptionByDefaultPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_FAST_SNAPSHOT_RESTORES":
        /*



&lt;p&gt;Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.&lt;/p&gt; &lt;p&gt;You get the full benefit of fast snapshot restores after they enter the &lt;code&gt;enabled&lt;/code&gt; state. To get the current state of fast snapshot restores, use &lt;a&gt;DescribeFastSnapshotRestores&lt;/a&gt;. To disable fast snapshot restores, use &lt;a&gt;DisableFastSnapshotRestores&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,sourceSnapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableFastSnapshotRestoresPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATION":
        /*



Enables the specified attachment to propagate routes to the specified propagation route table.


      Function parameters for this API transitGatewayRouteTableId,transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableTransitGatewayRouteTablePropagationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VGW_ROUTE_PROPAGATION":
        /*



Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.


      Function parameters for this API gatewayId,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVgwRoutePropagationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VOLUME_I_O":
        /*



Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVolumeIOPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_ENABLE_VPC_CLASSIC_LINK_DNS_SUPPORT":
        /*



Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVpcClassicLinkDnsSupportPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_ENABLE_VPC_CLASSIC_LINK":
        /*



Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the &lt;code&gt;10.0.0.0/8&lt;/code&gt; IP address range, excluding local routes for VPCs in the &lt;code&gt;10.0.0.0/16&lt;/code&gt; and &lt;code&gt;10.1.0.0/16&lt;/code&gt; IP address ranges. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionEnableVpcClassicLinkPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_EXPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST":
        /*



Downloads the client certificate revocation list for the specified Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportClientVpnClientCertificateRevocationListPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_EXPORT_CLIENT_VPN_CLIENT_CONFIGURATION":
        /*



Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportClientVpnClientConfigurationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_EXPORT_IMAGE":
        /*



Exports an Amazon Machine Image (AMI) to a VM file. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html\&quot;&gt;Exporting a VM Directory from an Amazon Machine Image (AMI)&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.


      Function parameters for this API diskImageFormat,imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_EXPORT_TRANSIT_GATEWAY_ROUTES":
        /*



Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.


      Function parameters for this API transitGatewayRouteTableId,s3Bucket,opts
        */
        return new Promise((resolve, reject) => {
          this.actionExportTransitGatewayRoutesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_CAPACITY_RESERVATION_USAGE":
        /*



Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner&#39;s usage.


      Function parameters for this API capacityReservationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetCapacityReservationUsagePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_COIP_POOL_USAGE":
        /*



Describes the allocations from the specified customer-owned address pool.


      Function parameters for this API poolId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetCoipPoolUsagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_CONSOLE_OUTPUT":
        /*



&lt;p&gt;Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.&lt;/p&gt; &lt;p&gt;By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.&lt;/p&gt; &lt;p&gt;You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output\&quot;&gt;Instance Console Output&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetConsoleOutputPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_CONSOLE_SCREENSHOT":
        /*



&lt;p&gt;Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.&lt;/p&gt; &lt;p&gt;The returned content is Base64-encoded.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetConsoleScreenshotPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_DEFAULT_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Describes the default credit option for CPU usage of a burstable performance instance family.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceFamily,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetDefaultCreditSpecificationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetEbsDefaultKmsKeyIdPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_EBS_ENCRYPTION_BY_DEFAULT":
        /*



&lt;p&gt;Describes whether EBS encryption by default is enabled for your account in the current Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetEbsEncryptionByDefaultPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_HOST_RESERVATION_PURCHASE_PREVIEW":
        /*



&lt;p&gt;Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.&lt;/p&gt; &lt;p&gt;This is a preview of the &lt;a&gt;PurchaseHostReservation&lt;/a&gt; action and does not result in the offering being purchased.&lt;/p&gt;


      Function parameters for this API hostIdSet,offeringId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetHostReservationPurchasePreviewPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_LAUNCH_TEMPLATE_DATA":
        /*



Retrieves the configuration data of the specified instance. You can use this data to create a launch template.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetLaunchTemplateDataPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_PASSWORD_DATA":
        /*



&lt;p&gt;Retrieves the encrypted administrator password for a running Windows instance.&lt;/p&gt; &lt;p&gt;The Windows password is generated at boot by the &lt;code&gt;EC2Config&lt;/code&gt; service or &lt;code&gt;EC2Launch&lt;/code&gt; scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html\&quot;&gt;EC2Config&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html\&quot;&gt;EC2Launch&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;EC2Config&lt;/code&gt; service, the password is not generated for rebundled AMIs unless &lt;code&gt;Ec2SetPassword&lt;/code&gt; is enabled before bundling.&lt;/p&gt; &lt;p&gt;The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.&lt;/p&gt; &lt;p&gt;When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it&#39;s available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetPasswordDataPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_GET_RESERVED_INSTANCES_EXCHANGE_QUOTE":
        /*



Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use &lt;a&gt;AcceptReservedInstancesExchangeQuote&lt;/a&gt; to perform the exchange.


      Function parameters for this API reservedInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetReservedInstancesExchangeQuotePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ATTACHMENT_PROPAGATIONS":
        /*



Lists the route tables to which the specified resource attachment propagates routes.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayAttachmentPropagationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_MULTICAST_DOMAIN_ASSOCIATIONS":
        /*



Gets information about the associations for the transit gateway multicast domain.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayMulticastDomainAssociationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ROUTE_TABLE_ASSOCIATIONS":
        /*



Gets information about the associations for the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayRouteTableAssociationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_GET_TRANSIT_GATEWAY_ROUTE_TABLE_PROPAGATIONS":
        /*



Gets information about the route table propagations for the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionGetTransitGatewayRouteTablePropagationsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_IMPORT_CLIENT_VPN_CLIENT_CERTIFICATE_REVOCATION_LIST":
        /*



&lt;p&gt;Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.&lt;/p&gt; &lt;p&gt;Uploading a client certificate revocation list resets existing client connections.&lt;/p&gt;


      Function parameters for this API clientVpnEndpointId,certificateRevocationList,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportClientVpnClientCertificateRevocationListPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_IMPORT_IMAGE":
        /*



Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html\&quot;&gt;Importing a VM as an Image Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_INSTANCE":
        /*



&lt;p&gt;Creates an import instance task using metadata from the specified disk image. &lt;code&gt;ImportInstance&lt;/code&gt; only supports single-volume VMs. To import multi-volume VMs, use &lt;a&gt;ImportImage&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API platform,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportInstancePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_KEY_PAIR":
        /*



&lt;p&gt;Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with &lt;a&gt;CreateKeyPair&lt;/a&gt;, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API keyName,publicKeyMaterial,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportKeyPairPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_SNAPSHOT":
        /*



Imports a disk into an EBS snapshot.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportSnapshotPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_IMPORT_VOLUME":
        /*



&lt;p&gt;Creates an import volume task using metadata from the specified disk image.For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html\&quot;&gt;Importing Disks to Amazon EBS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API availabilityZone,opts
        */
        return new Promise((resolve, reject) => {
          this.actionImportVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_CAPACITY_RESERVATION":
        /*



Modifies a Capacity Reservation&#39;s capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation&#39;s instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.


      Function parameters for this API capacityReservationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyCapacityReservationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_CLIENT_VPN_ENDPOINT":
        /*



Modifies the specified Client VPN endpoint. You can only modify an endpoint&#39;s server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyClientVpnEndpointPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_DEFAULT_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ModifyDefaultCreditSpecification&lt;/code&gt; is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call &lt;code&gt;GetDefaultCreditSpecification&lt;/code&gt; and check &lt;code&gt;DefaultCreditSpecification&lt;/code&gt; for updates.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceFamily,cpuCredits,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyDefaultCreditSpecificationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.&lt;/p&gt; &lt;p&gt;AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;. Amazon EBS does not support asymmetric CMKs.&lt;/p&gt; &lt;p&gt;If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API kmsKeyId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyEbsDefaultKmsKeyIdPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_FLEET":
        /*



&lt;p&gt;Modifies the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can only modify an EC2 Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the EC2 Fleet is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;


      Function parameters for this API fleetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyFleetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_FPGA_IMAGE_ATTRIBUTE":
        /*



Modifies the specified attribute of the specified Amazon FPGA Image (AFI).


      Function parameters for this API fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyFpgaImageAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_HOSTS":
        /*



&lt;p&gt;Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of &lt;code&gt;host&lt;/code&gt; but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.&lt;/p&gt; &lt;p&gt;You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.&lt;/p&gt;


      Function parameters for this API hostId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyHostsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_ID_FORMAT":
        /*



&lt;p&gt;Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.&lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This setting applies to the IAM user who makes the request it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you&#39;re using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API resource,useLongIds,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyIdFormatPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_IDENTITY_ID_FORMAT":
        /*



&lt;p&gt;Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. &lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This setting applies to the principal specified in the request it does not apply to the principal that makes the request. &lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;


      Function parameters for this API principalArn,resource,useLongIds,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyIdentityIdFormatPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_IMAGE_ATTRIBUTE":
        /*



&lt;p&gt;Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the &lt;code&gt;Attribute&lt;/code&gt; parameter to specify the attribute or one of the following parameters: &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;LaunchPermission&lt;/code&gt;, or &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.&lt;/p&gt; &lt;p&gt;To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.&lt;/p&gt;


      Function parameters for this API imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyImageAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_ATTRIBUTE":
        /*



&lt;p&gt;Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the &lt;a&gt;ModifyNetworkInterfaceAttribute&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To modify some attributes, the instance must be stopped. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html\&quot;&gt;Modifying Attributes of a Stopped Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_CAPACITY_RESERVATION_ATTRIBUTES":
        /*



Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any &lt;code&gt;open&lt;/code&gt; Capacity Reservation with matching attributes, or run On-Demand Instance capacity.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceCapacityReservationAttributesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_CREDIT_SPECIFICATION":
        /*



&lt;p&gt;Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceCreditSpecification,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceCreditSpecificationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_EVENT_START_TIME":
        /*



Modifies the start time for a scheduled Amazon EC2 instance event.


      Function parameters for this API instanceId,instanceEventId,notBefore,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceEventStartTimePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_METADATA_OPTIONS":
        /*



Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance Metadata and User Data&lt;/a&gt;.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstanceMetadataOptionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_INSTANCE_PLACEMENT":
        /*



&lt;p&gt;Modifies the placement attributes for a specified instance. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the affinity between an instance and a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Host&lt;/a&gt;. When affinity is set to &lt;code&gt;host&lt;/code&gt; and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the Dedicated Host with which an instance is associated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the instance tenancy of an instance from &lt;code&gt;host&lt;/code&gt; to &lt;code&gt;dedicated&lt;/code&gt;, or from &lt;code&gt;dedicated&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Move an instance to or from a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;placement group&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.&lt;/p&gt; &lt;p&gt;To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyInstancePlacementPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_LAUNCH_TEMPLATE":
        /*



Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyLaunchTemplatePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyNetworkInterfaceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_RESERVED_INSTANCES":
        /*



&lt;p&gt;Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;


      Function parameters for this API reservedInstancesId,reservedInstancesConfigurationSetItemType,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyReservedInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot&#39;s list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.&lt;/p&gt; &lt;p&gt;Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API snapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySnapshotAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SPOT_FLEET_REQUEST":
        /*



&lt;p&gt;Modifies the specified Spot Fleet request.&lt;/p&gt; &lt;p&gt;You can only modify a Spot Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the Spot Fleet request is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;


      Function parameters for this API spotFleetRequestId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySpotFleetRequestPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_SUBNET_ATTRIBUTE":
        /*



Modifies a subnet attribute. You can only modify one attribute at a time.


      Function parameters for this API subnetId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifySubnetAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_FILTER_NETWORK_SERVICES":
        /*



&lt;p&gt;Allows or restricts mirroring network services.&lt;/p&gt; &lt;p&gt; By default, Amazon DNS network services are not eligible for Traffic Mirror. Use &lt;code&gt;AddNetworkServices&lt;/code&gt; to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use &lt;code&gt;RemoveNetworkServices&lt;/code&gt; to remove the network services from the Traffic Mirror filter. &lt;/p&gt; &lt;p&gt;For information about filter rule properties, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html\&quot;&gt;Network Services&lt;/a&gt; in the &lt;i&gt;Traffic Mirroring User Guide &lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorFilterNetworkServicesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_FILTER_RULE":
        /*



&lt;p&gt;Modifies the specified Traffic Mirror rule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DestinationCidrBlock&lt;/code&gt; and &lt;code&gt;SourceCidrBlock&lt;/code&gt; must both be an IPv4 range or an IPv6 range.&lt;/p&gt;


      Function parameters for this API trafficMirrorFilterRuleId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorFilterRulePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRAFFIC_MIRROR_SESSION":
        /*



Modifies a Traffic Mirror session.


      Function parameters for this API trafficMirrorSessionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTrafficMirrorSessionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



Modifies the specified VPC attachment.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyTransitGatewayVpcAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VOLUME_ATTRIBUTE":
        /*



&lt;p&gt;Modifies a volume attribute.&lt;/p&gt; &lt;p&gt;By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.&lt;/p&gt; &lt;p&gt;You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.&lt;/p&gt;


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVolumeAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VOLUME":
        /*



&lt;p&gt;You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt;. For more information about modifying an EBS volume running Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you complete a resize operation on your volume, you need to extend the volume&#39;s file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux\&quot;&gt;Extending a Linux File System&lt;/a&gt;. For information about extending a Windows file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows\&quot;&gt;Extending a Windows File System&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. You can also track the status of a modification using &lt;a&gt;DescribeVolumesModifications&lt;/a&gt;. For information about tracking status changes using either method, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.&lt;/p&gt;


      Function parameters for this API volumeId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVolumePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ATTRIBUTE":
        /*



Modifies the specified attribute of the specified VPC.


      Function parameters for this API vpcId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcAttributePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_CONNECTION_NOTIFICATION":
        /*



Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.


      Function parameters for this API connectionNotificationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointConnectionNotificationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_ENDPOINT":
        /*



Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_SERVICE_CONFIGURATION":
        /*



Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.


      Function parameters for this API serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointServiceConfigurationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_ENDPOINT_SERVICE_PERMISSIONS":
        /*



&lt;p&gt;Modifies the permissions for your &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC endpoint service&lt;/a&gt;. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.&lt;/p&gt; &lt;p&gt;If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.&lt;/p&gt;


      Function parameters for this API serviceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcEndpointServicePermissionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_PEERING_CONNECTION_OPTIONS":
        /*



&lt;p&gt;Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between an EC2-Classic instance that&#39;s linked to your VPC (using ClassicLink) and instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that&#39;s linked to the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; command.&lt;/p&gt;


      Function parameters for this API vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcPeeringConnectionOptionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPC_TENANCY":
        /*



&lt;p&gt;Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to &lt;code&gt;default&lt;/code&gt; only. You cannot change the instance tenancy attribute to &lt;code&gt;dedicated&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of &lt;code&gt;default&lt;/code&gt;, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API vpcId,instanceTenancy,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpcTenancyPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPN_CONNECTION":
        /*



&lt;p&gt;Modifies the target gateway of an AWS Site-to-Site VPN connection. The following migration options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a new virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a new transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before you perform the migration to the new gateway, you must configure the new gateway. Use &lt;a&gt;CreateVpnGateway&lt;/a&gt; to create a virtual private gateway, or &lt;a&gt;CreateTransitGateway&lt;/a&gt; to create a transit gateway.&lt;/p&gt; &lt;p&gt;This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. &lt;/p&gt; &lt;p&gt;You must delete the static routes before you migrate to the new gateway.&lt;/p&gt; &lt;p&gt;Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.&lt;/p&gt; &lt;p&gt;After you migrate to the new gateway, you might need to modify your VPC route table. Use &lt;a&gt;CreateRoute&lt;/a&gt; and &lt;a&gt;DeleteRoute&lt;/a&gt; to make the changes described in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing\&quot;&gt;VPN Gateway Target Modification Required VPC Route Table Updates&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use &lt;a&gt;CreateTransitGatewayRoute&lt;/a&gt; to add the routes.&lt;/p&gt; &lt;p&gt; If you deleted VPN static routes, you must add the static routes to the transit gateway route table.&lt;/p&gt; &lt;p&gt;After you perform this operation, the AWS VPN endpoint&#39;s IP addresses on the AWS side and the tunnel options remain intact. Your s2slong connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints &lt;/p&gt;


      Function parameters for this API vpnConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnConnectionPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MODIFY_VPN_TUNNEL_CERTIFICATE":
        /*



Modifies the VPN tunnel endpoint certificate.


      Function parameters for this API vpnConnectionId,vpnTunnelOutsideIpAddress,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnTunnelCertificatePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MODIFY_VPN_TUNNEL_OPTIONS":
        /*



Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html\&quot;&gt;Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.


      Function parameters for this API vpnConnectionId,vpnTunnelOutsideIpAddress,opts
        */
        return new Promise((resolve, reject) => {
          this.actionModifyVpnTunnelOptionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_MONITOR_INSTANCES":
        /*



&lt;p&gt;Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To disable detailed monitoring, see .&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionMonitorInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_MOVE_ADDRESS_TO_VPC":
        /*



Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the &lt;a&gt;RestoreAddressToClassic&lt;/a&gt; request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.


      Function parameters for this API publicIp,opts
        */
        return new Promise((resolve, reject) => {
          this.actionMoveAddressToVpcPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_PROVISION_BYOIP_CIDR":
        /*



&lt;p&gt;Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using &lt;a&gt;AdvertiseByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from &lt;code&gt;pending-provision&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;. To monitor the status of an address range, use &lt;a&gt;DescribeByoipCidrs&lt;/a&gt;. To allocate an Elastic IP address from your address pool, use &lt;a&gt;AllocateAddress&lt;/a&gt; with either the specific address from the address pool or the ID of the address pool.&lt;/p&gt;


      Function parameters for this API cidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionProvisionByoipCidrPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_PURCHASE_HOST_RESERVATION":
        /*



Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.


      Function parameters for this API hostIdSet,offeringId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseHostReservationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_PURCHASE_RESERVED_INSTANCES_OFFERING":
        /*



&lt;p&gt;Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeReservedInstancesOfferings&lt;/a&gt; to get a list of Reserved Instance offerings that match your specifications. After you&#39;ve purchased a Reserved Instance, you can check for your new Reserved Instance with &lt;a&gt;DescribeReservedInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceCount,reservedInstancesOfferingId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseReservedInstancesOfferingPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_PURCHASE_SCHEDULED_INSTANCES":
        /*



&lt;p&gt;Purchases the Scheduled Instances with the specified schedule.&lt;/p&gt; &lt;p&gt;Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call &lt;a&gt;DescribeScheduledInstanceAvailability&lt;/a&gt; to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call &lt;a&gt;RunScheduledInstances&lt;/a&gt; during each scheduled time period.&lt;/p&gt; &lt;p&gt;After you purchase a Scheduled Instance, you can&#39;t cancel, modify, or resell your purchase.&lt;/p&gt;


      Function parameters for this API purchaseRequest,opts
        */
        return new Promise((resolve, reject) => {
          this.actionPurchaseScheduledInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REBOOT_INSTANCES":
        /*



&lt;p&gt;Requests a reboot of the specified instances. This operation is asynchronous it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.&lt;/p&gt; &lt;p&gt;If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html\&quot;&gt;Getting Console Output and Rebooting Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRebootInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REGISTER_IMAGE":
        /*



&lt;p&gt;Registers an AMI. When you&#39;re creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html\&quot;&gt;Creating Your Own AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For Amazon EBS-backed instances, &lt;a&gt;CreateImage&lt;/a&gt; creates and registers the AMI in a single request, so you don&#39;t have to register the AMI yourself.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also use &lt;code&gt;RegisterImage&lt;/code&gt; to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html\&quot;&gt;Launching a Linux Instance from a Backup&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.&lt;/p&gt; &lt;p&gt;Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Launch an instance from an existing AMI with that billing product code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Customize the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new AMI from the instance using &lt;a&gt;CreateImage&lt;/a&gt; to preserve the billing product code association.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. &lt;/p&gt; &lt;p&gt;If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.&lt;/p&gt;


      Function parameters for this API name,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterImagePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_MEMBERS":
        /*



&lt;p&gt;Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Consideration&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the members, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the members were added to the transit gateway multicast group.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterTransitGatewayMulticastGroupMembersPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REGISTER_TRANSIT_GATEWAY_MULTICAST_GROUP_SOURCES":
        /*



&lt;p&gt;Registers sources (network interfaces) with the specified transit gateway multicast group.&lt;/p&gt; &lt;p&gt;A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Considerations&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the source, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the source was added to the multicast group.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionRegisterTransitGatewayMulticastGroupSourcesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_TRANSIT_GATEWAY_PEERING_ATTACHMENT":
        /*



Rejects a transit gateway peering attachment request.


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectTransitGatewayPeeringAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_TRANSIT_GATEWAY_VPC_ATTACHMENT":
        /*



&lt;p&gt;Rejects a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;AcceptTransitGatewayVpcAttachment&lt;/a&gt; to accept a VPC attachment request.&lt;/p&gt;


      Function parameters for this API transitGatewayAttachmentId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectTransitGatewayVpcAttachmentPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_VPC_ENDPOINT_CONNECTIONS":
        /*



Rejects one or more VPC endpoint connection requests to your VPC endpoint service.


      Function parameters for this API serviceId,vpcEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectVpcEndpointConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REJECT_VPC_PEERING_CONNECTION":
        /*



Rejects a VPC peering connection request. The VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. Use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use &lt;a&gt;DeleteVpcPeeringConnection&lt;/a&gt;.


      Function parameters for this API vpcPeeringConnectionId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRejectVpcPeeringConnectionPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RELEASE_ADDRESS":
        /*



&lt;p&gt;Releases the specified Elastic IP address.&lt;/p&gt; &lt;p&gt;[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it&#39;s associated with. To disassociate an Elastic IP address without releasing it, use &lt;a&gt;DisassociateAddress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;[Nondefault VPC] You must use &lt;a&gt;DisassociateAddress&lt;/a&gt; to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (&lt;code&gt;InvalidIPAddress.InUse&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you&#39;ll get an &lt;code&gt;AuthFailure&lt;/code&gt; error if the address is already allocated to another AWS account.&lt;/p&gt; &lt;p&gt;[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see &lt;a&gt;AllocateAddress&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionReleaseAddressPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RELEASE_HOSTS":
        /*



&lt;p&gt;When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into &lt;code&gt;released&lt;/code&gt; state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.&lt;/p&gt; &lt;p&gt;When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.&lt;/p&gt; &lt;p&gt;Released hosts still appear in a &lt;a&gt;DescribeHosts&lt;/a&gt; response.&lt;/p&gt;


      Function parameters for this API hostId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReleaseHostsPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REPLACE_IAM_INSTANCE_PROFILE_ASSOCIATION":
        /*



&lt;p&gt;Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that&#39;s associated with an instance without having to disassociate the existing IAM instance profile first.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;


      Function parameters for this API associationId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceIamInstanceProfileAssociationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_NETWORK_ACL_ASSOCIATION":
        /*



&lt;p&gt;Changes which network ACL a subnet is associated with. By default when you create a subnet, it&#39;s automatically associated with the default network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation.&lt;/p&gt;


      Function parameters for this API associationId,networkAclId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceNetworkAclAssociationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_NETWORK_ACL_ENTRY":
        /*



Replaces an entry (rule) in a network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.


      Function parameters for this API egress,networkAclId,protocol,ruleAction,ruleNumber,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceNetworkAclEntryPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_ROUTE":
        /*



&lt;p&gt;Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceRoutePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REPLACE_ROUTE_TABLE_ASSOCIATION":
        /*



&lt;p&gt;Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can also use this operation to change which table is the main route table in the VPC. Specify the main route table&#39;s association ID and the route table ID of the new main route table.&lt;/p&gt;


      Function parameters for this API associationId,routeTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceRouteTableAssociationPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPLACE_TRANSIT_GATEWAY_ROUTE":
        /*



Replaces the specified route in the specified transit gateway route table.


      Function parameters for this API destinationCidrBlock,transitGatewayRouteTableId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReplaceTransitGatewayRoutePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REPORT_INSTANCE_STATUS":
        /*



&lt;p&gt;Submits feedback about the status of an instance. The instance must be in the &lt;code&gt;running&lt;/code&gt; state. If your experience with the instance differs from the instance status returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;, use &lt;a&gt;ReportInstanceStatus&lt;/a&gt; to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.&lt;/p&gt; &lt;p&gt;Use of this action does not change the value returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,reasonCode,status,opts
        */
        return new Promise((resolve, reject) => {
          this.actionReportInstanceStatusPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REQUEST_SPOT_FLEET":
        /*



&lt;p&gt;Creates a Spot Fleet request.&lt;/p&gt; &lt;p&gt;The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.&lt;/p&gt; &lt;p&gt;You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.&lt;/p&gt; &lt;p&gt;Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.&lt;/p&gt; &lt;p&gt;You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the &lt;code&gt;instance&lt;/code&gt; resource type is supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html\&quot;&gt;Spot Fleet Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionRequestSpotFleetPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_REQUEST_SPOT_INSTANCES":
        /*



&lt;p&gt;Creates a Spot Instance request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html\&quot;&gt;Spot Instance Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionRequestSpotInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_EBS_DEFAULT_KMS_KEY_ID":
        /*



&lt;p&gt;Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.&lt;/p&gt; &lt;p&gt;After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetEbsDefaultKmsKeyIdPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_FPGA_IMAGE_ATTRIBUTE":
        /*



Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.


      Function parameters for this API fpgaImageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetFpgaImageAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_IMAGE_ATTRIBUTE":
        /*



&lt;p&gt;Resets an attribute of an AMI to its default value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The productCodes attribute can&#39;t be reset.&lt;/p&gt; &lt;/note&gt;


      Function parameters for this API attribute,imageId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetImageAttributePost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RESET_INSTANCE_ATTRIBUTE":
        /*



&lt;p&gt;Resets an attribute of an instance to its default value. To reset the &lt;code&gt;kernel&lt;/code&gt; or &lt;code&gt;ramdisk&lt;/code&gt;, the instance must be in a stopped state. To reset the &lt;code&gt;sourceDestCheck&lt;/code&gt;, the instance can be either running or stopped.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;sourceDestCheck&lt;/code&gt; attribute controls whether source/destination checking is enabled. The default value is &lt;code&gt;true&lt;/code&gt;, which means checking is enabled. This value must be &lt;code&gt;false&lt;/code&gt; for a NAT instance to perform NAT. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\&quot;&gt;NAT Instances&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetInstanceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_NETWORK_INTERFACE_ATTRIBUTE":
        /*



Resets a network interface attribute. You can specify only one attribute at a time.


      Function parameters for this API networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetNetworkInterfaceAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESET_SNAPSHOT_ATTRIBUTE":
        /*



&lt;p&gt;Resets permission settings for the specified snapshot.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API attribute,snapshotId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionResetSnapshotAttributePost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RESTORE_ADDRESS_TO_CLASSIC":
        /*



Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.


      Function parameters for this API publicIp,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRestoreAddressToClassicPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_CLIENT_VPN_INGRESS":
        /*



Removes an ingress authorization rule from a Client VPN endpoint.


      Function parameters for this API clientVpnEndpointId,targetNetworkCidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeClientVpnIngressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_SECURITY_GROUP_EGRESS":
        /*



&lt;p&gt;[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn&#39;t apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;p&gt;Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;


      Function parameters for this API groupId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeSecurityGroupEgressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_REVOKE_SECURITY_GROUP_INGRESS":
        /*



&lt;p&gt;Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;note&gt; &lt;p&gt;[EC2-Classic only] If the values you specify do not match the existing rule&#39;s values, no error is returned. Use &lt;a&gt;DescribeSecurityGroups&lt;/a&gt; to verify that the rule has been removed.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionRevokeSecurityGroupIngressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_RUN_INSTANCES":
        /*



&lt;p&gt;Launches the specified number of instances using an AMI for which you have permissions. &lt;/p&gt; &lt;p&gt;You can specify a number of options, or leave the default options. The following rules apply:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] If you don&#39;t specify a subnet ID, we choose a default subnet from your default VPC for you. If you don&#39;t have a default VPC, you must specify a subnet ID in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-Classic] If don&#39;t specify an Availability Zone, we choose one for you.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types\&quot;&gt;Instance Types Available Only in a VPC&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don&#39;t specify this address, we choose one from the IPv4 range of your subnet.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Not all instance types support IPv6 addresses. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify a security group ID, we use the default security group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Security Groups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\&quot;&gt;launch template&lt;/a&gt;, which is a resource that contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify the launch template instead of specifying the launch parameters.&lt;/p&gt; &lt;p&gt;To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.&lt;/p&gt; &lt;p&gt;An instance is ready for you to use when it&#39;s in the &lt;code&gt;running&lt;/code&gt; state. You can check the state of your instance using &lt;a&gt;DescribeInstances&lt;/a&gt;. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see &lt;a&gt;CreateTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html\&quot;&gt;What To Do If An Instance Immediately Terminates&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html\&quot;&gt;Troubleshooting Connecting to Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API maxCount,minCount,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRunInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_RUN_SCHEDULED_INSTANCES":
        /*



&lt;p&gt;Launches the specified Scheduled Instances.&lt;/p&gt; &lt;p&gt;Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You must launch a Scheduled Instance during its scheduled time period. You can&#39;t stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html\&quot;&gt;Scheduled Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API scheduledInstanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionRunScheduledInstancesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_LOCAL_GATEWAY_ROUTES":
        /*



Searches for routes in the specified local gateway route table.


      Function parameters for this API localGatewayRouteTableId,filter,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchLocalGatewayRoutesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_TRANSIT_GATEWAY_MULTICAST_GROUPS":
        /*



Searches one or more transit gateway multicast groups and returns the group membership information.


      Function parameters for this API opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchTransitGatewayMulticastGroupsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEARCH_TRANSIT_GATEWAY_ROUTES":
        /*



Searches for routes in the specified transit gateway route table.


      Function parameters for this API transitGatewayRouteTableId,filter,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSearchTransitGatewayRoutesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_SEND_DIAGNOSTIC_INTERRUPT":
        /*



&lt;p&gt;Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a &lt;i&gt;kernel panic&lt;/i&gt; (on Linux instances), or a &lt;i&gt;blue screen&lt;/i&gt;/&lt;i&gt;stop error&lt;/i&gt; (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a &lt;i&gt;non-maskable interrupt&lt;/i&gt; (NMI).&lt;/p&gt; &lt;p&gt;In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.&lt;/p&gt; &lt;p&gt;Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.&lt;/p&gt; &lt;p&gt;For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Linux instances) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Windows instances).&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionSendDiagnosticInterruptPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_START_INSTANCES":
        /*



&lt;p&gt;Starts an Amazon EBS-backed instance that you&#39;ve previously stopped.&lt;/p&gt; &lt;p&gt;Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.&lt;/p&gt; &lt;p&gt;Performing this operation on an instance that uses an instance store as its root device returns an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html\&quot;&gt;Stopping Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionStartInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_STOP_INSTANCES":
        /*



&lt;p&gt;Stops an Amazon EBS-backed instance.&lt;/p&gt; &lt;p&gt;You can use the Stop action to hibernate an instance if the instance is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation\&quot;&gt;enabled for hibernation&lt;/a&gt; and it meets the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\&quot;&gt;hibernation prerequisites&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\&quot;&gt;Hibernate Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;We don&#39;t charge usage for a stopped instance, or data transfer fees however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;You can&#39;t start, stop, or hibernate Spot Instances, and you can&#39;t stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances\&quot;&gt;Hibernating Interrupted Spot Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.&lt;/p&gt; &lt;p&gt;Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html\&quot;&gt;Troubleshooting Stopping Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionStopInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_TERMINATE_CLIENT_VPN_CONNECTIONS":
        /*



Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.


      Function parameters for this API clientVpnEndpointId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionTerminateClientVpnConnectionsPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_TERMINATE_INSTANCES":
        /*



&lt;p&gt;Shuts down the specified instances. This operation is idempotent if you terminate an instance more than once, each call succeeds. &lt;/p&gt; &lt;p&gt;If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.&lt;/p&gt; &lt;p&gt;Terminated instances remain visible after termination (for approximately one hour).&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.&lt;/p&gt; &lt;p&gt;You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the &lt;code&gt;DeleteOnTermination&lt;/code&gt; block device mapping parameter set to &lt;code&gt;true&lt;/code&gt; are automatically deleted. For more information about the differences between stopping and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html\&quot;&gt;Troubleshooting Terminating Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionTerminateInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_UNASSIGN_IPV6_ADDRESSES":
        /*



Unassigns one or more IPv6 addresses from a network interface.


      Function parameters for this API ipv6Addresses,networkInterfaceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnassignIpv6AddressesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UNASSIGN_PRIVATE_IP_ADDRESSES":
        /*



Unassigns one or more secondary private IP addresses from a network interface.


      Function parameters for this API networkInterfaceId,privateIpAddress,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnassignPrivateIpAddressesPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UNMONITOR_INSTANCES":
        /*



Disables detailed monitoring for a running instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.


      Function parameters for this API instanceId,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUnmonitorInstancesPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      case "ACTION_UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_EGRESS":
        /*



&lt;p&gt;[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;


      Function parameters for this API ipPermissions,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUpdateSecurityGroupRuleDescriptionsEgressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_UPDATE_SECURITY_GROUP_RULE_DESCRIPTIONS_INGRESS":
        /*



&lt;p&gt;Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;


      Function parameters for this API ipPermissions,opts
        */
        return new Promise((resolve, reject) => {
          this.actionUpdateSecurityGroupRuleDescriptionsIngressPost(
            options,
            (err, data, response) => {
              if (err) {
                reject({ error: err, response: response });
              }
              resolve({ data: data, response: response });
            }
          );
        });

      case "ACTION_WITHDRAW_BYOIP_CIDR":
        /*



&lt;p&gt;Stops advertising an IPv4 address range that is provisioned as an address pool.&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.&lt;/p&gt;


      Function parameters for this API cidr,opts
        */
        return new Promise((resolve, reject) => {
          this.actionWithdrawByoipCidrPost(options, (err, data, response) => {
            if (err) {
              reject({ error: err, response: response });
            }
            resolve({ data: data, response: response });
          });
        });

      default:
        throw ErrorHelper.getError(`Can't get entity`, 404);
    }
  }
  // This is a function for actionAcceptReservedInstancesExchangeQuotePost
  /*


Accepts the Convertible Reserved Instance exchange quote described in the &lt;a&gt;GetReservedInstancesExchangeQuote&lt;/a&gt; call.

 */
  actionAcceptReservedInstancesExchangeQuotePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Convertible Reserved Instances to exchange for another Convertible Reserved Instance of the same or higher value.
    /*let reservedInstanceId = "reservedInstanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'targetConfiguration': "targetConfiguration_example" // [String] | The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptReservedInstancesExchangeQuotePost(
      incomingOptions.reservedInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptTransitGatewayPeeringAttachmentPost
  /*


Accepts a transit gateway peering attachment request. The peering attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state.

 */
  actionAcceptTransitGatewayPeeringAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptTransitGatewayPeeringAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptTransitGatewayVpcAttachmentPost
  /*


&lt;p&gt;Accepts a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;RejectTransitGatewayVpcAttachment&lt;/a&gt; to reject a VPC attachment request.&lt;/p&gt;

 */
  actionAcceptTransitGatewayVpcAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptTransitGatewayVpcAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptVpcEndpointConnectionsPost
  /*


Accepts one or more interface VPC endpoint connection requests to your VPC endpoint service.

 */
  actionAcceptVpcEndpointConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the endpoint service // [String] | The IDs of one or more interface VPC endpoints.
    /*let serviceId = "serviceId_example";*/ /*let vpcEndpointId = "vpcEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptVpcEndpointConnectionsPost(
      incomingOptions.serviceId,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAcceptVpcPeeringConnectionPost
  /*


&lt;p&gt;Accept a VPC peering connection request. To accept a request, the VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state, and you must be the owner of the peer VPC. Use &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; to view your outstanding VPC peering connection requests.&lt;/p&gt; &lt;p&gt;For an inter-Region VPC peering connection request, you must accept the VPC peering connection in the Region of the accepter VPC.&lt;/p&gt;

 */
  actionAcceptVpcPeeringConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example" // String | The ID of the VPC peering connection. You must specify this parameter in the request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAcceptVpcPeeringConnectionPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAdvertiseByoipCidrPost
  /*


&lt;p&gt;Advertises an IPv4 address range that is provisioned for use with your AWS resources through bring your own IP addresses (BYOIP).&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;We recommend that you stop advertising the BYOIP CIDR from other locations when you advertise it from AWS. To minimize down time, you can configure your AWS resources to use an address from a BYOIP CIDR before it is advertised, and then simultaneously stop advertising it from the current location and start advertising it through AWS.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses starts routing to AWS because of BGP propagation delays.&lt;/p&gt; &lt;p&gt;To stop advertising the BYOIP CIDR, use &lt;a&gt;WithdrawByoipCidr&lt;/a&gt;.&lt;/p&gt;

 */
  actionAdvertiseByoipCidrPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 address range, in CIDR notation. This must be the exact range that you provisioned. You can't advertise only a portion of the provisioned range.
    /*let cidr = "cidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAdvertiseByoipCidrPost(
      incomingOptions.cidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAllocateAddressPost
  /*


&lt;p&gt;Allocates an Elastic IP address to your AWS account. After you allocate the Elastic IP address you can associate it with an instance or network interface. After you release an Elastic IP address, it is released to the IP address pool and can be allocated to a different AWS account.&lt;/p&gt; &lt;p&gt;You can allocate an Elastic IP address from an address pool owned by AWS or from an address pool created from a public IPv4 address range that you have brought to AWS for use with your AWS resources using bring your own IP addresses (BYOIP). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-VPC] If you release an Elastic IP address, you might be able to recover it. You cannot recover an Elastic IP address that you released after it is allocated to another AWS account. You cannot recover an Elastic IP address for EC2-Classic. To attempt to recover an Elastic IP address that you released, specify it in this operation.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use either in the EC2-Classic platform or in a VPC. By default, you can allocate 5 Elastic IP addresses for EC2-Classic per Region and 5 Elastic IP addresses for EC2-VPC per Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAllocateAddressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'domain': "domain_example", // String | <p>Set to <code>vpc</code> to allocate the address for use with instances in a VPC.</p> <p>Default: The address is for use with instances in EC2-Classic.</p>
      //  'address': "address_example", // String | [EC2-VPC] The Elastic IP address to recover or an IPv4 address from an address pool.
      //  'publicIpv4Pool': "publicIpv4Pool_example", // String | The ID of an address pool that you own. Use this parameter to let Amazon EC2 select an address from the address pool. To specify a specific address from the address pool, use the <code>Address</code> parameter instead.
      //  'networkBorderGroup': "networkBorderGroup_example", // String | <p>The location from which the IP address is advertised. Use this parameter to limit the address to this location.</p> <p>Use <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html\\\">DescribeVpcs</a> to view the network border groups.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\\\">Error Codes</a>.</p> </note>
      //  'customerOwnedIpv4Pool': "customerOwnedIpv4Pool_example", // String | The ID of a customer-owned address pool. Use this parameter to let Amazon EC2 select an address from the address pool. Alternatively, specify a specific address from the address pool.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAllocateAddressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAllocateHostsPost
  /*


Allocates a Dedicated Host to your account. At a minimum, specify the supported instance type or instance family, the Availability Zone in which to allocate the host, and the number of hosts to allocate.

 */
  actionAllocateHostsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to allocate the Dedicated Host // Number | The number of Dedicated Hosts to allocate to your account with these parameters.
    /*let availabilityZone = "availabilityZone_example";*/ /*let quantity = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'autoPlacement': "autoPlacement_example", // String | <p>Indicates whether the host accepts any untargeted instance launches that match its instance type configuration, or if it only accepts Host tenancy instance launches that specify its unique host ID. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/how-dedicated-hosts-work.html#dedicated-hosts-understanding\\\"> Understanding Instance Placement and Host Affinity</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> <p>Default: <code>on</code> </p>
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      //  'instanceType': "instanceType_example", // String | <p>Specifies the instance type to be supported by the Dedicated Hosts. If you specify an instance type, the Dedicated Hosts support instances of the specified instance type only.</p> <p>If you want the Dedicated Hosts to support multiple instance types in a specific instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p>
      //  'instanceFamily': "instanceFamily_example", // String | <p>Specifies the instance family to be supported by the Dedicated Hosts. If you specify an instance family, the Dedicated Hosts support multiple instance types within that instance family.</p> <p>If you want the Dedicated Hosts to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p>
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the Dedicated Host during creation.
      //  'hostRecovery': "hostRecovery_example" // String | <p>Indicates whether to enable or disable host recovery for the Dedicated Host. Host recovery is disabled by default. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\\\"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>off</code> </p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAllocateHostsPost(
      incomingOptions.availabilityZone,
      incomingOptions.quantity,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionApplySecurityGroupsToClientVpnTargetNetworkPost
  /*


Applies a security group to the association between the target network and the Client VPN endpoint. This action replaces the existing security groups with the specified security groups.

 */
  actionApplySecurityGroupsToClientVpnTargetNetworkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The ID of the VPC in which the associated target network is located // [String] | The IDs of the security groups to apply to the associated target network. Up to 5 security groups can be applied to an associated target network.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let vpcId = "vpcId_example";*/ /*let securityGroupId = "securityGroupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionApplySecurityGroupsToClientVpnTargetNetworkPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.vpcId,
      incomingOptions.securityGroupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssignIpv6AddressesPost
  /*


Assigns one or more IPv6 addresses to the specified network interface. You can specify one or more specific IPv6 addresses, or you can specify the number of IPv6 addresses to be automatically assigned from within the subnet&#39;s IPv6 CIDR block range. You can assign as many IPv6 addresses to a network interface as you can assign private IPv4 addresses, and the limit varies per instance type. For information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\&quot;&gt;IP Addresses Per Network Interface Per Instance Type&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionAssignIpv6AddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      ipv6AddressCount: 56 // Number | The number of IPv6 addresses to assign to the network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses.
      //  'ipv6Addresses': "ipv6Addresses_example" // [String] | One or more specific IPv6 addresses to be assigned to the network interface. You can't use this option if you're specifying a number of IPv6 addresses.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssignIpv6AddressesPost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssignPrivateIpAddressesPost
  /*


&lt;p&gt;Assigns one or more secondary private IP addresses to the specified network interface.&lt;/p&gt; &lt;p&gt;You can specify one or more specific secondary IP addresses, or you can specify the number of secondary IP addresses to be automatically assigned within the subnet&#39;s CIDR block range. The number of secondary IP addresses that you can assign to an instance varies by instance type. For information about instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about Elastic IP addresses, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you move a secondary private IP address to another network interface, any Elastic IP address that is associated with the IP address is also moved.&lt;/p&gt; &lt;p&gt;Remapping an IP address is an asynchronous operation. When you move an IP address from one network interface to another, check &lt;code&gt;network/interfaces/macs/mac/local-ipv4s&lt;/code&gt; in the instance metadata to confirm that the remapping is complete.&lt;/p&gt;

 */
  actionAssignPrivateIpAddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      allowReassignment: true, // Boolean | Indicates whether to allow an IP address that is already assigned to another network interface or instance to be reassigned to the specified network interface.
      //  'privateIpAddress': "privateIpAddress_example", // [String] | <p>One or more IP addresses to be assigned as a secondary private IP address to the network interface. You can't specify this parameter when also specifying a number of secondary IP addresses.</p> <p>If you don't specify an IP address, Amazon EC2 automatically selects an IP address within the subnet range.</p>
      secondaryPrivateIpAddressCount: 56 // Number | The number of secondary IP addresses to assign to the network interface. You can't specify this parameter when also specifying private IP addresses.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssignPrivateIpAddressesPost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateAddressPost
  /*


&lt;p&gt;Associates an Elastic IP address with an instance or a network interface. Before you can use an Elastic IP address, you must allocate it to your account.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;[EC2-Classic, VPC in an EC2-VPC-only account] If the Elastic IP address is already associated with a different instance, it is disassociated from that instance and associated with the specified instance. If you associate an Elastic IP address with an instance that has an existing Elastic IP address, the existing address is disassociated from the instance, but remains allocated to your account.&lt;/p&gt; &lt;p&gt;[VPC in an EC2-Classic account] If you don&#39;t specify a private IP address, the Elastic IP address is associated with the primary IP address. If the Elastic IP address is already associated with a different instance or a network interface, you get an error unless you allow reassociation. You cannot associate an Elastic IP address with an instance or network interface that has an existing Elastic IP address.&lt;/p&gt; &lt;p&gt;You cannot associate an Elastic IP address with an interface in a different network border group.&lt;/p&gt; &lt;important&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error, and you may be charged for each time the Elastic IP address is remapped to the same instance. For more information, see the &lt;i&gt;Elastic IP Addresses&lt;/i&gt; section of &lt;a href&#x3D;\&quot;http://aws.amazon.com/ec2/pricing/\&quot;&gt;Amazon EC2 Pricing&lt;/a&gt;.&lt;/p&gt; &lt;/important&gt;

 */
  actionAssociateAddressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'allocationId': "allocationId_example", // String | [EC2-VPC] The allocation ID. This is required for EC2-VPC.
      //  'instanceId': "instanceId_example", // String | The ID of the instance. This is required for EC2-Classic. For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      //  'publicIp': "publicIp_example", // String | The Elastic IP address to associate with the instance. This is required for EC2-Classic.
      allowReassociation: true, // Boolean | [EC2-VPC] For a VPC in an EC2-Classic account, specify true to allow an Elastic IP address that is already associated with an instance or network interface to be reassociated with the specified instance or network interface. Otherwise, the operation fails. In a VPC in an EC2-VPC-only account, reassociation is automatic, therefore you can specify false to ensure the operation fails if the Elastic IP address is already associated with another resource.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | <p>[EC2-VPC] The ID of the network interface. If the instance has more than one network interface, you must specify a network interface ID.</p> <p>For EC2-VPC, you can specify either the instance ID or the network interface ID, but not both. </p>
      //  'privateIpAddress': "privateIpAddress_example" // String | [EC2-VPC] The primary or secondary private IP address to associate with the Elastic IP address. If no private IP address is specified, the Elastic IP address is associated with the primary private IP address.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateAddressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateClientVpnTargetNetworkPost
  /*


Associates a target network with a Client VPN endpoint. A target network is a subnet in a VPC. You can associate multiple subnets from the same VPC with a Client VPN endpoint. You can associate only one subnet in each Availability Zone. We recommend that you associate at least two subnets to provide Availability Zone redundancy.

 */
  actionAssociateClientVpnTargetNetworkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The ID of the subnet to associate with the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateClientVpnTargetNetworkPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateDhcpOptionsPost
  /*


&lt;p&gt;Associates a set of DHCP options (that you&#39;ve previously created) with the specified VPC, or associates no DHCP options with the VPC.&lt;/p&gt; &lt;p&gt;After you associate the options with the VPC, any existing instances and all new instances that you launch in that VPC use the options. You don&#39;t need to restart or relaunch the instances. They automatically pick up the changes within a few hours, depending on how frequently the instance renews its DHCP lease. You can explicitly renew the lease using the operating system on the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateDhcpOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the DHCP options set, or <code>default</code> to associate no DHCP options with the VPC // String | The ID of the VPC.
    /*let dhcpOptionsId = "dhcpOptionsId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateDhcpOptionsPost(
      incomingOptions.dhcpOptionsId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAssociateIamInstanceProfilePost
  /*


Associates an IAM instance profile with a running or stopped instance. You cannot associate more than one IAM instance profile with an instance.

 */
  actionAssociateIamInstanceProfilePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example" // String | Describes an IAM instance profile. The name of the instance profile.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateIamInstanceProfilePost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateRouteTablePost
  /*


&lt;p&gt;Associates a subnet in your VPC or an internet gateway or virtual private gateway attached to your VPC with a route table in your VPC. This association causes traffic from the subnet or gateway to be routed according to the routes in the route table. The action returns an association ID, which you need in order to disassociate the route table later. A route table can be associated with multiple subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table.
    /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'subnetId': "subnetId_example", // String | The ID of the subnet.
      //  'gatewayId': "gatewayId_example" // String | The ID of the internet gateway or virtual private gateway.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateRouteTablePost(
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateSubnetCidrBlockPost
  /*


Associates a CIDR block with your subnet. You can only associate a single IPv6 CIDR block with your subnet. An IPv6 CIDR block must have a prefix length of /64.

 */
  actionAssociateSubnetCidrBlockPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv6 CIDR block for your subnet. The subnet must have a /64 prefix length // String | The ID of your subnet.
    /*let ipv6CidrBlock = "ipv6CidrBlock_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateSubnetCidrBlockPost(
      incomingOptions.ipv6CidrBlock,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateTransitGatewayMulticastDomainPost
  /*


&lt;p&gt;Associates the specified subnets and transit gateway attachments with the specified transit gateway multicast domain.&lt;/p&gt; &lt;p&gt;The transit gateway attachment must be in the available state before you can add a resource. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGatewayAttachments.html\&quot;&gt;DescribeTransitGatewayAttachments&lt;/a&gt; to see the state of the attachment.&lt;/p&gt;

 */
  actionAssociateTransitGatewayMulticastDomainPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the transit gateway attachment to associate with the transit gateway multicast domain.
      //  'subnetIds': "subnetIds_example", // [String] | The IDs of the subnets to associate with the transit gateway multicast domain.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateTransitGatewayMulticastDomainPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateTransitGatewayRouteTablePost
  /*


Associates the specified attachment with the specified transit gateway route table. You can associate only one route table with an attachment.

 */
  actionAssociateTransitGatewayRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The ID of the attachment.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateTransitGatewayRouteTablePost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAssociateVpcCidrBlockPost
  /*


&lt;p&gt;Associates a CIDR block with your VPC. You can associate a secondary IPv4 CIDR block, or you can associate an Amazon-provided IPv6 CIDR block. The IPv6 CIDR block size is fixed at /56.&lt;/p&gt; &lt;p&gt;For more information about associating CIDR blocks with your VPC and applicable restrictions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html#VPC_Sizing\&quot;&gt;VPC and Subnet Sizing&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAssociateVpcCidrBlockPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      amazonProvidedIpv6CidrBlock: true // Boolean | Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IPv6 addresses, or the size of the CIDR block.
      //  'cidrBlock': "cidrBlock_example", // String | An IPv4 CIDR block to associate with the VPC.
      //  'ipv6CidrBlockNetworkBorderGroup': "ipv6CidrBlockNetworkBorderGroup_example" // String | <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the CiDR block to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p> <p> You can have one IPv6 CIDR block association per network border group.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAssociateVpcCidrBlockPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachClassicLinkVpcPost
  /*


&lt;p&gt;Links an EC2-Classic instance to a ClassicLink-enabled VPC through one or more of the VPC&#39;s security groups. You cannot link an EC2-Classic instance to more than one VPC at a time. You can only link an instance that&#39;s in the &lt;code&gt;running&lt;/code&gt; state. An instance is automatically unlinked from a VPC when it&#39;s stopped - you can link it to the VPC again when you restart it.&lt;/p&gt; &lt;p&gt;After you&#39;ve linked an instance, you cannot change the VPC security groups that are associated with it. To change the security groups, you must first unlink the instance, and then link it again.&lt;/p&gt; &lt;p&gt;Linking your instance to a VPC is sometimes referred to as &lt;i&gt;attaching&lt;/i&gt; your instance.&lt;/p&gt;

 */
  actionAttachClassicLinkVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The ID of one or more of the VPC's security groups. You cannot specify security groups from a different VPC // String | The ID of an EC2-Classic instance to link to the ClassicLink-enabled VPC // String | The ID of a ClassicLink-enabled VPC.
    /*let securityGroupId = "securityGroupId_example";*/ /*let instanceId = "instanceId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachClassicLinkVpcPost(
      incomingOptions.securityGroupId,
      incomingOptions.instanceId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachInternetGatewayPost
  /*


Attaches an internet gateway or a virtual private gateway to a VPC, enabling connectivity between the internet and the VPC. For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.

 */
  actionAttachInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the internet gateway // String | The ID of the VPC.
    /*let internetGatewayId = "internetGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachInternetGatewayPost(
      incomingOptions.internetGatewayId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAttachNetworkInterfacePost
  /*


Attaches a network interface to an instance.

 */
  actionAttachNetworkInterfacePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | The index of the device for the network interface attachment // String | The ID of the instance // String | The ID of the network interface.
    /*let deviceIndex = 56;*/ /*let instanceId = "instanceId_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachNetworkInterfacePost(
      incomingOptions.deviceIndex,
      incomingOptions.instanceId,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachVolumePost
  /*


&lt;p&gt;Attaches an EBS volume to a running or stopped instance and exposes it to the instance with the specified device name.&lt;/p&gt; &lt;p&gt;Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you attach an EBS volume, you must make it available. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-using-volumes.html\&quot;&gt;Making an EBS Volume Available For Use&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If a volume has an AWS Marketplace product code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The volume can be attached only to a stopped instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;AWS Marketplace product codes are copied from the volume to the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;You must be subscribed to the product.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The instance type and operating system of the instance must support the product. For example, you can&#39;t detach a volume from a Windows instance and attach it to a Linux instance.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-attaching-volume.html\&quot;&gt;Attaching Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAttachVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The device name (for example, <code>/dev/sdh</code> or <code>xvdh</code>) // String | The ID of the instance // String | The ID of the EBS volume. The volume and instance must be within the same Availability Zone.
    /*let device = "device_example";*/ /*let instanceId = "instanceId_example";*/ /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachVolumePost(
      incomingOptions.device,
      incomingOptions.instanceId,
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAttachVpnGatewayPost
  /*


&lt;p&gt;Attaches a virtual private gateway to a VPC. You can attach one virtual private gateway to one VPC at a time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionAttachVpnGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The ID of the virtual private gateway.
    /*let vpcId = "vpcId_example";*/ /*let vpnGatewayId = "vpnGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAttachVpnGatewayPost(
      incomingOptions.vpcId,
      incomingOptions.vpnGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeClientVpnIngressPost
  /*


Adds an ingress authorization rule to a Client VPN endpoint. Ingress authorization rules act as firewall rules that grant access to networks. You must configure ingress authorization rules to enable clients to access resources in AWS or on-premises networks.

 */
  actionAuthorizeClientVpnIngressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint // String | The IPv4 address range, in CIDR notation, of the network for which access is being authorized.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let targetNetworkCidr = "targetNetworkCidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'accessGroupId': "accessGroupId_example", // String | The ID of the Active Directory group to grant access.
      authorizeAllGroups: true, // Boolean | Indicates whether to grant access to all clients. Use <code>true</code> to grant all clients who successfully establish a VPN connection access to the network.
      //  'description': "description_example", // String | A brief description of the authorization rule.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeClientVpnIngressPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.targetNetworkCidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeSecurityGroupEgressPost
  /*


&lt;p&gt;[VPC only] Adds the specified egress rules to a security group for use with a VPC.&lt;/p&gt; &lt;p&gt;An outbound rule permits instances to send traffic to the specified IPv4 or IPv6 CIDR address ranges, or to the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For the TCP and UDP protocols, you must also specify the destination port or port range. For the ICMP protocol, you must also specify the ICMP type and code. You can use -1 for the type or code to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to affected instances as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionAuthorizeSecurityGroupEgressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the security group.
    /*let groupId = "groupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'ipPermissions': "ipPermissions_example", // [String] | The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      //  'cidrIp': "cidrIp_example", // String | Not supported. Use a set of IP permissions to specify the CIDR.
      fromPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'ipProtocol': "ipProtocol_example", // String | Not supported. Use a set of IP permissions to specify the protocol name or number.
      toPort: 56 // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example" // String | Not supported. Use a set of IP permissions to specify a destination security group.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeSecurityGroupEgressPost(
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionAuthorizeSecurityGroupIngressPost
  /*


&lt;p&gt;Adds the specified ingress rules to a security group.&lt;/p&gt; &lt;p&gt;An inbound rule permits instances to receive traffic from the specified IPv4 or IPv6 CIDR address ranges, or from the instances associated with the specified destination security groups.&lt;/p&gt; &lt;p&gt;You specify a protocol for each rule (for example, TCP). For TCP and UDP, you must also specify the destination port or port range. For ICMP/ICMPv6, you must also specify the ICMP/ICMPv6 type and code. You can use -1 to mean all types or all codes.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionAuthorizeSecurityGroupIngressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cidrIp': "cidrIp_example", // String | <p>The IPv4 address range, in CIDR format. You can't specify this parameter when specifying a source security group. To specify an IPv6 address range, use a set of IP permissions.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      fromPort: 56, // Number | <p>The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all types. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      //  'ipPermissions': "ipPermissions_example", // [String] | The sets of IP permissions.
      //  'ipProtocol': "ipProtocol_example", // String | <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href=\\\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\\\">Protocol Numbers</a>). To specify <code>icmpv6</code>, use a set of IP permissions.</p> <p>[VPC only] Use <code>-1</code> to specify all protocols. If you specify <code>-1</code> or a protocol other than <code>tcp</code>, <code>udp</code>, or <code>icmp</code>, traffic on all ports is allowed, regardless of any ports you specify.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead. For EC2-VPC, the source security group must be in the same VPC.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | [nondefault VPC] The AWS account ID for the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. Creates rules that grant full ICMP, UDP, and TCP access. To create a rule with a specific IP protocol and port range, use a set of IP permissions instead.
      toPort: 56, // Number | <p>The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all codes. If you specify all ICMP types, you must specify all codes.</p> <p>Alternatively, use a set of IP permissions to specify multiple rules and a description for the rule.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionAuthorizeSecurityGroupIngressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionBundleInstancePost
  /*


&lt;p&gt;Bundles an Amazon instance store-backed Windows instance.&lt;/p&gt; &lt;p&gt;During bundling, only the root device volume (C:\\) is bundled. Data on other instance store volumes is not preserved.&lt;/p&gt; &lt;note&gt; &lt;p&gt;This action is not applicable for Linux/Unix instances or Windows instances that are backed by Amazon EBS.&lt;/p&gt; &lt;/note&gt;

 */
  actionBundleInstancePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The ID of the instance to bundle.</p> <p>Type: String</p> <p>Default: None</p> <p>Required: Yes</p>
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'storageS3': "storageS3_example", // String | Describes the storage location for an instance store-backed AMI. An Amazon S3 storage location.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionBundleInstancePost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelBundleTaskPost
  /*


Cancels a bundling operation for an instance store-backed Windows instance.

 */
  actionCancelBundleTaskPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the bundle task.
    /*let bundleId = "bundleId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelBundleTaskPost(
      incomingOptions.bundleId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelCapacityReservationPost
  /*


&lt;p&gt;Cancels the specified Capacity Reservation, releases the reserved capacity, and changes the Capacity Reservation&#39;s state to &lt;code&gt;cancelled&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Instances running in the reserved capacity continue running until you stop them. Stopped instances that target the Capacity Reservation can no longer launch. Modify these instances to either target a different Capacity Reservation, launch On-Demand Instance capacity, or run in any open Capacity Reservation that has matching attributes and sufficient capacity.&lt;/p&gt;

 */
  actionCancelCapacityReservationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation to be cancelled.
    /*let capacityReservationId = "capacityReservationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelCapacityReservationPost(
      incomingOptions.capacityReservationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelConversionTaskPost
  /*


&lt;p&gt;Cancels an active conversion task. The task can be the import of an instance or volume. The action removes all artifacts of the conversion, including a partially uploaded volume or instance. If the conversion is complete or is in the process of transferring the final disk image, the command fails and returns an exception.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt;

 */
  actionCancelConversionTaskPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the conversion task.
    /*let conversionTaskId = "conversionTaskId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'reasonMessage': "reasonMessage_example" // String | The reason for canceling the conversion task.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelConversionTaskPost(
      incomingOptions.conversionTaskId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCancelExportTaskPost
  /*


Cancels an active export task. The request removes all artifacts of the export, including any partially-created Amazon S3 objects. If the export task is complete or is in the process of transferring the final disk image, the command fails and returns an error.

 */
  actionCancelExportTaskPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the export task. This is the ID returned by <code>CreateInstanceExportTask</code>.
    /*let exportTaskId = "exportTaskId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelExportTaskPost(
      incomingOptions.exportTaskId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCancelImportTaskPost
  /*


Cancels an in-process import virtual machine or import snapshot task.

 */
  actionCancelImportTaskPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cancelReason': "cancelReason_example", // String | The reason for canceling the task.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'importTaskId': "importTaskId_example" // String | The ID of the import image or import snapshot task to be canceled.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelImportTaskPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelReservedInstancesListingPost
  /*


&lt;p&gt;Cancels the specified Reserved Instance listing in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCancelReservedInstancesListingPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Reserved Instance listing.
    /*let reservedInstancesListingId = "reservedInstancesListingId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelReservedInstancesListingPost(
      incomingOptions.reservedInstancesListingId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelSpotFleetRequestsPost
  /*


&lt;p&gt;Cancels the specified Spot Fleet requests.&lt;/p&gt; &lt;p&gt;After you cancel a Spot Fleet request, the Spot Fleet launches no new Spot Instances. You must specify whether the Spot Fleet should also terminate its Spot Instances. If you terminate the instances, the Spot Fleet request enters the &lt;code&gt;cancelled_terminating&lt;/code&gt; state. Otherwise, the Spot Fleet request enters the &lt;code&gt;cancelled_running&lt;/code&gt; state and the instances continue to run until they are interrupted or you terminate them manually.&lt;/p&gt;

 */
  actionCancelSpotFleetRequestsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Spot Fleet requests // Boolean | Indicates whether to terminate instances for a Spot Fleet request if it is canceled successfully.
    /*let spotFleetRequestId = "spotFleetRequestId_example";*/ /*let terminateInstances = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelSpotFleetRequestsPost(
      incomingOptions.spotFleetRequestId,
      incomingOptions.terminateInstances,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCancelSpotInstanceRequestsPost
  /*


&lt;p&gt;Cancels one or more Spot Instance requests.&lt;/p&gt; &lt;important&gt; &lt;p&gt;Canceling a Spot Instance request does not terminate running Spot Instances associated with the request.&lt;/p&gt; &lt;/important&gt;

 */
  actionCancelSpotInstanceRequestsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more Spot Instance request IDs.
    /*let spotInstanceRequestId = "spotInstanceRequestId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCancelSpotInstanceRequestsPost(
      incomingOptions.spotInstanceRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionConfirmProductInstancePost
  /*


Determines whether a product code is associated with an instance. This action can only be used by the owner of the product code. It is useful when a product code owner must verify whether another user&#39;s instance is eligible for support.

 */
  actionConfirmProductInstancePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | The product code. This must be a product code that you own.
    /*let instanceId = "instanceId_example";*/ /*let productCode = "productCode_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionConfirmProductInstancePost(
      incomingOptions.instanceId,
      incomingOptions.productCode,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopyFpgaImagePost
  /*


Copies the specified Amazon FPGA Image (AFI) to the current Region.

 */
  actionCopyFpgaImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the source AFI // String | The Region that contains the source AFI.
    /*let sourceFpgaImageId = "sourceFpgaImageId_example";*/ /*let sourceRegion = "sourceRegion_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'description': "description_example", // String | The description for the new AFI.
      //  'name': "name_example", // String | The name for the new AFI. The default is the name of the source AFI.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopyFpgaImagePost(
      incomingOptions.sourceFpgaImageId,
      incomingOptions.sourceRegion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopyImagePost
  /*


&lt;p&gt;Initiates the copy of an AMI from the specified source Region to the current Region. You specify the destination Region by using its endpoint when making the request.&lt;/p&gt; &lt;p&gt;Copies of encrypted backing snapshots for the AMI are encrypted. Copies of unencrypted backing snapshots remain unencrypted, unless you set &lt;code&gt;Encrypted&lt;/code&gt; during the copy operation. You cannot create an unencrypted copy of an encrypted backing snapshot.&lt;/p&gt; &lt;p&gt;For more information about the prerequisites and limits when copying an AMI, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/CopyingAMIs.html\&quot;&gt;Copying an AMI&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCopyImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The name of the new AMI in the destination Region // String | The ID of the AMI to copy // String | The name of the Region that contains the AMI to copy.
    /*let name = "name_example";*/ /*let sourceImageId = "sourceImageId_example";*/ /*let sourceRegion = "sourceRegion_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'description': "description_example", // String | A description for the new AMI in the destination Region.
      encrypted: true, // Boolean | Specifies whether the destination snapshots of the copied image should be encrypted. You can encrypt a copy of an unencrypted snapshot, but you cannot create an unencrypted copy of an encrypted snapshot. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\\\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted volume. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>To specify a CMK, use its key ID, Amazon Resource Name (ARN), alias name, or alias ARN. When using an alias name, prefix it with \\\"alias/\\\". For example:</p> <ul> <li> <p>Key ID: <code>1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Key ARN: <code>arn:aws:kms:us-east-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab</code> </p> </li> <li> <p>Alias name: <code>alias/ExampleAlias</code> </p> </li> <li> <p>Alias ARN: <code>arn:aws:kms:us-east-2:111122223333:alias/ExampleAlias</code> </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to. </p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopyImagePost(
      incomingOptions.name,
      incomingOptions.sourceImageId,
      incomingOptions.sourceRegion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCopySnapshotPost
  /*


&lt;p&gt;Copies a point-in-time snapshot of an EBS volume and stores it in Amazon S3. You can copy the snapshot within the same Region or from one Region to another. You can use the snapshot to create EBS volumes or Amazon Machine Images (AMIs).&lt;/p&gt; &lt;p&gt;Copies of encrypted EBS snapshots remain encrypted. Copies of unencrypted snapshots remain unencrypted, unless you enable encryption for the snapshot copy operation. By default, encrypted snapshot copies use the default AWS Key Management Service (AWS KMS) customer master key (CMK) however, you can specify a different CMK.&lt;/p&gt; &lt;p&gt;To copy an encrypted snapshot that has been shared from another account, you must have permissions for the CMK used to encrypt the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots created by copying another snapshot have an arbitrary volume ID that should not be used for any purpose.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-copy-snapshot.html\&quot;&gt;Copying an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCopySnapshotPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Region that contains the snapshot to be copied // String | The ID of the EBS snapshot to copy.
    /*let sourceRegion = "sourceRegion_example";*/ /*let sourceSnapshotId = "sourceSnapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description for the EBS snapshot.
      //  'destinationRegion': "destinationRegion_example", // String | <p>The destination Region to use in the <code>PresignedUrl</code> parameter of a snapshot copy operation. This parameter is only valid for specifying the destination Region in a <code>PresignedUrl</code> parameter, where it is required.</p> <p>The snapshot copy is sent to the regional endpoint that you sent the HTTP request to (for example, <code>ec2.us-east-1.amazonaws.com</code>). With the AWS CLI, this is specified using the <code>--region</code> parameter or the default Region in your AWS configuration file.</p>
      encrypted: true, // Boolean | To encrypt a copy of an unencrypted snapshot if encryption by default is not enabled, enable encryption using this parameter. Otherwise, omit this parameter. Encrypted snapshots are encrypted, even if you omit this parameter and encryption by default is not enabled. You cannot set this parameter to false. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\\\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p>
      //  'presignedUrl': "presignedUrl_example", // String | <p>When you copy an encrypted source snapshot using the Amazon EC2 Query API, you must supply a pre-signed URL. This parameter is optional for unencrypted snapshots. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Query-Requests.html\\\">Query Requests</a>.</p> <p>The <code>PresignedUrl</code> should use the snapshot source endpoint, the <code>CopySnapshot</code> action, and include the <code>SourceRegion</code>, <code>SourceSnapshotId</code>, and <code>DestinationRegion</code> parameters. The <code>PresignedUrl</code> must be signed using AWS Signature Version 4. Because EBS snapshots are stored in Amazon S3, the signing algorithm for this parameter uses the same logic that is described in <a href=\\\"https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html\\\">Authenticating Requests by Using Query Parameters (AWS Signature Version 4)</a> in the <i>Amazon Simple Storage Service API Reference</i>. An invalid or improperly signed <code>PresignedUrl</code> will cause the copy operation to fail asynchronously, and the snapshot will move to an <code>error</code> state.</p>
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the new snapshot.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCopySnapshotPost(
      incomingOptions.sourceRegion,
      incomingOptions.sourceSnapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateCapacityReservationPost
  /*


&lt;p&gt;Creates a new Capacity Reservation with the specified attributes.&lt;/p&gt; &lt;p&gt;Capacity Reservations enable you to reserve capacity for your Amazon EC2 instances in a specific Availability Zone for any duration. This gives you the flexibility to selectively add capacity reservations and still get the Regional RI discounts for that usage. By creating Capacity Reservations, you ensure that you always have access to Amazon EC2 capacity when you need it, for as long as you need it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-capacity-reservations.html\&quot;&gt;Capacity Reservations&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Your request to create a Capacity Reservation could fail if Amazon EC2 does not have sufficient capacity to fulfill the request. If your request fails due to Amazon EC2 capacity constraints, either try again at a later time, try in a different Availability Zone, or request a smaller capacity reservation. If your application is flexible across instance types and sizes, try to create a Capacity Reservation with different instance attributes.&lt;/p&gt; &lt;p&gt;Your request could also fail if the requested quantity exceeds your On-Demand Instance limit for the selected instance type. If your request fails due to limit constraints, increase your On-Demand Instance limit for the required instance type and try again. For more information about increasing your instance limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-resource-limits.html\&quot;&gt;Amazon EC2 Service Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateCapacityReservationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The instance type for which to reserve capacity. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\\\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i> // String | The type of operating system for which to reserve capacity // Number | The number of instances for which to reserve capacity.
    /*let instanceType = "instanceType_example";*/ /*let instancePlatform = "instancePlatform_example";*/ /*let instanceCount = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone in which to create the Capacity Reservation.
      //  'availabilityZoneId': "availabilityZoneId_example", // String | The ID of the Availability Zone in which to create the Capacity Reservation.
      //  'tenancy': "tenancy_example", // String | <p>Indicates the tenancy of the Capacity Reservation. A Capacity Reservation can have one of the following tenancy settings:</p> <ul> <li> <p> <code>default</code> - The Capacity Reservation is created on hardware that is shared with other AWS accounts.</p> </li> <li> <p> <code>dedicated</code> - The Capacity Reservation is created on single-tenant hardware that is dedicated to a single AWS account.</p> </li> </ul>
      ebsOptimized: true, // Boolean | Indicates whether the Capacity Reservation supports EBS-optimized instances. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS- optimized instance.
      ephemeralStorage: true, // Boolean | Indicates whether the Capacity Reservation supports instances with temporary, block-level storage.
      endDate: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p> <p>If the <code>EndDateType</code> is <code>limited</code>, the Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p>
      //  'endDateType': "endDateType_example", // String | <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> if the <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if the <code>EndDateType</code> value is <code>limited</code>.</p> </li> </ul>
      //  'instanceMatchCriteria': "instanceMatchCriteria_example", // String | <p>Indicates the type of instance launches that the Capacity Reservation accepts. The options include:</p> <ul> <li> <p> <code>open</code> - The Capacity Reservation automatically matches all instances that have matching attributes (instance type, platform, and Availability Zone). Instances that have matching attributes run in the Capacity Reservation automatically without specifying any additional parameters.</p> </li> <li> <p> <code>targeted</code> - The Capacity Reservation only accepts instances that have matching attributes (instance type, platform, and Availability Zone), and explicitly target the Capacity Reservation. This ensures that only permitted instances can use the reserved capacity. </p> </li> </ul> <p>Default: <code>open</code> </p>
      //  'tagSpecifications': "tagSpecifications_example", // [String] | The tags to apply to the Capacity Reservation during launch.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateCapacityReservationPost(
      incomingOptions.instanceType,
      incomingOptions.instancePlatform,
      incomingOptions.instanceCount,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateClientVpnEndpointPost
  /*


Creates a Client VPN endpoint. A Client VPN endpoint is the resource you create and configure to enable and manage client VPN sessions. It is the destination endpoint at which all client VPN sessions are terminated.

 */
  actionCreateClientVpnEndpointPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater // String | The ARN of the server certificate. For more information, see the <a href=\\\"https://docs.aws.amazon.com/acm/latest/userguide/\\\">AWS Certificate Manager User Guide</a> // [String] | Information about the authentication method to be used to authenticate clients.
    /*let clientCidrBlock = "clientCidrBlock_example";*/ /*let serverCertificateArn = "serverCertificateArn_example";*/ /*let authentication = "authentication_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'connectionLogOptionsEnabled': "connectionLogOptionsEnabled_example", // String | Describes the client connection logging options for the Client VPN endpoint. Indicates whether connection logging is enabled.
      //  'connectionLogOptionsCloudwatchLogGroup': "connectionLogOptionsCloudwatchLogGroup_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log group.
      //  'connectionLogOptionsCloudwatchLogStream': "connectionLogOptionsCloudwatchLogStream_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log stream to which the connection data is published.
      //  'dnsServers': "dnsServers_example", // [String] | Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address configured on the device is used for the DNS server.
      //  'transportProtocol': "transportProtocol_example", // String | <p>The transport protocol to be used by the VPN session.</p> <p>Default value: <code>udp</code> </p>
      //  'description': "description_example", // String | A brief description of the Client VPN endpoint.
      splitTunnel: true, // Boolean | <p>Indicates whether split-tunnel is enabled on the AWS Client VPN endpoint.</p> <p>By default, split-tunnel on a VPN endpoint is disabled.</p> <p>For information about split-tunnel VPN endpoints, see <a href=\\\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\\\">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      //  'tagSpecification': "tagSpecification_example" // [String] | The tags to apply to the Client VPN endpoint during creation.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateClientVpnEndpointPost(
      incomingOptions.clientCidrBlock,
      incomingOptions.serverCertificateArn,
      incomingOptions.authentication,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateClientVpnRoutePost
  /*


Adds a route to a network to a Client VPN endpoint. Each Client VPN endpoint has a route table that describes the available destination network routes. Each route in the route table specifies the path for traﬃc to speciﬁc resources or networks.

 */
  actionCreateClientVpnRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which to add the route // String | <p>The IPv4 address range, in CIDR notation, of the route destination. For example:</p> <ul> <li> <p>To add a route for Internet access, enter <code>0.0.0.0/0</code> </p> </li> <li> <p>To add a route for a peered VPC, enter the peered VPC's IPv4 CIDR range</p> </li> <li> <p>To add a route for an on-premises network, enter the AWS Site-to-Site VPN connection's IPv4 CIDR range</p> </li> </ul> <p>Route address ranges cannot overlap with the CIDR range specified for client allocation.</p // String | The ID of the subnet through which you want to route traffic. The specified subnet must be an existing target network of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let targetVpcSubnetId = "targetVpcSubnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A brief description of the route.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateClientVpnRoutePost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.targetVpcSubnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateCustomerGatewayPost
  /*


&lt;p&gt;Provides information to AWS about your VPN customer gateway device. The customer gateway is the appliance at your end of the VPN connection. (The device on the AWS side of the VPN connection is the virtual private gateway.) You must provide the Internet-routable IP address of the customer gateway&#39;s external interface. The IP address must be static and can be behind a device performing network address translation (NAT).&lt;/p&gt; &lt;p&gt;For devices that use Border Gateway Protocol (BGP), you can also provide the device&#39;s BGP Autonomous System Number (ASN). You can use an existing ASN assigned to your network. If you don&#39;t have an ASN already, you can use a private ASN (in the 64512 - 65534 range).&lt;/p&gt; &lt;note&gt; &lt;p&gt;Amazon EC2 supports all 2-byte ASN numbers in the range of 1 - 65534, with the exception of 7224, which is reserved in the &lt;code&gt;us-east-1&lt;/code&gt; Region, and 9059, which is reserved in the &lt;code&gt;eu-west-1&lt;/code&gt; Region.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;important&gt; &lt;p&gt;To create more than one customer gateway with the same VPN type, IP address, and BGP ASN, specify a unique device name for each customer gateway. Identical requests return information about the existing customer gateway and do not create new customer gateways.&lt;/p&gt; &lt;/important&gt;

 */
  actionCreateCustomerGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | <p>For devices that support BGP, the customer gateway's BGP ASN.</p> <p>Default: 65000</p // String | The type of VPN connection that this customer gateway supports (<code>ipsec.1</code>).
    /*let bgpAsn = 56;*/ /*let type = "type_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'ipAddress': "ipAddress_example", // String | The Internet-routable IP address for the customer gateway's outside interface. The address must be static.
      //  'certificateArn': "certificateArn_example", // String | The Amazon Resource Name (ARN) for the customer gateway certificate.
      //  'deviceName': "deviceName_example", // String | <p>A name for the customer gateway device.</p> <p>Length Constraints: Up to 255 characters.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateCustomerGatewayPost(
      incomingOptions.bgpAsn,
      incomingOptions.type,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDefaultSubnetPost
  /*


Creates a default subnet with a size &lt;code&gt;/20&lt;/code&gt; IPv4 CIDR block in the specified Availability Zone in your default VPC. You can have only one default subnet per Availability Zone. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html#create-default-subnet\&quot;&gt;Creating a Default Subnet&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionCreateDefaultSubnetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to create the default subnet.
    /*let availabilityZone = "availabilityZone_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDefaultSubnetPost(
      incomingOptions.availabilityZone,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDefaultVpcPost
  /*


&lt;p&gt;Creates a default VPC with a size &lt;code&gt;/16&lt;/code&gt; IPv4 CIDR block and a default subnet in each Availability Zone. For more information about the components of a default VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/default-vpc.html\&quot;&gt;Default VPC and Default Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. You cannot specify the components of the default VPC yourself.&lt;/p&gt; &lt;p&gt;If you deleted your previous default VPC, you can create a default VPC. You cannot have more than one default VPC per Region.&lt;/p&gt; &lt;p&gt;If your account supports EC2-Classic, you cannot use this action to create a default VPC in a Region that supports EC2-Classic. If you want a default VPC in a Region that supports EC2-Classic, see \&quot;I really want a default VPC for my existing EC2 account. Is that possible?\&quot; in the &lt;a href&#x3D;\&quot;http://aws.amazon.com/vpc/faqs/#Default_VPCs\&quot;&gt;Default VPCs FAQ&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateDefaultVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDefaultVpcPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateDhcpOptionsPost
  /*


&lt;p&gt;Creates a set of DHCP options for your VPC. After creating the set, you must associate it with the VPC, causing all existing and new instances that you launch in the VPC to use this set of DHCP options. The following are the individual DHCP options you can specify. For more information about the options, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name-servers&lt;/code&gt; - The IP addresses of up to four domain name servers, or AmazonProvidedDNS. The default DHCP option set specifies AmazonProvidedDNS. If specifying more than one domain name server, specify the IP addresses in a single parameter, separated by commas. To have your instance receive a custom DNS hostname as specified in &lt;code&gt;domain-name&lt;/code&gt;, you must set &lt;code&gt;domain-name-servers&lt;/code&gt; to a custom DNS server.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;domain-name&lt;/code&gt; - If you&#39;re using AmazonProvidedDNS in &lt;code&gt;us-east-1&lt;/code&gt;, specify &lt;code&gt;ec2.internal&lt;/code&gt;. If you&#39;re using AmazonProvidedDNS in another Region, specify &lt;code&gt;region.compute.internal&lt;/code&gt; (for example, &lt;code&gt;ap-northeast-1.compute.internal&lt;/code&gt;). Otherwise, specify a domain name (for example, &lt;code&gt;MyCompany.com&lt;/code&gt;). This value is used to complete unqualified DNS hostnames. &lt;b&gt;Important&lt;/b&gt;: Some Linux operating systems accept multiple domain names separated by spaces. However, Windows and other Linux operating systems treat the value as a single domain, which results in unexpected behavior. If your DHCP options set is associated with a VPC that has instances with multiple operating systems, specify only one domain name.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;ntp-servers&lt;/code&gt; - The IP addresses of up to four Network Time Protocol (NTP) servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-name-servers&lt;/code&gt; - The IP addresses of up to four NetBIOS name servers.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;netbios-node-type&lt;/code&gt; - The NetBIOS node type (1, 2, 4, or 8). We recommend that you specify 2 (broadcast and multicast are not currently supported). For more information about these node types, see &lt;a href&#x3D;\&quot;http://www.ietf.org/rfc/rfc2132.txt\&quot;&gt;RFC 2132&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Your VPC automatically starts out with a set of DHCP options that includes only a DNS server that we provide (AmazonProvidedDNS). If you create a set of options, and if your VPC has an internet gateway, make sure to set the &lt;code&gt;domain-name-servers&lt;/code&gt; option either to &lt;code&gt;AmazonProvidedDNS&lt;/code&gt; or to a domain name server of your choice. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateDhcpOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | A DHCP configuration option.
    /*let dhcpConfiguration = "dhcpConfiguration_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateDhcpOptionsPost(
      incomingOptions.dhcpConfiguration,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateEgressOnlyInternetGatewayPost
  /*


[IPv6 only] Creates an egress-only internet gateway for your VPC. An egress-only internet gateway is used to enable outbound communication over IPv6 from instances in your VPC to the internet, and prevents hosts outside of your VPC from initiating an IPv6 connection with your instance.

 */
  actionCreateEgressOnlyInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC for which to create the egress-only internet gateway.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateEgressOnlyInternetGatewayPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFleetPost
  /*


&lt;p&gt;Launches an EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can create a single EC2 Fleet that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet.html\&quot;&gt;Launching an EC2 Fleet&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateFleetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The configuration for the EC2 Fleet.
    /*let launchTemplateConfigs = "launchTemplateConfigs_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
      //  'spotOptionsAllocationStrategy': "spotOptionsAllocationStrategy_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the EC2 Fleet.</p> <p>If the allocation strategy is <code>lowest-price</code>, EC2 Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.</p> <p>If the allocation strategy is <code>diversified</code>, EC2 Fleet launches instances from all of the Spot Instance pools that you specify.</p> <p>If the allocation strategy is <code>capacity-optimized</code>, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p>
      //  'spotOptionsInstanceInterruptionBehavior': "spotOptionsInstanceInterruptionBehavior_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
      //  'spotOptionsInstancePoolsToUseCount': "spotOptionsInstancePoolsToUseCount_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. EC2 Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
      //  'spotOptionsSingleInstanceType': "spotOptionsSingleInstanceType_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. Indicates that the fleet uses a single instance type to launch all Spot Instances in the fleet. Supported only for fleets of type <code>instant</code>.
      //  'spotOptionsSingleAvailabilityZone': "spotOptionsSingleAvailabilityZone_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. Indicates that the fleet launches all Spot Instances into a single Availability Zone. Supported only for fleets of type <code>instant</code>.
      //  'spotOptionsMinTargetCapacity': "spotOptionsMinTargetCapacity_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The minimum target capacity for Spot Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      //  'spotOptionsMaxTotalPrice': "spotOptionsMaxTotalPrice_example", // String | Describes the configuration of Spot Instances in an EC2 Fleet request. The maximum amount per hour for Spot Instances that you're willing to pay.
      //  'onDemandOptionsAllocationStrategy': "onDemandOptionsAllocationStrategy_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowest-price</code>, EC2 Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, EC2 Fleet uses the priority that you assigned to each launch template override, launching the highest priority first. If you do not specify a value, EC2 Fleet defaults to <code>lowest-price</code>.
      //  'onDemandOptionsCapacityReservationOptions': "onDemandOptionsCapacityReservationOptions_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The strategy for using unused Capacity Reservations for fulfilling On-Demand capacity. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsSingleInstanceType': "onDemandOptionsSingleInstanceType_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. Indicates that the fleet uses a single instance type to launch all On-Demand Instances in the fleet. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsSingleAvailabilityZone': "onDemandOptionsSingleAvailabilityZone_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. Indicates that the fleet launches all On-Demand Instances into a single Availability Zone. Supported only for fleets of type <code>instant</code>.
      //  'onDemandOptionsMinTargetCapacity': "onDemandOptionsMinTargetCapacity_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The minimum target capacity for On-Demand Instances in the fleet. If the minimum target capacity is not reached, the fleet launches no instances.
      //  'onDemandOptionsMaxTotalPrice': "onDemandOptionsMaxTotalPrice_example", // String | Describes the configuration of On-Demand Instances in an EC2 Fleet. The maximum amount per hour for On-Demand Instances that you're willing to pay.
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      //  'targetCapacitySpecificationTotalTargetCapacity': "targetCapacitySpecificationTotalTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of units to request, filled using <code>DefaultTargetCapacityType</code>.
      //  'targetCapacitySpecificationOnDemandTargetCapacity': "targetCapacitySpecificationOnDemandTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of On-Demand units to request.
      //  'targetCapacitySpecificationSpotTargetCapacity': "targetCapacitySpecificationSpotTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of Spot units to request.
      //  'targetCapacitySpecificationDefaultTargetCapacityType': "targetCapacitySpecificationDefaultTargetCapacityType_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.
      terminateInstancesWithExpiration: true, // Boolean | Indicates whether running instances should be terminated when the EC2 Fleet expires.
      //  'type': "type_example", // String | The type of the request. By default, the EC2 Fleet places an asynchronous request for your desired capacity, and maintains it by replenishing interrupted Spot Instances (<code>maintain</code>). A value of <code>instant</code> places a synchronous one-time request, and returns errors for any instances that could not be launched. A value of <code>request</code> places an asynchronous one-time request without maintaining capacity or submitting requests in alternative capacity pools if capacity is unavailable. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-configuration-strategies.html#ec2-fleet-request-type\\\">EC2 Fleet Request Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      validFrom: new Date("2013-10-20T19:20:30+01:00"), // Date | The start date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). The default is to start fulfilling the request immediately.
      validUntil: new Date("2013-10-20T19:20:30+01:00"), // Date | The end date and time of the request, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). At this point, no new EC2 Fleet requests are placed or able to fulfill the request. If no value is specified, the request remains until you cancel it.
      replaceUnhealthyInstances: true // Boolean | Indicates whether EC2 Fleet should replace unhealthy instances.
      //  'tagSpecification': "tagSpecification_example" // [String] | The key-value pair for tagging the EC2 Fleet request on creation. The value for <code>ResourceType</code> must be <code>fleet</code>, otherwise the fleet request fails. To tag instances at launch, specify the tags in the <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html#create-launch-template\">launch template</a>. For information about tagging after launch, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources\">Tagging Your Resources</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFleetPost(
      incomingOptions.launchTemplateConfigs,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFlowLogsPost
  /*


&lt;p&gt;Creates one or more flow logs to capture information about IP traffic for a specific network interface, subnet, or VPC. &lt;/p&gt; &lt;p&gt;Flow log data for a monitored network interface is recorded as flow log records, which are log events consisting of fields that describe the traffic flow. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\&quot;&gt;Flow Log Records&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When publishing to CloudWatch Logs, flow log records are published to a log group, and each network interface has a unique log stream in the log group. When publishing to Amazon S3, flow log records for all of the monitored network interfaces are published to a single log file object that is stored in the specified bucket.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html\&quot;&gt;VPC Flow Logs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateFlowLogsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>The ID of the subnet, network interface, or VPC for which you want to create a flow log.</p> <p>Constraints: Maximum of 1000 resources</p // String | The type of resource for which to create the flow log. For example, if you specified a VPC ID for the <code>ResourceId</code> property, specify <code>VPC</code> for this property // String | The type of traffic to log. You can log traffic that the resource accepts or rejects, or all traffic.
    /*let resourceId = "resourceId_example";*/ /*let resourceType = "resourceType_example";*/ /*let trafficType = "trafficType_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      //  'deliverLogsPermissionArn': "deliverLogsPermissionArn_example", // String | <p>The ARN for the IAM role that permits Amazon EC2 to publish flow logs to a CloudWatch Logs log group in your account.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
      //  'logGroupName': "logGroupName_example", // String | <p>The name of a new or existing CloudWatch Logs log group where Amazon EC2 publishes your flow logs.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p>
      //  'logDestinationType': "logDestinationType_example", // String | <p>Specifies the type of destination to which the flow log data is to be published. Flow log data can be published to CloudWatch Logs or Amazon S3. To publish flow log data to CloudWatch Logs, specify <code>cloud-watch-logs</code>. To publish flow log data to Amazon S3, specify <code>s3</code>.</p> <p>If you specify <code>LogDestinationType</code> as <code>s3</code>, do not specify <code>DeliverLogsPermissionArn</code> or <code>LogGroupName</code>.</p> <p>Default: <code>cloud-watch-logs</code> </p>
      //  'logDestination': "logDestination_example", // String | <p>Specifies the destination to which the flow log data is to be published. Flow log data can be published to a CloudWatch Logs log group or an Amazon S3 bucket. The value specified for this parameter depends on the value specified for <code>LogDestinationType</code>.</p> <p>If <code>LogDestinationType</code> is not specified or <code>cloud-watch-logs</code>, specify the Amazon Resource Name (ARN) of the CloudWatch Logs log group. For example, to publish to a log group called <code>my-logs</code>, specify <code>arn:aws:logs:us-east-1:123456789012:log-group:my-logs</code>. Alternatively, use <code>LogGroupName</code> instead.</p> <p>If LogDestinationType is <code>s3</code>, specify the ARN of the Amazon S3 bucket. You can also specify a subfolder in the bucket. To specify a subfolder in the bucket, use the following ARN format: <code>bucket_ARN/subfolder_name/</code>. For example, to specify a subfolder named <code>my-logs</code> in a bucket named <code>my-bucket</code>, use the following ARN: <code>arn:aws:s3:::my-bucket/my-logs/</code>. You cannot use <code>AWSLogs</code> as a subfolder name. This is a reserved term.</p>
      //  'logFormat': "logFormat_example" // String | <p>The fields to include in the flow log record, in the order in which they should appear. For a list of available fields, see <a href=\\\"https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs.html#flow-log-records\\\">Flow Log Records</a>. If you omit this parameter, the flow log is created using the default format. If you specify this parameter, you must specify at least one field.</p> <p>Specify the fields using the <code>${field-id}</code> format, separated by spaces. For the AWS CLI, use single quotation marks (' ') to surround the parameter value.</p> <p>Only applicable to flow logs that are published to an Amazon S3 bucket.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFlowLogsPost(
      incomingOptions.resourceId,
      incomingOptions.resourceType,
      incomingOptions.trafficType,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateFpgaImagePost
  /*


&lt;p&gt;Creates an Amazon FPGA Image (AFI) from the specified design checkpoint (DCP).&lt;/p&gt; &lt;p&gt;The create operation is asynchronous. To verify that the AFI is ready for use, check the output logs.&lt;/p&gt; &lt;p&gt;An AFI contains the FPGA bitstream that is ready to download to an FPGA. You can securely deploy an AFI on multiple FPGA-accelerated instances. For more information, see the &lt;a href&#x3D;\&quot;https://github.com/aws/aws-fpga/\&quot;&gt;AWS FPGA Hardware Development Kit&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateFpgaImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'inputStorageLocationBucket': "inputStorageLocationBucket_example", // String | Describes a storage location in Amazon S3. The name of the S3 bucket.
      //  'inputStorageLocationKey': "inputStorageLocationKey_example", // String | Describes a storage location in Amazon S3. The key.
      //  'logsStorageLocationBucket': "logsStorageLocationBucket_example", // String | Describes a storage location in Amazon S3. The name of the S3 bucket.
      //  'logsStorageLocationKey': "logsStorageLocationKey_example", // String | Describes a storage location in Amazon S3. The key.
      //  'description': "description_example", // String | A description for the AFI.
      //  'name': "name_example", // String | A name for the AFI.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
      //  'tagSpecification': "tagSpecification_example" // [String] | The tags to apply to the FPGA image during creation.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateFpgaImagePost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateImagePost
  /*


&lt;p&gt;Creates an Amazon EBS-backed AMI from an Amazon EBS-backed instance that is either running or stopped.&lt;/p&gt; &lt;p&gt;If you customized your instance with instance store volumes or EBS volumes in addition to the root device volume, the new AMI contains block device mapping information for those volumes. When you launch an instance from this new AMI, the instance automatically launches with those additional volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami-ebs.html\&quot;&gt;Creating Amazon EBS-Backed Linux AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance // String | <p>A name for the new image.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    /*let instanceId = "instanceId_example";*/ /*let name = "name_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'blockDeviceMapping': "blockDeviceMapping_example", // [String] | The block device mappings. This parameter cannot be used to modify the encryption status of existing volumes or snapshots. To create an AMI with encrypted snapshots, use the <a>CopyImage</a> action.
      //  'description': "description_example", // String | A description for the new image.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      noReboot: true // Boolean | By default, Amazon EC2 attempts to shut down and reboot the instance before creating the image. If the 'No Reboot' option is set, Amazon EC2 doesn't shut down the instance before creating the image. When this option is used, file system integrity on the created image can't be guaranteed.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateImagePost(
      incomingOptions.instanceId,
      incomingOptions.name,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateInstanceExportTaskPost
  /*


&lt;p&gt;Exports a running or stopped instance to an S3 bucket.&lt;/p&gt; &lt;p&gt;For information about the supported operating systems, image formats, and known limitations for the types of instances you can export, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport.html\&quot;&gt;Exporting an Instance as a VM Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateInstanceExportTaskPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'description': "description_example", // String | A description for the conversion task or the resource being exported. The maximum length is 255 bytes.
      //  'exportToS3ContainerFormat': "exportToS3ContainerFormat_example", // String | Describes an instance export task. The container format used to combine disk images with metadata (such as OVF). If absent, only the disk image is exported.
      //  'exportToS3DiskImageFormat': "exportToS3DiskImageFormat_example", // String | Describes an instance export task. The format for the exported image.
      //  'exportToS3S3Bucket': "exportToS3S3Bucket_example", // String | Describes an instance export task. The S3 bucket for the destination image. The destination bucket must exist and grant WRITE and READ_ACP permissions to the AWS account <code>vm-import-export@amazon.com</code>.
      //  'exportToS3S3Prefix': "exportToS3S3Prefix_example", // String | Describes an instance export task. The image is written to a single object in the S3 bucket at the S3 key s3prefix + exportTaskId + '.' + diskImageFormat.
      //  'targetEnvironment': "targetEnvironment_example" // String | The target virtualization environment.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateInstanceExportTaskPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateInternetGatewayPost
  /*


&lt;p&gt;Creates an internet gateway for use with a VPC. After creating the internet gateway, you attach it to a VPC using &lt;a&gt;AttachInternetGateway&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about your VPC and internet gateway, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/\&quot;&gt;Amazon Virtual Private Cloud User Guide&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateInternetGatewayPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateKeyPairPost
  /*


&lt;p&gt;Creates a 2048-bit RSA key pair with the specified name. Amazon EC2 stores the public key and displays the private key for you to save to a file. The private key is returned as an unencrypted PEM encoded PKCS#1 private key. If a key with the specified name already exists, Amazon EC2 returns an error.&lt;/p&gt; &lt;p&gt;You can have up to five thousand key pairs per Region.&lt;/p&gt; &lt;p&gt;The key pair returned to you is available only in the Region in which you create it. If you prefer, you can create your own key pair using a third-party tool and upload it to any Region using &lt;a&gt;ImportKeyPair&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateKeyPairPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>A unique name for the key pair.</p> <p>Constraints: Up to 255 ASCII characters</p>
    /*let keyName = "keyName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateKeyPairPost(
      incomingOptions.keyName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLaunchTemplatePost
  /*


Creates a launch template. A launch template contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify a launch template instead of providing the launch parameters in the request.

 */
  actionCreateLaunchTemplatePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | A name for the launch template.
    /*let launchTemplateName = "launchTemplateName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'versionDescription': "versionDescription_example", // String | A description for the first version of the launch template.
      //  'launchTemplateDataKernelId': "launchTemplateDataKernelId_example", // String | The information to include in the launch template. <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataEbsOptimized': "launchTemplateDataEbsOptimized_example", // String | The information to include in the launch template. Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
      //  'launchTemplateDataIamInstanceProfile': "launchTemplateDataIamInstanceProfile_example", // String | The information to include in the launch template. The IAM instance profile.
      //  'launchTemplateDataBlockDeviceMappings': "launchTemplateDataBlockDeviceMappings_example", // [String] | The information to include in the launch template. <p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
      //  'launchTemplateDataNetworkInterfaces': "launchTemplateDataNetworkInterfaces_example", // [String] | The information to include in the launch template. One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'launchTemplateDataImageId': "launchTemplateDataImageId_example", // String | The information to include in the launch template. The ID of the AMI.
      //  'launchTemplateDataInstanceType': "launchTemplateDataInstanceType_example", // String | The information to include in the launch template. The instance type. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\\\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataKeyName': "launchTemplateDataKeyName_example", // String | The information to include in the launch template. <p>The name of the key pair. You can create a key pair using <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\\\">CreateKeyPair</a> or <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\\\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'launchTemplateDataMonitoring': "launchTemplateDataMonitoring_example", // String | The information to include in the launch template. The monitoring for the instance.
      //  'launchTemplateDataPlacement': "launchTemplateDataPlacement_example", // String | The information to include in the launch template. The placement for the instance.
      //  'launchTemplateDataRamDiskId': "launchTemplateDataRamDiskId_example", // String | The information to include in the launch template. <p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataDisableApiTermination': "launchTemplateDataDisableApiTermination_example", // String | The information to include in the launch template. If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\\\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.
      //  'launchTemplateDataInstanceInitiatedShutdownBehavior': "launchTemplateDataInstanceInitiatedShutdownBehavior_example", // String | The information to include in the launch template. <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      //  'launchTemplateDataUserData': "launchTemplateDataUserData_example", // String | The information to include in the launch template. The Base64-encoded user data to make available to the instance. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\\\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\\\">Adding User Data</a> (Windows).
      //  'launchTemplateDataTagSpecifications': "launchTemplateDataTagSpecifications_example", // [String] | The information to include in the launch template. The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      //  'launchTemplateDataElasticGpuSpecifications': "launchTemplateDataElasticGpuSpecifications_example", // [String] | The information to include in the launch template. An elastic GPU to associate with the instance.
      //  'launchTemplateDataElasticInferenceAccelerators': "launchTemplateDataElasticInferenceAccelerators_example", // [String] | The information to include in the launch template.  The elastic inference accelerator for the instance.
      //  'launchTemplateDataSecurityGroupIds': "launchTemplateDataSecurityGroupIds_example", // [String] | The information to include in the launch template. One or more security group IDs. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataSecurityGroups': "launchTemplateDataSecurityGroups_example", // [String] | The information to include in the launch template. [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataInstanceMarketOptions': "launchTemplateDataInstanceMarketOptions_example", // String | The information to include in the launch template. The market (purchasing) option for the instances.
      //  'launchTemplateDataCreditSpecification': "launchTemplateDataCreditSpecification_example", // String | The information to include in the launch template. The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
      //  'launchTemplateDataCpuOptions': "launchTemplateDataCpuOptions_example", // String | The information to include in the launch template. The CPU options for the instance. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\\\">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataCapacityReservationSpecification': "launchTemplateDataCapacityReservationSpecification_example", // String | The information to include in the launch template. The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      //  'launchTemplateDataLicenseSpecifications': "launchTemplateDataLicenseSpecifications_example", // [String] | The information to include in the launch template. The license configurations.
      //  'launchTemplateDataHibernationOptions': "launchTemplateDataHibernationOptions_example", // String | The information to include in the launch template. Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\\\">hibernation prerequisites</a>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\\\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'tagSpecification': "tagSpecification_example" // [String] | The tags to apply to the launch template during creation.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLaunchTemplatePost(
      incomingOptions.launchTemplateName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLaunchTemplateVersionPost
  /*


&lt;p&gt;Creates a new version for a launch template. You can specify an existing version of launch template from which to base the new version.&lt;/p&gt; &lt;p&gt;Launch template versions are numbered in the order in which they are created. You cannot specify, change, or replace the numbering of launch template versions.&lt;/p&gt;

 */
  actionCreateLaunchTemplateVersionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'sourceVersion': "sourceVersion_example", // String | The version number of the launch template version on which to base the new version. The new version inherits the same launch parameters as the source version, except for parameters that you specify in <code>LaunchTemplateData</code>. Snapshots applied to the block device mapping are ignored when creating a new version unless they are explicitly included.
      //  'versionDescription': "versionDescription_example", // String | A description for the version of the launch template.
      //  'launchTemplateDataKernelId': "launchTemplateDataKernelId_example", // String | The information to include in the launch template. <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataEbsOptimized': "launchTemplateDataEbsOptimized_example", // String | The information to include in the launch template. Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.
      //  'launchTemplateDataIamInstanceProfile': "launchTemplateDataIamInstanceProfile_example", // String | The information to include in the launch template. The IAM instance profile.
      //  'launchTemplateDataBlockDeviceMappings': "launchTemplateDataBlockDeviceMappings_example", // [String] | The information to include in the launch template. <p>The block device mapping.</p> <important> <p>Supplying both a snapshot ID and an encryption value as arguments for block-device mapping results in an error. This is because only blank volumes can be encrypted on start, and these are not created from a snapshot. If a snapshot is the basis for the volume, it contains data by definition and its encryption status cannot be changed using this action.</p> </important>
      //  'launchTemplateDataNetworkInterfaces': "launchTemplateDataNetworkInterfaces_example", // [String] | The information to include in the launch template. One or more network interfaces. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'launchTemplateDataImageId': "launchTemplateDataImageId_example", // String | The information to include in the launch template. The ID of the AMI.
      //  'launchTemplateDataInstanceType': "launchTemplateDataInstanceType_example", // String | The information to include in the launch template. The instance type. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\\\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataKeyName': "launchTemplateDataKeyName_example", // String | The information to include in the launch template. <p>The name of the key pair. You can create a key pair using <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\\\">CreateKeyPair</a> or <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\\\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'launchTemplateDataMonitoring': "launchTemplateDataMonitoring_example", // String | The information to include in the launch template. The monitoring for the instance.
      //  'launchTemplateDataPlacement': "launchTemplateDataPlacement_example", // String | The information to include in the launch template. The placement for the instance.
      //  'launchTemplateDataRamDiskId': "launchTemplateDataRamDiskId_example", // String | The information to include in the launch template. <p>The ID of the RAM disk.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\">User Provided Kernels</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'launchTemplateDataDisableApiTermination': "launchTemplateDataDisableApiTermination_example", // String | The information to include in the launch template. If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\\\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.
      //  'launchTemplateDataInstanceInitiatedShutdownBehavior': "launchTemplateDataInstanceInitiatedShutdownBehavior_example", // String | The information to include in the launch template. <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      //  'launchTemplateDataUserData': "launchTemplateDataUserData_example", // String | The information to include in the launch template. The Base64-encoded user data to make available to the instance. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\\\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\\\">Adding User Data</a> (Windows).
      //  'launchTemplateDataTagSpecifications': "launchTemplateDataTagSpecifications_example", // [String] | The information to include in the launch template. The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      //  'launchTemplateDataElasticGpuSpecifications': "launchTemplateDataElasticGpuSpecifications_example", // [String] | The information to include in the launch template. An elastic GPU to associate with the instance.
      //  'launchTemplateDataElasticInferenceAccelerators': "launchTemplateDataElasticInferenceAccelerators_example", // [String] | The information to include in the launch template.  The elastic inference accelerator for the instance.
      //  'launchTemplateDataSecurityGroupIds': "launchTemplateDataSecurityGroupIds_example", // [String] | The information to include in the launch template. One or more security group IDs. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataSecurityGroups': "launchTemplateDataSecurityGroups_example", // [String] | The information to include in the launch template. [EC2-Classic, default VPC] One or more security group names. For a nondefault VPC, you must use security group IDs instead. You cannot specify both a security group ID and security name in the same request.
      //  'launchTemplateDataInstanceMarketOptions': "launchTemplateDataInstanceMarketOptions_example", // String | The information to include in the launch template. The market (purchasing) option for the instances.
      //  'launchTemplateDataCreditSpecification': "launchTemplateDataCreditSpecification_example", // String | The information to include in the launch template. The credit option for CPU usage of the instance. Valid for T2 or T3 instances only.
      //  'launchTemplateDataCpuOptions': "launchTemplateDataCpuOptions_example", // String | The information to include in the launch template. The CPU options for the instance. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-optimize-cpu.html\\\">Optimizing CPU Options</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'launchTemplateDataCapacityReservationSpecification': "launchTemplateDataCapacityReservationSpecification_example", // String | The information to include in the launch template. The Capacity Reservation targeting option. If you do not specify this parameter, the instance's Capacity Reservation preference defaults to <code>open</code>, which enables it to run in any open Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).
      //  'launchTemplateDataLicenseSpecifications': "launchTemplateDataLicenseSpecifications_example", // [String] | The information to include in the launch template. The license configurations.
      //  'launchTemplateDataHibernationOptions': "launchTemplateDataHibernationOptions_example" // String | The information to include in the launch template. Indicates whether an instance is enabled for hibernation. This parameter is valid only if the instance meets the <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\\\">hibernation prerequisites</a>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\\\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLaunchTemplateVersionPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLocalGatewayRoutePost
  /*


Creates a static route for the specified local gateway route table.

 */
  actionCreateLocalGatewayRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for destination matches. Routing decisions are based on the most specific match // String | The ID of the local gateway route table // String | The ID of the virtual interface group.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let localGatewayVirtualInterfaceGroupId = "localGatewayVirtualInterfaceGroupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLocalGatewayRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.localGatewayVirtualInterfaceGroupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateLocalGatewayRouteTableVpcAssociationPost
  /*


Associates the specified VPC with the specified local gateway route table.

 */
  actionCreateLocalGatewayRouteTableVpcAssociationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the local gateway route table // String | The ID of the VPC.
    /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateLocalGatewayRouteTableVpcAssociationPost(
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNatGatewayPost
  /*


Creates a NAT gateway in the specified public subnet. This action creates a network interface in the specified subnet with a private IP address from the IP address range of the subnet. Internet-bound traffic from a private subnet can be routed to the NAT gateway, therefore enabling instances in the private subnet to connect to the internet. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html\&quot;&gt;NAT Gateways&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionCreateNatGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The allocation ID of an Elastic IP address to associate with the NAT gateway. If the Elastic IP address is associated with another resource, you must first disassociate it // String | The subnet in which to create the NAT gateway.
    /*let allocationId = "allocationId_example";*/ /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'clientToken': "clientToken_example" // String | <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.</p> <p>Constraint: Maximum 64 ASCII characters.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNatGatewayPost(
      incomingOptions.allocationId,
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkAclEntryPost
  /*


&lt;p&gt;Creates an entry (a rule) in a network ACL with the specified rule number. Each network ACL has a set of numbered ingress rules and a separate set of numbered egress rules. When determining whether a packet should be allowed in or out of a subnet associated with the ACL, we process the entries in the ACL according to the rule numbers, in ascending order. Each network ACL has a set of ingress rules and a separate set of egress rules.&lt;/p&gt; &lt;p&gt;We recommend that you leave room between the rule numbers (for example, 100, 110, 120, ...), and not number them one right after the other (for example, 101, 102, 103, ...). This makes it easier to add a rule between existing ones without having to renumber the rules.&lt;/p&gt; &lt;p&gt;After you add an entry, you can&#39;t modify it you must either replace it, or create an entry and delete the old one.&lt;/p&gt; &lt;p&gt;For more information about network ACLs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkAclEntryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Boolean | Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet) // String | The ID of the network ACL // String | The protocol number. A value of \\\"-1\\\" means all protocols. If you specify \\\"-1\\\" or a protocol number other than \\\"6\\\" (TCP), \\\"17\\\" (UDP), or \\\"1\\\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \\\"58\\\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \\\"58\\\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code // String | Indicates whether to allow or deny the traffic that matches the rule // Number | <p>The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.</p> <p>Constraints: Positive integer from 1 to 32766. The range 32767 to 65535 is reserved for internal use.</p>
    /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let protocol = "protocol_example";*/ /*let ruleAction = "ruleAction_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cidrBlock': "cidrBlock_example", // String | The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'icmpCode': "icmpCode_example", // String | Describes the ICMP type and code. The ICMP code. A value of -1 means all codes for the specified ICMP type.
      //  'icmpType': "icmpType_example", // String | Describes the ICMP type and code. The ICMP type. A value of -1 means all types.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:db8:1234:1a00::/64</code>).
      //  'portRangeFrom': "portRangeFrom_example", // String | Describes a range of ports. The first port in the range.
      //  'portRangeTo': "portRangeTo_example" // String | Describes a range of ports. The last port in the range.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkAclEntryPost(
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.protocol,
      incomingOptions.ruleAction,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkAclPost
  /*


&lt;p&gt;Creates a network ACL in a VPC. Network ACLs provide an optional layer of security (in addition to security groups) for the instances in your VPC.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkAclPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkAclPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkInterfacePermissionPost
  /*


&lt;p&gt;Grants an AWS-authorized account permission to attach the specified network interface to an instance in their account.&lt;/p&gt; &lt;p&gt;You can grant permission to a single AWS account only, and only one account at a time.&lt;/p&gt;

 */
  actionCreateNetworkInterfacePermissionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface // String | The type of permission to grant.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let permission = "permission_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'awsAccountId': "awsAccountId_example", // String | The AWS account ID.
      //  'awsService': "awsService_example", // String | The AWS service. Currently not supported.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkInterfacePermissionPost(
      incomingOptions.networkInterfaceId,
      incomingOptions.permission,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateNetworkInterfacePost
  /*


&lt;p&gt;Creates a network interface in the specified subnet.&lt;/p&gt; &lt;p&gt;For more information about network interfaces, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html\&quot;&gt;Elastic Network Interfaces&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateNetworkInterfacePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the subnet to associate with the network interface.
    /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description for the network interface.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'securityGroupId': "securityGroupId_example", // [String] | The IDs of one or more security groups.
      ipv6AddressCount: 56, // Number | The number of IPv6 addresses to assign to a network interface. Amazon EC2 automatically selects the IPv6 addresses from the subnet range. You can't use this option if specifying specific IPv6 addresses. If your subnet has the <code>AssignIpv6AddressOnCreation</code> attribute set to <code>true</code>, you can specify <code>0</code> to override this setting.
      //  'ipv6Addresses': "ipv6Addresses_example", // [String] | One or more specific IPv6 addresses from the IPv6 CIDR block range of your subnet. You can't use this option if you're specifying a number of IPv6 addresses.
      //  'privateIpAddress': "privateIpAddress_example", // String | The primary private IPv4 address of the network interface. If you don't specify an IPv4 address, Amazon EC2 selects one for you from the subnet's IPv4 CIDR range. If you specify an IP address, you cannot indicate any IP addresses specified in <code>privateIpAddresses</code> as primary (only one IP address can be designated as primary).
      //  'privateIpAddresses': "privateIpAddresses_example", // [String] | One or more private IPv4 addresses.
      secondaryPrivateIpAddressCount: 56 // Number | <p>The number of secondary private IPv4 addresses to assign to a network interface. When you specify a number of secondary IPv4 addresses, Amazon EC2 selects these IP addresses within the subnet's IPv4 CIDR range. You can't specify this option and specify more than one private IP address using <code>privateIpAddresses</code>.</p> <p>The number of IP addresses you can assign to a network interface varies by instance type. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-eni.html#AvailableIpPerENI\\\">IP Addresses Per ENI Per Instance Type</a> in the <i>Amazon Virtual Private Cloud User Guide</i>.</p>
      //  'interfaceType': "interfaceType_example" // String | Indicates the type of network interface. To create an Elastic Fabric Adapter (EFA), specify <code>efa</code>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/efa.html\\\"> Elastic Fabric Adapter</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateNetworkInterfacePost(
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreatePlacementGroupPost
  /*


&lt;p&gt;Creates a placement group in which to launch instances. The strategy of the placement group determines how the instances are organized within the group. &lt;/p&gt; &lt;p&gt;A &lt;code&gt;cluster&lt;/code&gt; placement group is a logical grouping of instances within a single Availability Zone that benefit from low network latency, high network throughput. A &lt;code&gt;spread&lt;/code&gt; placement group places instances on distinct hardware. A &lt;code&gt;partition&lt;/code&gt; placement group places groups of instances in different partitions, where instances in one partition do not share the same hardware with instances in another partition.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreatePlacementGroupPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupName': "groupName_example", // String | <p>A name for the placement group. Must be unique within the scope of your account for the Region.</p> <p>Constraints: Up to 255 ASCII characters</p>
      //  'strategy': "strategy_example", // String | The placement strategy.
      partitionCount: 56 // Number | The number of partitions. Valid only when <b>Strategy</b> is set to <code>partition</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreatePlacementGroupPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateReservedInstancesListingPost
  /*


&lt;p&gt;Creates a listing for Amazon EC2 Standard Reserved Instances to be sold in the Reserved Instance Marketplace. You can submit one Standard Reserved Instance listing at a time. To get a list of your Standard Reserved Instances, you can use the &lt;a&gt;DescribeReservedInstances&lt;/a&gt; operation.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Only Standard Reserved Instances can be sold in the Reserved Instance Marketplace. Convertible Reserved Instances cannot be sold.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Standard Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;To sell your Standard Reserved Instances, you must first register as a seller in the Reserved Instance Marketplace. After completing the registration process, you can create a Reserved Instance Marketplace listing of some or all of your Standard Reserved Instances, and specify the upfront price to receive for them. Your Standard Reserved Instance listings then become available for purchase. To view the details of your Standard Reserved Instance listing, you can use the &lt;a&gt;DescribeReservedInstancesListings&lt;/a&gt; operation.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateReservedInstancesListingPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | Unique, case-sensitive identifier you provide to ensure idempotency of your listings. This helps avoid duplicate listings. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a> // Number | The number of instances that are a part of a Reserved Instance account to be listed in the Reserved Instance Marketplace. This number should be less than or equal to the instance count associated with the Reserved Instance ID specified in this call // [String] | A list specifying the price of the Standard Reserved Instance for each month remaining in the Reserved Instance term // String | The ID of the active Standard Reserved Instance.
    /*let clientToken = "clientToken_example";*/ /*let instanceCount = 56;*/ /*let priceSchedules = "priceSchedules_example";*/ /*let reservedInstancesId = "reservedInstancesId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateReservedInstancesListingPost(
      incomingOptions.clientToken,
      incomingOptions.instanceCount,
      incomingOptions.priceSchedules,
      incomingOptions.reservedInstancesId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateRoutePost
  /*


&lt;p&gt;Creates a route in a route table within a VPC.&lt;/p&gt; &lt;p&gt;You must specify one of the following targets: internet gateway or virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;When determining how to route traffic, we use the route with the most specific match. For example, traffic is destined for the IPv4 address &lt;code&gt;192.0.2.3&lt;/code&gt;, and the route table includes the following two IPv4 routes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/24&lt;/code&gt; (goes to some target A)&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;192.0.2.0/28&lt;/code&gt; (goes to some target B)&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Both routes apply to the traffic destined for &lt;code&gt;192.0.2.3&lt;/code&gt;. However, the second route in the list covers a smaller number of IP addresses and is therefore more specific, so we use that route to determine where to target the traffic.&lt;/p&gt; &lt;p&gt;For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table for the route.
    /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR address block used for the destination match. Routing decisions are based on the most specific match.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR block used for the destination match. Routing decisions are based on the most specific match.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'egressOnlyInternetGatewayId': "egressOnlyInternetGatewayId_example", // String | [IPv6 traffic only] The ID of an egress-only internet gateway.
      //  'gatewayId': "gatewayId_example", // String | The ID of an internet gateway or virtual private gateway attached to your VPC.
      //  'instanceId': "instanceId_example", // String | The ID of a NAT instance in your VPC. The operation fails if you specify an instance ID unless exactly one network interface is attached.
      //  'natGatewayId': "natGatewayId_example", // String | [IPv4 traffic only] The ID of a NAT gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of a transit gateway.
      //  'localGatewayId': "localGatewayId_example", // String | The ID of the local gateway.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The ID of a network interface.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example" // String | The ID of a VPC peering connection.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateRoutePost(
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateRouteTablePost
  /*


&lt;p&gt;Creates a route table for the specified VPC. After you create a route table, you can add routes and associate the table with a subnet.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateRouteTablePost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSecurityGroupPost
  /*


&lt;p&gt;Creates a security group.&lt;/p&gt; &lt;p&gt;A security group acts as a virtual firewall for your instance to control inbound and outbound traffic. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you create a security group, you specify a friendly name of your choice. You can have a security group for use in EC2-Classic with the same name as a security group for use in a VPC. However, you can&#39;t have two security groups for use in EC2-Classic with the same name or two security groups for use in a VPC with the same name.&lt;/p&gt; &lt;p&gt;You have a default security group for use in EC2-Classic and a default security group for use in your VPC. If you don&#39;t specify a security group when you launch an instance, the instance is launched into the appropriate default security group. A default security group includes a default rule that grants instances unrestricted network access to each other.&lt;/p&gt; &lt;p&gt;You can add or remove rules from your security groups using &lt;a&gt;AuthorizeSecurityGroupIngress&lt;/a&gt;, &lt;a&gt;AuthorizeSecurityGroupEgress&lt;/a&gt;, &lt;a&gt;RevokeSecurityGroupIngress&lt;/a&gt;, and &lt;a&gt;RevokeSecurityGroupEgress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information about VPC security group limits, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html\&quot;&gt;Amazon VPC Limits&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateSecurityGroupPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>A description for the security group. This is informational only.</p> <p>Constraints: Up to 255 characters in length</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp{}!$*</p // String | <p>The name of the security group.</p> <p>Constraints: Up to 255 characters in length. Cannot start with <code>sg-</code>.</p> <p>Constraints for EC2-Classic: ASCII characters</p> <p>Constraints for EC2-VPC: a-z, A-Z, 0-9, spaces, and ._-:/()#,@[]+=&amp{}!$*</p>
    /*let groupDescription = "groupDescription_example";*/ /*let groupName = "groupName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'vpcId': "vpcId_example", // String | [EC2-VPC] The ID of the VPC. Required for EC2-VPC.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSecurityGroupPost(
      incomingOptions.groupDescription,
      incomingOptions.groupName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSnapshotPost
  /*


&lt;p&gt;Creates a snapshot of an EBS volume and stores it in Amazon S3. You can use snapshots for backups, to make copies of EBS volumes, and to save data before shutting down an instance.&lt;/p&gt; &lt;p&gt;When a snapshot is created, any AWS Marketplace product codes that are associated with the source volume are propagated to the snapshot.&lt;/p&gt; &lt;p&gt;You can take a snapshot of an attached volume that is in use. However, snapshots only capture data that has been written to your EBS volume at the time the snapshot command is issued this may exclude any data that has been cached by any applications or the operating system. If you can pause any file systems on the volume long enough to take a snapshot, your snapshot should be complete. However, if you cannot pause all file writes to the volume, you should unmount the volume from within the instance, issue the snapshot command, and then remount the volume to ensure a consistent and complete snapshot. You may remount and use your volume while the snapshot status is &lt;code&gt;pending&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;To create a snapshot for EBS volumes that serve as root devices, you should stop the instance before taking the snapshot.&lt;/p&gt; &lt;p&gt;Snapshots that are taken from encrypted volumes are automatically encrypted. Volumes that are created from encrypted snapshots are also automatically encrypted. Your encrypted volumes and any associated snapshots always remain protected.&lt;/p&gt; &lt;p&gt;You can tag your snapshots during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\&quot;&gt;Amazon Elastic Block Store&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateSnapshotPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EBS volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description for the snapshot.
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the snapshot during creation.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSnapshotPost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSnapshotsPost
  /*


Creates crash-consistent snapshots of multiple EBS volumes and stores the data in S3. Volumes are chosen by specifying an instance. Any attached volumes will produce one snapshot each that is crash-consistent across the instance. Boot volumes can be excluded by changing the parameters.

 */
  actionCreateSnapshotsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String |  A description propagated to every snapshot specified by the instance.
      //  'instanceSpecificationInstanceId': "instanceSpecificationInstanceId_example", // String | The instance details to specify which volumes should be snapshotted. The instance to specify which volumes should be snapshotted.
      //  'instanceSpecificationExcludeBootVolume': "instanceSpecificationExcludeBootVolume_example", // String | The instance details to specify which volumes should be snapshotted. Excludes the root volume from being snapshotted.
      //  'tagSpecification': "tagSpecification_example", // [String] | Tags to apply to every snapshot specified by the instance.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'copyTagsFromSource': "copyTagsFromSource_example" // String | Copies the tags from the specified volume to corresponding snapshot.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSnapshotsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSpotDatafeedSubscriptionPost
  /*


Creates a data feed for Spot Instances, enabling you to view Spot Instance usage logs. You can create one data feed per AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.

 */
  actionCreateSpotDatafeedSubscriptionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Amazon S3 bucket in which to store the Spot Instance data feed.
    /*let bucket = "bucket_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'prefix': "prefix_example" // String | A prefix for the data feed file names.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSpotDatafeedSubscriptionPost(
      incomingOptions.bucket,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateSubnetPost
  /*


&lt;p&gt;Creates a subnet in an existing VPC.&lt;/p&gt; &lt;p&gt;When you create each subnet, you provide the VPC ID and IPv4 CIDR block for the subnet. After you create a subnet, you can&#39;t change its CIDR block. The size of the subnet&#39;s IPv4 CIDR block can be the same as a VPC&#39;s IPv4 CIDR block, or a subset of a VPC&#39;s IPv4 CIDR block. If you create more than one subnet in a VPC, the subnets&#39; CIDR blocks must not overlap. The smallest IPv4 subnet (and VPC) you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses).&lt;/p&gt; &lt;p&gt;If you&#39;ve associated an IPv6 CIDR block with your VPC, you can create a subnet with an IPv6 CIDR block that uses a /64 prefix length. &lt;/p&gt; &lt;important&gt; &lt;p&gt;AWS reserves both the first four and the last IPv4 address in each subnet&#39;s CIDR block. They&#39;re not available for use.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you add more than one subnet to a VPC, they&#39;re set up in a star topology with a logical router in the middle.&lt;/p&gt; &lt;p&gt;If you launch an instance in a VPC using an Amazon EBS-backed AMI, the IP address doesn&#39;t change if you stop and restart the instance (unlike a similar instance launched outside a VPC, which gets a new IP address when restarted). It&#39;s therefore possible to have a subnet with no running instances (they&#39;re all stopped), but no remaining IP addresses available.&lt;/p&gt; &lt;p&gt;For more information about subnets, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateSubnetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 network range for the subnet, in CIDR notation. For example, <code>10.0.0.0/24</code> // String | The ID of the VPC.
    /*let cidrBlock = "cidrBlock_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'availabilityZone': "availabilityZone_example", // String | <p>The Availability Zone or Local Zone for the subnet.</p> <p>Default: AWS selects one for you. If you create more than one subnet in your VPC, we do not necessarily select a different zone for each subnet.</p> <p>To create a subnet in a Local Zone, set this value to the Local Zone ID, for example <code>us-west-2-lax-1a</code>. For information about the Regions that support Local Zones, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html#concepts-available-regions\\\">Available Regions</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      //  'availabilityZoneId': "availabilityZoneId_example", // String | The AZ ID or the Local Zone ID of the subnet.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range for the subnet, in CIDR notation. The subnet size must use a /64 prefix length.
      //  'outpostArn': "outpostArn_example", // String | The Amazon Resource Name (ARN) of the Outpost.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateSubnetPost(
      incomingOptions.cidrBlock,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTagsPost
  /*


&lt;p&gt;Adds or overwrites the specified tags for the specified Amazon EC2 resource or resources. Each resource can have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be unique per resource.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. For more information about creating IAM policies that control users&#39; access to resources based on tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-iam-actions-resources.html\&quot;&gt;Supported Resource-Level Permissions for Amazon EC2 API Actions&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateTagsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p // [String] | The tags. The <code>value</code> parameter is required, but if you don't want the tag to have a value, specify the parameter with no value, and we set the value to an empty string.
    /*let resourceId = "resourceId_example";*/ /*let tag = "tag_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTagsPost(
      incomingOptions.resourceId,
      incomingOptions.tag,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorFilterPost
  /*


&lt;p&gt;Creates a Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;A Traffic Mirror filter is a set of rules that defines the traffic to mirror.&lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. To mirror traffic, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilterRule.htm\&quot;&gt;CreateTrafficMirrorFilterRule&lt;/a&gt; to add Traffic Mirror rules to the filter. The rules you add define what traffic gets mirrored. You can also use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyTrafficMirrorFilterNetworkServices.html\&quot;&gt;ModifyTrafficMirrorFilterNetworkServices&lt;/a&gt; to mirror supported network services.&lt;/p&gt;

 */
  actionCreateTrafficMirrorFilterPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | The description of the Traffic Mirror filter.
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to assign to a Traffic Mirror filter.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorFilterPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorFilterRulePost
  /*


&lt;p&gt;Creates a Traffic Mirror filter rule. &lt;/p&gt; &lt;p&gt;A Traffic Mirror rule defines the Traffic Mirror source traffic to mirror.&lt;/p&gt; &lt;p&gt;You need the Traffic Mirror filter ID when you create the rule.&lt;/p&gt;

 */
  actionCreateTrafficMirrorFilterRulePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the filter that this rule is associated with // String | The type of traffic (<code>ingress</code> | <code>egress</code>) // Number | The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number // String | The action to take (<code>accept</code> | <code>reject</code>) on the filtered traffic // String | The destination CIDR block to assign to the Traffic Mirror rule // String | The source CIDR block to assign to the Traffic Mirror rule.
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let trafficDirection = "trafficDirection_example";*/ /*let ruleNumber = 56;*/ /*let ruleAction = "ruleAction_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let sourceCidrBlock = "sourceCidrBlock_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'destinationPortRangeFromPort': "destinationPortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'destinationPortRangeToPort': "destinationPortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeFromPort': "sourcePortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeToPort': "sourcePortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      protocol: 56, // Number | <p>The protocol, for example UDP, to assign to the Traffic Mirror rule.</p> <p>For information about the protocol value, see <a href=\\\"https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\\\">Protocol Numbers</a> on the Internet Assigned Numbers Authority (IANA) website.</p>
      //  'description': "description_example", // String | The description of the Traffic Mirror rule.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorFilterRulePost(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.trafficDirection,
      incomingOptions.ruleNumber,
      incomingOptions.ruleAction,
      incomingOptions.destinationCidrBlock,
      incomingOptions.sourceCidrBlock,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorSessionPost
  /*


&lt;p&gt;Creates a Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror session actively copies packets from a Traffic Mirror source to a Traffic Mirror target. Create a filter, and then assign it to the session to define a subset of the traffic to mirror, for example all TCP traffic.&lt;/p&gt; &lt;p&gt;The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in a different VPC connected via VPC peering or a transit gateway. &lt;/p&gt; &lt;p&gt;By default, no traffic is mirrored. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorFilter.htm\&quot;&gt;CreateTrafficMirrorFilter&lt;/a&gt; to create filter rules that specify the traffic to mirror.&lt;/p&gt;

 */
  actionCreateTrafficMirrorSessionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the source network interface // String | The ID of the Traffic Mirror target // String | The ID of the Traffic Mirror filter // Number | <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p>
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let trafficMirrorTargetId = "trafficMirrorTargetId_example";*/ /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ /*let sessionNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      packetLength: 56, // Number | <p>The number of bytes in each packet to mirror. These are bytes after the VXLAN header. Do not specify this parameter when you want to mirror the entire packet. To mirror a subset of the packet, set this to the length (in bytes) that you want to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target.</p> <p>If you do not want to mirror the entire packet, use the <code>PacketLength</code> parameter to specify the number of bytes in each packet to mirror.</p>
      virtualNetworkId: 56, // Number | The VXLAN ID for the Traffic Mirror session. For more information about the VXLAN protocol, see <a href=\\\"https://tools.ietf.org/html/rfc7348\\\">RFC 7348</a>. If you do not specify a <code>VirtualNetworkId</code>, an account-wide unique id is chosen at random.
      //  'description': "description_example", // String | The description of the Traffic Mirror session.
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to assign to a Traffic Mirror session.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorSessionPost(
      incomingOptions.networkInterfaceId,
      incomingOptions.trafficMirrorTargetId,
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.sessionNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTrafficMirrorTargetPost
  /*


&lt;p&gt;Creates a target for your Traffic Mirror session.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target is the destination for mirrored traffic. The Traffic Mirror source and the Traffic Mirror target (monitoring appliances) can be in the same VPC, or in different VPCs connected via VPC peering or a transit gateway.&lt;/p&gt; &lt;p&gt;A Traffic Mirror target can be a network interface, or a Network Load Balancer.&lt;/p&gt; &lt;p&gt;To use the target in a Traffic Mirror session, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTrafficMirrorSession.htm\&quot;&gt;CreateTrafficMirrorSession&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateTrafficMirrorTargetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The network interface ID that is associated with the target.
      //  'networkLoadBalancerArn': "networkLoadBalancerArn_example", // String | The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the target.
      //  'description': "description_example", // String | The description of the Traffic Mirror target.
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to assign to the Traffic Mirror target.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTrafficMirrorTargetPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayMulticastDomainPost
  /*


&lt;p&gt;Creates a multicast domain using the specified transit gateway.&lt;/p&gt; &lt;p&gt;The transit gateway must be in the available state before you create a domain. Use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeTransitGateways.html\&quot;&gt;DescribeTransitGateways&lt;/a&gt; to see the state of transit gateway.&lt;/p&gt;

 */
  actionCreateTransitGatewayMulticastDomainPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway.
    /*let transitGatewayId = "transitGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags for the transit gateway multicast domain.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayMulticastDomainPost(
      incomingOptions.transitGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayPeeringAttachmentPost
  /*


&lt;p&gt;Requests a transit gateway peering attachment between the specified transit gateway (requester) and a peer transit gateway (accepter). The transit gateways must be in different Regions. The peer transit gateway can be in your account or a different AWS account. &lt;/p&gt; &lt;p&gt;After you create the peering attachment, the owner of the accepter transit gateway must accept the attachment request.&lt;/p&gt;

 */
  actionCreateTransitGatewayPeeringAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | The ID of the peer transit gateway with which to create the peering attachment // String | The AWS account ID of the owner of the peer transit gateway // String | The Region where the peer transit gateway is located.
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let peerTransitGatewayId = "peerTransitGatewayId_example";*/ /*let peerAccountId = "peerAccountId_example";*/ /*let peerRegion = "peerRegion_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the transit gateway peering attachment.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayPeeringAttachmentPost(
      incomingOptions.transitGatewayId,
      incomingOptions.peerTransitGatewayId,
      incomingOptions.peerAccountId,
      incomingOptions.peerRegion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayPost
  /*


&lt;p&gt;Creates a transit gateway.&lt;/p&gt; &lt;p&gt;You can use a transit gateway to interconnect your virtual private clouds (VPC) and on-premises networks. After the transit gateway enters the &lt;code&gt;available&lt;/code&gt; state, you can attach your VPCs and VPN connections to the transit gateway.&lt;/p&gt; &lt;p&gt;To attach your VPCs, use &lt;a&gt;CreateTransitGatewayVpcAttachment&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To attach a VPN connection, use &lt;a&gt;CreateCustomerGateway&lt;/a&gt; to create a customer gateway and specify the ID of the customer gateway and the ID of the transit gateway in a call to &lt;a&gt;CreateVpnConnection&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;When you create a transit gateway, we create a default transit gateway route table and use it as the default association route table and the default propagation route table. You can use &lt;a&gt;CreateTransitGatewayRouteTable&lt;/a&gt; to create additional transit gateway route tables. If you disable automatic route propagation, we do not create a default transit gateway route table. You can use &lt;a&gt;EnableTransitGatewayRouteTablePropagation&lt;/a&gt; to propagate routes from a resource attachment to a transit gateway route table. If you disable automatic associations, you can use &lt;a&gt;AssociateTransitGatewayRouteTable&lt;/a&gt; to associate a resource attachment with a transit gateway route table.&lt;/p&gt;

 */
  actionCreateTransitGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description of the transit gateway.
      //  'optionsAmazonSideAsn': "optionsAmazonSideAsn_example", // String | Describes the options for a transit gateway. A private Autonomous System Number (ASN) for the Amazon side of a BGP session. The range is 64512 to 65534 for 16-bit ASNs and 4200000000 to 4294967294 for 32-bit ASNs.
      //  'optionsAutoAcceptSharedAttachments': "optionsAutoAcceptSharedAttachments_example", // String | Describes the options for a transit gateway. Enable or disable automatic acceptance of attachment requests. The default is <code>disable</code>.
      //  'optionsDefaultRouteTableAssociation': "optionsDefaultRouteTableAssociation_example", // String | Describes the options for a transit gateway. Enable or disable automatic association with the default association route table. The default is <code>enable</code>.
      //  'optionsDefaultRouteTablePropagation': "optionsDefaultRouteTablePropagation_example", // String | Describes the options for a transit gateway. Enable or disable automatic propagation of routes to the default propagation route table. The default is <code>enable</code>.
      //  'optionsVpnEcmpSupport': "optionsVpnEcmpSupport_example", // String | Describes the options for a transit gateway. Enable or disable Equal Cost Multipath Protocol support.
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a transit gateway. Enable or disable DNS support.
      //  'optionsMulticastSupport': "optionsMulticastSupport_example", // String | Describes the options for a transit gateway. Indicates whether multicast is enabled on the transit gateway
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the transit gateway.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayRoutePost
  /*


Creates a static route for the specified transit gateway route table.

 */
  actionCreateTransitGatewayRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for destination matches. Routing decisions are based on the most specific match // String | The ID of the transit gateway route table.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      blackhole: true, // Boolean | Indicates whether to drop traffic that matches this route.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayRouteTablePost
  /*


Creates a route table for the specified transit gateway.

 */
  actionCreateTransitGatewayRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway.
    /*let transitGatewayId = "transitGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'tagSpecifications': "tagSpecifications_example", // [String] | The tags to apply to the transit gateway route table.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayRouteTablePost(
      incomingOptions.transitGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateTransitGatewayVpcAttachmentPost
  /*


&lt;p&gt;Attaches the specified VPC to the specified transit gateway.&lt;/p&gt; &lt;p&gt;If you attach a VPC with a CIDR range that overlaps the CIDR range of a VPC that is already attached, the new VPC CIDR range is not propagated to the default propagation route table.&lt;/p&gt; &lt;p&gt;To send VPC traffic to an attached transit gateway, add a route to the VPC route table using &lt;a&gt;CreateRoute&lt;/a&gt;.&lt;/p&gt;

 */
  actionCreateTransitGatewayVpcAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway // String | The ID of the VPC // [String] | The IDs of one or more subnets. You can specify only one subnet per Availability Zone. You must specify at least one subnet, but we recommend that you specify two subnets for better availability. The transit gateway uses one IP address from each specified subnet.
    /*let transitGatewayId = "transitGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ /*let subnetIds = "subnetIds_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a VPC attachment. Enable or disable DNS support. The default is <code>enable</code>.
      //  'optionsIpv6Support': "optionsIpv6Support_example", // String | Describes the options for a VPC attachment. Enable or disable IPv6 support. The default is <code>enable</code>.
      //  'tagSpecifications': "tagSpecifications_example", // [String] | The tags to apply to the VPC attachment.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateTransitGatewayVpcAttachmentPost(
      incomingOptions.transitGatewayId,
      incomingOptions.vpcId,
      incomingOptions.subnetIds,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVolumePost
  /*


&lt;p&gt;Creates an EBS volume that can be attached to an instance in the same Availability Zone. The volume is created in the regional endpoint that you send the HTTP request to. For more information see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html\&quot;&gt;Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You can create a new empty volume or restore a volume from an EBS snapshot. Any AWS Marketplace product codes from the snapshot are propagated to the volume.&lt;/p&gt; &lt;p&gt;You can create encrypted volumes. Encrypted volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are also automatically encrypted. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can tag your volumes during creation. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-creating-volume.html\&quot;&gt;Creating an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone in which to create the volume.
    /*let availabilityZone = "availabilityZone_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      encrypted: true, // Boolean | <p>Specifies whether the volume should be encrypted. The effect of setting the encryption state to <code>true</code> depends on the volume origin (new or from a snapshot), starting encryption state, ownership, and whether encryption by default is enabled. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default\\\">Encryption by Default</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Encrypted Amazon EBS volumes must be attached to instances that support Amazon EBS encryption. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\\\">Supported Instance Types</a>.</p>
      iops: 56, // Number | <p>The number of I/O operations per second (IOPS) to provision for the volume, with a maximum ratio of 50 IOPS/GiB. Range is 100 to 64,000 IOPS for volumes in most Regions. Maximum IOPS of 64,000 is guaranteed only on <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances\\\">Nitro-based instances</a>. Other instance families guarantee performance up to 32,000 IOPS. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\\\">Amazon EBS Volume Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>This parameter is valid only for Provisioned IOPS SSD (io1) volumes.</p>
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p>
      //  'outpostArn': "outpostArn_example", // String | The Amazon Resource Name (ARN) of the Outpost.
      size: 56, // Number | <p>The size of the volume, in GiBs.</p> <p>Constraints: 1-16,384 for <code>gp2</code>, 4-16,384 for <code>io1</code>, 500-16,384 for <code>st1</code>, 500-16,384 for <code>sc1</code>, and 1-1,024 for <code>standard</code>. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size.</p> <p>Default: If you're creating the volume from a snapshot and don't specify a volume size, the default is the snapshot size.</p> <note> <p>At least one of Size or SnapshotId is required.</p> </note>
      //  'snapshotId': "snapshotId_example", // String | <p>The snapshot from which to create the volume.</p> <note> <p>At least one of Size or SnapshotId are required.</p> </note>
      //  'volumeType': "volumeType_example", // String | <p>The volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> <p>Default: <code>gp2</code> </p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'tagSpecification': "tagSpecification_example" // [String] | The tags to apply to the volume during creation.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVolumePost(
      incomingOptions.availabilityZone,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointConnectionNotificationPost
  /*


&lt;p&gt;Creates a connection notification for a specified VPC endpoint or VPC endpoint service. A connection notification notifies you of specific endpoint events. You must create an SNS topic to receive notifications. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/sns/latest/dg/CreateTopic.html\&quot;&gt;Create a Topic&lt;/a&gt; in the &lt;i&gt;Amazon Simple Notification Service Developer Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can create a connection notification for interface endpoints only.&lt;/p&gt;

 */
  actionCreateVpcEndpointConnectionNotificationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ARN of the SNS topic for the notifications // [String] | One or more endpoint events for which to receive notifications. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
    /*let connectionNotificationArn = "connectionNotificationArn_example";*/ /*let connectionEvents = "connectionEvents_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'serviceId': "serviceId_example", // String | The ID of the endpoint service.
      //  'vpcEndpointId': "vpcEndpointId_example", // String | The ID of the endpoint.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointConnectionNotificationPost(
      incomingOptions.connectionNotificationArn,
      incomingOptions.connectionEvents,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointPost
  /*


&lt;p&gt;Creates a VPC endpoint for a specified service. An endpoint enables you to create a private connection between your VPC and the service. The service may be provided by AWS, an AWS Marketplace partner, or another AWS account. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;A &lt;code&gt;gateway&lt;/code&gt; endpoint serves as a target for a route in your route table for traffic destined for the AWS service. You can specify an endpoint policy to attach to the endpoint that will control access to the service from your VPC. You can also specify the VPC route tables that use the endpoint.&lt;/p&gt; &lt;p&gt;An &lt;code&gt;interface&lt;/code&gt; endpoint is a network interface in your subnet that serves as an endpoint for communicating with the specified service. You can specify the subnets in which to create an endpoint, and the security groups to associate with the endpoint network interface.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeVpcEndpointServices&lt;/a&gt; to get a list of supported services.&lt;/p&gt;

 */
  actionCreateVpcEndpointPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC in which the endpoint will be used // String | The service name. To get a list of available services, use the <a>DescribeVpcEndpointServices</a> request, or get the name from the service provider.
    /*let vpcId = "vpcId_example";*/ /*let serviceName = "serviceName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcEndpointType': "vpcEndpointType_example", // String | <p>The type of endpoint.</p> <p>Default: Gateway</p>
      //  'policyDocument': "policyDocument_example", // String | A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format. If this parameter is not specified, we attach a default policy that allows full access to the service.
      //  'routeTableId': "routeTableId_example", // [String] | (Gateway endpoint) One or more route table IDs.
      //  'subnetId': "subnetId_example", // [String] | (Interface endpoint) The ID of one or more subnets in which to create an endpoint network interface.
      //  'securityGroupId': "securityGroupId_example", // [String] | (Interface endpoint) The ID of one or more security groups to associate with the endpoint network interface.
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      privateDnsEnabled: true // Boolean | <p>(Interface endpoint) Indicate whether to associate a private hosted zone with the specified VPC. The private hosted zone contains a record set for the default public DNS name for the service for the Region (for example, <code>kinesis.us-east-1.amazonaws.com</code>) which resolves to the private IP addresses of the endpoint network interfaces in the VPC. This enables you to make requests to the default public DNS name for the service instead of the public DNS names that are automatically generated by the VPC endpoint service.</p> <p>To use a private hosted zone, you must set the following VPC attributes to <code>true</code>: <code>enableDnsHostnames</code> and <code>enableDnsSupport</code>. Use <a>ModifyVpcAttribute</a> to set the VPC attributes.</p> <p>Default: <code>true</code> </p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointPost(
      incomingOptions.vpcId,
      incomingOptions.serviceName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcEndpointServiceConfigurationPost
  /*


&lt;p&gt;Creates a VPC endpoint service configuration to which service consumers (AWS accounts, IAM users, and IAM roles) can connect. Service consumers can create an interface VPC endpoint to connect to your service.&lt;/p&gt; &lt;p&gt;To create an endpoint service configuration, you must first create a Network Load Balancer for your service. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC Endpoint Services&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;. &lt;/p&gt;

 */
  actionCreateVpcEndpointServiceConfigurationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The Amazon Resource Names (ARNs) of one or more Network Load Balancers for your service.
    /*let networkLoadBalancerArn = "networkLoadBalancerArn_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      acceptanceRequired: true // Boolean | Indicate whether requests from service consumers to create an endpoint to your service must be accepted. To accept a request, use <a>AcceptVpcEndpointConnections</a>.
      //  'clientToken': "clientToken_example" // String | Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcEndpointServiceConfigurationPost(
      incomingOptions.networkLoadBalancerArn,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcPeeringConnectionPost
  /*


&lt;p&gt;Requests a VPC peering connection between two VPCs: a requester VPC that you own and an accepter VPC with which to create the connection. The accepter VPC can belong to another AWS account and can be in a different Region to the requester VPC. The requester VPC and accepter VPC cannot have overlapping CIDR blocks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Limitations and rules apply to a VPC peering connection. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/peering/vpc-peering-basics.html#vpc-peering-limitations\&quot;&gt;limitations&lt;/a&gt; section in the &lt;i&gt;VPC Peering Guide&lt;/i&gt;.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;The owner of the accepter VPC must accept the peering request to activate the peering connection. The VPC peering connection request expires after 7 days, after which it cannot be accepted or rejected.&lt;/p&gt; &lt;p&gt;If you create a VPC peering connection request between VPCs with overlapping CIDR blocks, the VPC peering connection has a status of &lt;code&gt;failed&lt;/code&gt;.&lt;/p&gt;

 */
  actionCreateVpcPeeringConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'peerOwnerId': "peerOwnerId_example", // String | <p>The AWS account ID of the owner of the accepter VPC.</p> <p>Default: Your AWS account ID</p>
      //  'peerVpcId': "peerVpcId_example", // String | The ID of the VPC with which you are creating the VPC peering connection. You must specify this parameter in the request.
      //  'vpcId': "vpcId_example", // String | The ID of the requester VPC. You must specify this parameter in the request.
      //  'peerRegion': "peerRegion_example" // String | <p>The Region code for the accepter VPC, if the accepter VPC is located in a Region other than the Region in which you make the request.</p> <p>Default: The Region in which you make the request.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcPeeringConnectionPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpcPost
  /*


&lt;p&gt;Creates a VPC with the specified IPv4 CIDR block. The smallest VPC you can create uses a /28 netmask (16 IPv4 addresses), and the largest uses a /16 netmask (65,536 IPv4 addresses). For more information about how large to make your VPC, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can optionally request an Amazon-provided IPv6 CIDR block for the VPC. The IPv6 CIDR block uses a /56 prefix length, and is allocated from Amazon&#39;s pool of IPv6 addresses. You cannot choose the IPv6 range for your VPC.&lt;/p&gt; &lt;p&gt;By default, each instance you launch in the VPC has the default DHCP options, which include only a default DNS server that we provide (AmazonProvidedDNS). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the instance tenancy value for the VPC when you create it. You can&#39;t change this value for the VPC after you create it. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The IPv4 network range for the VPC, in CIDR notation. For example, <code>10.0.0.0/16</code>.
    /*let cidrBlock = "cidrBlock_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      amazonProvidedIpv6CidrBlock: true, // Boolean | Requests an Amazon-provided IPv6 CIDR block with a /56 prefix length for the VPC. You cannot specify the range of IP addresses, or the size of the CIDR block.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceTenancy': "instanceTenancy_example", // String | <p>The tenancy options for instances launched into the VPC. For <code>default</code>, instances are launched with shared tenancy by default. You can launch instances with any tenancy into a shared tenancy VPC. For <code>dedicated</code>, instances are launched as dedicated tenancy instances by default. You can only launch instances with a tenancy of <code>dedicated</code> or <code>host</code> into a dedicated tenancy VPC. </p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
      //  'ipv6CidrBlockNetworkBorderGroup': "ipv6CidrBlockNetworkBorderGroup_example" // String | <p>The name of the location from which we advertise the IPV6 CIDR block. Use this parameter to limit the address to this location.</p> <p> You must set <code>AmazonProvidedIpv6CidrBlock</code> to <code>true</code> to use this parameter.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpcPost(
      incomingOptions.cidrBlock,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnConnectionPost
  /*


&lt;p&gt;Creates a VPN connection between an existing virtual private gateway and a VPN customer gateway. The supported connection type is &lt;code&gt;ipsec.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The response includes information that you need to give to your network administrator to configure your customer gateway.&lt;/p&gt; &lt;important&gt; &lt;p&gt;We strongly recommend that you use HTTPS when calling this operation because the response contains sensitive cryptographic information for configuring your customer gateway.&lt;/p&gt; &lt;/important&gt; &lt;p&gt;If you decide to shut down your VPN connection for any reason and later create a new VPN connection, you must reconfigure your customer gateway with the new information returned from this call.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the customer gateway // String | The type of VPN connection (<code>ipsec.1</code>).
    /*let customerGatewayId = "customerGatewayId_example";*/ /*let type = "type_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'vpnGatewayId': "vpnGatewayId_example", // String | The ID of the virtual private gateway. If you specify a virtual private gateway, you cannot specify a transit gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of the transit gateway. If you specify a transit gateway, you cannot specify a virtual private gateway.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'optionsEnableAcceleration': "optionsEnableAcceleration_example", // String | Describes VPN connection options. <p>Indicate whether to enable acceleration for the VPN connection.</p> <p>Default: <code>false</code> </p>
      //  'optionsStaticRoutesOnly': "optionsStaticRoutesOnly_example", // String | Describes VPN connection options. <p>Indicate whether the VPN connection uses static routes only. If you are creating a VPN connection for a device that does not support BGP, you must specify <code>true</code>. Use <a>CreateVpnConnectionRoute</a> to create a static route.</p> <p>Default: <code>false</code> </p>
      //  'optionsTunnelOptions': "optionsTunnelOptions_example" // [String] | Describes VPN connection options. The tunnel options for the VPN connection.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnConnectionPost(
      incomingOptions.customerGatewayId,
      incomingOptions.type,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnConnectionRoutePost
  /*


&lt;p&gt;Creates a static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnConnectionRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR block associated with the local subnet of the customer network // String | The ID of the VPN connection.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnConnectionRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionCreateVpnGatewayPost
  /*


&lt;p&gt;Creates a virtual private gateway. A virtual private gateway is the endpoint on the VPC side of your VPN connection. You can create a virtual private gateway before creating the VPC itself.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionCreateVpnGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The type of VPN connection this virtual private gateway supports.
    /*let type = "type_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone for the virtual private gateway.
      amazonSideAsn: 56, // Number | <p>A private Autonomous System Number (ASN) for the Amazon side of a BGP session. If you're using a 16-bit ASN, it must be in the 64512 to 65534 range. If you're using a 32-bit ASN, it must be in the 4200000000 to 4294967294 range.</p> <p>Default: 64512</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionCreateVpnGatewayPost(
      incomingOptions.type,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteClientVpnEndpointPost
  /*


Deletes the specified Client VPN endpoint. You must disassociate all target networks before you can delete a Client VPN endpoint.

 */
  actionDeleteClientVpnEndpointPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN to be deleted.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteClientVpnEndpointPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteClientVpnRoutePost
  /*


Deletes a route from a Client VPN endpoint. You can only delete routes that you manually added using the &lt;b&gt;CreateClientVpnRoute&lt;/b&gt; action. You cannot delete routes that were automatically added when associating a subnet. To remove routes that have been automatically added, disassociate the target subnet from the Client VPN endpoint.

 */
  actionDeleteClientVpnRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint from which the route is to be deleted // String | The IPv4 address range, in CIDR notation, of the route to be deleted.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'targetVpcSubnetId': "targetVpcSubnetId_example", // String | The ID of the target subnet used by the route.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteClientVpnRoutePost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteCustomerGatewayPost
  /*


Deletes the specified customer gateway. You must delete the VPN connection before you can delete the customer gateway.

 */
  actionDeleteCustomerGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the customer gateway.
    /*let customerGatewayId = "customerGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteCustomerGatewayPost(
      incomingOptions.customerGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteDhcpOptionsPost
  /*


Deletes the specified set of DHCP options. You must disassociate the set of DHCP options before you can delete it. You can disassociate the set of DHCP options by associating either a new set of options or the default set of options with the VPC.

 */
  actionDeleteDhcpOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the DHCP options set.
    /*let dhcpOptionsId = "dhcpOptionsId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteDhcpOptionsPost(
      incomingOptions.dhcpOptionsId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteEgressOnlyInternetGatewayPost
  /*


Deletes an egress-only internet gateway.

 */
  actionDeleteEgressOnlyInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the egress-only internet gateway.
    /*let egressOnlyInternetGatewayId = "egressOnlyInternetGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteEgressOnlyInternetGatewayPost(
      incomingOptions.egressOnlyInternetGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFleetsPost
  /*


&lt;p&gt;Deletes the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;After you delete an EC2 Fleet, it launches no new instances. You must specify whether an EC2 Fleet should also terminate its instances. If you terminate the instances, the EC2 Fleet enters the &lt;code&gt;deleted_terminating&lt;/code&gt; state. Otherwise, the EC2 Fleet enters the &lt;code&gt;deleted_running&lt;/code&gt; state, and the instances continue to run until they are interrupted or you terminate them manually. &lt;/p&gt;

 */
  actionDeleteFleetsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the EC2 Fleets // Boolean | Indicates whether to terminate instances for an EC2 Fleet if it is deleted successfully.
    /*let fleetId = "fleetId_example";*/ /*let terminateInstances = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFleetsPost(
      incomingOptions.fleetId,
      incomingOptions.terminateInstances,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFlowLogsPost
  /*


Deletes one or more flow logs.

 */
  actionDeleteFlowLogsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
    /*let flowLogId = "flowLogId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFlowLogsPost(
      incomingOptions.flowLogId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteFpgaImagePost
  /*


Deletes the specified Amazon FPGA Image (AFI).

 */
  actionDeleteFpgaImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AFI.
    /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteFpgaImagePost(
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteInternetGatewayPost
  /*


Deletes the specified internet gateway. You must detach the internet gateway from the VPC before you can delete it.

 */
  actionDeleteInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the internet gateway.
    /*let internetGatewayId = "internetGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteInternetGatewayPost(
      incomingOptions.internetGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteKeyPairPost
  /*


Deletes the specified key pair, by removing the public key from Amazon EC2.

 */
  actionDeleteKeyPairPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The name of the key pair.
    /*let keyName = "keyName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteKeyPairPost(
      incomingOptions.keyName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteLaunchTemplatePost
  /*


Deletes a launch template. Deleting a launch template deletes all of its versions.

 */
  actionDeleteLaunchTemplatePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example" // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLaunchTemplatePost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLaunchTemplateVersionsPost
  /*


Deletes one or more versions of a launch template. You cannot delete the default version of a launch template you must first assign a different version as the default. If the default version is the only version for the launch template, you must delete the entire launch template using &lt;a&gt;DeleteLaunchTemplate&lt;/a&gt;.

 */
  actionDeleteLaunchTemplateVersionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The version numbers of one or more launch template versions to delete.
    /*let launchTemplateVersion = "launchTemplateVersion_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example" // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLaunchTemplateVersionsPost(
      incomingOptions.launchTemplateVersion,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLocalGatewayRoutePost
  /*


Deletes the specified route from the specified local gateway route table.

 */
  actionDeleteLocalGatewayRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range for the route. This must match the CIDR for the route exactly // String | The ID of the local gateway route table.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLocalGatewayRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteLocalGatewayRouteTableVpcAssociationPost
  /*


Deletes the specified association between a VPC and local gateway route table.

 */
  actionDeleteLocalGatewayRouteTableVpcAssociationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the association.
    /*let localGatewayRouteTableVpcAssociationId = "localGatewayRouteTableVpcAssociationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteLocalGatewayRouteTableVpcAssociationPost(
      incomingOptions.localGatewayRouteTableVpcAssociationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteNatGatewayPost
  /*


Deletes the specified NAT gateway. Deleting a NAT gateway disassociates its Elastic IP address, but does not release the address from your account. Deleting a NAT gateway does not delete any NAT gateway routes in your route tables.

 */
  actionDeleteNatGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the NAT gateway.
    /*let natGatewayId = "natGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNatGatewayPost(
      incomingOptions.natGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkAclEntryPost
  /*


Deletes the specified ingress or egress entry (rule) from the specified network ACL.

 */
  actionDeleteNetworkAclEntryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Boolean | Indicates whether the rule is an egress rule // String | The ID of the network ACL // Number | The rule number of the entry to delete.
    /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkAclEntryPost(
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkAclPost
  /*


Deletes the specified network ACL. You can&#39;t delete the ACL if it&#39;s associated with any subnets. You can&#39;t delete the default network ACL.

 */
  actionDeleteNetworkAclPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network ACL.
    /*let networkAclId = "networkAclId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkAclPost(
      incomingOptions.networkAclId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkInterfacePermissionPost
  /*


Deletes a permission for a network interface. By default, you cannot delete the permission if the account for which you&#39;re removing the permission has attached the network interface to an instance. However, you can force delete the permission, regardless of any attachment.

 */
  actionDeleteNetworkInterfacePermissionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface permission.
    /*let networkInterfacePermissionId = "networkInterfacePermissionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      force: true, // Boolean | Specify <code>true</code> to remove the permission even if the network interface is attached to an instance.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkInterfacePermissionPost(
      incomingOptions.networkInterfacePermissionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteNetworkInterfacePost
  /*


Deletes the specified network interface. You must detach the network interface before you can delete it.

 */
  actionDeleteNetworkInterfacePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteNetworkInterfacePost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeletePlacementGroupPost
  /*


Deletes the specified placement group. You must terminate all instances in the placement group before you can delete the placement group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDeletePlacementGroupPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The name of the placement group.
    /*let groupName = "groupName_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeletePlacementGroupPost(
      incomingOptions.groupName,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteQueuedReservedInstancesPost
  /*


Deletes the queued purchases for the specified Reserved Instances.

 */
  actionDeleteQueuedReservedInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Reserved Instances.
    /*let reservedInstancesId = "reservedInstancesId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteQueuedReservedInstancesPost(
      incomingOptions.reservedInstancesId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteRoutePost
  /*


Deletes the specified route from the specified route table.

 */
  actionDeleteRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table.
    /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR range for the route. The value you specify must match the CIDR for the route exactly.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteRoutePost(
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteRouteTablePost
  /*


Deletes the specified route table. You must disassociate the route table from any subnets before you can delete it. You can&#39;t delete the main route table.

 */
  actionDeleteRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table.
    /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteRouteTablePost(
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSecurityGroupPost
  /*


&lt;p&gt;Deletes a security group.&lt;/p&gt; &lt;p&gt;If you attempt to delete a security group that is associated with an instance, or is referenced by another security group, the operation fails with &lt;code&gt;InvalidGroup.InUse&lt;/code&gt; in EC2-Classic or &lt;code&gt;DependencyViolation&lt;/code&gt; in EC2-VPC.&lt;/p&gt;

 */
  actionDeleteSecurityGroupPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'groupId': "groupId_example", // String | The ID of the security group. Required for a nondefault VPC.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You can specify either the security group name or the security group ID.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSecurityGroupPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSnapshotPost
  /*


&lt;p&gt;Deletes the specified snapshot.&lt;/p&gt; &lt;p&gt;When you make periodic snapshots of a volume, the snapshots are incremental, and only the blocks on the device that have changed since your last snapshot are saved in the new snapshot. When you delete a snapshot, only the data not needed for any other snapshot is removed. So regardless of which prior snapshots have been deleted, all active snapshots will have access to all the information needed to restore the volume.&lt;/p&gt; &lt;p&gt;You cannot delete a snapshot of the root device of an EBS volume used by a registered AMI. You must first de-register the AMI before you can delete the snapshot.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-snapshot.html\&quot;&gt;Deleting an Amazon EBS Snapshot&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteSnapshotPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EBS snapshot.
    /*let snapshotId = "snapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSnapshotPost(
      incomingOptions.snapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSpotDatafeedSubscriptionPost
  /*


Deletes the data feed for Spot Instances.

 */
  actionDeleteSpotDatafeedSubscriptionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSpotDatafeedSubscriptionPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteSubnetPost
  /*


Deletes the specified subnet. You must terminate all running instances in the subnet before you can delete the subnet.

 */
  actionDeleteSubnetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the subnet.
    /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteSubnetPost(
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteTagsPost
  /*


&lt;p&gt;Deletes the specified set of tags from the specified set of resources.&lt;/p&gt; &lt;p&gt;To list the current tags, use &lt;a&gt;DescribeTags&lt;/a&gt;. For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteTagsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>The IDs of the resources, separated by spaces.</p> <p>Constraints: Up to 1000 resource IDs. We recommend breaking up this request into smaller batches.</p>
    /*let resourceId = "resourceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'tag': "tag_example" // [String] | <p>The tags to delete. Specify a tag key and an optional tag value to delete specific tags. If you specify a tag key without a tag value, we delete any tag with this key regardless of its value. If you specify a tag key with an empty string as the tag value, we delete the tag only if its value is an empty string.</p> <p>If you omit this parameter, we delete all user-defined tags for the specified resources. We do not delete AWS-generated tags (tags that have the <code>aws:</code> prefix).</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTagsPost(
      incomingOptions.resourceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorFilterPost
  /*


&lt;p&gt;Deletes the specified Traffic Mirror filter.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror filter that is in use by a Traffic Mirror session.&lt;/p&gt;

 */
  actionDeleteTrafficMirrorFilterPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror filter.
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorFilterPost(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorFilterRulePost
  /*


Deletes the specified Traffic Mirror rule.

 */
  actionDeleteTrafficMirrorFilterRulePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror rule.
    /*let trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorFilterRulePost(
      incomingOptions.trafficMirrorFilterRuleId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorSessionPost
  /*


Deletes the specified Traffic Mirror session.

 */
  actionDeleteTrafficMirrorSessionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror session.
    /*let trafficMirrorSessionId = "trafficMirrorSessionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorSessionPost(
      incomingOptions.trafficMirrorSessionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTrafficMirrorTargetPost
  /*


&lt;p&gt;Deletes the specified Traffic Mirror target.&lt;/p&gt; &lt;p&gt;You cannot delete a Traffic Mirror target that is in use by a Traffic Mirror session.&lt;/p&gt;

 */
  actionDeleteTrafficMirrorTargetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror target.
    /*let trafficMirrorTargetId = "trafficMirrorTargetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTrafficMirrorTargetPost(
      incomingOptions.trafficMirrorTargetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayMulticastDomainPost
  /*


Deletes the specified transit gateway multicast domain.

 */
  actionDeleteTransitGatewayMulticastDomainPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway multicast domain.
    /*let transitGatewayMulticastDomainId = "transitGatewayMulticastDomainId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayMulticastDomainPost(
      incomingOptions.transitGatewayMulticastDomainId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayPeeringAttachmentPost
  /*


Deletes a transit gateway peering attachment.

 */
  actionDeleteTransitGatewayPeeringAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway peering attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayPeeringAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayPost
  /*


Deletes the specified transit gateway.

 */
  actionDeleteTransitGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway.
    /*let transitGatewayId = "transitGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayPost(
      incomingOptions.transitGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayRoutePost
  /*


Deletes the specified route from the specified transit gateway route table.

 */
  actionDeleteTransitGatewayRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The CIDR range for the route. This must match the CIDR for the route exactly.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let destinationCidrBlock = "destinationCidrBlock_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayRoutePost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.destinationCidrBlock,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayRouteTablePost
  /*


Deletes the specified transit gateway route table. You must disassociate the route table from any transit gateway route tables before you can delete it.

 */
  actionDeleteTransitGatewayRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayRouteTablePost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteTransitGatewayVpcAttachmentPost
  /*


Deletes the specified VPC attachment.

 */
  actionDeleteTransitGatewayVpcAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteTransitGatewayVpcAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVolumePost
  /*


&lt;p&gt;Deletes the specified EBS volume. The volume must be in the &lt;code&gt;available&lt;/code&gt; state (not attached to an instance).&lt;/p&gt; &lt;p&gt;The volume can remain in the &lt;code&gt;deleting&lt;/code&gt; state for several minutes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-deleting-volume.html\&quot;&gt;Deleting an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDeleteVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVolumePost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointConnectionNotificationsPost
  /*


Deletes one or more VPC endpoint connection notifications.

 */
  actionDeleteVpcEndpointConnectionNotificationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more notification IDs.
    /*let connectionNotificationId = "connectionNotificationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointConnectionNotificationsPost(
      incomingOptions.connectionNotificationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointServiceConfigurationsPost
  /*


Deletes one or more VPC endpoint service configurations in your account. Before you delete the endpoint service configuration, you must reject any &lt;code&gt;Available&lt;/code&gt; or &lt;code&gt;PendingAcceptance&lt;/code&gt; interface endpoint connections that are attached to the service.

 */
  actionDeleteVpcEndpointServiceConfigurationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of one or more services.
    /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointServiceConfigurationsPost(
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcEndpointsPost
  /*


Deletes one or more specified VPC endpoints. Deleting a gateway endpoint also deletes the endpoint routes in the route tables that were associated with the endpoint. Deleting an interface endpoint deletes the endpoint network interfaces.

 */
  actionDeleteVpcEndpointsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more VPC endpoint IDs.
    /*let vpcEndpointId = "vpcEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcEndpointsPost(
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcPeeringConnectionPost
  /*


Deletes a VPC peering connection. Either the owner of the requester VPC or the owner of the accepter VPC can delete the VPC peering connection if it&#39;s in the &lt;code&gt;active&lt;/code&gt; state. The owner of the requester VPC can delete a VPC peering connection in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. You cannot delete a VPC peering connection that&#39;s in the &lt;code&gt;failed&lt;/code&gt; state.

 */
  actionDeleteVpcPeeringConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC peering connection.
    /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcPeeringConnectionPost(
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpcPost
  /*


Deletes the specified VPC. You must detach or delete all gateways and resources that are associated with the VPC before you can delete it. For example, you must terminate all instances running in the VPC, delete all security groups associated with the VPC (except the default one), delete all route tables associated with the VPC (except the default one), and so on.

 */
  actionDeleteVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpcPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnConnectionPost
  /*


&lt;p&gt;Deletes the specified VPN connection.&lt;/p&gt; &lt;p&gt;If you&#39;re deleting the VPC and its associated components, we recommend that you detach the virtual private gateway from the VPC and delete the VPC before deleting the VPN connection. If you believe that the tunnel credentials for your VPN connection have been compromised, you can delete the VPN connection and create a new one that has new keys, without needing to delete the VPC or virtual private gateway. If you create a new VPN connection, you must reconfigure the customer gateway using the new configuration information returned with the new VPN connection ID.&lt;/p&gt;

 */
  actionDeleteVpnConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPN connection.
    /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnConnectionPost(
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnConnectionRoutePost
  /*


Deletes the specified static route associated with a VPN connection between an existing virtual private gateway and a VPN customer gateway. The static route allows traffic to be routed from the virtual private gateway to the VPN customer gateway.

 */
  actionDeleteVpnConnectionRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR block associated with the local subnet of the customer network // String | The ID of the VPN connection.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnConnectionRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeleteVpnGatewayPost
  /*


Deletes the specified virtual private gateway. We recommend that before you delete a virtual private gateway, you detach it from the VPC and delete the VPN connection. Note that you don&#39;t need to delete the virtual private gateway if you plan to delete and recreate the VPN connection between your VPC and your network.

 */
  actionDeleteVpnGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway.
    /*let vpnGatewayId = "vpnGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeleteVpnGatewayPost(
      incomingOptions.vpnGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeprovisionByoipCidrPost
  /*


&lt;p&gt;Releases the specified address range that you provisioned for use with your AWS resources through bring your own IP addresses (BYOIP) and deletes the corresponding address pool.&lt;/p&gt; &lt;p&gt;Before you can release an address range, you must stop advertising it using &lt;a&gt;WithdrawByoipCidr&lt;/a&gt; and you must not have any IP addresses allocated from its address range.&lt;/p&gt;

 */
  actionDeprovisionByoipCidrPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation. The prefix must be the same prefix that you specified when you provisioned the address range.
    /*let cidr = "cidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeprovisionByoipCidrPost(
      incomingOptions.cidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeregisterImagePost
  /*


&lt;p&gt;Deregisters the specified AMI. After you deregister an AMI, it can&#39;t be used to launch new instances however, it doesn&#39;t affect any instances that you&#39;ve already launched from the AMI. You&#39;ll continue to incur usage costs for those instances until you terminate them.&lt;/p&gt; &lt;p&gt;When you deregister an Amazon EBS-backed AMI, it doesn&#39;t affect the snapshot that was created for the root volume of the instance during the AMI creation process. When you deregister an instance store-backed AMI, it doesn&#39;t affect the files that you uploaded to Amazon S3 when you created the AMI.&lt;/p&gt;

 */
  actionDeregisterImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AMI.
    /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterImagePost(
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDeregisterTransitGatewayMulticastGroupMembersPost
  /*


Deregisters the specified members (network interfaces) from the transit gateway multicast group.

 */
  actionDeregisterTransitGatewayMulticastGroupMembersPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      //  'networkInterfaceIds': "networkInterfaceIds_example", // [String] | The IDs of the group members' network interfaces.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterTransitGatewayMulticastGroupMembersPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDeregisterTransitGatewayMulticastGroupSourcesPost
  /*


Deregisters the specified sources (network interfaces) from the transit gateway multicast group.

 */
  actionDeregisterTransitGatewayMulticastGroupSourcesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      //  'networkInterfaceIds': "networkInterfaceIds_example", // [String] | The IDs of the group sources' network interfaces.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDeregisterTransitGatewayMulticastGroupSourcesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAccountAttributesPost
  /*


&lt;p&gt;Describes attributes of your AWS account. The following are the supported account attributes:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;supported-platforms&lt;/code&gt;: Indicates whether your account can launch instances into EC2-Classic and EC2-VPC, or only into EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;default-vpc&lt;/code&gt;: The ID of the default VPC for your account, or &lt;code&gt;none&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-instances&lt;/code&gt;: This attribute is no longer supported. The returned value does not reflect your actual vCPU limit for running On-Demand Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-on-demand-instances.html#ec2-on-demand-instances-limits\&quot;&gt;On-Demand Instance Limits&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-security-groups-per-interface&lt;/code&gt;: The maximum number of security groups that you can assign to a network interface.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-Classic. &lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;code&gt;vpc-max-elastic-ips&lt;/code&gt;: The maximum number of Elastic IP addresses that you can allocate for use with EC2-VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDescribeAccountAttributesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'attributeName': "attributeName_example", // [String] | The account attribute names.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAccountAttributesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAddressesPost
  /*


&lt;p&gt;Describes the specified Elastic IP addresses or all of your Elastic IP addresses.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeAddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>allocation-id</code> - [EC2-VPC] The allocation ID for the address.</p> </li> <li> <p> <code>association-id</code> - [EC2-VPC] The association ID for the address.</p> </li> <li> <p> <code>domain</code> - Indicates whether the address is for use in EC2-Classic (<code>standard</code>) or in a VPC (<code>vpc</code>).</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance the address is associated with, if any.</p> </li> <li> <p> <code>network-border-group</code> - The location from where the IP address is advertised.</p> </li> <li> <p> <code>network-interface-id</code> - [EC2-VPC] The ID of the network interface that the address is associated with, if any.</p> </li> <li> <p> <code>network-interface-owner-id</code> - The AWS account ID of the owner.</p> </li> <li> <p> <code>private-ip-address</code> - [EC2-VPC] The private IP address associated with the Elastic IP address.</p> </li> <li> <p> <code>public-ip</code> - The Elastic IP address.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      //  'publicIp': "publicIp_example", // [String] | <p>One or more Elastic IP addresses.</p> <p>Default: Describes all your Elastic IP addresses.</p>
      //  'allocationId': "allocationId_example", // [String] | [EC2-VPC] Information about the allocation IDs.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAddressesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAggregateIdFormatPost
  /*


&lt;p&gt;Describes the longer ID format settings for all resource types in a specific Region. This request is useful for performing a quick audit to determine whether a specific Region is fully opted in for longer IDs (17-character IDs).&lt;/p&gt; &lt;p&gt;This request only returns information about resource types that support longer IDs.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt;

 */
  actionDescribeAggregateIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAggregateIdFormatPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeAvailabilityZonesPost
  /*


&lt;p&gt;Describes the Availability Zones and Local Zones that are available to you. If there is an event impacting an Availability Zone or Local Zone, you can use this request to view the state and any provided messages for that Availability Zone or Local Zone.&lt;/p&gt; &lt;p&gt;For more information about Availability Zones and Local Zones, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html\&quot;&gt;Regions and Availability Zones&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeAvailabilityZonesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>group-name</code> - For Availability Zones, use the Region name. For Local Zones, use the name of the group associated with the Local Zone (for example, <code>us-west-2-lax-1</code>).</p> </li> <li> <p> <code>message</code> - The Availability Zone or Local Zone message.</p> </li> <li> <p> <code>opt-in-status</code> - The opt in status (<code>opted-in</code>, and <code>not-opted-in</code> | <code>opt-in-not-required</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region for the Availability Zone or Local Zone (for example, <code>us-east-1</code>).</p> </li> <li> <p> <code>state</code> - The state of the Availability Zone or Local Zone (<code>available</code> | <code>information</code> | <code>impaired</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>zone-id</code> - The ID of the Availability Zone (for example, <code>use1-az1</code>) or the Local Zone (for example, use <code>usw2-lax1-az1</code>).</p> </li> <li> <p> <code>zone-name</code> - The name of the Availability Zone (for example, <code>us-east-1a</code>) or the Local Zone (for example, use <code>us-west-2-lax-1a</code>).</p> </li> </ul>
      //  'zoneName': "zoneName_example", // [String] | The names of the Availability Zones and Local Zones.
      //  'zoneId': "zoneId_example", // [String] | The IDs of the Availability Zones and Local Zones.
      allAvailabilityZones: true, // Boolean | <p>Include all Availability Zones and Local Zones regardless of your opt in status.</p> <p>If you do not use this parameter, the results include only the zones for the Regions where you have chosen the option to opt in.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeAvailabilityZonesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeBundleTasksPost
  /*


&lt;p&gt;Describes the specified bundle tasks or all of your bundle tasks.&lt;/p&gt; &lt;note&gt; &lt;p&gt;Completed bundle tasks are listed for only a limited time. If your bundle task is no longer in the list, you can still register an AMI from it. Just use &lt;code&gt;RegisterImage&lt;/code&gt; with the Amazon S3 bucket name and image manifest name you provided to the bundle task.&lt;/p&gt; &lt;/note&gt;

 */
  actionDescribeBundleTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'bundleId': "bundleId_example", // [String] | <p>The bundle task IDs.</p> <p>Default: Describes all your bundle tasks.</p>
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>bundle-id</code> - The ID of the bundle task.</p> </li> <li> <p> <code>error-code</code> - If the task failed, the error code returned.</p> </li> <li> <p> <code>error-message</code> - If the task failed, the error message returned.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>progress</code> - The level of task completion, as a percentage (for example, 20%).</p> </li> <li> <p> <code>s3-bucket</code> - The Amazon S3 bucket to store the AMI.</p> </li> <li> <p> <code>s3-prefix</code> - The beginning of the AMI name.</p> </li> <li> <p> <code>start-time</code> - The time the task started (for example, 2013-09-15T17:15:20.000Z).</p> </li> <li> <p> <code>state</code> - The state of the task (<code>pending</code> | <code>waiting-for-shutdown</code> | <code>bundling</code> | <code>storing</code> | <code>cancelling</code> | <code>complete</code> | <code>failed</code>).</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update for the task.</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeBundleTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeByoipCidrsPost
  /*


&lt;p&gt;Describes the IP address ranges that were specified in calls to &lt;a&gt;ProvisionByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To describe the address pools that were created when you provisioned the address ranges, use &lt;a&gt;DescribePublicIpv4Pools&lt;/a&gt;.&lt;/p&gt;

 */
  actionDescribeByoipCidrsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    /*let maxResults = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeByoipCidrsPost(
      incomingOptions.maxResults,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCapacityReservationsPost
  /*


Describes one or more of your Capacity Reservations. The results describe only the Capacity Reservations in the AWS Region that you&#39;re currently using.

 */
  actionDescribeCapacityReservationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'capacityReservationId': "capacityReservationId_example", // [String] | The ID of the Capacity Reservation.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.
      //  'filter': "filter_example", // [String] | One or more filters.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCapacityReservationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClassicLinkInstancesPost
  /*


Describes one or more of your linked EC2-Classic instances. This request only returns information about EC2-Classic instances linked to a VPC through ClassicLink. You cannot use this request to return information about other instances.

 */
  actionDescribeClassicLinkInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>group-id</code> - The ID of a VPC security group that's associated with the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC to which the instance is linked.</p> <p> <code>vpc-id</code> - The ID of the VPC that the instance is linked to.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceId': "instanceId_example", // [String] | One or more instance IDs. Must be instances linked to a VPC through ClassicLink.
      maxResults: 56 // Number | <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClassicLinkInstancesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnAuthorizationRulesPost
  /*


Describes the authorization rules for a specified Client VPN endpoint.

 */
  actionDescribeClientVpnAuthorizationRulesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'filter': "filter_example", // [String] | One or more filters. Filter names and values are case-sensitive.
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnAuthorizationRulesPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnConnectionsPost
  /*


Describes active client connections and connections that have been terminated within the last 60 minutes for the specified Client VPN endpoint.

 */
  actionDescribeClientVpnConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | One or more filters. Filter names and values are case-sensitive.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnConnectionsPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnEndpointsPost
  /*


Describes one or more Client VPN endpoints in the account.

 */
  actionDescribeClientVpnEndpointsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientVpnEndpointId': "clientVpnEndpointId_example", // [String] | The ID of the Client VPN endpoint.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'filter': "filter_example", // [String] | One or more filters. Filter names and values are case-sensitive.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnEndpointsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnRoutesPost
  /*


Describes the routes for the specified Client VPN endpoint.

 */
  actionDescribeClientVpnRoutesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | One or more filters. Filter names and values are case-sensitive.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnRoutesPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeClientVpnTargetNetworksPost
  /*


Describes the target networks associated with the specified Client VPN endpoint.

 */
  actionDescribeClientVpnTargetNetworksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'associationIds': "associationIds_example", // [String] | The IDs of the target network associations.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the nextToken value.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'filter': "filter_example", // [String] | One or more filters. Filter names and values are case-sensitive.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeClientVpnTargetNetworksPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCoipPoolsPost
  /*


Describes the specified customer-owned address pools or all of your customer-owned address pools.

 */
  actionDescribeCoipPoolsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'poolId': "poolId_example", // [String] | The IDs of the address pools.
      //  'filter': "filter_example", // [String] | <p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-pool.pool-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-pool.local-gateway-route-table-id</code> </p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCoipPoolsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeConversionTasksPost
  /*


&lt;p&gt;Describes the specified conversion tasks or all your conversion tasks. For more information, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/\&quot;&gt;VM Import/Export User Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionDescribeConversionTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'conversionTaskId': "conversionTaskId_example", // [String] | The conversion task IDs.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeConversionTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeCustomerGatewaysPost
  /*


&lt;p&gt;Describes one or more of your VPN customer gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeCustomerGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'customerGatewayId': "customerGatewayId_example", // [String] | <p>One or more customer gateway IDs.</p> <p>Default: Describes all your customer gateways.</p>
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>bgp-asn</code> - The customer gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN).</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of the customer gateway.</p> </li> <li> <p> <code>ip-address</code> - The IP address of the customer gateway's Internet-routable external interface.</p> </li> <li> <p> <code>state</code> - The state of the customer gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>type</code> - The type of customer gateway. Currently, the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeCustomerGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeDhcpOptionsPost
  /*


&lt;p&gt;Describes one or more of your DHCP options sets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_DHCP_Options.html\&quot;&gt;DHCP Options Sets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeDhcpOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'dhcpOptionsId': "dhcpOptionsId_example", // [String] | <p>The IDs of one or more DHCP options sets.</p> <p>Default: Describes all your DHCP options sets.</p>
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>dhcp-options-id</code> - The ID of a DHCP options set.</p> </li> <li> <p> <code>key</code> - The key for one of the options (for example, <code>domain-name</code>).</p> </li> <li> <p> <code>value</code> - The value for one of the options.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the DHCP options set.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeDhcpOptionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeEgressOnlyInternetGatewaysPost
  /*


Describes one or more of your egress-only internet gateways.

 */
  actionDescribeEgressOnlyInternetGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'egressOnlyInternetGatewayId': "egressOnlyInternetGatewayId_example", // [String] | One or more egress-only internet gateway IDs.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeEgressOnlyInternetGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeElasticGpusPost
  /*


Describes the Elastic Graphics accelerator associated with your instances. For more information about Elastic Graphics, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\&quot;&gt;Amazon Elastic Graphics&lt;/a&gt;.

 */
  actionDescribeElasticGpusPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'elasticGpuId': "elasticGpuId_example", // [String] | The Elastic Graphics accelerator IDs.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone in which the Elastic Graphics accelerator resides.</p> </li> <li> <p> <code>elastic-gpu-health</code> - The status of the Elastic Graphics accelerator (<code>OK</code> | <code>IMPAIRED</code>).</p> </li> <li> <p> <code>elastic-gpu-state</code> - The state of the Elastic Graphics accelerator (<code>ATTACHED</code>).</p> </li> <li> <p> <code>elastic-gpu-type</code> - The type of Elastic Graphics accelerator for example, <code>eg1.medium</code>.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance to which the Elastic Graphics accelerator is associated.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000.
      //  'nextToken': "nextToken_example" // String | The token to request the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeElasticGpusPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeExportImageTasksPost
  /*


Describes the specified export image tasks or all your export image tasks.

 */
  actionDescribeExportImageTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.
      //  'exportImageTaskId': "exportImageTaskId_example", // [String] | The IDs of the export image tasks.
      maxResults: 56 // Number | The maximum number of results to return in a single call.
      //  'nextToken': "nextToken_example" // String | A token that indicates the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeExportImageTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeExportTasksPost
  /*


Describes the specified export instance tasks or all your export instance tasks.

 */
  actionDescribeExportTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'exportTaskId': "exportTaskId_example", // [String] | The export task IDs.
      //  'filter': "filter_example" // [String] |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeExportTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFastSnapshotRestoresPost
  /*


Describes the state of fast snapshot restores for your snapshots.

 */
  actionDescribeFastSnapshotRestoresPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters. The possible values are:</p> <ul> <li> <p> <code>availability-zone</code>: The Availability Zone of the snapshot.</p> </li> <li> <p> <code>owner-id</code>: The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>snapshot-id</code>: The ID of the snapshot.</p> </li> <li> <p> <code>state</code>: The state of fast snapshot restores for the snapshot (<code>enabling</code> | <code>optimizing</code> | <code>enabled</code> | <code>disabling</code> | <code>disabled</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFastSnapshotRestoresPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetHistoryPost
  /*


&lt;p&gt;Describes the events for the specified EC2 Fleet during the specified time.&lt;/p&gt; &lt;p&gt;EC2 Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. EC2 Fleet events are available for 48 hours.&lt;/p&gt;

 */
  actionDescribeFleetHistoryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EC2 Fleet // Date | The start date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /*let fleetId = "fleetId_example";*/ /*let startTime = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'eventType': "eventType_example", // String | The type of events to describe. By default, all events are described.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next set of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetHistoryPost(
      incomingOptions.fleetId,
      incomingOptions.startTime,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetInstancesPost
  /*


Describes the running instances for the specified EC2 Fleet.

 */
  actionDescribeFleetInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EC2 Fleet.
    /*let fleetId = "fleetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'filter': "filter_example" // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetInstancesPost(
      incomingOptions.fleetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFleetsPost
  /*


Describes the specified EC2 Fleets or all of your EC2 Fleets.

 */
  actionDescribeFleetsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'fleetId': "fleetId_example", // [String] | The ID of the EC2 Fleets.
      //  'filter': "filter_example" // [String] | <p>The filters.</p> <ul> <li> <p> <code>activity-status</code> - The progress of the EC2 Fleet ( <code>error</code> | <code>pending-fulfillment</code> | <code>pending-termination</code> | <code>fulfilled</code>).</p> </li> <li> <p> <code>excess-capacity-termination-policy</code> - Indicates whether to terminate running instances if the target capacity is decreased below the current EC2 Fleet size (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>fleet-state</code> - The state of the EC2 Fleet (<code>submitted</code> | <code>active</code> | <code>deleted</code> | <code>failed</code> | <code>deleted-running</code> | <code>deleted-terminating</code> | <code>modifying</code>).</p> </li> <li> <p> <code>replace-unhealthy-instances</code> - Indicates whether EC2 Fleet should replace unhealthy instances (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>type</code> - The type of request (<code>instant</code> | <code>request</code> | <code>maintain</code>).</p> </li> </ul>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFleetsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFlowLogsPost
  /*


Describes one or more flow logs. To view the information in your flow logs (the log streams for the network interfaces), you must use the CloudWatch Logs console or the CloudWatch Logs API.

 */
  actionDescribeFlowLogsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>deliver-log-status</code> - The status of the logs delivery (<code>SUCCESS</code> | <code>FAILED</code>).</p> </li> <li> <p> <code>log-destination-type</code> - The type of destination to which the flow log publishes data. Possible destination types include <code>cloud-watch-logs</code> and <code>S3</code>.</p> </li> <li> <p> <code>flow-log-id</code> - The ID of the flow log.</p> </li> <li> <p> <code>log-group-name</code> - The name of the log group.</p> </li> <li> <p> <code>resource-id</code> - The ID of the VPC, subnet, or network interface.</p> </li> <li> <p> <code>traffic-type</code> - The type of traffic (<code>ACCEPT</code> | <code>REJECT</code> | <code>ALL</code>).</p> </li> </ul>
      //  'flowLogId': "flowLogId_example", // [String] | <p>One or more flow log IDs.</p> <p>Constraint: Maximum of 1000 flow log IDs.</p>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFlowLogsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFpgaImageAttributePost
  /*


Describes the specified attribute of the specified Amazon FPGA Image (AFI).

 */
  actionDescribeFpgaImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AFI // String | The AFI attribute.
    /*let fpgaImageId = "fpgaImageId_example";*/ /*let attribute = "attribute_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFpgaImageAttributePost(
      incomingOptions.fpgaImageId,
      incomingOptions.attribute,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeFpgaImagesPost
  /*


Describes the Amazon FPGA Images (AFIs) available to you. These include public AFIs, private AFIs that you own, and AFIs owned by other AWS accounts for which you have load permissions.

 */
  actionDescribeFpgaImagesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'fpgaImageId': "fpgaImageId_example", // [String] | The AFI IDs.
      //  'owner': "owner_example", // [String] | Filters the AFI by owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code>).
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>create-time</code> - The creation time of the AFI.</p> </li> <li> <p> <code>fpga-image-id</code> - The FPGA image identifier (AFI ID).</p> </li> <li> <p> <code>fpga-image-global-id</code> - The global FPGA image identifier (AGFI ID).</p> </li> <li> <p> <code>name</code> - The name of the AFI.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the AFI owner.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>shell-version</code> - The version of the AWS Shell that was used to create the bitstream.</p> </li> <li> <p> <code>state</code> - The state of the AFI (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>unavailable</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>update-time</code> - The time of the most recent update.</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56 // Number | The maximum number of results to return in a single call.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeFpgaImagesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostReservationOfferingsPost
  /*


&lt;p&gt;Describes the Dedicated Host reservations that are available to purchase.&lt;/p&gt; &lt;p&gt;The results describe all of the Dedicated Host reservation offerings, including offerings that might not match the instance family and Region of your Dedicated Hosts. When purchasing an offering, ensure that the instance family and Region of the offering matches that of the Dedicated Hosts with which it is to be associated. For more information about supported instance types, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Hosts Overview&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt;

 */
  actionDescribeHostReservationOfferingsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family of the offering (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> </ul>
      maxDuration: 56, // Number | This is the maximum duration of the reservation to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 94608000 for three years.
      maxResults: 56, // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.
      minDuration: 56 // Number | This is the minimum duration of the reservation you'd like to purchase, specified in seconds. Reservations are available in one-year and three-year terms. The number of seconds specified must be the number of seconds in a year (365x24x60x60) times one of the supported durations (1 or 3). For example, specify 31536000 for one year.
      //  'nextToken': "nextToken_example", // String | The token to use to retrieve the next page of results.
      //  'offeringId': "offeringId_example" // String | The ID of the reservation offering.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostReservationOfferingsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostReservationsPost
  /*


Describes reservations that are associated with Dedicated Hosts in your account.

 */
  actionDescribeHostReservationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-family</code> - The instance family (for example, <code>m4</code>).</p> </li> <li> <p> <code>payment-option</code> - The payment option (<code>NoUpfront</code> | <code>PartialUpfront</code> | <code>AllUpfront</code>).</p> </li> <li> <p> <code>state</code> - The state of the reservation (<code>payment-pending</code> | <code>payment-failed</code> | <code>active</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      //  'hostReservationIdSet': "hostReservationIdSet_example", // [String] | The host reservation IDs.
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.
      //  'nextToken': "nextToken_example" // String | The token to use to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostReservationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeHostsPost
  /*


&lt;p&gt;Describes the specified Dedicated Hosts or all your Dedicated Hosts.&lt;/p&gt; &lt;p&gt;The results describe only the Dedicated Hosts in the Region you&#39;re currently using. All listed instances consume capacity on your Dedicated Host. Dedicated Hosts that have recently been released are listed with the state &lt;code&gt;released&lt;/code&gt;.&lt;/p&gt;

 */
  actionDescribeHostsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>auto-placement</code> - Whether auto-placement is enabled or disabled (<code>on</code> | <code>off</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the host.</p> </li> <li> <p> <code>client-token</code> - The idempotency token that you provided when you allocated the host.</p> </li> <li> <p> <code>host-reservation-id</code> - The ID of the reservation assigned to this host.</p> </li> <li> <p> <code>instance-type</code> - The instance type size that the Dedicated Host is configured to support.</p> </li> <li> <p> <code>state</code> - The allocation state of the Dedicated Host (<code>available</code> | <code>under-assessment</code> | <code>permanent-failure</code> | <code>released</code> | <code>released-permanent-failure</code>).</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      //  'hostId': "hostId_example", // [String] | The IDs of the Dedicated Hosts. The IDs are used for targeted instance launches.
      maxResults: 56 // Number | <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned <code>nextToken</code> value. This value can be between 5 and 500. If <code>maxResults</code> is given a larger value than 500, you receive an error.</p> <p>You cannot specify this parameter and the host IDs parameter in the same request.</p>
      //  'nextToken': "nextToken_example" // String | The token to use to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeHostsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIamInstanceProfileAssociationsPost
  /*


Describes your IAM instance profile associations.

 */
  actionDescribeIamInstanceProfileAssociationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'associationId': "associationId_example", // [String] | The IAM instance profile associations.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code> | <code>disassociated</code>).</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token to request the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIamInstanceProfileAssociationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIdFormatPost
  /*


&lt;p&gt;Describes the ID format settings for your resources on a per-Region basis, for example, to view which resource types are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the IAM user who makes the request they do not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user, unless they explicitly override the settings by running the &lt;a&gt;ModifyIdFormat&lt;/a&gt; command. Resources created with longer IDs are visible to all IAM users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionDescribeIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'resource': "resource_example" // String | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIdFormatPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeIdentityIdFormatPost
  /*


&lt;p&gt;Describes the ID format settings for resources for the specified IAM user, IAM role, or root user. For example, you can view the resource types that are enabled for longer IDs. This request only returns information about resource types whose ID formats can be modified it does not return information about other resource types. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;These settings apply to the principal specified in the request. They do not apply to the principal that makes the request.&lt;/p&gt;

 */
  actionDescribeIdentityIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ARN of the principal, which can be an IAM role, IAM user, or the root user.
    /*let principalArn = "principalArn_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'resource': "resource_example" // String | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeIdentityIdFormatPost(
      incomingOptions.principalArn,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImageAttributePost
  /*


Describes the specified attribute of the specified AMI. You can specify only one attribute at a time.

 */
  actionDescribeImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The AMI attribute.</p> <p> <b>Note</b>: Depending on your account privileges, the <code>blockDeviceMapping</code> attribute may return a <code>Client.AuthFailure</code> error. If this happens, use <a>DescribeImages</a> to get information about the block device mapping for the AMI.</p // String | The ID of the AMI.
    /*let attribute = "attribute_example";*/ /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImageAttributePost(
      incomingOptions.attribute,
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImagesPost
  /*


&lt;p&gt;Describes the specified images (AMIs, AKIs, and ARIs) available to you or all of the images available to you.&lt;/p&gt; &lt;p&gt;The images available to you include public images, private images that you own, and private images owned by other AWS accounts for which you have explicit launch permissions.&lt;/p&gt; &lt;p&gt;Recently deregistered images appear in the returned results for a short interval and then return empty results. After all instances that reference a deregistered AMI are terminated, specifying the ID of the image results in an error indicating that the AMI ID cannot be found.&lt;/p&gt;

 */
  actionDescribeImagesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'executableBy': "executableBy_example", // [String] | Scopes the images by users with explicit launch permissions. Specify an AWS account ID, <code>self</code> (the sender of the request), or <code>all</code> (public AMIs).
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>architecture</code> - The image architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean value that indicates whether the Amazon EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.snapshot-id</code> - The ID of the snapshot used for the EBS volume.</p> </li> <li> <p> <code>block-device-mapping.volume-size</code> - The volume size of the EBS volume, in GiB.</p> </li> <li> <p> <code>block-device-mapping.volume-type</code> - The volume type of the EBS volume (<code>gp2</code> | <code>io1</code> | <code>st1 </code>| <code>sc1</code> | <code>standard</code>).</p> </li> <li> <p> <code>block-device-mapping.encrypted</code> - A Boolean that indicates whether the EBS volume is encrypted.</p> </li> <li> <p> <code>description</code> - The description of the image (provided during image creation).</p> </li> <li> <p> <code>ena-support</code> - A Boolean that indicates whether enhanced networking with ENA is enabled.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>image-id</code> - The ID of the image.</p> </li> <li> <p> <code>image-type</code> - The image type (<code>machine</code> | <code>kernel</code> | <code>ramdisk</code>).</p> </li> <li> <p> <code>is-public</code> - A Boolean that indicates whether the image is public.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>manifest-location</code> - The location of the image manifest.</p> </li> <li> <p> <code>name</code> - The name of the AMI (provided during image creation).</p> </li> <li> <p> <code>owner-alias</code> - String value from an Amazon-maintained list (<code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the image owner.</p> </li> <li> <p> <code>platform</code> - The platform. To only list Windows-based AMIs, use <code>windows</code>.</p> </li> <li> <p> <code>product-code</code> - The product code.</p> </li> <li> <p> <code>product-code.type</code> - The type of the product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>state</code> - The state of the image (<code>available</code> | <code>pending</code> | <code>failed</code>).</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - The message for the state change.</p> </li> <li> <p> <code>sriov-net-support</code> - A value of <code>simple</code> indicates that enhanced networking with the Intel 82599 VF interface is enabled.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type (<code>paravirtual</code> | <code>hvm</code>).</p> </li> </ul>
      //  'imageId': "imageId_example", // [String] | <p>The image IDs.</p> <p>Default: Describes all images available to you.</p>
      //  'owner': "owner_example", // [String] | Filters the images by the owner. Specify an AWS account ID, <code>self</code> (owner is the sender of the request), or an AWS owner alias (valid values are <code>amazon</code> | <code>aws-marketplace</code> | <code>microsoft</code>). Omitting this option returns all images for which you have launch permissions, regardless of ownership.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImagesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImportImageTasksPost
  /*


Displays details about an import virtual machine or import snapshot tasks that are already created.

 */
  actionDescribeImportImageTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filters': "filters_example", // [String] | Filter tasks using the <code>task-state</code> filter and one of the following values: <code>active</code>, <code>completed</code>, <code>deleting</code>, or <code>deleted</code>.
      //  'importTaskId': "importTaskId_example", // [String] | The IDs of the import image tasks.
      maxResults: 56 // Number | The maximum number of results to return in a single call.
      //  'nextToken': "nextToken_example" // String | A token that indicates the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImportImageTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeImportSnapshotTasksPost
  /*


Describes your import snapshot tasks.

 */
  actionDescribeImportSnapshotTasksPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filters': "filters_example", // [String] | The filters.
      //  'importTaskId': "importTaskId_example", // [String] | A list of import snapshot task IDs.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | A token that indicates the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeImportSnapshotTasksPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceAttributePost
  /*


Describes the specified attribute of the specified instance. You can specify only one attribute at a time. Valid attribute values are: &lt;code&gt;instanceType&lt;/code&gt; | &lt;code&gt;kernel&lt;/code&gt; | &lt;code&gt;ramdisk&lt;/code&gt; | &lt;code&gt;userData&lt;/code&gt; | &lt;code&gt;disableApiTermination&lt;/code&gt; | &lt;code&gt;instanceInitiatedShutdownBehavior&lt;/code&gt; | &lt;code&gt;rootDeviceName&lt;/code&gt; | &lt;code&gt;blockDeviceMapping&lt;/code&gt; | &lt;code&gt;productCodes&lt;/code&gt; | &lt;code&gt;sourceDestCheck&lt;/code&gt; | &lt;code&gt;groupSet&lt;/code&gt; | &lt;code&gt;ebsOptimized&lt;/code&gt; | &lt;code&gt;sriovNetSupport&lt;/code&gt;

 */
  actionDescribeInstanceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The instance attribute.</p> <p>Note: The <code>enaSupport</code> attribute is not supported at this time.</p // String | The ID of the instance.
    /*let attribute = "attribute_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceAttributePost(
      incomingOptions.attribute,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceCreditSpecificationsPost
  /*


&lt;p&gt;Describes the credit option for CPU usage of the specified burstable performance instances. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;If you do not specify an instance ID, Amazon EC2 returns burstable performance instances with the &lt;code&gt;unlimited&lt;/code&gt; credit option, as well as instances that were previously configured as T2, T3, and T3a with the &lt;code&gt;unlimited&lt;/code&gt; credit option. For example, if you resize a T2 instance, while it is configured as &lt;code&gt;unlimited&lt;/code&gt;, to an M4 instance, Amazon EC2 returns the M4 instance.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns the credit option (&lt;code&gt;standard&lt;/code&gt; or &lt;code&gt;unlimited&lt;/code&gt;) of those instances. If you specify an instance ID that is not valid, such as an instance that is not a burstable performance instance, an error is returned.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If an Availability Zone is experiencing a service disruption and you specify instance IDs in the affected zone, or do not specify any instance IDs at all, the call fails. If you specify only instance IDs in an unaffected zone, the call works normally.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeInstanceCreditSpecificationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> </ul>
      //  'instanceId': "instanceId_example", // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 1000 explicitly specified instance IDs.</p>
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceCreditSpecificationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceStatusPost
  /*


&lt;p&gt;Describes the status of the specified instances or all of your instances. By default, only running instances are described, unless you specifically indicate to return the status of all instances.&lt;/p&gt; &lt;p&gt;Instance status includes the following components:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Status checks&lt;/b&gt; - Amazon EC2 performs status checks on running EC2 instances to identify hardware and software issues. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-system-instance-status-check.html\&quot;&gt;Status Checks for Your Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstances.html\&quot;&gt;Troubleshooting Instances with Failed Status Checks&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Scheduled events&lt;/b&gt; - Amazon EC2 can schedule events (such as reboot, stop, or terminate) for your instances related to hardware issues, software updates, or system maintenance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-instances-status-check_sched.html\&quot;&gt;Scheduled Events for Your Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;b&gt;Instance state&lt;/b&gt; - You can manage your instances from the moment you launch them through their termination. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDescribeInstanceStatusPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.code</code> - The code for the scheduled event (<code>instance-reboot</code> | <code>system-reboot</code> | <code>system-maintenance</code> | <code>instance-retirement</code> | <code>instance-stop</code>).</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.instance-event-id</code> - The ID of the event whose date and time you are modifying.</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the scheduled event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>event.not-before-deadline</code> - The deadline for starting the event (for example, <code>2014-09-15T17:15:20.000Z</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The code for the instance state, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-status.reachability</code> - Filters on instance status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>instance-status.status</code> - The status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> <li> <p> <code>system-status.reachability</code> - Filters on system status where the name is <code>reachability</code> (<code>passed</code> | <code>failed</code> | <code>initializing</code> | <code>insufficient-data</code>).</p> </li> <li> <p> <code>system-status.status</code> - The system status of the instance (<code>ok</code> | <code>impaired</code> | <code>initializing</code> | <code>insufficient-data</code> | <code>not-applicable</code>).</p> </li> </ul>
      //  'instanceId': "instanceId_example", // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p> <p>Constraints: Maximum 100 explicitly specified instance IDs.</p>
      maxResults: 56, // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      includeAllInstances: true // Boolean | <p>When <code>true</code>, includes the health status for all instances. When <code>false</code>, includes the health status for running instances only.</p> <p>Default: <code>false</code> </p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceStatusPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceTypeOfferingsPost
  /*


Returns a list of all instance types offered. The results can be filtered by location (Region or Availability Zone). If no location is specified, the instance types offered in the current Region are returned.

 */
  actionDescribeInstanceTypeOfferingsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'locationType': "locationType_example", // String | The location type.
      //  'filter': "filter_example", // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>location</code> - This depends on the location type. For example, if the location type is <code>region</code> (default), the location is the Region code (for example, <code>us-east-2</code>.)</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceTypeOfferingsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstanceTypesPost
  /*


Returns a list of all instance types offered in your current AWS Region. The results can be filtered by the attributes of the instance types.

 */
  actionDescribeInstanceTypesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceType': "instanceType_example", // [String] | The instance types. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'filter': "filter_example", // [String] | <p>One or more filters. Filter names and values are case-sensitive.</p> <ul> <li> <p> <code>auto-recovery-supported</code> - Indicates whether auto recovery is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>bare-metal</code> - Indicates whether it is a bare metal instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>burstable-performance-supported</code> - Indicates whether it is a burstable performance instance type. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>current-generation</code> - Indicates whether this instance type is the latest generation instance type of an instance family. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>ebs-info.ebs-optimized-support</code> - Indicates whether the instance type is EBS-optimized. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>ebs-info.encryption-support</code> - Indicates whether EBS encryption is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>free-tier-eligible</code> - Indicates whether the instance type is eligible to use in the free tier. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hibernation-supported</code> - Indicates whether On-Demand hibernation is supported. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor used. (<code>nitro</code> | <code>xen</code>)</p> </li> <li> <p> <code>instance-storage-info.disk.count</code> - The number of local disks.</p> </li> <li> <p> <code>instance-storage-info.disk.size-in-gb</code> - The storage size of each instance storage disk, in GB.</p> </li> <li> <p> <code>instance-storage-info.disk.type</code> - The storage technology for the local instance storage disks. (<code>hdd</code> | <code>ssd</code>)</p> </li> <li> <p> <code>instance-storage-info.total-size-in-gb</code> - The total amount of storage available from all local instance storage, in GB.</p> </li> <li> <p> <code>instance-storage-supported</code> - Indicates whether the instance type has local instance storage. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>memory-info.size-in-mib</code> - The memory size.</p> </li> <li> <p> <code>network-info.ena-support</code> - Indicates whether Elastic Network Adapter (ENA) is supported or required. (<code>required</code> | <code>supported</code> | <code>unsupported</code>)</p> </li> <li> <p> <code>network-info.ipv4-addresses-per-interface</code> - The maximum number of private IPv4 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-addresses-per-interface</code> - The maximum number of private IPv6 addresses per network interface.</p> </li> <li> <p> <code>network-info.ipv6-supported</code> - Indicates whether the instance type supports IPv6. (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>network-info.maximum-network-interfaces</code> - The maximum number of network interfaces per instance.</p> </li> <li> <p> <code>network-info.network-performance</code> - Describes the network performance.</p> </li> <li> <p> <code>processor-info.sustained-clock-speed-in-ghz</code> - The CPU clock speed, in GHz.</p> </li> <li> <p> <code>vcpu-info.default-cores</code> - The default number of cores for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-threads-per-core</code> - The default number of threads per cores for the instance type.</p> </li> <li> <p> <code>vcpu-info.default-vcpus</code> - The default number of vCPUs for the instance type.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the next token value.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstanceTypesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInstancesPost
  /*


&lt;p&gt;Describes the specified instances or all of AWS account&#39;s instances.&lt;/p&gt; &lt;p&gt;If you specify one or more instance IDs, Amazon EC2 returns information for those instances. If you do not specify instance IDs, Amazon EC2 returns information for all relevant instances. If you specify an instance ID that is not valid, an error is returned. If you specify an instance that you do not own, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;Recently terminated instances might appear in the returned results. This interval is usually less than one hour.&lt;/p&gt; &lt;p&gt;If you describe instances in the rare case where an Availability Zone is experiencing a service disruption and you specify instance IDs that are in the affected zone, or do not specify any instance IDs at all, the call fails. If you describe instances and specify only instance IDs that are in an unaffected zone, the call works normally.&lt;/p&gt;

 */
  actionDescribeInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>affinity</code> - The affinity setting for an instance running on a Dedicated Host (<code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>architecture</code> - The instance architecture (<code>i386</code> | <code>x86_64</code> | <code>arm64</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>block-device-mapping.attach-time</code> - The attach time for an EBS volume mapped to the instance, for example, <code>2010-09-15T17:15:20.000Z</code>.</p> </li> <li> <p> <code>block-device-mapping.delete-on-termination</code> - A Boolean that indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>block-device-mapping.device-name</code> - The device name specified in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>block-device-mapping.status</code> - The status for the EBS volume (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>block-device-mapping.volume-id</code> - The volume ID of the EBS volume.</p> </li> <li> <p> <code>client-token</code> - The idempotency token you provided when you launched the instance.</p> </li> <li> <p> <code>dns-name</code> - The public DNS name of the instance.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>group-name</code> - The name of the security group for the instance. EC2-Classic only.</p> </li> <li> <p> <code>hibernation-options.configured</code> - A Boolean that indicates whether the instance is enabled for hibernation. A value of <code>true</code> means that the instance is enabled for hibernation. </p> </li> <li> <p> <code>host-id</code> - The ID of the Dedicated Host on which the instance is running, if applicable.</p> </li> <li> <p> <code>hypervisor</code> - The hypervisor type of the instance (<code>ovm</code> | <code>xen</code>).</p> </li> <li> <p> <code>iam-instance-profile.arn</code> - The instance profile associated with the instance. Specified as an ARN.</p> </li> <li> <p> <code>image-id</code> - The ID of the image used to launch the instance.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance.</p> </li> <li> <p> <code>instance-lifecycle</code> - Indicates whether this is a Spot Instance or a Scheduled Instance (<code>spot</code> | <code>scheduled</code>).</p> </li> <li> <p> <code>instance-state-code</code> - The state of the instance, as a 16-bit unsigned integer. The high byte is used for internal purposes and should be ignored. The low byte is set based on the state represented. The valid values are: 0 (pending), 16 (running), 32 (shutting-down), 48 (terminated), 64 (stopping), and 80 (stopped).</p> </li> <li> <p> <code>instance-state-name</code> - The state of the instance (<code>pending</code> | <code>running</code> | <code>shutting-down</code> | <code>terminated</code> | <code>stopping</code> | <code>stopped</code>).</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>t2.micro</code>).</p> </li> <li> <p> <code>instance.group-id</code> - The ID of the security group for the instance. </p> </li> <li> <p> <code>instance.group-name</code> - The name of the security group for the instance. </p> </li> <li> <p> <code>ip-address</code> - The public IPv4 address of the instance.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair used when the instance was launched.</p> </li> <li> <p> <code>launch-index</code> - When launching multiple instances, this is the index for the instance in the launch group (for example, 0, 1, 2, and so on). </p> </li> <li> <p> <code>launch-time</code> - The time when the instance was launched.</p> </li> <li> <p> <code>metadata-options.http-tokens</code> - The metadata request authorization state (<code>optional</code> | <code>required</code>)</p> </li> <li> <p> <code>metadata-options.http-put-response-hop-limit</code> - The http metadata request put response hop limit (integer, possible values <code>1</code> to <code>64</code>)</p> </li> <li> <p> <code>metadata-options.http-endpoint</code> - Enable or disable metadata access on http endpoint (<code>enabled</code> | <code>disabled</code>)</p> </li> <li> <p> <code>monitoring-state</code> - Indicates whether detailed monitoring is enabled (<code>disabled</code> | <code>enabled</code>).</p> </li> <li> <p> <code>network-interface.addresses.private-ip-address</code> - The private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Specifies whether the IPv4 address of the network interface is the primary private IPv4 address.</p> </li> <li> <p> <code>network-interface.addresses.association.public-ip</code> - The ID of the association of an Elastic IP address (IPv4) with a network interface.</p> </li> <li> <p> <code>network-interface.addresses.association.ip-owner-id</code> - The owner ID of the private IPv4 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>network-interface.association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>network-interface.association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>network-interface.association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>network-interface.attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>network-interface.attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>network-interface.attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>network-interface.attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>network-interface.attachment.delete-on-termination</code> - Specifies whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>network-interface.availability-zone</code> - The Availability Zone for the network interface.</p> </li> <li> <p> <code>network-interface.description</code> - The description of the network interface.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.ipv6-addresses.ipv6-address</code> - The IPv6 address associated with the network interface.</p> </li> <li> <p> <code>network-interface.mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.owner-id</code> - The ID of the owner of the network interface.</p> </li> <li> <p> <code>network-interface.private-dns-name</code> - The private DNS name of the network interface.</p> </li> <li> <p> <code>network-interface.requester-id</code> - The requester ID for the network interface.</p> </li> <li> <p> <code>network-interface.requester-managed</code> - Indicates whether the network interface is being managed by AWS.</p> </li> <li> <p> <code>network-interface.status</code> - The status of the network interface (<code>available</code>) | <code>in-use</code>).</p> </li> <li> <p> <code>network-interface.source-dest-check</code> - Whether the network interface performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>network-interface.vpc-id</code> - The ID of the VPC for the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the instance owner.</p> </li> <li> <p> <code>placement-group-name</code> - The name of the placement group for the instance.</p> </li> <li> <p> <code>placement-partition-number</code> - The partition in which the instance is located.</p> </li> <li> <p> <code>platform</code> - The platform. To list only Windows instances, use <code>windows</code>.</p> </li> <li> <p> <code>private-dns-name</code> - The private IPv4 DNS name of the instance.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address of the instance.</p> </li> <li> <p> <code>product-code</code> - The product code associated with the AMI used to launch the instance.</p> </li> <li> <p> <code>product-code.type</code> - The type of product code (<code>devpay</code> | <code>marketplace</code>).</p> </li> <li> <p> <code>ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>reason</code> - The reason for the current state of the instance (for example, shows \"User Initiated [date]\" when you stop or terminate the instance). Similar to the state-reason-code filter.</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>reservation-id</code> - The ID of the instance's reservation. A reservation ID is created any time you launch an instance. A reservation ID has a one-to-one relationship with an instance launch request, but can be associated with more than one instance if you launch multiple instances using the same launch request. For example, if you launch one instance, you get one reservation ID. If you launch ten instances using the same launch request, you also get one reservation ID.</p> </li> <li> <p> <code>root-device-name</code> - The device name of the root device volume (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>root-device-type</code> - The type of the root device volume (<code>ebs</code> | <code>instance-store</code>).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the instance performs source/destination checking. A value of <code>true</code> means that checking is enabled, and <code>false</code> means that checking is disabled. The value must be <code>false</code> for the instance to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>spot-instance-request-id</code> - The ID of the Spot Instance request.</p> </li> <li> <p> <code>state-reason-code</code> - The reason code for the state change.</p> </li> <li> <p> <code>state-reason-message</code> - A message that describes the state change.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources that have a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>tenancy</code> - The tenancy of an instance (<code>dedicated</code> | <code>default</code> | <code>host</code>).</p> </li> <li> <p> <code>virtualization-type</code> - The virtualization type of the instance (<code>paravirtual</code> | <code>hvm</code>).</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC that the instance is running in.</p> </li> </ul>
      //  'instanceId': "instanceId_example", // [String] | <p>The instance IDs.</p> <p>Default: Describes all your instances.</p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 5 and 1000. You cannot specify this parameter and the instance IDs parameter in the same call.
      //  'nextToken': "nextToken_example" // String | The token to request the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInstancesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeInternetGatewaysPost
  /*


Describes one or more of your internet gateways.

 */
  actionDescribeInternetGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>available</code>). Present only if a VPC is attached.</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>internet-gateway-id</code> - The ID of the Internet gateway.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the internet gateway.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'internetGatewayId': "internetGatewayId_example", // [String] | <p>One or more internet gateway IDs.</p> <p>Default: Describes all your internet gateways.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeInternetGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeKeyPairsPost
  /*


&lt;p&gt;Describes the specified key pairs or all of your key pairs.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeKeyPairsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>fingerprint</code> - The fingerprint of the key pair.</p> </li> <li> <p> <code>key-name</code> - The name of the key pair.</p> </li> </ul>
      //  'keyName': "keyName_example", // [String] | <p>The key pair names.</p> <p>Default: Describes all your key pairs.</p>
      //  'keyPairId': "keyPairId_example", // [String] | The IDs of the key pairs.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeKeyPairsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLaunchTemplateVersionsPost
  /*


Describes one or more versions of a specified launch template. You can describe all versions, individual versions, or a range of versions.

 */
  actionDescribeLaunchTemplateVersionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateVersion': "launchTemplateVersion_example", // [String] | One or more versions of the launch template.
      //  'minVersion': "minVersion_example", // String | The version number after which to describe launch template versions.
      //  'maxVersion': "maxVersion_example", // String | The version number up to which to describe launch template versions.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.
      //  'filter': "filter_example" // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template version was created.</p> </li> <li> <p> <code>ebs-optimized</code> - A boolean that indicates whether the instance is optimized for Amazon EBS I/O.</p> </li> <li> <p> <code>iam-instance-profile</code> - The ARN of the IAM instance profile.</p> </li> <li> <p> <code>image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>instance-type</code> - The instance type.</p> </li> <li> <p> <code>is-default-version</code> - A boolean that indicates whether the launch template version is the default version.</p> </li> <li> <p> <code>kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>ram-disk-id</code> - The RAM disk ID.</p> </li> </ul>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLaunchTemplateVersionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLaunchTemplatesPost
  /*


Describes one or more launch templates.

 */
  actionDescribeLaunchTemplatesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchTemplateId': "launchTemplateId_example", // [String] | One or more launch template IDs.
      //  'launchTemplateName': "launchTemplateName_example", // [String] | One or more launch template names.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>create-time</code> - The time the launch template was created.</p> </li> <li> <p> <code>launch-template-name</code> - The name of the launch template.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. This value can be between 1 and 200.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLaunchTemplatesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPost
  /*


Describes the associations between virtual interface groups and local gateway route tables.

 */
  actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPost(
    incomingOptions,
    cb
  ) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayRouteTableVirtualInterfaceGroupAssociationId': "localGatewayRouteTableVirtualInterfaceGroupAssociationId_example", // [String] | The IDs of the associations.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTableVpcAssociationsPost
  /*


Describes the specified associations between VPCs and local gateway route tables.

 */
  actionDescribeLocalGatewayRouteTableVpcAssociationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayRouteTableVpcAssociationId': "localGatewayRouteTableVpcAssociationId_example", // [String] | The IDs of the associations.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTableVpcAssociationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayRouteTablesPost
  /*


Describes one or more local gateway route tables. By default, all local gateway route tables are described. Alternatively, you can filter the results.

 */
  actionDescribeLocalGatewayRouteTablesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayRouteTableId': "localGatewayRouteTableId_example", // [String] | The IDs of the local gateway route tables.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayRouteTablesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayVirtualInterfaceGroupsPost
  /*


Describes the specified local gateway virtual interface groups.

 */
  actionDescribeLocalGatewayVirtualInterfaceGroupsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayVirtualInterfaceGroupId': "localGatewayVirtualInterfaceGroupId_example", // [String] | The IDs of the virtual interface groups.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayVirtualInterfaceGroupsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewayVirtualInterfacesPost
  /*


Describes the specified local gateway virtual interfaces.

 */
  actionDescribeLocalGatewayVirtualInterfacesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayVirtualInterfaceId': "localGatewayVirtualInterfaceId_example", // [String] | The IDs of the virtual interfaces.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewayVirtualInterfacesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeLocalGatewaysPost
  /*


Describes one or more local gateways. By default, all local gateways are described. Alternatively, you can filter the results.

 */
  actionDescribeLocalGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'localGatewayId': "localGatewayId_example", // [String] | The IDs of the local gateways.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeLocalGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeMovingAddressesPost
  /*


Describes your Elastic IP addresses that are being moved to the EC2-VPC platform, or that are being restored to the EC2-Classic platform. This request does not return information about any other Elastic IP addresses in your account.

 */
  actionDescribeMovingAddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>moving-status</code> - The status of the Elastic IP address (<code>MovingToVpc</code> | <code>RestoringToClassic</code>).</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value outside of this range, an error is returned.</p> <p>Default: If no value is provided, the default is 1000.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'publicIp': "publicIp_example" // [String] | One or more Elastic IP addresses.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeMovingAddressesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNatGatewaysPost
  /*


Describes one or more of your NAT gateways.

 */
  actionDescribeNatGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>nat-gateway-id</code> - The ID of the NAT gateway.</p> </li> <li> <p> <code>state</code> - The state of the NAT gateway (<code>pending</code> | <code>failed</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet in which the NAT gateway resides.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC in which the NAT gateway resides.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'natGatewayId': "natGatewayId_example", // [String] | One or more NAT gateway IDs.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNatGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkAclsPost
  /*


&lt;p&gt;Describes one or more of your network ACLs.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeNetworkAclsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>association.association-id</code> - The ID of an association ID for the ACL.</p> </li> <li> <p> <code>association.network-acl-id</code> - The ID of the network ACL involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>default</code> - Indicates whether the ACL is the default network ACL for the VPC.</p> </li> <li> <p> <code>entry.cidr</code> - The IPv4 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.icmp.code</code> - The ICMP code specified in the entry, if any.</p> </li> <li> <p> <code>entry.icmp.type</code> - The ICMP type specified in the entry, if any.</p> </li> <li> <p> <code>entry.ipv6-cidr</code> - The IPv6 CIDR range specified in the entry.</p> </li> <li> <p> <code>entry.port-range.from</code> - The start of the port range specified in the entry. </p> </li> <li> <p> <code>entry.port-range.to</code> - The end of the port range specified in the entry. </p> </li> <li> <p> <code>entry.protocol</code> - The protocol specified in the entry (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>entry.rule-action</code> - Allows or denies the matching traffic (<code>allow</code> | <code>deny</code>).</p> </li> <li> <p> <code>entry.rule-number</code> - The number of an entry (in other words, rule) in the set of ACL entries.</p> </li> <li> <p> <code>network-acl-id</code> - The ID of the network ACL.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the network ACL.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network ACL.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'networkAclId': "networkAclId_example", // [String] | <p>One or more network ACL IDs.</p> <p>Default: Describes all your network ACLs.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkAclsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfaceAttributePost
  /*


Describes a network interface attribute. You can specify only one attribute at a time.

 */
  actionDescribeNetworkInterfaceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'attribute': "attribute_example", // String | The attribute of the network interface. This parameter is required.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfaceAttributePost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfacePermissionsPost
  /*


Describes the permissions for your network interfaces.

 */
  actionDescribeNetworkInterfacePermissionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'networkInterfacePermissionId': "networkInterfacePermissionId_example", // [String] | One or more network interface permission IDs.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>network-interface-permission.network-interface-permission-id</code> - The ID of the permission.</p> </li> <li> <p> <code>network-interface-permission.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface-permission.aws-account-id</code> - The AWS account ID.</p> </li> <li> <p> <code>network-interface-permission.aws-service</code> - The AWS service.</p> </li> <li> <p> <code>network-interface-permission.permission</code> - The type of permission (<code>INSTANCE-ATTACH</code> | <code>EIP-ASSOCIATE</code>).</p> </li> </ul>
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value. If this parameter is not specified, up to 50 results are returned by default.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfacePermissionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeNetworkInterfacesPost
  /*


Describes one or more of your network interfaces.

 */
  actionDescribeNetworkInterfacesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>addresses.private-ip-address</code> - The private IPv4 addresses associated with the network interface.</p> </li> <li> <p> <code>addresses.primary</code> - Whether the private IPv4 address is the primary IP address associated with the network interface. </p> </li> <li> <p> <code>addresses.association.public-ip</code> - The association ID returned when the network interface was associated with the Elastic IP address (IPv4).</p> </li> <li> <p> <code>addresses.association.owner-id</code> - The owner ID of the addresses associated with the network interface.</p> </li> <li> <p> <code>association.association-id</code> - The association ID returned when the network interface was associated with an IPv4 address.</p> </li> <li> <p> <code>association.allocation-id</code> - The allocation ID returned when you allocated the Elastic IP address (IPv4) for your network interface.</p> </li> <li> <p> <code>association.ip-owner-id</code> - The owner of the Elastic IP address (IPv4) associated with the network interface.</p> </li> <li> <p> <code>association.public-ip</code> - The address of the Elastic IP address (IPv4) bound to the network interface.</p> </li> <li> <p> <code>association.public-dns-name</code> - The public DNS name for the network interface (IPv4).</p> </li> <li> <p> <code>attachment.attachment-id</code> - The ID of the interface attachment.</p> </li> <li> <p> <code>attachment.attach-time</code> - The time that the network interface was attached to an instance.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Indicates whether the attachment is deleted when an instance is terminated.</p> </li> <li> <p> <code>attachment.device-index</code> - The device index to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.instance-owner-id</code> - The owner ID of the instance to which the network interface is attached.</p> </li> <li> <p> <code>attachment.nat-gateway-id</code> - The ID of the NAT gateway to which the network interface is attached.</p> </li> <li> <p> <code>attachment.status</code> - The status of the attachment (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the network interface.</p> </li> <li> <p> <code>description</code> - The description of the network interface.</p> </li> <li> <p> <code>group-id</code> - The ID of a security group associated with the network interface.</p> </li> <li> <p> <code>group-name</code> - The name of a security group associated with the network interface.</p> </li> <li> <p> <code>ipv6-addresses.ipv6-address</code> - An IPv6 address associated with the network interface.</p> </li> <li> <p> <code>mac-address</code> - The MAC address of the network interface.</p> </li> <li> <p> <code>network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the network interface owner.</p> </li> <li> <p> <code>private-ip-address</code> - The private IPv4 address or addresses of the network interface.</p> </li> <li> <p> <code>private-dns-name</code> - The private DNS name of the network interface (IPv4).</p> </li> <li> <p> <code>requester-id</code> - The ID of the entity that launched the instance on your behalf (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>requester-managed</code> - Indicates whether the network interface is being managed by an AWS service (for example, AWS Management Console, Auto Scaling, and so on).</p> </li> <li> <p> <code>source-dest-check</code> - Indicates whether the network interface performs source/destination checking. A value of <code>true</code> means checking is enabled, and <code>false</code> means checking is disabled. The value must be <code>false</code> for the network interface to perform network address translation (NAT) in your VPC. </p> </li> <li> <p> <code>status</code> - The status of the network interface. If the network interface is not attached to an instance, the status is <code>available</code> if a network interface is attached to an instance the status is <code>in-use</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet for the network interface.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the network interface.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'networkInterfaceId': "networkInterfaceId_example", // [String] | <p>One or more network interface IDs.</p> <p>Default: Describes all your network interfaces.</p>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56 // Number | The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results. You cannot specify this parameter and the network interface IDs parameter in the same request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeNetworkInterfacesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePlacementGroupsPost
  /*


Describes the specified placement groups or all of your placement groups. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;Placement Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDescribePlacementGroupsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>group-name</code> - The name of the placement group.</p> </li> <li> <p> <code>state</code> - The state of the placement group (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>strategy</code> - The strategy of the placement group (<code>cluster</code> | <code>spread</code> | <code>partition</code>).</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupName': "groupName_example", // [String] | <p>The names of the placement groups.</p> <p>Default: Describes all your placement groups, or only those otherwise specified.</p>
      //  'groupId': "groupId_example" // [String] | The IDs of the placement groups.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePlacementGroupsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePrefixListsPost
  /*


Describes available AWS services in a prefix list format, which includes the prefix list name and prefix list ID of the service and the IP address range for the service. A prefix list ID is required for creating an outbound security group rule that allows traffic from a VPC to access an AWS service through a gateway VPC endpoint. Currently, the services that support this action are Amazon S3 and Amazon DynamoDB.

 */
  actionDescribePrefixListsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>prefix-list-id</code>: The ID of a prefix list.</p> </li> <li> <p> <code>prefix-list-name</code>: The name of a prefix list.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'prefixListId': "prefixListId_example" // [String] | One or more prefix list IDs.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePrefixListsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePrincipalIdFormatPost
  /*


&lt;p&gt;Describes the ID format settings for the root user and all IAM roles and IAM users that have explicitly specified a longer ID (17-character ID) preference. &lt;/p&gt; &lt;p&gt;By default, all IAM roles and IAM users default to the same ID settings as the root user, unless they explicitly override the settings. This request is useful for identifying those IAM users and IAM roles that have overridden the default ID settings.&lt;/p&gt; &lt;p&gt;The following resource types support longer IDs: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;instance&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;reservation&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;snapshot&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;volume&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt;

 */
  actionDescribePrincipalIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'resource': "resource_example", // [String] | The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>instance</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>reservation</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>snapshot</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another call with the returned NextToken value.
      //  'nextToken': "nextToken_example" // String | The token to request the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePrincipalIdFormatPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribePublicIpv4PoolsPost
  /*


Describes the specified IPv4 address pools.

 */
  actionDescribePublicIpv4PoolsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'poolId': "poolId_example", // [String] | The IDs of the address pools.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribePublicIpv4PoolsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeRegionsPost
  /*


&lt;p&gt;Describes the Regions that are enabled for your account, or all Regions.&lt;/p&gt; &lt;p&gt;For a list of the Regions supported by Amazon EC2, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande.html#ec2_region\&quot;&gt; Regions and Endpoints&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about enabling and disabling Regions for your account, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/general/latest/gr/rande-manage.html\&quot;&gt;Managing AWS Regions&lt;/a&gt; in the &lt;i&gt;AWS General Reference&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeRegionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>endpoint</code> - The endpoint of the Region (for example, <code>ec2.us-east-1.amazonaws.com</code>).</p> </li> <li> <p> <code>opt-in-status</code> - The opt-in status of the Region (<code>opt-in-not-required</code> | <code>opted-in</code> | <code>not-opted-in</code>).</p> </li> <li> <p> <code>region-name</code> - The name of the Region (for example, <code>us-east-1</code>).</p> </li> </ul>
      //  'regionName': "regionName_example", // [String] | The names of the Regions. You can specify any Regions, whether they are enabled and disabled for your account.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      allRegions: true // Boolean | Indicates whether to display all Regions, including Regions that are disabled for your account.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeRegionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesListingsPost
  /*


&lt;p&gt;Describes your account&#39;s Reserved Instance listings in the Reserved Instance Marketplace.&lt;/p&gt; &lt;p&gt;The Reserved Instance Marketplace matches sellers who want to resell Reserved Instance capacity that they no longer need with buyers who want to purchase additional capacity. Reserved Instances bought and sold through the Reserved Instance Marketplace work like any other Reserved Instances.&lt;/p&gt; &lt;p&gt;As a seller, you choose to list some or all of your Reserved Instances, and you specify the upfront price to receive for them. Your Reserved Instances are then listed in the Reserved Instance Marketplace and are available for purchase.&lt;/p&gt; &lt;p&gt;As a buyer, you specify the configuration of the Reserved Instance to purchase, and the Marketplace matches what you&#39;re searching for with what&#39;s available. The Marketplace first sells the lowest priced Reserved Instances to you, and continues to sell available Reserved Instance listings to you until your demand is met. You are charged based on the total price of all of the listings that you purchase.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesListingsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances.</p> </li> <li> <p> <code>reserved-instances-listing-id</code> - The ID of the Reserved Instances listing.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instance listing (<code>pending</code> | <code>active</code> | <code>cancelled</code> | <code>closed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> </ul>
      //  'reservedInstancesId': "reservedInstancesId_example", // String | One or more Reserved Instance IDs.
      //  'reservedInstancesListingId': "reservedInstancesListingId_example" // String | One or more Reserved Instance listing IDs.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesListingsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesModificationsPost
  /*


&lt;p&gt;Describes the modifications made to your Reserved Instances. If no parameter is specified, information about all your Reserved Instances modification requests is returned. If a modification ID is specified, only information about the specific modification is returned.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;

 */
  actionDescribeReservedInstancesModificationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>client-token</code> - The idempotency token for the modification request.</p> </li> <li> <p> <code>create-date</code> - The time when the modification request was created.</p> </li> <li> <p> <code>effective-date</code> - The time when the modification becomes effective.</p> </li> <li> <p> <code>modification-result.reserved-instances-id</code> - The ID for the Reserved Instances created as part of the modification request. This ID is only available when the status of the modification is <code>fulfilled</code>.</p> </li> <li> <p> <code>modification-result.target-configuration.availability-zone</code> - The Availability Zone for the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-count </code> - The number of new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.instance-type</code> - The instance type of the new Reserved Instances.</p> </li> <li> <p> <code>modification-result.target-configuration.platform</code> - The network platform of the new Reserved Instances (<code>EC2-Classic</code> | <code>EC2-VPC</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instances modified.</p> </li> <li> <p> <code>reserved-instances-modification-id</code> - The ID of the modification request.</p> </li> <li> <p> <code>status</code> - The status of the Reserved Instances modification request (<code>processing</code> | <code>fulfilled</code> | <code>failed</code>).</p> </li> <li> <p> <code>status-message</code> - The reason for the status.</p> </li> <li> <p> <code>update-date</code> - The time when the modification request was last updated.</p> </li> </ul>
      //  'reservedInstancesModificationId': "reservedInstancesModificationId_example", // [String] | IDs for the submitted modification request.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesModificationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesOfferingsPost
  /*


&lt;p&gt;Describes Reserved Instance offerings that are available for purchase. With Reserved Instances, you purchase the right to launch instances for a period of time. During that time period, you do not receive insufficient capacity errors, and you pay a lower usage rate than the rate charged for On-Demand instances for the actual time used.&lt;/p&gt; &lt;p&gt;If you have listed your own Reserved Instances for sale in the Reserved Instance Marketplace, they will be excluded from these results. This is to ensure that you do not purchase your own Reserved Instances.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesOfferingsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'availabilityZone': "availabilityZone_example", // String | The Availability Zone in which the Reserved Instance can be used.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (for example, one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>marketplace</code> - Set to <code>true</code> to show only Reserved Instance Marketplace offerings. When this filter is not used, which is the default behavior, all offerings from both AWS and the Reserved Instance Marketplace are listed.</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC. (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code> Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>) </p> </li> <li> <p> <code>reserved-instances-offering-id</code> - The Reserved Instances offering ID.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Availability Zone</code> or <code>Region</code>).</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      includeMarketplace: true, // Boolean | Include Reserved Instance Marketplace offerings in the response.
      //  'instanceType': "instanceType_example", // String | The instance type that the reservation will cover (for example, <code>m1.small</code>). For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\\\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      maxDuration: 56, // Number | <p>The maximum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 94608000 (3 years)</p>
      maxInstanceCount: 56, // Number | <p>The maximum number of instances to filter when searching for offerings.</p> <p>Default: 20</p>
      minDuration: 56, // Number | <p>The minimum duration (in seconds) to filter when searching for offerings.</p> <p>Default: 2592000 (1 month)</p>
      //  'offeringClass': "offeringClass_example", // String | The offering class of the Reserved Instance. Can be <code>standard</code> or <code>convertible</code>.
      //  'productDescription': "productDescription_example", // String | The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the description are for use with Amazon VPC.
      //  'reservedInstancesOfferingId': "reservedInstancesOfferingId_example", // [String] | One or more Reserved Instances offering IDs.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'instanceTenancy': "instanceTenancy_example", // String | <p>The tenancy of the instances covered by the reservation. A Reserved Instance with a tenancy of <code>dedicated</code> is applied to instances that run in a VPC on single-tenant hardware (i.e., Dedicated Instances).</p> <p> <b>Important:</b> The <code>host</code> value cannot be used with this parameter. Use the <code>default</code> or <code>dedicated</code> values only.</p> <p>Default: <code>default</code> </p>
      maxResults: 56 // Number | <p>The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. The maximum is 100.</p> <p>Default: 100</p>
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      //  'offeringType': "offeringType_example" // String | The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesOfferingsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeReservedInstancesPost
  /*


&lt;p&gt;Describes one or more of the Reserved Instances that you purchased.&lt;/p&gt; &lt;p&gt;For more information about Reserved Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeReservedInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone where the Reserved Instance can be used.</p> </li> <li> <p> <code>duration</code> - The duration of the Reserved Instance (one year or three years), in seconds (<code>31536000</code> | <code>94608000</code>).</p> </li> <li> <p> <code>end</code> - The time when the Reserved Instance expires (for example, 2015-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>fixed-price</code> - The purchase price of the Reserved Instance (for example, 9800.0).</p> </li> <li> <p> <code>instance-type</code> - The instance type that is covered by the reservation.</p> </li> <li> <p> <code>scope</code> - The scope of the Reserved Instance (<code>Region</code> or <code>Availability Zone</code>).</p> </li> <li> <p> <code>product-description</code> - The Reserved Instance product platform description. Instances that include <code>(Amazon VPC)</code> in the product platform description will only be displayed to EC2-Classic account holders and are for use with Amazon VPC (<code>Linux/UNIX</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Red Hat Enterprise Linux</code> | <code>Red Hat Enterprise Linux (Amazon VPC)</code> | <code>Windows</code> | <code>Windows (Amazon VPC)</code> | <code>Windows with SQL Server Standard</code> | <code>Windows with SQL Server Standard (Amazon VPC)</code> | <code>Windows with SQL Server Web</code> | <code>Windows with SQL Server Web (Amazon VPC)</code> | <code>Windows with SQL Server Enterprise</code> | <code>Windows with SQL Server Enterprise (Amazon VPC)</code>).</p> </li> <li> <p> <code>reserved-instances-id</code> - The ID of the Reserved Instance.</p> </li> <li> <p> <code>start</code> - The time at which the Reserved Instance purchase request was placed (for example, 2014-08-07T11:54:42.000Z).</p> </li> <li> <p> <code>state</code> - The state of the Reserved Instance (<code>payment-pending</code> | <code>active</code> | <code>payment-failed</code> | <code>retired</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>usage-price</code> - The usage price of the Reserved Instance, per hour (for example, 0.84).</p> </li> </ul>
      //  'offeringClass': "offeringClass_example", // String | Describes whether the Reserved Instance is Standard or Convertible.
      //  'reservedInstancesId': "reservedInstancesId_example", // [String] | <p>One or more Reserved Instance IDs.</p> <p>Default: Describes all your Reserved Instances, or only those otherwise specified.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'offeringType': "offeringType_example" // String | The Reserved Instance offering type. If you are using tools that predate the 2011-11-01 API version, you only have access to the <code>Medium Utilization</code> Reserved Instance offering type.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeReservedInstancesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeRouteTablesPost
  /*


&lt;p&gt;Describes one or more of your route tables.&lt;/p&gt; &lt;p&gt;Each subnet in your VPC must be associated with a route table. If a subnet is not explicitly associated with any route table, it is implicitly associated with the main route table. This command does not return the subnet ID for implicit associations.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeRouteTablesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>association.route-table-association-id</code> - The ID of an association ID for the route table.</p> </li> <li> <p> <code>association.route-table-id</code> - The ID of the route table involved in the association.</p> </li> <li> <p> <code>association.subnet-id</code> - The ID of the subnet involved in the association.</p> </li> <li> <p> <code>association.main</code> - Indicates whether the route table is the main route table for the VPC (<code>true</code> | <code>false</code>). Route tables that do not have an association ID are not returned in the response.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the route table.</p> </li> <li> <p> <code>route-table-id</code> - The ID of the route table.</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The IPv4 CIDR range specified in a route in the table.</p> </li> <li> <p> <code>route.destination-ipv6-cidr-block</code> - The IPv6 CIDR range specified in a route in the route table.</p> </li> <li> <p> <code>route.destination-prefix-list-id</code> - The ID (prefix) of the AWS service specified in a route in the table.</p> </li> <li> <p> <code>route.egress-only-internet-gateway-id</code> - The ID of an egress-only Internet gateway specified in a route in the route table.</p> </li> <li> <p> <code>route.gateway-id</code> - The ID of a gateway specified in a route in the table.</p> </li> <li> <p> <code>route.instance-id</code> - The ID of an instance specified in a route in the table.</p> </li> <li> <p> <code>route.nat-gateway-id</code> - The ID of a NAT gateway.</p> </li> <li> <p> <code>route.transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>route.origin</code> - Describes how the route was created. <code>CreateRouteTable</code> indicates that the route was automatically created when the route table was created <code>CreateRoute</code> indicates that the route was manually added to the route table <code>EnableVgwRoutePropagation</code> indicates that the route was propagated by route propagation.</p> </li> <li> <p> <code>route.state</code> - The state of a route in the route table (<code>active</code> | <code>blackhole</code>). The blackhole state indicates that the route's target isn't available (for example, the specified gateway isn't attached to the VPC, the specified NAT instance has been terminated, and so on).</p> </li> <li> <p> <code>route.vpc-peering-connection-id</code> - The ID of a VPC peering connection specified in a route in the table.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the route table.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'routeTableId': "routeTableId_example", // [String] | <p>One or more route table IDs.</p> <p>Default: Describes all your route tables.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeRouteTablesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeScheduledInstanceAvailabilityPost
  /*


&lt;p&gt;Finds available schedules that meet the specified criteria.&lt;/p&gt; &lt;p&gt;You can search for an available schedule no more than 3 months in advance. You must meet the minimum required duration of 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.&lt;/p&gt; &lt;p&gt;After you find a schedule that meets your needs, call &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt; to purchase Scheduled Instances with that schedule.&lt;/p&gt;

 */
  actionDescribeScheduledInstanceAvailabilityPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      //  'firstSlotStartTimeRangeEarliestTime': "firstSlotStartTimeRangeEarliestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day. The earliest date and time, in UTC, for the Scheduled Instance to start.
      //  'firstSlotStartTimeRangeLatestTime': "firstSlotStartTimeRangeLatestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The time period must span less than one day. The latest date and time, in UTC, for the Scheduled Instance to start. This value must be later than or equal to the earliest date and at most three months in the future.
      maxResults: 56, // Number | The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 300. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      maxSlotDurationInHours: 56, // Number | The maximum available duration, in hours. This value must be greater than <code>MinSlotDurationInHours</code> and less than 1,720.
      minSlotDurationInHours: 56 // Number | The minimum available duration, in hours. The minimum required duration is 1,200 hours per year. For example, the minimum daily schedule is 4 hours, the minimum weekly schedule is 24 hours, and the minimum monthly schedule is 100 hours.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'recurrenceFrequency': "recurrenceFrequency_example", // String | Describes the recurring schedule for a Scheduled Instance. The frequency (<code>Daily</code>, <code>Weekly</code>, or <code>Monthly</code>).
      //  'recurrenceInterval': "recurrenceInterval_example", // String | Describes the recurring schedule for a Scheduled Instance. The interval quantity. The interval unit depends on the value of <code>Frequency</code>. For example, every 2 weeks or every 2 months.
      //  'recurrenceOccurrenceDays': "recurrenceOccurrenceDays_example", // [String] | Describes the recurring schedule for a Scheduled Instance. The days. For a monthly schedule, this is one or more days of the month (1-31). For a weekly schedule, this is one or more days of the week (1-7, where 1 is Sunday). You can't specify this value with a daily schedule. If the occurrence is relative to the end of the month, you can specify only a single day.
      //  'recurrenceOccurrenceRelativeToEnd': "recurrenceOccurrenceRelativeToEnd_example", // String | Describes the recurring schedule for a Scheduled Instance. Indicates whether the occurrence is relative to the end of the specified week or month. You can't specify this value with a daily schedule.
      //  'recurrenceOccurrenceUnit': "recurrenceOccurrenceUnit_example" // String | Describes the recurring schedule for a Scheduled Instance. The unit for <code>OccurrenceDays</code> (<code>DayOfWeek</code> or <code>DayOfMonth</code>). This value is required for a monthly schedule. You can't specify <code>DayOfWeek</code> with a weekly schedule. You can't specify this value with a daily schedule.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeScheduledInstanceAvailabilityPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeScheduledInstancesPost
  /*


Describes the specified Scheduled Instances or all your Scheduled Instances.

 */
  actionDescribeScheduledInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone (for example, <code>us-west-2a</code>).</p> </li> <li> <p> <code>instance-type</code> - The instance type (for example, <code>c4.large</code>).</p> </li> <li> <p> <code>network-platform</code> - The network platform (<code>EC2-Classic</code> or <code>EC2-VPC</code>).</p> </li> <li> <p> <code>platform</code> - The platform (<code>Linux/UNIX</code> or <code>Windows</code>).</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return in a single call. This value can be between 5 and 300. The default value is 100. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'scheduledInstanceId': "scheduledInstanceId_example", // [String] | The Scheduled Instance IDs.
      //  'slotStartTimeRangeEarliestTime': "slotStartTimeRangeEarliestTime_example", // String | Describes the time period for a Scheduled Instance to start its first schedule. The earliest date and time, in UTC, for the Scheduled Instance to start.
      //  'slotStartTimeRangeLatestTime': "slotStartTimeRangeLatestTime_example" // String | Describes the time period for a Scheduled Instance to start its first schedule. The latest date and time, in UTC, for the Scheduled Instance to start.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeScheduledInstancesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSecurityGroupReferencesPost
  /*


[VPC only] Describes the VPCs on the other side of a VPC peering connection that are referencing the security groups you&#39;ve specified in this request.

 */
  actionDescribeSecurityGroupReferencesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the security groups in your account.
    /*let groupId = "groupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSecurityGroupReferencesPost(
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSecurityGroupsPost
  /*


&lt;p&gt;Describes the specified security groups or all of your security groups.&lt;/p&gt; &lt;p&gt;A security group is for use with instances either in the EC2-Classic platform or in a specific VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Amazon EC2 Security Groups&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html\&quot;&gt;Security Groups for Your VPC&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSecurityGroupsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters. If using multiple filters for rules, the results include security groups for which any combination of rules - not necessarily a single rule - match all filters.</p> <ul> <li> <p> <code>description</code> - The description of the security group.</p> </li> <li> <p> <code>egress.ip-permission.cidr</code> - An IPv4 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.from-port</code> - For an outbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>egress.ip-permission.group-id</code> - The ID of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.group-name</code> - The name of a security group that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an outbound security group rule.</p> </li> <li> <p> <code>egress.ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service to which a security group rule allows outbound access.</p> </li> <li> <p> <code>egress.ip-permission.protocol</code> - The IP protocol for an outbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>egress.ip-permission.to-port</code> - For an outbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>egress.ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an outbound security group rule.</p> </li> <li> <p> <code>group-id</code> - The ID of the security group. </p> </li> <li> <p> <code>group-name</code> - The name of the security group.</p> </li> <li> <p> <code>ip-permission.cidr</code> - An IPv4 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.from-port</code> - For an inbound rule, the start of port range for the TCP and UDP protocols, or an ICMP type number.</p> </li> <li> <p> <code>ip-permission.group-id</code> - The ID of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.group-name</code> - The name of a security group that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.ipv6-cidr</code> - An IPv6 CIDR block for an inbound security group rule.</p> </li> <li> <p> <code>ip-permission.prefix-list-id</code> - The ID (prefix) of the AWS service from which a security group rule allows inbound access.</p> </li> <li> <p> <code>ip-permission.protocol</code> - The IP protocol for an inbound security group rule (<code>tcp</code> | <code>udp</code> | <code>icmp</code> or a protocol number).</p> </li> <li> <p> <code>ip-permission.to-port</code> - For an inbound rule, the end of port range for the TCP and UDP protocols, or an ICMP code.</p> </li> <li> <p> <code>ip-permission.user-id</code> - The ID of an AWS account that has been referenced in an inbound security group rule.</p> </li> <li> <p> <code>owner-id</code> - The AWS account ID of the owner of the security group.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC specified when the security group was created.</p> </li> </ul>
      //  'groupId': "groupId_example", // [String] | <p>The IDs of the security groups. Required for security groups in a nondefault VPC.</p> <p>Default: Describes all your security groups.</p>
      //  'groupName': "groupName_example", // [String] | <p>[EC2-Classic and default VPC only] The names of the security groups. You can specify either the security group name or the security group ID. For security groups in a nondefault VPC, use the <code>group-name</code> filter to describe security groups by name.</p> <p>Default: Describes all your security groups.</p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token to request the next page of results.
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000. If this parameter is not specified, then all results are returned.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSecurityGroupsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSnapshotAttributePost
  /*


&lt;p&gt;Describes the specified attribute of the specified snapshot. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSnapshotAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The snapshot attribute you would like to view // String | The ID of the EBS snapshot.
    /*let attribute = "attribute_example";*/ /*let snapshotId = "snapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSnapshotAttributePost(
      incomingOptions.attribute,
      incomingOptions.snapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSnapshotsPost
  /*


&lt;p&gt;Describes the specified EBS snapshots available to you or all of the EBS snapshots available to you.&lt;/p&gt; &lt;p&gt;The snapshots available to you include public snapshots, private snapshots that you own, and private snapshots owned by other AWS accounts for which you have explicit create volume permissions.&lt;/p&gt; &lt;p&gt;The create volume permissions fall into the following categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;public&lt;/i&gt;: The owner of the snapshot granted create volume permissions for the snapshot to the &lt;code&gt;all&lt;/code&gt; group. All AWS accounts have create volume permissions for these snapshots.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;explicit&lt;/i&gt;: The owner of the snapshot granted create volume permissions to a specific AWS account.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt; &lt;i&gt;implicit&lt;/i&gt;: An AWS account has implicit create volume permissions for all snapshots it owns.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The list of snapshots returned can be modified by specifying snapshot IDs, snapshot owners, or AWS accounts with create volume permissions. If no options are specified, Amazon EC2 returns all snapshots for which you have create volume permissions.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot IDs, only snapshots that have the specified IDs are returned. If you specify an invalid snapshot ID, an error is returned. If you specify a snapshot ID for which you do not have access, it is not included in the returned results.&lt;/p&gt; &lt;p&gt;If you specify one or more snapshot owners using the &lt;code&gt;OwnerIds&lt;/code&gt; option, only snapshots from the specified owners and for which you have access are returned. The results can include the AWS account IDs of the specified owners, &lt;code&gt;amazon&lt;/code&gt; for snapshots owned by Amazon, or &lt;code&gt;self&lt;/code&gt; for snapshots that you own.&lt;/p&gt; &lt;p&gt;If you specify a list of restorable users, only snapshots with create snapshot permissions for those users are returned. You can specify AWS account IDs (if you own the snapshots), &lt;code&gt;self&lt;/code&gt; for snapshots for which you own or have explicit permissions, or &lt;code&gt;all&lt;/code&gt; for public snapshots.&lt;/p&gt; &lt;p&gt;If you are describing a long list of snapshots, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSnapshots&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS snapshots, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSSnapshots.html\&quot;&gt;Amazon EBS Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSnapshotsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>description</code> - A description of the snapshot.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the snapshot is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>owner-alias</code> - Value from an Amazon-maintained list (<code>amazon</code> | <code>self</code> | <code>all</code> | <code>aws-marketplace</code> | <code>microsoft</code>) of snapshot owners. Not to be confused with the user-configured AWS account alias, which is set from the IAM console.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the snapshot.</p> </li> <li> <p> <code>progress</code> - The progress of the snapshot, as a percentage (for example, 80%).</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot ID.</p> </li> <li> <p> <code>start-time</code> - The time stamp when the snapshot was initiated.</p> </li> <li> <p> <code>status</code> - The status of the snapshot (<code>pending</code> | <code>completed</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The ID of the volume the snapshot is for.</p> </li> <li> <p> <code>volume-size</code> - The size of the volume, in GiB.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of snapshot results returned by <code>DescribeSnapshots</code> in paginated output. When this parameter is used, <code>DescribeSnapshots</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeSnapshots</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeSnapshots</code> returns all results. You cannot specify this parameter and the snapshot IDs parameter in the same request.
      //  'nextToken': "nextToken_example", // String | The <code>NextToken</code> value returned from a previous paginated <code>DescribeSnapshots</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.
      //  'owner': "owner_example", // [String] | Describes the snapshots owned by these owners.
      //  'restorableBy': "restorableBy_example", // [String] | The IDs of the AWS accounts that can create volumes from the snapshot.
      //  'snapshotId': "snapshotId_example", // [String] | <p>The snapshot IDs.</p> <p>Default: Describes the snapshots for which you have create volume permissions.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSnapshotsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotDatafeedSubscriptionPost
  /*


Describes the data feed for Spot Instances. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-data-feeds.html\&quot;&gt;Spot Instance Data Feed&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.

 */
  actionDescribeSpotDatafeedSubscriptionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotDatafeedSubscriptionPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetInstancesPost
  /*


Describes the running instances for the specified Spot Fleet.

 */
  actionDescribeSpotFleetInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Spot Fleet request.
    /*let spotFleetRequestId = "spotFleetRequestId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next set of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetInstancesPost(
      incomingOptions.spotFleetRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetRequestHistoryPost
  /*


&lt;p&gt;Describes the events for the specified Spot Fleet request during the specified time.&lt;/p&gt; &lt;p&gt;Spot Fleet events are delayed by up to 30 seconds before they can be described. This ensures that you can query by the last evaluated time and not miss a recorded event. Spot Fleet events are available for 48 hours.&lt;/p&gt;

 */
  actionDescribeSpotFleetRequestHistoryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Spot Fleet request // Date | The starting date and time for the events, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    /*let spotFleetRequestId = "spotFleetRequestId_example";*/ /*let startTime = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'eventType': "eventType_example", // String | The type of events to describe. By default, all events are described.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next set of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetRequestHistoryPost(
      incomingOptions.spotFleetRequestId,
      incomingOptions.startTime,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotFleetRequestsPost
  /*


&lt;p&gt;Describes your Spot Fleet requests.&lt;/p&gt; &lt;p&gt;Spot Fleet requests are deleted 48 hours after they are canceled and their instances are terminated.&lt;/p&gt;

 */
  actionDescribeSpotFleetRequestsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'spotFleetRequestId': "spotFleetRequestId_example" // [String] | The IDs of the Spot Fleet requests.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotFleetRequestsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotInstanceRequestsPost
  /*


&lt;p&gt;Describes the specified Spot Instance requests.&lt;/p&gt; &lt;p&gt;You can use &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; to find a running Spot Instance by examining the response. If the status of the Spot Instance is &lt;code&gt;fulfilled&lt;/code&gt;, the instance ID appears in the response and contains the identifier of the instance. Alternatively, you can use &lt;a&gt;DescribeInstances&lt;/a&gt; with a filter to look for instances where the instance lifecycle is &lt;code&gt;spot&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;We recommend that you set &lt;code&gt;MaxResults&lt;/code&gt; to a value between 5 and 1000 to limit the number of results returned. This paginates the output, which makes the list more manageable and returns the results faster. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeSpotInstanceRequests&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;Spot Instance requests are deleted four hours after they are canceled and their instances are terminated.&lt;/p&gt;

 */
  actionDescribeSpotInstanceRequestsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone-group</code> - The Availability Zone group.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the Spot Instance request was created.</p> </li> <li> <p> <code>fault-code</code> - The fault code related to the request.</p> </li> <li> <p> <code>fault-message</code> - The fault message related to the request.</p> </li> <li> <p> <code>instance-id</code> - The ID of the instance that fulfilled the request.</p> </li> <li> <p> <code>launch-group</code> - The Spot Instance launch group.</p> </li> <li> <p> <code>launch.block-device-mapping.delete-on-termination</code> - Indicates whether the EBS volume is deleted on instance termination.</p> </li> <li> <p> <code>launch.block-device-mapping.device-name</code> - The device name for the volume in the block device mapping (for example, <code>/dev/sdh</code> or <code>xvdh</code>).</p> </li> <li> <p> <code>launch.block-device-mapping.snapshot-id</code> - The ID of the snapshot for the EBS volume.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-size</code> - The size of the EBS volume, in GiB.</p> </li> <li> <p> <code>launch.block-device-mapping.volume-type</code> - The type of EBS volume: <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code>for Cold HDD, or <code>standard</code> for Magnetic.</p> </li> <li> <p> <code>launch.group-id</code> - The ID of the security group for the instance.</p> </li> <li> <p> <code>launch.group-name</code> - The name of the security group for the instance.</p> </li> <li> <p> <code>launch.image-id</code> - The ID of the AMI.</p> </li> <li> <p> <code>launch.instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>launch.kernel-id</code> - The kernel ID.</p> </li> <li> <p> <code>launch.key-name</code> - The name of the key pair the instance launched with.</p> </li> <li> <p> <code>launch.monitoring-enabled</code> - Whether detailed monitoring is enabled for the Spot Instance.</p> </li> <li> <p> <code>launch.ramdisk-id</code> - The RAM disk ID.</p> </li> <li> <p> <code>launched-availability-zone</code> - The Availability Zone in which the request is launched.</p> </li> <li> <p> <code>network-interface.addresses.primary</code> - Indicates whether the IP address is the primary private IP address.</p> </li> <li> <p> <code>network-interface.delete-on-termination</code> - Indicates whether the network interface is deleted when the instance is terminated.</p> </li> <li> <p> <code>network-interface.description</code> - A description of the network interface.</p> </li> <li> <p> <code>network-interface.device-index</code> - The index of the device for the network interface attachment on the instance.</p> </li> <li> <p> <code>network-interface.group-id</code> - The ID of the security group associated with the network interface.</p> </li> <li> <p> <code>network-interface.network-interface-id</code> - The ID of the network interface.</p> </li> <li> <p> <code>network-interface.private-ip-address</code> - The primary private IP address of the network interface.</p> </li> <li> <p> <code>network-interface.subnet-id</code> - The ID of the subnet for the instance.</p> </li> <li> <p> <code>product-description</code> - The product description associated with the instance (<code>Linux/UNIX</code> | <code>Windows</code>).</p> </li> <li> <p> <code>spot-instance-request-id</code> - The Spot Instance request ID.</p> </li> <li> <p> <code>spot-price</code> - The maximum hourly price for any Spot Instance launched to fulfill the request.</p> </li> <li> <p> <code>state</code> - The state of the Spot Instance request (<code>open</code> | <code>active</code> | <code>closed</code> | <code>cancelled</code> | <code>failed</code>). Spot request status information can help you track your Amazon EC2 Spot Instance requests. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-bid-status.html\">Spot Request Status</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.</p> </li> <li> <p> <code>status-code</code> - The short code describing the most recent evaluation of your Spot Instance request.</p> </li> <li> <p> <code>status-message</code> - The message explaining the status of the Spot Instance request.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of Spot Instance request (<code>one-time</code> | <code>persistent</code>).</p> </li> <li> <p> <code>valid-from</code> - The start date of the request.</p> </li> <li> <p> <code>valid-until</code> - The end date of the request.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'spotInstanceRequestId': "spotInstanceRequestId_example", // [String] | One or more Spot Instance request IDs.
      //  'nextToken': "nextToken_example", // String | The token to request the next set of results. This value is <code>null</code> when there are no more results to return.
      maxResults: 56 // Number | The maximum number of results to return in a single call. Specify a value between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotInstanceRequestsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSpotPriceHistoryPost
  /*


&lt;p&gt;Describes the Spot price history. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-spot-instances-history.html\&quot;&gt;Spot Instance Pricing History&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you specify a start and end time, this operation returns the prices of the instance types within the time range that you specified and the time when the price changed. The price is valid within the time period that you specified the response merely indicates the last time that the price changed.&lt;/p&gt;

 */
  actionDescribeSpotPriceHistoryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for which prices should be returned.</p> </li> <li> <p> <code>instance-type</code> - The type of instance (for example, <code>m3.medium</code>).</p> </li> <li> <p> <code>product-description</code> - The product description for the Spot price (<code>Linux/UNIX</code> | <code>SUSE Linux</code> | <code>Windows</code> | <code>Linux/UNIX (Amazon VPC)</code> | <code>SUSE Linux (Amazon VPC)</code> | <code>Windows (Amazon VPC)</code>).</p> </li> <li> <p> <code>spot-price</code> - The Spot price. The value must match exactly (or use wildcards greater than or less than comparison is not supported).</p> </li> <li> <p> <code>timestamp</code> - The time stamp of the Spot price history, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). You can use wildcards (* and ?). Greater than or less than comparison is not supported.</p> </li> </ul>
      //  'availabilityZone': "availabilityZone_example", // String | Filters the results by the specified Availability Zone.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      endTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The date and time, up to the current date, from which to stop retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
      //  'instanceType': "instanceType_example", // [String] | Filters the results by the specified instance types.
      maxResults: 56, // Number | The maximum number of results to return in a single call. Specify a value between 1 and 1000. The default value is 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next set of results.
      //  'productDescription': "productDescription_example", // [String] | Filters the results by the specified basic product descriptions.
      startTime: new Date("2013-10-20T19:20:30+01:00") // Date | The date and time, up to the past 90 days, from which to start retrieving the price history data, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSpotPriceHistoryPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeStaleSecurityGroupsPost
  /*


[VPC only] Describes the stale security group rules for security groups in a specified VPC. Rules are stale when they reference a deleted security group in a peer VPC, or a security group in a peer VPC for which the VPC peering connection has been deleted.

 */
  actionDescribeStaleSecurityGroupsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.
      //  'nextToken': "nextToken_example" // String | The token for the next set of items to return. (You received this token from a prior call.)
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeStaleSecurityGroupsPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeSubnetsPost
  /*


&lt;p&gt;Describes one or more of your subnets.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html\&quot;&gt;Your VPC and Subnets&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeSubnetsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>availability-zone</code> - The Availability Zone for the subnet. You can also use <code>availabilityZone</code> as the filter name.</p> </li> <li> <p> <code>availability-zone-id</code> - The ID of the Availability Zone for the subnet. You can also use <code>availabilityZoneId</code> as the filter name.</p> </li> <li> <p> <code>available-ip-address-count</code> - The number of IPv4 addresses in the subnet that are available.</p> </li> <li> <p> <code>cidr-block</code> - The IPv4 CIDR block of the subnet. The CIDR block you specify must exactly match the subnet's CIDR block for information to be returned for the subnet. You can also use <code>cidr</code> or <code>cidrBlock</code> as the filter names.</p> </li> <li> <p> <code>default-for-az</code> - Indicates whether this is the default subnet for the Availability Zone. You can also use <code>defaultForAz</code> as the filter name.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - An association ID for an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the subnet.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the subnet.</p> </li> <li> <p> <code>state</code> - The state of the subnet (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>subnet-arn</code> - The Amazon Resource Name (ARN) of the subnet.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC for the subnet.</p> </li> </ul>
      //  'subnetId': "subnetId_example", // [String] | <p>One or more subnet IDs.</p> <p>Default: Describes all your subnets.</p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeSubnetsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTagsPost
  /*


&lt;p&gt;Describes the specified tags for your EC2 resources.&lt;/p&gt; &lt;p&gt;For more information about tags, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Resources&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeTagsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>key</code> - The tag key.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>customer-gateway</code> | <code>dedicated-host</code> | <code>dhcp-options</code> | <code>elastic-ip</code> | <code>fleet</code> | <code>fpga-image</code> | <code>image</code> | <code>instance</code> | <code>host-reservation</code> | <code>internet-gateway</code> | <code>launch-template</code> | <code>natgateway</code> | <code>network-acl</code> | <code>network-interface</code> | <code>reserved-instances</code> | <code>route-table</code> | <code>security-group</code> | <code>snapshot</code> | <code>spot-instances-request</code> | <code>subnet</code> | <code>volume</code> | <code>vpc</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of the tag. For example, specify \"tag:Owner\" for the filter name and \"TeamA\" for the filter value to find resources with the tag \"Owner=TeamA\".</p> </li> <li> <p> <code>value</code> - The tag value.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return in a single call. This value can be between 5 and 1000. To retrieve the remaining results, make another call with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTagsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorFiltersPost
  /*


Describes one or more Traffic Mirror filters.

 */
  actionDescribeTrafficMirrorFiltersPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'trafficMirrorFilterId': "trafficMirrorFilterId_example", // [String] | The ID of the Traffic Mirror filter.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror filter description.</p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorFiltersPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorSessionsPost
  /*


Describes one or more Traffic Mirror sessions. By default, all Traffic Mirror sessions are described. Alternatively, you can filter the results.

 */
  actionDescribeTrafficMirrorSessionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'trafficMirrorSessionId': "trafficMirrorSessionId_example", // [String] | The ID of the Traffic Mirror session.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror session description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>packet-length</code>: The assigned number of packets to mirror. </p> </li> <li> <p> <code>session-number</code>: The assigned session number. </p> </li> <li> <p> <code>traffic-mirror-filter-id</code>: The ID of the Traffic Mirror filter.</p> </li> <li> <p> <code>traffic-mirror-session-id</code>: The ID of the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> <li> <p> <code>virtual-network-id</code>: The virtual network ID of the Traffic Mirror session.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorSessionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTrafficMirrorTargetsPost
  /*


Information about one or more Traffic Mirror targets.

 */
  actionDescribeTrafficMirrorTargetsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'trafficMirrorTargetId': "trafficMirrorTargetId_example", // [String] | The ID of the Traffic Mirror targets.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>description</code>: The Traffic Mirror target description.</p> </li> <li> <p> <code>network-interface-id</code>: The ID of the Traffic Mirror session network interface.</p> </li> <li> <p> <code>network-load-balancer-arn</code>: The Amazon Resource Name (ARN) of the Network Load Balancer that is associated with the session.</p> </li> <li> <p> <code>owner-id</code>: The ID of the account that owns the Traffic Mirror session.</p> </li> <li> <p> <code>traffic-mirror-target-id</code>: The ID of the Traffic Mirror target.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token for the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTrafficMirrorTargetsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayAttachmentsPost
  /*


Describes one or more attachments between resources and transit gateways. By default, all attachments are described. Alternatively, you can filter the results by attachment ID, attachment state, resource ID, or resource owner.

 */
  actionDescribeTransitGatewayAttachmentsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayAttachmentIds': "transitGatewayAttachmentIds_example", // [String] | The IDs of the attachments.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>association.state</code> - The state of the association (<code>associating</code> | <code>associated</code> | <code>disassociating</code>).</p> </li> <li> <p> <code>association.transit-gateway-route-table-id</code> - The ID of the route table for the transit gateway.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-owner-id</code> - The ID of the AWS account that owns the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayAttachmentsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayMulticastDomainsPost
  /*


Describes one or more transit gateway multicast domains.

 */
  actionDescribeTransitGatewayMulticastDomainsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainIds': "transitGatewayMulticastDomainIds_example", // [String] | The ID of the transit gateway multicast domain.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the transit gateway multicast domain. Valid values are <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-multicast-domain-id</code> - The ID of the transit gateway multicast domain.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayMulticastDomainsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayPeeringAttachmentsPost
  /*


Describes your transit gateway peering attachments.

 */
  actionDescribeTransitGatewayPeeringAttachmentsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayAttachmentIds': "transitGatewayAttachmentIds_example", // [String] | One or more IDs of the transit gateway peering attachments.
      //  'filter': "filter_example", // [String] | One or more filters.
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayPeeringAttachmentsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayRouteTablesPost
  /*


Describes one or more transit gateway route tables. By default, all transit gateway route tables are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewayRouteTablesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayRouteTableIds': "transitGatewayRouteTableIds_example", // [String] | The IDs of the transit gateway route tables.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>default-association-route-table</code> - Indicates whether this is the default association route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>default-propagation-route-table</code> - Indicates whether this is the default propagation route table for the transit gateway (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayRouteTablesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewayVpcAttachmentsPost
  /*


Describes one or more VPC attachments. By default, all VPC attachments are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewayVpcAttachmentsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayAttachmentIds': "transitGatewayAttachmentIds_example", // [String] | The IDs of the attachments.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewayVpcAttachmentsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeTransitGatewaysPost
  /*


Describes one or more transit gateways. By default, all transit gateways are described. Alternatively, you can filter the results.

 */
  actionDescribeTransitGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayIds': "transitGatewayIds_example", // [String] | The IDs of the transit gateways.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>options.propagation-default-route-table-id</code> - The ID of the default propagation route table.</p> </li> <li> <p> <code>options.amazon-side-asn</code> - The private ASN for the Amazon side of a BGP session.</p> </li> <li> <p> <code>options.association-default-route-table-id</code> - The ID of the default association route table.</p> </li> <li> <p> <code>options.auto-accept-shared-attachments</code> - Indicates whether there is automatic acceptance of attachment requests (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-association</code> - Indicates whether resource attachments are automatically associated with the default association route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.default-route-table-propagation</code> - Indicates whether resource attachments automatically propagate routes to the default propagation route table (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.dns-support</code> - Indicates whether DNS support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>options.vpn-ecmp-support</code> - Indicates whether Equal Cost Multipath Protocol support is enabled (<code>enable</code> | <code>disable</code>).</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the transit gateway.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of the transit gateway.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeTransitGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumeAttributePost
  /*


&lt;p&gt;Describes the specified attribute of the specified volume. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumeAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute of the volume. This parameter is required // String | The ID of the volume.
    /*let attribute = "attribute_example";*/ /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumeAttributePost(
      incomingOptions.attribute,
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumeStatusPost
  /*


&lt;p&gt;Describes the status of the specified volumes. Volume status provides the result of the checks performed on your volumes to determine events that can impair the performance of your volumes. The performance of a volume can be affected if an issue occurs on the volume&#39;s underlying host. If the volume&#39;s underlying host experiences a power outage or system issue, after the system is restored, there could be data inconsistencies on the volume. Volume events notify you if this occurs. Volume actions notify you if any action needs to be taken in response to the event.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;DescribeVolumeStatus&lt;/code&gt; operation provides the following information about the specified volumes:&lt;/p&gt; &lt;p&gt; &lt;i&gt;Status&lt;/i&gt;: Reflects the current status of the volume. The possible values are &lt;code&gt;ok&lt;/code&gt;, &lt;code&gt;impaired&lt;/code&gt; , &lt;code&gt;warning&lt;/code&gt;, or &lt;code&gt;insufficient-data&lt;/code&gt;. If all checks pass, the overall status of the volume is &lt;code&gt;ok&lt;/code&gt;. If the check fails, the overall status is &lt;code&gt;impaired&lt;/code&gt;. If the status is &lt;code&gt;insufficient-data&lt;/code&gt;, then the checks may still be taking place on your volume at the time. We recommend that you retry the request. For more information about volume status, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/monitoring-volume-status.html\&quot;&gt;Monitoring the Status of Your Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Events&lt;/i&gt;: Reflect the cause of a volume status and may require you to take action. For example, if your volume returns an &lt;code&gt;impaired&lt;/code&gt; status, then the volume event might be &lt;code&gt;potential-data-inconsistency&lt;/code&gt;. This means that your volume has been affected by an issue with the underlying host, has all I/O operations disabled, and may have inconsistent data.&lt;/p&gt; &lt;p&gt; &lt;i&gt;Actions&lt;/i&gt;: Reflect the actions you may have to take in response to an event. For example, if the status of the volume is &lt;code&gt;impaired&lt;/code&gt; and the volume event shows &lt;code&gt;potential-data-inconsistency&lt;/code&gt;, then the action shows &lt;code&gt;enable-volume-io&lt;/code&gt;. This means that you may want to enable the I/O operations for the volume by calling the &lt;a&gt;EnableVolumeIO&lt;/a&gt; action and then check the volume for data consistency.&lt;/p&gt; &lt;p&gt;Volume status is based on the volume status checks, and does not reflect the volume state. Therefore, volume status does not indicate volumes in the &lt;code&gt;error&lt;/code&gt; state (for example, when a volume is incapable of accepting I/O.)&lt;/p&gt;

 */
  actionDescribeVolumeStatusPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>action.code</code> - The action code for the event (for example, <code>enable-volume-io</code>).</p> </li> <li> <p> <code>action.description</code> - A description of the action.</p> </li> <li> <p> <code>action.event-id</code> - The event ID associated with the action.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone of the instance.</p> </li> <li> <p> <code>event.description</code> - A description of the event.</p> </li> <li> <p> <code>event.event-id</code> - The event ID.</p> </li> <li> <p> <code>event.event-type</code> - The event type (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code> for <code>io-performance</code>: <code>io-performance:degraded</code> | <code>io-performance:severely-degraded</code> | <code>io-performance:stalled</code>).</p> </li> <li> <p> <code>event.not-after</code> - The latest end time for the event.</p> </li> <li> <p> <code>event.not-before</code> - The earliest start time for the event.</p> </li> <li> <p> <code>volume-status.details-name</code> - The cause for <code>volume-status.status</code> (<code>io-enabled</code> | <code>io-performance</code>).</p> </li> <li> <p> <code>volume-status.details-status</code> - The status of <code>volume-status.details-name</code> (for <code>io-enabled</code>: <code>passed</code> | <code>failed</code> for <code>io-performance</code>: <code>normal</code> | <code>degraded</code> | <code>severely-degraded</code> | <code>stalled</code>).</p> </li> <li> <p> <code>volume-status.status</code> - The status of the volume (<code>ok</code> | <code>impaired</code> | <code>warning</code> | <code>insufficient-data</code>).</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of volume results returned by <code>DescribeVolumeStatus</code> in paginated output. When this parameter is used, the request only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned. If this parameter is not used, then <code>DescribeVolumeStatus</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      //  'nextToken': "nextToken_example", // String | The <code>NextToken</code> value to include in a future <code>DescribeVolumeStatus</code> request. When the results of the request exceed <code>MaxResults</code>, this value can be used to retrieve the next page of results. This value is <code>null</code> when there are no more results to return.
      //  'volumeId': "volumeId_example", // [String] | <p>The IDs of the volumes.</p> <p>Default: Describes all your volumes.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumeStatusPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumesModificationsPost
  /*


&lt;p&gt;Reports the current modification status of EBS volumes.&lt;/p&gt; &lt;p&gt;Current-generation EBS volumes support modification of attributes including type, size, and (for &lt;code&gt;io1&lt;/code&gt; volumes) IOPS provisioning while either attached to or detached from an instance. Following an action from the API or the console to modify a volume, the status of the modification may be &lt;code&gt;modifying&lt;/code&gt;, &lt;code&gt;optimizing&lt;/code&gt;, &lt;code&gt;completed&lt;/code&gt;, or &lt;code&gt;failed&lt;/code&gt;. If a volume has never been modified, then certain elements of the returned &lt;code&gt;VolumeModification&lt;/code&gt; objects are null. &lt;/p&gt; &lt;p&gt; You can also use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications\&quot;&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumesModificationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'volumeId': "volumeId_example", // [String] | The IDs of the volumes for which in-progress modifications will be described.
      //  'filter': "filter_example", // [String] | The filters. Supported filters: <code>volume-id</code>, <code>modification-state</code>, <code>target-size</code>, <code>target-iops</code>, <code>target-volume-type</code>, <code>original-size</code>, <code>original-iops</code>, <code>original-volume-type</code>, <code>start-time</code>.
      //  'nextToken': "nextToken_example", // String | The <code>nextToken</code> value returned by a previous paginated request.
      maxResults: 56 // Number | The maximum number of results (up to a limit of 500) to be returned in a paginated request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumesModificationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVolumesPost
  /*


&lt;p&gt;Describes the specified EBS volumes or all of your EBS volumes.&lt;/p&gt; &lt;p&gt;If you are describing a long list of volumes, you can paginate the output to make the list more manageable. The &lt;code&gt;MaxResults&lt;/code&gt; parameter sets the maximum number of results returned in a single page. If the list of results exceeds your &lt;code&gt;MaxResults&lt;/code&gt; value, then that number of results is returned along with a &lt;code&gt;NextToken&lt;/code&gt; value that can be passed to a subsequent &lt;code&gt;DescribeVolumes&lt;/code&gt; request to retrieve the remaining results.&lt;/p&gt; &lt;p&gt;For more information about EBS volumes, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumes.html\&quot;&gt;Amazon EBS Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVolumesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters.</p> <ul> <li> <p> <code>attachment.attach-time</code> - The time stamp when the attachment initiated.</p> </li> <li> <p> <code>attachment.delete-on-termination</code> - Whether the volume is deleted on instance termination.</p> </li> <li> <p> <code>attachment.device</code> - The device name specified in the block device mapping (for example, <code>/dev/sda1</code>).</p> </li> <li> <p> <code>attachment.instance-id</code> - The ID of the instance the volume is attached to.</p> </li> <li> <p> <code>attachment.status</code> - The attachment state (<code>attaching</code> | <code>attached</code> | <code>detaching</code>).</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone in which the volume was created.</p> </li> <li> <p> <code>create-time</code> - The time stamp when the volume was created.</p> </li> <li> <p> <code>encrypted</code> - Indicates whether the volume is encrypted (<code>true</code> | <code>false</code>)</p> </li> <li> <p> <code>size</code> - The size of the volume, in GiB.</p> </li> <li> <p> <code>snapshot-id</code> - The snapshot from which the volume was created.</p> </li> <li> <p> <code>status</code> - The status of the volume (<code>creating</code> | <code>available</code> | <code>in-use</code> | <code>deleting</code> | <code>deleted</code> | <code>error</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>volume-id</code> - The volume ID.</p> </li> <li> <p> <code>volume-type</code> - The Amazon EBS volume type. This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic volumes.</p> </li> </ul>
      //  'volumeId': "volumeId_example", // [String] | The volume IDs.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      maxResults: 56 // Number | The maximum number of volume results returned by <code>DescribeVolumes</code> in paginated output. When this parameter is used, <code>DescribeVolumes</code> only returns <code>MaxResults</code> results in a single page along with a <code>NextToken</code> response element. The remaining results of the initial request can be seen by sending another <code>DescribeVolumes</code> request with the returned <code>NextToken</code> value. This value can be between 5 and 500 if <code>MaxResults</code> is given a value larger than 500, only 500 results are returned. If this parameter is not used, then <code>DescribeVolumes</code> returns all results. You cannot specify this parameter and the volume IDs parameter in the same request.
      //  'nextToken': "nextToken_example" // String | The <code>NextToken</code> value returned from a previous paginated <code>DescribeVolumes</code> request where <code>MaxResults</code> was used and the results exceeded the value of that parameter. Pagination continues from the end of the previous results that returned the <code>NextToken</code> value. This value is <code>null</code> when there are no more results to return.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVolumesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcAttributePost
  /*


Describes the specified attribute of the specified VPC. You can specify only one attribute at a time.

 */
  actionDescribeVpcAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The VPC attribute // String | The ID of the VPC.
    /*let attribute = "attribute_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcAttributePost(
      incomingOptions.attribute,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcClassicLinkDnsSupportPost
  /*


Describes the ClassicLink DNS support status of one or more VPCs. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDescribeVpcClassicLinkDnsSupportPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      //  'vpcIds': "vpcIds_example" // [String] | One or more VPC IDs.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcClassicLinkDnsSupportPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcClassicLinkPost
  /*


Describes the ClassicLink status of one or more VPCs.

 */
  actionDescribeVpcClassicLinkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>is-classic-link-enabled</code> - Whether the VPC is enabled for ClassicLink (<code>true</code> | <code>false</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcId': "vpcId_example" // [String] | One or more VPCs for which you want to describe the ClassicLink status.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcClassicLinkPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointConnectionNotificationsPost
  /*


Describes the connection notifications for VPC endpoints and VPC endpoint services.

 */
  actionDescribeVpcEndpointConnectionNotificationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'connectionNotificationId': "connectionNotificationId_example", // String | The ID of the notification.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>connection-notification-arn</code> - The ARN of SNS topic for the notification.</p> </li> <li> <p> <code>connection-notification-id</code> - The ID of the notification.</p> </li> <li> <p> <code>connection-notification-state</code> - The state of the notification (<code>Enabled</code> | <code>Disabled</code>).</p> </li> <li> <p> <code>connection-notification-type</code> - The type of notification (<code>Topic</code>).</p> </li> <li> <p> <code>service-id</code> - The ID of the endpoint service.</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the VPC endpoint.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return in a single call. To retrieve the remaining results, make another request with the returned <code>NextToken</code> value.
      //  'nextToken': "nextToken_example" // String | The token to request the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointConnectionNotificationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointConnectionsPost
  /*


Describes the VPC endpoint connections to your VPC endpoint services, including any endpoints that are pending your acceptance.

 */
  actionDescribeVpcEndpointConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>vpc-endpoint-owner</code> - The AWS account number of the owner of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>vpc-endpoint-id</code> - The ID of the endpoint.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointConnectionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServiceConfigurationsPost
  /*


Describes the VPC endpoint service configurations in your account (your services).

 */
  actionDescribeVpcEndpointServiceConfigurationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'serviceId': "serviceId_example", // [String] | The IDs of one or more services.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code> - The name of the service.</p> </li> <li> <p> <code>service-id</code> - The ID of the service.</p> </li> <li> <p> <code>service-state</code> - The state of the service (<code>Pending</code> | <code>Available</code> | <code>Deleting</code> | <code>Deleted</code> | <code>Failed</code>). </p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServiceConfigurationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServicePermissionsPost
  /*


Describes the principals (service consumers) that are permitted to discover your VPC endpoint service.

 */
  actionDescribeVpcEndpointServicePermissionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the service.
    /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>principal</code> - The ARN of the principal.</p> </li> <li> <p> <code>principal-type</code> - The principal type (<code>All</code> | <code>Service</code> | <code>OrganizationUnit</code> | <code>Account</code> | <code>User</code> | <code>Role</code>).</p> </li> </ul>
      maxResults: 56 // Number | The maximum number of results to return for the request in a single page. The remaining results of the initial request can be seen by sending another request with the returned <code>NextToken</code> value. This value can be between 5 and 1000 if <code>MaxResults</code> is given a value larger than 1000, only 1000 results are returned.
      //  'nextToken': "nextToken_example" // String | The token to retrieve the next page of results.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServicePermissionsPost(
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointServicesPost
  /*


Describes available services to which you can create a VPC endpoint.

 */
  actionDescribeVpcEndpointServicesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'serviceName': "serviceName_example", // [String] | One or more service names.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56 // Number | <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example" // String | The token for the next set of items to return. (You received this token from a prior call.)
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointServicesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcEndpointsPost
  /*


Describes one or more of your VPC endpoints.

 */
  actionDescribeVpcEndpointsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcEndpointId': "vpcEndpointId_example", // [String] | One or more endpoint IDs.
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>service-name</code>: The name of the service.</p> </li> <li> <p> <code>vpc-id</code>: The ID of the VPC in which the endpoint resides.</p> </li> <li> <p> <code>vpc-endpoint-id</code>: The ID of the endpoint.</p> </li> <li> <p> <code>vpc-endpoint-state</code> - The state of the endpoint (<code>pendingAcceptance</code> | <code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code> | <code>failed</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> </ul>
      maxResults: 56 // Number | <p>The maximum number of items to return for this request. The request returns a token that you can specify in a subsequent call to get the next set of results.</p> <p>Constraint: If the value is greater than 1000, we return only 1000 items.</p>
      //  'nextToken': "nextToken_example" // String | The token for the next set of items to return. (You received this token from a prior call.)
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcEndpointsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcPeeringConnectionsPost
  /*


Describes one or more of your VPC peering connections.

 */
  actionDescribeVpcPeeringConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>accepter-vpc-info.cidr-block</code> - The IPv4 CIDR block of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.owner-id</code> - The AWS account ID of the owner of the accepter VPC.</p> </li> <li> <p> <code>accepter-vpc-info.vpc-id</code> - The ID of the accepter VPC.</p> </li> <li> <p> <code>expiration-time</code> - The expiration date and time for the VPC peering connection.</p> </li> <li> <p> <code>requester-vpc-info.cidr-block</code> - The IPv4 CIDR block of the requester's VPC.</p> </li> <li> <p> <code>requester-vpc-info.owner-id</code> - The AWS account ID of the owner of the requester VPC.</p> </li> <li> <p> <code>requester-vpc-info.vpc-id</code> - The ID of the requester VPC.</p> </li> <li> <p> <code>status-code</code> - The status of the VPC peering connection (<code>pending-acceptance</code> | <code>failed</code> | <code>expired</code> | <code>provisioning</code> | <code>active</code> | <code>deleting</code> | <code>deleted</code> | <code>rejected</code>).</p> </li> <li> <p> <code>status-message</code> - A message that provides more information about the status of the VPC peering connection, if applicable.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-peering-connection-id</code> - The ID of the VPC peering connection.</p> </li> </ul>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example", // [String] | <p>One or more VPC peering connection IDs.</p> <p>Default: Describes all your VPC peering connections.</p>
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcPeeringConnectionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpcsPost
  /*


Describes one or more of your VPCs.

 */
  actionDescribeVpcsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>cidr</code> - The primary IPv4 CIDR block of the VPC. The CIDR block you specify must exactly match the VPC's CIDR block for information to be returned for the VPC. Must contain the slash followed by one or two digits (for example, <code>/28</code>).</p> </li> <li> <p> <code>cidr-block-association.cidr-block</code> - An IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.association-id</code> - The association ID for an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>cidr-block-association.state</code> - The state of an IPv4 CIDR block associated with the VPC.</p> </li> <li> <p> <code>dhcp-options-id</code> - The ID of a set of DHCP options.</p> </li> <li> <p> <code>ipv6-cidr-block-association.ipv6-cidr-block</code> - An IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.association-id</code> - The association ID for an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>ipv6-cidr-block-association.state</code> - The state of an IPv6 CIDR block associated with the VPC.</p> </li> <li> <p> <code>isDefault</code> - Indicates whether the VPC is the default VPC.</p> </li> <li> <p> <code>owner-id</code> - The ID of the AWS account that owns the VPC.</p> </li> <li> <p> <code>state</code> - The state of the VPC (<code>pending</code> | <code>available</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>vpc-id</code> - The ID of the VPC.</p> </li> </ul>
      //  'vpcId': "vpcId_example", // [String] | <p>One or more VPC IDs.</p> <p>Default: Describes all your VPCs.</p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      maxResults: 56 // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpcsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpnConnectionsPost
  /*


&lt;p&gt;Describes one or more of your VPN connections.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVpnConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>customer-gateway-configuration</code> - The configuration information for the customer gateway.</p> </li> <li> <p> <code>customer-gateway-id</code> - The ID of a customer gateway associated with the VPN connection.</p> </li> <li> <p> <code>state</code> - The state of the VPN connection (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>option.static-routes-only</code> - Indicates whether the connection has static routes only. Used for devices that do not support Border Gateway Protocol (BGP).</p> </li> <li> <p> <code>route.destination-cidr-block</code> - The destination CIDR block. This corresponds to the subnet used in a customer data center.</p> </li> <li> <p> <code>bgp-asn</code> - The BGP Autonomous System Number (ASN) associated with a BGP device.</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of VPN connection. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-connection-id</code> - The ID of the VPN connection.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of a virtual private gateway associated with the VPN connection.</p> </li> <li> <p> <code>transit-gateway-id</code> - The ID of a transit gateway associated with the VPN connection.</p> </li> </ul>
      //  'vpnConnectionId': "vpnConnectionId_example", // [String] | <p>One or more VPN connection IDs.</p> <p>Default: Describes your VPN connections.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpnConnectionsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDescribeVpnGatewaysPost
  /*


&lt;p&gt;Describes one or more of your virtual private gateways.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPC_VPN.html\&quot;&gt;AWS Site-to-Site VPN&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDescribeVpnGatewaysPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters.</p> <ul> <li> <p> <code>amazon-side-asn</code> - The Autonomous System Number (ASN) for the Amazon side of the gateway.</p> </li> <li> <p> <code>attachment.state</code> - The current state of the attachment between the gateway and the VPC (<code>attaching</code> | <code>attached</code> | <code>detaching</code> | <code>detached</code>).</p> </li> <li> <p> <code>attachment.vpc-id</code> - The ID of an attached VPC.</p> </li> <li> <p> <code>availability-zone</code> - The Availability Zone for the virtual private gateway (if applicable).</p> </li> <li> <p> <code>state</code> - The state of the virtual private gateway (<code>pending</code> | <code>available</code> | <code>deleting</code> | <code>deleted</code>).</p> </li> <li> <p> <code>tag</code>:&ltkey&gt - The key/value combination of a tag assigned to the resource. Use the tag key in the filter name and the tag value as the filter value. For example, to find all resources that have a tag with the key <code>Owner</code> and the value <code>TeamA</code>, specify <code>tag:Owner</code> for the filter name and <code>TeamA</code> for the filter value.</p> </li> <li> <p> <code>tag-key</code> - The key of a tag assigned to the resource. Use this filter to find all resources assigned a tag with a specific key, regardless of the tag value.</p> </li> <li> <p> <code>type</code> - The type of virtual private gateway. Currently the only supported type is <code>ipsec.1</code>.</p> </li> <li> <p> <code>vpn-gateway-id</code> - The ID of the virtual private gateway.</p> </li> </ul>
      //  'vpnGatewayId': "vpnGatewayId_example", // [String] | <p>One or more virtual private gateway IDs.</p> <p>Default: Describes all your virtual private gateways.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDescribeVpnGatewaysPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachClassicLinkVpcPost
  /*


Unlinks (detaches) a linked EC2-Classic instance from a VPC. After the instance has been unlinked, the VPC security groups are no longer associated with it. An instance is automatically unlinked from a VPC when it&#39;s stopped.

 */
  actionDetachClassicLinkVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance to unlink from the VPC // String | The ID of the VPC to which the instance is linked.
    /*let instanceId = "instanceId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachClassicLinkVpcPost(
      incomingOptions.instanceId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachInternetGatewayPost
  /*


Detaches an internet gateway from a VPC, disabling connectivity between the internet and the VPC. The VPC must not contain any running instances with Elastic IP addresses or public IPv4 addresses.

 */
  actionDetachInternetGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the internet gateway // String | The ID of the VPC.
    /*let internetGatewayId = "internetGatewayId_example";*/ /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachInternetGatewayPost(
      incomingOptions.internetGatewayId,
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDetachNetworkInterfacePost
  /*


Detaches a network interface from an instance.

 */
  actionDetachNetworkInterfacePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let attachmentId = "attachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      force: true // Boolean | <p>Specifies whether to force a detachment.</p> <note> <ul> <li> <p>Use the <code>Force</code> parameter only as a last resort to detach a network interface from a failed instance. </p> </li> <li> <p>If you use the <code>Force</code> parameter to detach a network interface, you might not be able to attach a different network interface to the same index on the instance without first stopping and starting the instance.</p> </li> <li> <p>If you force the detachment of a network interface, the <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\\\">instance metadata</a> might not get updated. This means that the attributes associated with the detached network interface might still be visible. The instance metadata will get updated when you stop and start the instance.</p> </li> </ul> </note>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachNetworkInterfacePost(
      incomingOptions.attachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDetachVolumePost
  /*


&lt;p&gt;Detaches an EBS volume from an instance. Make sure to unmount any file systems on the device within your operating system before detaching the volume. Failure to do so can result in the volume becoming stuck in the &lt;code&gt;busy&lt;/code&gt; state while detaching. If this happens, detachment can be delayed indefinitely until you unmount the volume, force detachment, reboot the instance, or all three. If an EBS volume is the root device of an instance, it can&#39;t be detached while the instance is running. To detach the root volume, stop the instance first.&lt;/p&gt; &lt;p&gt;When a volume with an AWS Marketplace product code is detached from an instance, the product code is no longer associated with the instance.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-detaching-volume.html\&quot;&gt;Detaching an Amazon EBS Volume&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDetachVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'device': "device_example", // String | The device name.
      force: true, // Boolean | Forces detachment if the previous detachment attempt did not occur cleanly (for example, logging into an instance, unmounting the volume, and detaching normally). This option can lead to data loss or a corrupted file system. Use this option only as a last resort to detach a volume from a failed instance. The instance won't have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures.
      //  'instanceId': "instanceId_example", // String | The ID of the instance.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachVolumePost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDetachVpnGatewayPost
  /*


&lt;p&gt;Detaches a virtual private gateway from a VPC. You do this if you&#39;re planning to turn off the VPC and not use it anymore. You can confirm a virtual private gateway has been completely detached from a VPC by describing the virtual private gateway (any attachments to the virtual private gateway are also described).&lt;/p&gt; &lt;p&gt;You must wait for the attachment&#39;s state to switch to &lt;code&gt;detached&lt;/code&gt; before you can delete the VPC or attach a different VPC to the virtual private gateway.&lt;/p&gt;

 */
  actionDetachVpnGatewayPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The ID of the virtual private gateway.
    /*let vpcId = "vpcId_example";*/ /*let vpnGatewayId = "vpnGatewayId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDetachVpnGatewayPost(
      incomingOptions.vpcId,
      incomingOptions.vpnGatewayId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisableEbsEncryptionByDefaultPost
  /*


&lt;p&gt;Disables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you disable encryption by default, you can still create encrypted volumes by enabling encryption when you create each volume.&lt;/p&gt; &lt;p&gt;Disabling encryption by default does not change the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDisableEbsEncryptionByDefaultPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableEbsEncryptionByDefaultPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableFastSnapshotRestoresPost
  /*


Disables fast snapshot restores for the specified snapshots in the specified Availability Zones.

 */
  actionDisableFastSnapshotRestoresPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more Availability Zones. For example, <code>us-east-2a</code> // [String] | The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>.
    /*let availabilityZone = "availabilityZone_example";*/ /*let sourceSnapshotId = "sourceSnapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableFastSnapshotRestoresPost(
      incomingOptions.availabilityZone,
      incomingOptions.sourceSnapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableTransitGatewayRouteTablePropagationPost
  /*


Disables the specified resource attachment from propagating routes to the specified propagation route table.

 */
  actionDisableTransitGatewayRouteTablePropagationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the propagation route table // String | The ID of the attachment.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableTransitGatewayRouteTablePropagationPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableVgwRoutePropagationPost
  /*


Disables a virtual private gateway (VGW) from propagating routes to a specified route table of a VPC.

 */
  actionDisableVgwRoutePropagationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway // String | The ID of the route table.
    /*let gatewayId = "gatewayId_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVgwRoutePropagationPost(
      incomingOptions.gatewayId,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisableVpcClassicLinkDnsSupportPost
  /*


Disables ClassicLink DNS support for a VPC. If disabled, DNS hostnames resolve to public IP addresses when addressed between a linked EC2-Classic instance and instances in the VPC to which it&#39;s linked. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionDisableVpcClassicLinkDnsSupportPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'vpcId': "vpcId_example" // String | The ID of the VPC.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVpcClassicLinkDnsSupportPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisableVpcClassicLinkPost
  /*


Disables ClassicLink for a VPC. You cannot disable ClassicLink for a VPC that has EC2-Classic instances linked to it.

 */
  actionDisableVpcClassicLinkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisableVpcClassicLinkPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateAddressPost
  /*


&lt;p&gt;Disassociates an Elastic IP address from the instance or network interface it&#39;s associated with.&lt;/p&gt; &lt;p&gt;An Elastic IP address is for use in either the EC2-Classic platform or in a VPC. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html\&quot;&gt;Elastic IP Addresses&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation. If you perform the operation more than once, Amazon EC2 doesn&#39;t return an error.&lt;/p&gt;

 */
  actionDisassociateAddressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'associationId': "associationId_example", // String | [EC2-VPC] The association ID. Required for EC2-VPC.
      //  'publicIp': "publicIp_example", // String | [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateAddressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisassociateClientVpnTargetNetworkPost
  /*


&lt;p&gt;Disassociates a target network from the specified Client VPN endpoint. When you disassociate the last target network from a Client VPN, the following happens:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;The route that was automatically added for the VPC is deleted&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;All active client connections are terminated&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;New client connections are disallowed&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The Client VPN endpoint&#39;s status changes to &lt;code&gt;pending-associate&lt;/code&gt; &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt;

 */
  actionDisassociateClientVpnTargetNetworkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint from which to disassociate the target network // String | The ID of the target network association.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateClientVpnTargetNetworkPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateIamInstanceProfilePost
  /*


&lt;p&gt;Disassociates an IAM instance profile from a running or stopped instance.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;

 */
  actionDisassociateIamInstanceProfilePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the IAM instance profile association.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateIamInstanceProfilePost(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateRouteTablePost
  /*


&lt;p&gt;Disassociates a subnet from a route table.&lt;/p&gt; &lt;p&gt;After you perform this action, the subnet no longer uses the routes in the route table. Instead, it uses the routes in the VPC&#39;s main route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionDisassociateRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID representing the current association between the route table and subnet.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateRouteTablePost(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionDisassociateSubnetCidrBlockPost
  /*


Disassociates a CIDR block from a subnet. Currently, you can disassociate an IPv6 CIDR block only. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it.

 */
  actionDisassociateSubnetCidrBlockPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID for the CIDR block.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateSubnetCidrBlockPost(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateTransitGatewayMulticastDomainPost
  /*


Disassociates the specified subnets from the transit gateway multicast domain.

 */
  actionDisassociateTransitGatewayMulticastDomainPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      //  'subnetIds': "subnetIds_example", // [String] | The IDs of the subnets
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateTransitGatewayMulticastDomainPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateTransitGatewayRouteTablePost
  /*


Disassociates a resource attachment from a transit gateway route table.

 */
  actionDisassociateTransitGatewayRouteTablePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // String | The ID of the attachment.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateTransitGatewayRouteTablePost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionDisassociateVpcCidrBlockPost
  /*


&lt;p&gt;Disassociates a CIDR block from a VPC. To disassociate the CIDR block, you must specify its association ID. You can get the association ID by using &lt;a&gt;DescribeVpcs&lt;/a&gt;. You must detach or delete all gateways and resources that are associated with the CIDR block before you can disassociate it. &lt;/p&gt; &lt;p&gt;You cannot disassociate the CIDR block with which you originally created the VPC (the primary CIDR block).&lt;/p&gt;

 */
  actionDisassociateVpcCidrBlockPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID for the CIDR block.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionDisassociateVpcCidrBlockPost(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableEbsEncryptionByDefaultPost
  /*


&lt;p&gt;Enables EBS encryption by default for your account in the current Region.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, the EBS volumes that you create are are always encrypted, either using the default CMK or the CMK that you specified when you created each volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can specify the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Enabling encryption by default has no effect on the encryption status of your existing volumes.&lt;/p&gt; &lt;p&gt;After you enable encryption by default, you can no longer launch instances using instance types that do not support encryption. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances\&quot;&gt;Supported Instance Types&lt;/a&gt;.&lt;/p&gt;

 */
  actionEnableEbsEncryptionByDefaultPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableEbsEncryptionByDefaultPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableFastSnapshotRestoresPost
  /*


&lt;p&gt;Enables fast snapshot restores for the specified snapshots in the specified Availability Zones.&lt;/p&gt; &lt;p&gt;You get the full benefit of fast snapshot restores after they enter the &lt;code&gt;enabled&lt;/code&gt; state. To get the current state of fast snapshot restores, use &lt;a&gt;DescribeFastSnapshotRestores&lt;/a&gt;. To disable fast snapshot restores, use &lt;a&gt;DisableFastSnapshotRestores&lt;/a&gt;.&lt;/p&gt;

 */
  actionEnableFastSnapshotRestoresPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | One or more Availability Zones. For example, <code>us-east-2a</code> // [String] | The IDs of one or more snapshots. For example, <code>snap-1234567890abcdef0</code>. You can specify a snapshot that was shared with you from another AWS account.
    /*let availabilityZone = "availabilityZone_example";*/ /*let sourceSnapshotId = "sourceSnapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableFastSnapshotRestoresPost(
      incomingOptions.availabilityZone,
      incomingOptions.sourceSnapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableTransitGatewayRouteTablePropagationPost
  /*


Enables the specified attachment to propagate routes to the specified propagation route table.

 */
  actionEnableTransitGatewayRouteTablePropagationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the propagation route table // String | The ID of the attachment.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableTransitGatewayRouteTablePropagationPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableVgwRoutePropagationPost
  /*


Enables a virtual private gateway (VGW) to propagate routes to the specified route table of a VPC.

 */
  actionEnableVgwRoutePropagationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the virtual private gateway that is attached to a VPC. The virtual private gateway must be attached to the same VPC that the routing tables are associated with. // String | The ID of the route table. The routing table must be associated with the same VPC that the virtual private gateway is attached to.
    /*let gatewayId = "gatewayId_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVgwRoutePropagationPost(
      incomingOptions.gatewayId,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionEnableVolumeIOPost
  /*


Enables I/O operations for a volume that had I/O operations disabled because the data on the volume was potentially inconsistent.

 */
  actionEnableVolumeIOPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVolumeIOPost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionEnableVpcClassicLinkDnsSupportPost
  /*


Enables a VPC to support DNS hostname resolution for ClassicLink. If enabled, the DNS hostname of a linked EC2-Classic instance resolves to its private IP address when addressed from an instance in the VPC to which it&#39;s linked. Similarly, the DNS hostname of an instance in a VPC resolves to its private IP address when addressed from a linked EC2-Classic instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionEnableVpcClassicLinkDnsSupportPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'vpcId': "vpcId_example" // String | The ID of the VPC.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVpcClassicLinkDnsSupportPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionEnableVpcClassicLinkPost
  /*


Enables a VPC for ClassicLink. You can then link EC2-Classic instances to your ClassicLink-enabled VPC to allow communication over private IP addresses. You cannot enable your VPC for ClassicLink if any of your VPC route tables have existing routes for address ranges within the &lt;code&gt;10.0.0.0/8&lt;/code&gt; IP address range, excluding local routes for VPCs in the &lt;code&gt;10.0.0.0/16&lt;/code&gt; and &lt;code&gt;10.1.0.0/16&lt;/code&gt; IP address ranges. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-classiclink.html\&quot;&gt;ClassicLink&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionEnableVpcClassicLinkPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionEnableVpcClassicLinkPost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportClientVpnClientCertificateRevocationListPost
  /*


Downloads the client certificate revocation list for the specified Client VPN endpoint.

 */
  actionExportClientVpnClientCertificateRevocationListPost(
    incomingOptions,
    cb
  ) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportClientVpnClientCertificateRevocationListPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportClientVpnClientConfigurationPost
  /*


Downloads the contents of the Client VPN endpoint configuration file for the specified Client VPN endpoint. The Client VPN endpoint configuration file includes the Client VPN endpoint and certificate information clients need to establish a connection with the Client VPN endpoint.

 */
  actionExportClientVpnClientConfigurationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportClientVpnClientConfigurationPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportImagePost
  /*


Exports an Amazon Machine Image (AMI) to a VM file. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmexport_image.html\&quot;&gt;Exporting a VM Directory from an Amazon Machine Image (AMI)&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.

 */
  actionExportImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The disk image format // String | The ID of the image.
    /*let diskImageFormat = "diskImageFormat_example";*/ /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Token to enable idempotency for export image requests.
      //  'description': "description_example", // String | A description of the image being exported. The maximum length is 255 bytes.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  's3ExportLocationS3Bucket': "s3ExportLocationS3Bucket_example", // String | Describes the destination for an export image task. The destination S3 bucket.
      //  's3ExportLocationS3Prefix': "s3ExportLocationS3Prefix_example", // String | Describes the destination for an export image task. The prefix (logical hierarchy) in the bucket.
      //  'roleName': "roleName_example" // String | The name of the role that grants VM Import/Export permission to export images to your S3 bucket. If this parameter is not specified, the default role is named 'vmimport'.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportImagePost(
      incomingOptions.diskImageFormat,
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionExportTransitGatewayRoutesPost
  /*


Exports routes from the specified transit gateway route table to the specified S3 bucket. By default, all routes are exported. Alternatively, you can filter by CIDR range.

 */
  actionExportTransitGatewayRoutesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table // String | The name of the S3 bucket.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let s3Bucket = "s3Bucket_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the attachment (<code>available</code> | <code>deleted</code> | <code>deleting</code> | <code>failed</code> | <code>modifying</code> | <code>pendingAcceptance</code> | <code>pending</code> | <code>rollingBack</code> | <code>rejected</code> | <code>rejecting</code>).</p> </li> <li> <p> <code>transit-gateway-route-destination-cidr-block</code> - The CIDR range.</p> </li> <li> <p> <code>type</code> - The type of route (<code>active</code> | <code>blackhole</code>).</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionExportTransitGatewayRoutesPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.s3Bucket,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetCapacityReservationUsagePost
  /*


Gets usage information about a Capacity Reservation. If the Capacity Reservation is shared, it shows usage information for the Capacity Reservation owner and each AWS account that is currently using the shared capacity. If the Capacity Reservation is not shared, it shows only the Capacity Reservation owner&#39;s usage.

 */
  actionGetCapacityReservationUsagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation.
    /*let capacityReservationId = "capacityReservationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'nextToken': "nextToken_example", // String | The token to retrieve the next page of results.
      maxResults: 56, // Number | <p>The maximum number of results to return for the request in a single page. The remaining results can be seen by sending another request with the returned nextToken value.</p> <p>Valid range: Minimum value of 1. Maximum value of 1000.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetCapacityReservationUsagePost(
      incomingOptions.capacityReservationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetCoipPoolUsagePost
  /*


Describes the allocations from the specified customer-owned address pool.

 */
  actionGetCoipPoolUsagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the address pool.
    /*let poolId = "poolId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>The filters. The following are the possible values:</p> <ul> <li> <p> <code>coip-address-usage.allocation-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-account-id</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.aws-service</code> </p> </li> </ul> <ul> <li> <p> <code>coip-address-usage.co-ip</code> </p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetCoipPoolUsagePost(
      incomingOptions.poolId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetConsoleOutputPost
  /*


&lt;p&gt;Gets the console output for the specified instance. For Linux instances, the instance console output displays the exact console output that would normally be displayed on a physical monitor attached to a computer. For Windows instances, the instance console output includes the last three system event log errors.&lt;/p&gt; &lt;p&gt;By default, the console output returns buffered information that was posted shortly after an instance transition state (start, stop, reboot, or terminate). This information is available for at least one hour after the most recent post. Only the most recent 64 KB of console output is available.&lt;/p&gt; &lt;p&gt;You can optionally retrieve the latest serial console output at any time during the instance lifecycle. This option is supported on instance types that use the Nitro hypervisor.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html#instance-console-console-output\&quot;&gt;Instance Console Output&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetConsoleOutputPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      latest: true // Boolean | <p>When enabled, retrieves the latest console output for the instance.</p> <p>Default: disabled (<code>false</code>)</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetConsoleOutputPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetConsoleScreenshotPost
  /*


&lt;p&gt;Retrieve a JPG-format screenshot of a running instance to help with troubleshooting.&lt;/p&gt; &lt;p&gt;The returned content is Base64-encoded.&lt;/p&gt;

 */
  actionGetConsoleScreenshotPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      wakeUp: true // Boolean | When set to <code>true</code>, acts as keystroke input and wakes up an instance that's in standby or \\\"sleep\\\" mode.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetConsoleScreenshotPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetDefaultCreditSpecificationPost
  /*


&lt;p&gt;Describes the default credit option for CPU usage of a burstable performance instance family.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetDefaultCreditSpecificationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The instance family.
    /*let instanceFamily = "instanceFamily_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetDefaultCreditSpecificationPost(
      incomingOptions.instanceFamily,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetEbsDefaultKmsKeyIdPost
  /*


&lt;p&gt;Describes the default customer master key (CMK) for EBS encryption by default for your account in this Region. You can change the default CMK for encryption by default using &lt;a&gt;ModifyEbsDefaultKmsKeyId&lt;/a&gt; or &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetEbsDefaultKmsKeyIdPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetEbsDefaultKmsKeyIdPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetEbsEncryptionByDefaultPost
  /*


&lt;p&gt;Describes whether EBS encryption by default is enabled for your account in the current Region.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionGetEbsEncryptionByDefaultPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetEbsEncryptionByDefaultPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetHostReservationPurchasePreviewPost
  /*


&lt;p&gt;Preview a reservation purchase with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation.&lt;/p&gt; &lt;p&gt;This is a preview of the &lt;a&gt;PurchaseHostReservation&lt;/a&gt; action and does not result in the offering being purchased.&lt;/p&gt;

 */
  actionGetHostReservationPurchasePreviewPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts with which the reservation is associated // String | The offering ID of the reservation.
    /*let hostIdSet = "hostIdSet_example";*/ /*let offeringId = "offeringId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetHostReservationPurchasePreviewPost(
      incomingOptions.hostIdSet,
      incomingOptions.offeringId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetLaunchTemplateDataPost
  /*


Retrieves the configuration data of the specified instance. You can use this data to create a launch template.

 */
  actionGetLaunchTemplateDataPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetLaunchTemplateDataPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetPasswordDataPost
  /*


&lt;p&gt;Retrieves the encrypted administrator password for a running Windows instance.&lt;/p&gt; &lt;p&gt;The Windows password is generated at boot by the &lt;code&gt;EC2Config&lt;/code&gt; service or &lt;code&gt;EC2Launch&lt;/code&gt; scripts (Windows Server 2016 and later). This usually only happens the first time an instance is launched. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/UsingConfig_WinAMI.html\&quot;&gt;EC2Config&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2launch.html\&quot;&gt;EC2Launch&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt; &lt;p&gt;For the &lt;code&gt;EC2Config&lt;/code&gt; service, the password is not generated for rebundled AMIs unless &lt;code&gt;Ec2SetPassword&lt;/code&gt; is enabled before bundling.&lt;/p&gt; &lt;p&gt;The password is encrypted using the key pair that you specified when you launched the instance. You must provide the corresponding key pair file.&lt;/p&gt; &lt;p&gt;When you launch an instance, password generation and encryption may take a few minutes. If you try to retrieve the password before it&#39;s available, the output returns an empty string. We recommend that you wait up to 15 minutes after launching an instance before trying to retrieve the generated password.&lt;/p&gt;

 */
  actionGetPasswordDataPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Windows instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetPasswordDataPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetReservedInstancesExchangeQuotePost
  /*


Returns a quote and exchange information for exchanging one or more specified Convertible Reserved Instances for a new Convertible Reserved Instance. If the exchange cannot be performed, the reason is returned in the response. Use &lt;a&gt;AcceptReservedInstancesExchangeQuote&lt;/a&gt; to perform the exchange.

 */
  actionGetReservedInstancesExchangeQuotePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Convertible Reserved Instances to exchange.
    /*let reservedInstanceId = "reservedInstanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'targetConfiguration': "targetConfiguration_example" // [String] | The configuration of the target Convertible Reserved Instance to exchange for your current Convertible Reserved Instances.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetReservedInstancesExchangeQuotePost(
      incomingOptions.reservedInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayAttachmentPropagationsPost
  /*


Lists the route tables to which the specified resource attachment propagates routes.

 */
  actionGetTransitGatewayAttachmentPropagationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>transit-gateway-route-table-id</code> - The ID of the transit gateway route table.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayAttachmentPropagationsPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayMulticastDomainAssociationsPost
  /*


Gets information about the associations for the transit gateway multicast domain.

 */
  actionGetTransitGatewayMulticastDomainAssociationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. The valid value is: <code>vpc</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associating</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayMulticastDomainAssociationsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayRouteTableAssociationsPost
  /*


Gets information about the associations for the specified transit gateway route table.

 */
  actionGetTransitGatewayRouteTableAssociationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayRouteTableAssociationsPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionGetTransitGatewayRouteTablePropagationsPost
  /*


Gets information about the route table propagations for the specified transit gateway route table.

 */
  actionGetTransitGatewayRouteTablePropagationsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table.
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The ID of the attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionGetTransitGatewayRouteTablePropagationsPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportClientVpnClientCertificateRevocationListPost
  /*


&lt;p&gt;Uploads a client certificate revocation list to the specified Client VPN endpoint. Uploading a client certificate revocation list overwrites the existing client certificate revocation list.&lt;/p&gt; &lt;p&gt;Uploading a client certificate revocation list resets existing client connections.&lt;/p&gt;

 */
  actionImportClientVpnClientCertificateRevocationListPost(
    incomingOptions,
    cb
  ) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which the client certificate revocation list applies // String | The client certificate revocation list file. For more information, see <a href=\\\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-working-certificates.html#cvpn-working-certificates-generate\\\">Generate a Client Certificate Revocation List</a> in the <i>AWS Client VPN Administrator Guide</i>.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let certificateRevocationList = "certificateRevocationList_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportClientVpnClientCertificateRevocationListPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.certificateRevocationList,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportImagePost
  /*


Import single or multi-volume disk images or EBS snapshots into an Amazon Machine Image (AMI). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html\&quot;&gt;Importing a VM as an Image Using VM Import/Export&lt;/a&gt; in the &lt;i&gt;VM Import/Export User Guide&lt;/i&gt;.

 */
  actionImportImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'architecture': "architecture_example", // String | <p>The architecture of the virtual machine.</p> <p>Valid values: <code>i386</code> | <code>x86_64</code> | <code>arm64</code> </p>
      //  'clientDataComment': "clientDataComment_example", // String | Describes the client-specific data. A user-defined comment about the disk upload.
      //  'clientDataUploadEnd': "clientDataUploadEnd_example", // String | Describes the client-specific data. The time that the disk upload ends.
      //  'clientDataUploadSize': "clientDataUploadSize_example", // String | Describes the client-specific data. The size of the uploaded disk image, in GiB.
      //  'clientDataUploadStart': "clientDataUploadStart_example", // String | Describes the client-specific data. The time that the disk upload starts.
      //  'clientToken': "clientToken_example", // String | The token to enable idempotency for VM import requests.
      //  'description': "description_example", // String | A description string for the import image task.
      //  'diskContainer': "diskContainer_example", // [String] | Information about the disk containers.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      encrypted: true // Boolean | Specifies whether the destination AMI of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\\\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'hypervisor': "hypervisor_example", // String | <p>The target hypervisor platform.</p> <p>Valid values: <code>xen</code> </p>
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted AMI. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the AMI is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      //  'licenseType': "licenseType_example", // String | <p>The license type to be used for the Amazon Machine Image (AMI) after importing.</p> <p>By default, we detect the source-system operating system (OS) and apply the appropriate license. Specify <code>AWS</code> to replace the source-system license with an AWS license, if appropriate. Specify <code>BYOL</code> to retain the source-system license, if appropriate.</p> <p>To use <code>BYOL</code>, you must have existing licenses with rights to use these licenses in a third party cloud, such as AWS. For more information, see <a href=\\\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html#prerequisites-image\\\">Prerequisites</a> in the VM Import/Export User Guide.</p>
      //  'platform': "platform_example", // String | <p>The operating system of the virtual machine.</p> <p>Valid values: <code>Windows</code> | <code>Linux</code> </p>
      //  'roleName': "roleName_example", // String | The name of the role to use when not using the default role, 'vmimport'.
      //  'licenseSpecifications': "licenseSpecifications_example" // [String] | The ARNs of the license configurations.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportImagePost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportInstancePost
  /*


&lt;p&gt;Creates an import instance task using metadata from the specified disk image. &lt;code&gt;ImportInstance&lt;/code&gt; only supports single-volume VMs. To import multi-volume VMs, use &lt;a&gt;ImportImage&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-vmimport-export.html\&quot;&gt;Importing a Virtual Machine Using the Amazon EC2 CLI&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionImportInstancePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The instance operating system.
    /*let platform = "platform_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description for the instance being imported.
      //  'diskImage': "diskImage_example", // [String] | The disk image.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'launchSpecificationAdditionalInfo': "launchSpecificationAdditionalInfo_example", // String | Describes the launch specification for VM import. Reserved.
      //  'launchSpecificationArchitecture': "launchSpecificationArchitecture_example", // String | Describes the launch specification for VM import. The architecture of the instance.
      //  'launchSpecificationGroupIds': "launchSpecificationGroupIds_example", // [String] | Describes the launch specification for VM import. The security group IDs.
      //  'launchSpecificationGroupNames': "launchSpecificationGroupNames_example", // [String] | Describes the launch specification for VM import. The security group names.
      //  'launchSpecificationInstanceInitiatedShutdownBehavior': "launchSpecificationInstanceInitiatedShutdownBehavior_example", // String | Describes the launch specification for VM import. Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | Describes the launch specification for VM import. The instance type. For more information about the instance types that you can import, see <a href=\\\"https://docs.aws.amazon.com/vm-import/latest/userguide/vmie_prereqs.html#vmimport-instance-types\\\">Instance Types</a> in the VM Import/Export User Guide.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | Describes the launch specification for VM import. Indicates whether monitoring is enabled.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | Describes the launch specification for VM import. The placement information for the instance.
      //  'launchSpecificationPrivateIpAddress': "launchSpecificationPrivateIpAddress_example", // String | Describes the launch specification for VM import. [EC2-VPC] An available IP address from the IP address range of the subnet.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | Describes the launch specification for VM import. [EC2-VPC] The ID of the subnet in which to launch the instance.
      //  'launchSpecificationUserData': "launchSpecificationUserData_example" // String | Describes the launch specification for VM import. The Base64-encoded user data to make available to the instance.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportInstancePost(
      incomingOptions.platform,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportKeyPairPost
  /*


&lt;p&gt;Imports the public key from an RSA key pair that you created with a third-party tool. Compare this with &lt;a&gt;CreateKeyPair&lt;/a&gt;, in which AWS creates the key pair and gives the keys to you (AWS keeps a copy of the public key). With ImportKeyPair, you create the key pair and give AWS just the public key. The private key is never transferred between you and AWS.&lt;/p&gt; &lt;p&gt;For more information about key pairs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionImportKeyPairPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | A unique name for the key pair // String | The public key. For API calls, the text must be base64-encoded. For command line tools, base64 encoding is performed for you.
    /*let keyName = "keyName_example";*/ /*let publicKeyMaterial = "publicKeyMaterial_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportKeyPairPost(
      incomingOptions.keyName,
      incomingOptions.publicKeyMaterial,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportSnapshotPost
  /*


Imports a disk into an EBS snapshot.

 */
  actionImportSnapshotPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientDataComment': "clientDataComment_example", // String | Describes the client-specific data. A user-defined comment about the disk upload.
      //  'clientDataUploadEnd': "clientDataUploadEnd_example", // String | Describes the client-specific data. The time that the disk upload ends.
      //  'clientDataUploadSize': "clientDataUploadSize_example", // String | Describes the client-specific data. The size of the uploaded disk image, in GiB.
      //  'clientDataUploadStart': "clientDataUploadStart_example", // String | Describes the client-specific data. The time that the disk upload starts.
      //  'clientToken': "clientToken_example", // String | Token to enable idempotency for VM import requests.
      //  'description': "description_example", // String | The description string for the import snapshot task.
      //  'diskContainerDescription': "diskContainerDescription_example", // String | The disk container object for the import snapshot request. The description of the disk image being imported.
      //  'diskContainerFormat': "diskContainerFormat_example", // String | The disk container object for the import snapshot request. <p>The format of the disk image being imported.</p> <p>Valid values: <code>VHD</code> | <code>VMDK</code> </p>
      //  'diskContainerUrl': "diskContainerUrl_example", // String | The disk container object for the import snapshot request. The URL to the Amazon S3-based disk image being imported. It can either be a https URL (https://..) or an Amazon S3 URL (s3://..).
      //  'diskContainerUserBucket': "diskContainerUserBucket_example", // String | The disk container object for the import snapshot request. The S3 bucket for the disk image.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      encrypted: true // Boolean | Specifies whether the destination snapshot of the imported image should be encrypted. The default CMK for EBS is used unless you specify a non-default AWS Key Management Service (AWS KMS) CMK using <code>KmsKeyId</code>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\\\">Amazon EBS Encryption</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'kmsKeyId': "kmsKeyId_example", // String | <p>An identifier for the symmetric AWS Key Management Service (AWS KMS) customer master key (CMK) to use when creating the encrypted snapshot. This parameter is only required if you want to use a non-default CMK if this parameter is not specified, the default CMK for EBS is used. If a <code>KmsKeyId</code> is specified, the <code>Encrypted</code> flag must also be set. </p> <p>The CMK identifier may be provided in any of the following formats: </p> <ul> <li> <p>Key ID</p> </li> <li> <p>Key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> <li> <p>ARN using key ID. The ID ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>key</code> namespace, and then the CMK ID. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>ARN using key alias. The alias ARN contains the <code>arn:aws:kms</code> namespace, followed by the Region of the CMK, the AWS account ID of the CMK owner, the <code>alias</code> namespace, and then the CMK alias. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>. </p> </li> </ul> <p>AWS parses <code>KmsKeyId</code> asynchronously, meaning that the action you call may appear to complete even though you provided an invalid identifier. This action will eventually report failure. </p> <p>The specified CMK must exist in the Region that the snapshot is being copied to.</p> <p>Amazon EBS does not support asymmetric CMKs.</p>
      //  'roleName': "roleName_example" // String | The name of the role to use when not using the default role, 'vmimport'.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportSnapshotPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionImportVolumePost
  /*


&lt;p&gt;Creates an import volume task using metadata from the specified disk image.For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/importing-your-volumes-into-amazon-ebs.html\&quot;&gt;Importing Disks to Amazon EBS&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For information about the import manifest referenced by this API action, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\&quot;&gt;VM Import Manifest&lt;/a&gt;.&lt;/p&gt;

 */
  actionImportVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Availability Zone for the resulting EBS volume.
    /*let availabilityZone = "availabilityZone_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | A description of the volume.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'imageBytes': "imageBytes_example", // String | Describes a disk image. The size of the disk image, in GiB.
      //  'imageFormat': "imageFormat_example", // String | Describes a disk image. The disk image format.
      //  'imageImportManifestUrl': "imageImportManifestUrl_example", // String | Describes a disk image. <p>A presigned URL for the import manifest stored in Amazon S3 and presented here as an Amazon S3 presigned URL. For information about creating a presigned URL for an Amazon S3 object, read the \\\"Query String Request Authentication Alternative\\\" section of the <a href=\\\"https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html\\\">Authenticating REST Requests</a> topic in the <i>Amazon Simple Storage Service Developer Guide</i>.</p> <p>For information about the import manifest referenced by this API action, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/manifest.html\\\">VM Import Manifest</a>.</p>
      //  'volumeSize': "volumeSize_example" // String | Describes an EBS volume. The size of the volume, in GiB.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionImportVolumePost(
      incomingOptions.availabilityZone,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyCapacityReservationPost
  /*


Modifies a Capacity Reservation&#39;s capacity and the conditions under which it is to be released. You cannot change a Capacity Reservation&#39;s instance type, EBS optimization, instance store settings, platform, Availability Zone, or instance eligibility. If you need to modify any of these attributes, we recommend that you cancel the Capacity Reservation, and then create a new one with the required attributes.

 */
  actionModifyCapacityReservationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Capacity Reservation.
    /*let capacityReservationId = "capacityReservationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      instanceCount: 56, // Number | The number of instances for which to reserve capacity.
      endDate: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The date and time at which the Capacity Reservation expires. When a Capacity Reservation expires, the reserved capacity is released and you can no longer launch instances into it. The Capacity Reservation's state changes to <code>expired</code> when it reaches its end date and time.</p> <p>The Capacity Reservation is cancelled within an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55, the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55 on 5/31/2019.</p> <p>You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>. Omit <code>EndDate</code> if <code>EndDateType</code> is <code>unlimited</code>.</p>
      //  'endDateType': "endDateType_example", // String | <p>Indicates the way in which the Capacity Reservation ends. A Capacity Reservation can have one of the following end types:</p> <ul> <li> <p> <code>unlimited</code> - The Capacity Reservation remains active until you explicitly cancel it. Do not provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>unlimited</code>.</p> </li> <li> <p> <code>limited</code> - The Capacity Reservation expires automatically at a specified date and time. You must provide an <code>EndDate</code> value if <code>EndDateType</code> is <code>limited</code>.</p> </li> </ul>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyCapacityReservationPost(
      incomingOptions.capacityReservationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyClientVpnEndpointPost
  /*


Modifies the specified Client VPN endpoint. You can only modify an endpoint&#39;s server certificate information, client connection logging information, DNS server, and description. Modifying the DNS server resets existing client connections.

 */
  actionModifyClientVpnEndpointPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to modify.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'serverCertificateArn': "serverCertificateArn_example", // String | The ARN of the server certificate to be used. The server certificate must be provisioned in AWS Certificate Manager (ACM).
      //  'connectionLogOptionsEnabled': "connectionLogOptionsEnabled_example", // String | Describes the client connection logging options for the Client VPN endpoint. Indicates whether connection logging is enabled.
      //  'connectionLogOptionsCloudwatchLogGroup': "connectionLogOptionsCloudwatchLogGroup_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log group.
      //  'connectionLogOptionsCloudwatchLogStream': "connectionLogOptionsCloudwatchLogStream_example", // String | Describes the client connection logging options for the Client VPN endpoint. The name of the CloudWatch Logs log stream to which the connection data is published.
      //  'dnsServersCustomDnsServers': "dnsServersCustomDnsServers_example", // [String] | Information about the DNS server to be used. The IPv4 address range, in CIDR notation, of the DNS servers to be used. You can specify up to two DNS servers. Ensure that the DNS servers can be reached by the clients. The specified values overwrite the existing values.
      //  'dnsServersEnabled': "dnsServersEnabled_example", // String | Information about the DNS server to be used. Indicates whether DNS servers should be used. Specify <code>False</code> to delete the existing DNS servers.
      //  'description': "description_example", // String | A brief description of the Client VPN endpoint.
      splitTunnel: true, // Boolean | <p>Indicates whether the VPN is split-tunnel.</p> <p>For information about split-tunnel VPN endpoints, see <a href=\\\"https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/split-tunnel-vpn.html\\\">Split-Tunnel AWS Client VPN Endpoint</a> in the <i>AWS Client VPN Administrator Guide</i>.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyClientVpnEndpointPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyDefaultCreditSpecificationPost
  /*


&lt;p&gt;Modifies the default credit option for CPU usage of burstable performance instances. The default credit option is set at the account level per AWS Region, and is specified per instance family. All new burstable performance instances in the account launch using the default credit option.&lt;/p&gt; &lt;p&gt; &lt;code&gt;ModifyDefaultCreditSpecification&lt;/code&gt; is an asynchronous operation, which works at an AWS Region level and modifies the credit option for each Availability Zone. All zones in a Region are updated within five minutes. But if instances are launched during this operation, they might not get the new credit option until the zone is updated. To verify whether the update has occurred, you can call &lt;code&gt;GetDefaultCreditSpecification&lt;/code&gt; and check &lt;code&gt;DefaultCreditSpecification&lt;/code&gt; for updates.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyDefaultCreditSpecificationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The instance family // String | <p>The credit option for CPU usage of the instance family.</p> <p>Valid Values: <code>standard</code> | <code>unlimited</code> </p>
    /*let instanceFamily = "instanceFamily_example";*/ /*let cpuCredits = "cpuCredits_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyDefaultCreditSpecificationPost(
      incomingOptions.instanceFamily,
      incomingOptions.cpuCredits,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyEbsDefaultKmsKeyIdPost
  /*


&lt;p&gt;Changes the default customer master key (CMK) for EBS encryption by default for your account in this Region.&lt;/p&gt; &lt;p&gt;AWS creates a unique AWS managed CMK in each Region for use with encryption by default. If you change the default CMK to a symmetric customer managed CMK, it is used instead of the AWS managed CMK. To reset the default CMK to the AWS managed CMK for EBS, use &lt;a&gt;ResetEbsDefaultKmsKeyId&lt;/a&gt;. Amazon EBS does not support asymmetric CMKs.&lt;/p&gt; &lt;p&gt;If you delete or disable the customer managed CMK that you specified for use with encryption by default, your instances will fail to launch.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyEbsDefaultKmsKeyIdPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The identifier of the AWS Key Management Service (AWS KMS) customer master key (CMK) to use for Amazon EBS encryption. If this parameter is not specified, your AWS managed CMK for EBS is used. If <code>KmsKeyId</code> is specified, the encrypted state must be <code>true</code>.</p> <p>You can specify the CMK using any of the following:</p> <ul> <li> <p>Key ID. For example, key/1234abcd-12ab-34cd-56ef-1234567890ab.</p> </li> <li> <p>Key alias. For example, alias/ExampleAlias.</p> </li> <li> <p>Key ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:key/<i>abcd1234-a123-456a-a12b-a123b4cd56ef</i>.</p> </li> <li> <p>Alias ARN. For example, arn:aws:kms:<i>us-east-1</i>:<i>012345678910</i>:alias/<i>ExampleAlias</i>.</p> </li> </ul> <p>AWS authenticates the CMK asynchronously. Therefore, if you specify an ID, alias, or ARN that is not valid, the action can appear to complete, but eventually fails.</p> <p>Amazon EBS does not support asymmetric CMKs.</p>
    /*let kmsKeyId = "kmsKeyId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyEbsDefaultKmsKeyIdPost(
      incomingOptions.kmsKeyId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyFleetPost
  /*


&lt;p&gt;Modifies the specified EC2 Fleet.&lt;/p&gt; &lt;p&gt;You can only modify an EC2 Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the EC2 Fleet is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your EC2 Fleet, increase its target capacity. The EC2 Fleet launches the additional Spot Instances according to the allocation strategy for the EC2 Fleet request. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, EC2 Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your EC2 Fleet, decrease its target capacity. First, the EC2 Fleet cancels any open requests that exceed the new target capacity. You can request that the EC2 Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowest-price&lt;/code&gt;, the EC2 Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacity-optimized&lt;/code&gt;, the EC2 Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the EC2 Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the EC2 Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your EC2 Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;

 */
  actionModifyFleetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the EC2 Fleet.
    /*let fleetId = "fleetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running instances should be terminated if the total target capacity of the EC2 Fleet is decreased below the current size of the EC2 Fleet.
      //  'targetCapacitySpecificationTotalTargetCapacity': "targetCapacitySpecificationTotalTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of units to request, filled using <code>DefaultTargetCapacityType</code>.
      //  'targetCapacitySpecificationOnDemandTargetCapacity': "targetCapacitySpecificationOnDemandTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of On-Demand units to request.
      //  'targetCapacitySpecificationSpotTargetCapacity': "targetCapacitySpecificationSpotTargetCapacity_example", // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The number of Spot units to request.
      //  'targetCapacitySpecificationDefaultTargetCapacityType': "targetCapacitySpecificationDefaultTargetCapacityType_example" // String | <p>The number of units to request. You can choose to set the target capacity as the number of instances. Or you can set the target capacity to a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.</p> <p>You can use the On-Demand Instance <code>MaxTotalPrice</code> parameter, the Spot Instance <code>MaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, EC2 Fleet will launch instances until it reaches the maximum amount that you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity. The <code>MaxTotalPrice</code> parameters are located in and .</p> The default <code>TotalTargetCapacity</code>, which is either <code>Spot</code> or <code>On-Demand</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyFleetPost(
      incomingOptions.fleetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyFpgaImageAttributePost
  /*


Modifies the specified attribute of the specified Amazon FPGA Image (AFI).

 */
  actionModifyFpgaImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AFI.
    /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'attribute': "attribute_example", // String | The name of the attribute.
      //  'operationType': "operationType_example", // String | The operation type.
      //  'userId': "userId_example", // [String] | The AWS account IDs. This parameter is valid only when modifying the <code>loadPermission</code> attribute.
      //  'userGroup': "userGroup_example", // [String] | The user groups. This parameter is valid only when modifying the <code>loadPermission</code> attribute.
      //  'productCode': "productCode_example", // [String] | The product codes. After you add a product code to an AFI, it can't be removed. This parameter is valid only when modifying the <code>productCodes</code> attribute.
      //  'loadPermissionAdd': "loadPermissionAdd_example", // [String] | Describes modifications to the load permissions of an Amazon FPGA image (AFI). The load permissions to add.
      //  'loadPermissionRemove': "loadPermissionRemove_example", // [String] | Describes modifications to the load permissions of an Amazon FPGA image (AFI). The load permissions to remove.
      //  'description': "description_example", // String | A description for the AFI.
      //  'name': "name_example" // String | A name for the AFI.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyFpgaImageAttributePost(
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyHostsPost
  /*


&lt;p&gt;Modify the auto-placement setting of a Dedicated Host. When auto-placement is enabled, any instances that you launch with a tenancy of &lt;code&gt;host&lt;/code&gt; but without a specific host ID are placed onto any available Dedicated Host in your account that has auto-placement enabled. When auto-placement is disabled, you need to provide a host ID to have the instance launch onto a specific host. If no host ID is provided, the instance is launched onto a suitable host with auto-placement enabled.&lt;/p&gt; &lt;p&gt;You can also use this API action to modify a Dedicated Host to support either multiple instance types in an instance family, or to support a specific instance type only.&lt;/p&gt;

 */
  actionModifyHostsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts to modify.
    /*let hostId = "hostId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'autoPlacement': "autoPlacement_example", // String | Specify whether to enable or disable auto-placement.
      //  'hostRecovery': "hostRecovery_example", // String | Indicates whether to enable or disable host recovery for the Dedicated Host. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-recovery.html\\\"> Host Recovery</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'instanceType': "instanceType_example", // String | <p>Specifies the instance type to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support only a specific instance type.</p> <p>If you want to modify a Dedicated Host to support multiple instance types in its current instance family, omit this parameter and specify <b>InstanceFamily</b> instead. You cannot specify <b>InstanceType</b> and <b>InstanceFamily</b> in the same request.</p>
      //  'instanceFamily': "instanceFamily_example" // String | <p>Specifies the instance family to be supported by the Dedicated Host. Specify this parameter to modify a Dedicated Host to support multiple instance types within its current instance family.</p> <p>If you want to modify a Dedicated Host to support a specific instance type only, omit this parameter and specify <b>InstanceType</b> instead. You cannot specify <b>InstanceFamily</b> and <b>InstanceType</b> in the same request.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyHostsPost(
      incomingOptions.hostId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyIdFormatPost
  /*


&lt;p&gt;Modifies the ID format for the specified resource on a per-Region basis. You can specify that resources should receive longer IDs (17-character IDs) when they are created.&lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;This setting applies to the IAM user who makes the request it does not apply to the entire AWS account. By default, an IAM user defaults to the same settings as the root user. If you&#39;re using this action as the root user, then these settings apply to the entire account, unless an IAM user explicitly overrides these settings for themselves. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionModifyIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p // Boolean | Indicate whether the resource should use longer IDs (17-character IDs).
    /*let resource = "resource_example";*/ /*let useLongIds = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyIdFormatPost(
      incomingOptions.resource,
      incomingOptions.useLongIds,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyIdentityIdFormatPost
  /*


&lt;p&gt;Modifies the ID format of a resource for a specified IAM user, IAM role, or the root user for an account or all IAM users, IAM roles, and the root user for an account. You can specify that resources should receive longer IDs (17-character IDs) when they are created. &lt;/p&gt; &lt;p&gt;This request can only be used to modify longer ID settings for resource types that are within the opt-in period. Resources currently in their opt-in period include: &lt;code&gt;bundle&lt;/code&gt; | &lt;code&gt;conversion-task&lt;/code&gt; | &lt;code&gt;customer-gateway&lt;/code&gt; | &lt;code&gt;dhcp-options&lt;/code&gt; | &lt;code&gt;elastic-ip-allocation&lt;/code&gt; | &lt;code&gt;elastic-ip-association&lt;/code&gt; | &lt;code&gt;export-task&lt;/code&gt; | &lt;code&gt;flow-log&lt;/code&gt; | &lt;code&gt;image&lt;/code&gt; | &lt;code&gt;import-task&lt;/code&gt; | &lt;code&gt;internet-gateway&lt;/code&gt; | &lt;code&gt;network-acl&lt;/code&gt; | &lt;code&gt;network-acl-association&lt;/code&gt; | &lt;code&gt;network-interface&lt;/code&gt; | &lt;code&gt;network-interface-attachment&lt;/code&gt; | &lt;code&gt;prefix-list&lt;/code&gt; | &lt;code&gt;route-table&lt;/code&gt; | &lt;code&gt;route-table-association&lt;/code&gt; | &lt;code&gt;security-group&lt;/code&gt; | &lt;code&gt;subnet&lt;/code&gt; | &lt;code&gt;subnet-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc&lt;/code&gt; | &lt;code&gt;vpc-cidr-block-association&lt;/code&gt; | &lt;code&gt;vpc-endpoint&lt;/code&gt; | &lt;code&gt;vpc-peering-connection&lt;/code&gt; | &lt;code&gt;vpn-connection&lt;/code&gt; | &lt;code&gt;vpn-gateway&lt;/code&gt;. &lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/resource-ids.html\&quot;&gt;Resource IDs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;. &lt;/p&gt; &lt;p&gt;This setting applies to the principal specified in the request it does not apply to the principal that makes the request. &lt;/p&gt; &lt;p&gt;Resources created with longer IDs are visible to all IAM roles and users, regardless of these settings and provided that they have permission to use the relevant &lt;code&gt;Describe&lt;/code&gt; command for the resource type.&lt;/p&gt;

 */
  actionModifyIdentityIdFormatPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ARN of the principal, which can be an IAM user, IAM role, or the root user. Specify <code>all</code> to modify the ID format for all IAM users, IAM roles, and the root user of the account // String | <p>The type of resource: <code>bundle</code> | <code>conversion-task</code> | <code>customer-gateway</code> | <code>dhcp-options</code> | <code>elastic-ip-allocation</code> | <code>elastic-ip-association</code> | <code>export-task</code> | <code>flow-log</code> | <code>image</code> | <code>import-task</code> | <code>internet-gateway</code> | <code>network-acl</code> | <code>network-acl-association</code> | <code>network-interface</code> | <code>network-interface-attachment</code> | <code>prefix-list</code> | <code>route-table</code> | <code>route-table-association</code> | <code>security-group</code> | <code>subnet</code> | <code>subnet-cidr-block-association</code> | <code>vpc</code> | <code>vpc-cidr-block-association</code> | <code>vpc-endpoint</code> | <code>vpc-peering-connection</code> | <code>vpn-connection</code> | <code>vpn-gateway</code>.</p> <p>Alternatively, use the <code>all-current</code> option to include all resource types that are currently within their opt-in period for longer IDs.</p // Boolean | Indicates whether the resource should use longer IDs (17-character IDs)
    /*let principalArn = "principalArn_example";*/ /*let resource = "resource_example";*/ /*let useLongIds = true;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyIdentityIdFormatPost(
      incomingOptions.principalArn,
      incomingOptions.resource,
      incomingOptions.useLongIds,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyImageAttributePost
  /*


&lt;p&gt;Modifies the specified attribute of the specified AMI. You can specify only one attribute at a time. You can use the &lt;code&gt;Attribute&lt;/code&gt; parameter to specify the attribute or one of the following parameters: &lt;code&gt;Description&lt;/code&gt;, &lt;code&gt;LaunchPermission&lt;/code&gt;, or &lt;code&gt;ProductCode&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;AWS Marketplace product codes cannot be modified. Images with an AWS Marketplace product code cannot be made public.&lt;/p&gt; &lt;p&gt;To enable the SriovNetSupport enhanced networking attribute of an image, enable SriovNetSupport on an instance and create an AMI from the instance.&lt;/p&gt;

 */
  actionModifyImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AMI.
    /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'attribute': "attribute_example", // String | The name of the attribute to modify. The valid values are <code>description</code>, <code>launchPermission</code>, and <code>productCodes</code>.
      //  'descriptionValue': "descriptionValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'launchPermissionAdd': "launchPermissionAdd_example", // [String] | Describes a launch permission modification. The AWS account ID to add to the list of launch permissions for the AMI.
      //  'launchPermissionRemove': "launchPermissionRemove_example", // [String] | Describes a launch permission modification. The AWS account ID to remove from the list of launch permissions for the AMI.
      //  'operationType': "operationType_example", // String | The operation type. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      //  'productCode': "productCode_example", // [String] | The DevPay product codes. After you add a product code to an AMI, it can't be removed.
      //  'userGroup': "userGroup_example", // [String] | The user groups. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      //  'userId': "userId_example", // [String] | The AWS account IDs. This parameter can be used only when the <code>Attribute</code> parameter is <code>launchPermission</code>.
      //  'value': "value_example", // String | The value of the attribute being modified. This parameter can be used only when the <code>Attribute</code> parameter is <code>description</code> or <code>productCodes</code>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyImageAttributePost(
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceAttributePost
  /*


&lt;p&gt;Modifies the specified attribute of the specified instance. You can specify only one attribute at a time.&lt;/p&gt; &lt;p&gt; &lt;b&gt;Note: &lt;/b&gt;Using this action to change the security groups associated with an elastic network interface (ENI) attached to an instance in a VPC can result in an error if the instance has more than one ENI. To change the security groups associated with an ENI attached to an instance that has multiple ENIs, we recommend that you use the &lt;a&gt;ModifyNetworkInterfaceAttribute&lt;/a&gt; action.&lt;/p&gt; &lt;p&gt;To modify some attributes, the instance must be stopped. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_ChangingAttributesWhileInstanceStopped.html\&quot;&gt;Modifying Attributes of a Stopped Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyInstanceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'sourceDestCheckValue': "sourceDestCheckValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'attribute': "attribute_example", // String | The name of the attribute.
      //  'blockDeviceMapping': "blockDeviceMapping_example", // [String] | <p>Modifies the <code>DeleteOnTermination</code> attribute for volumes that are currently attached. The volume must be owned by the caller. If no value is specified for <code>DeleteOnTermination</code>, the default is <code>true</code> and the volume is deleted when the instance is terminated.</p> <p>To add instance store volumes to an Amazon EBS-backed instance, you must add them when you launch the instance. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html#Using_OverridingAMIBDM\">Updating the Block Device Mapping when Launching an Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p>
      //  'disableApiTerminationValue': "disableApiTerminationValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'ebsOptimizedValue': "ebsOptimizedValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'enaSupportValue': "enaSupportValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'groupId': "groupId_example", // [String] | [EC2-VPC] Changes the security groups of the instance. You must specify at least one security group, even if it's just the default security group for the VPC. You must specify the security group ID, not the security group name.
      //  'instanceInitiatedShutdownBehaviorValue': "instanceInitiatedShutdownBehaviorValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'instanceTypeValue': "instanceTypeValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'kernelValue': "kernelValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'ramdiskValue': "ramdiskValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'sriovNetSupportValue': "sriovNetSupportValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      //  'userDataValue': "userDataValue_example", // String | Changes the instance's user data to the specified value. If you are using an AWS SDK or command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text.
      //  'value': "value_example" // String | A new value for the attribute. Use only with the <code>kernel</code>, <code>ramdisk</code>, <code>userData</code>, <code>disableApiTermination</code>, or <code>instanceInitiatedShutdownBehavior</code> attribute.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceAttributePost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceCapacityReservationAttributesPost
  /*


Modifies the Capacity Reservation settings for a stopped instance. Use this action to configure an instance to target a specific Capacity Reservation, run in any &lt;code&gt;open&lt;/code&gt; Capacity Reservation with matching attributes, or run On-Demand Instance capacity.

 */
  actionModifyInstanceCapacityReservationAttributesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance to be modified.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'capacityReservationSpecificationCapacityReservationPreference': "capacityReservationSpecificationCapacityReservationPreference_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul>
      //  'capacityReservationSpecificationCapacityReservationTarget': "capacityReservationSpecificationCapacityReservationTarget_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> Information about the target Capacity Reservation.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceCapacityReservationAttributesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceCreditSpecificationPost
  /*


&lt;p&gt;Modifies the credit option for CPU usage on a running or stopped burstable performance instance. The credit options are &lt;code&gt;standard&lt;/code&gt; and &lt;code&gt;unlimited&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html\&quot;&gt;Burstable Performance Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyInstanceCreditSpecificationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | Information about the credit option for CPU usage.
    /*let instanceCreditSpecification = "instanceCreditSpecification_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example" // String | A unique, case-sensitive token that you provide to ensure idempotency of your modification request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceCreditSpecificationPost(
      incomingOptions.instanceCreditSpecification,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceEventStartTimePost
  /*


Modifies the start time for a scheduled Amazon EC2 instance event.

 */
  actionModifyInstanceEventStartTimePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance with the scheduled event // String | The ID of the event whose date and time you are modifying // Date | The new date and time when the event will take place.
    /*let instanceId = "instanceId_example";*/ /*let instanceEventId = "instanceEventId_example";*/ /*let notBefore = new Date("2013-10-20T19:20:30+01:00");*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceEventStartTimePost(
      incomingOptions.instanceId,
      incomingOptions.instanceEventId,
      incomingOptions.notBefore,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstanceMetadataOptionsPost
  /*


Modify the instance metadata parameters on a running or stopped instance. When you modify the parameters on a stopped instance, they are applied when the instance is started. When you modify the parameters on a running instance, the API responds with a state of “pending”. After the parameter modifications are successfully applied to the instance, the state of the modifications changes from “pending” to “applied” in subsequent describe-instances API calls. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html\&quot;&gt;Instance Metadata and User Data&lt;/a&gt;.

 */
  actionModifyInstanceMetadataOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'httpTokens': "httpTokens_example", // String | <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p> <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.</p> <p>If the state is <code>required</code>, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credential always returns the version 2.0 credentials the version 1.0 credentials are not available.</p>
      httpPutResponseHopLimit: 56, // Number | <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. If no parameter is specified, the existing state is maintained.</p> <p>Possible values: Integers from 1 to 64</p>
      //  'httpEndpoint': "httpEndpoint_example", // String | <p>This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the existing state is maintained.</p> <note> <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p> </note>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstanceMetadataOptionsPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyInstancePlacementPost
  /*


&lt;p&gt;Modifies the placement attributes for a specified instance. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Modify the affinity between an instance and a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-hosts-overview.html\&quot;&gt;Dedicated Host&lt;/a&gt;. When affinity is set to &lt;code&gt;host&lt;/code&gt; and the instance is not associated with a specific Dedicated Host, the next time the instance is launched, it is automatically associated with the host on which it lands. If the instance is restarted or rebooted, this relationship persists.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the Dedicated Host with which an instance is associated.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Change the instance tenancy of an instance from &lt;code&gt;host&lt;/code&gt; to &lt;code&gt;dedicated&lt;/code&gt;, or from &lt;code&gt;dedicated&lt;/code&gt; to &lt;code&gt;host&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Move an instance to or from a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html\&quot;&gt;placement group&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;At least one attribute for affinity, host ID, tenancy, or placement group name must be specified in the request. Affinity and tenancy can be modified in the same request.&lt;/p&gt; &lt;p&gt;To modify the host ID, tenancy, placement group, or partition for an instance, the instance must be in the &lt;code&gt;stopped&lt;/code&gt; state.&lt;/p&gt;

 */
  actionModifyInstancePlacementPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance that you are modifying.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'affinity': "affinity_example", // String | The affinity setting for the instance.
      //  'groupName': "groupName_example", // String | <p>The name of the placement group in which to place the instance. For spread placement groups, the instance must have a tenancy of <code>default</code>. For cluster and partition placement groups, the instance must have a tenancy of <code>default</code> or <code>dedicated</code>.</p> <p>To remove an instance from a placement group, specify an empty string (\\\"\\\").</p>
      //  'hostId': "hostId_example", // String | The ID of the Dedicated Host with which to associate the instance.
      //  'tenancy': "tenancy_example", // String | The tenancy for the instance.
      partitionNumber: 56 // Number | Reserved for future use.
      //  'hostResourceGroupArn': "hostResourceGroupArn_example" // String | The ARN of the host resource group in which to place the instance.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyInstancePlacementPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyLaunchTemplatePost
  /*


Modifies a launch template. You can specify which version of the launch template to set as the default version. When launching an instance, the default version applies when a launch template version is not specified.

 */
  actionModifyLaunchTemplatePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.</p> <p>Constraint: Maximum 128 ASCII characters.</p>
      //  'launchTemplateId': "launchTemplateId_example", // String | The ID of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'launchTemplateName': "launchTemplateName_example", // String | The name of the launch template. You must specify either the launch template ID or launch template name in the request.
      //  'setDefaultVersion': "setDefaultVersion_example" // String | The version number of the launch template to set as the default version.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyLaunchTemplatePost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyNetworkInterfaceAttributePost
  /*


Modifies the specified network interface attribute. You can specify only one attribute at a time. You can use this action to attach and detach security groups from an existing EC2 instance.

 */
  actionModifyNetworkInterfaceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'attachmentAttachmentId': "attachmentAttachmentId_example", // String | Describes an attachment change. The ID of the network interface attachment.
      //  'attachmentDeleteOnTermination': "attachmentDeleteOnTermination_example", // String | Describes an attachment change. Indicates whether the network interface is deleted when the instance is terminated.
      //  'descriptionValue': "descriptionValue_example", // String | Describes a value for a resource attribute that is a String. The attribute value. The value is case-sensitive.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'securityGroupId': "securityGroupId_example", // [String] | Changes the security groups for the network interface. The new set of groups you specify replaces the current set. You must specify at least one group, even if it's just the default security group in the VPC. You must specify the ID of the security group, not the name.
      //  'sourceDestCheckValue': "sourceDestCheckValue_example" // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyNetworkInterfaceAttributePost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyReservedInstancesPost
  /*


&lt;p&gt;Modifies the Availability Zone, instance count, instance type, or network platform (EC2-Classic or EC2-VPC) of your Reserved Instances. The Reserved Instances to be modified must be identical, except for Availability Zone, network platform, and instance type.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-modifying.html\&quot;&gt;Modifying Reserved Instances&lt;/a&gt; in the Amazon Elastic Compute Cloud User Guide.&lt;/p&gt;

 */
  actionModifyReservedInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Reserved Instances to modify // [String] | The configuration settings for the Reserved Instances to modify.
    /*let reservedInstancesId = "reservedInstancesId_example";*/ /*let reservedInstancesConfigurationSetItemType = "reservedInstancesConfigurationSetItemType_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'clientToken': "clientToken_example" // String | A unique, case-sensitive token you provide to ensure idempotency of your modification request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyReservedInstancesPost(
      incomingOptions.reservedInstancesId,
      incomingOptions.reservedInstancesConfigurationSetItemType,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifySnapshotAttributePost
  /*


&lt;p&gt;Adds or removes permission settings for the specified snapshot. You may add or remove specified AWS account IDs from a snapshot&#39;s list of create volume permissions, but you cannot do both in a single operation. If you need to both add and remove account IDs for a snapshot, you must use multiple operations. You can make up to 500 modifications to a snapshot in a single operation.&lt;/p&gt; &lt;p&gt;Encrypted snapshots and snapshots with AWS Marketplace product codes cannot be made public. Snapshots encrypted with your default CMK cannot be shared with other accounts.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifySnapshotAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the snapshot.
    /*let snapshotId = "snapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'attribute': "attribute_example", // String | The snapshot attribute to modify. Only volume creation permissions can be modified.
      //  'createVolumePermissionAdd': "createVolumePermissionAdd_example", // [String] | Describes modifications to the list of create volume permissions for a volume. Adds the specified AWS account ID or group to the list.
      //  'createVolumePermissionRemove': "createVolumePermissionRemove_example", // [String] | Describes modifications to the list of create volume permissions for a volume. Removes the specified AWS account ID or group from the list.
      //  'userGroup': "userGroup_example", // [String] | The group to modify for the snapshot.
      //  'operationType': "operationType_example", // String | The type of operation to perform to the attribute.
      //  'userId': "userId_example", // [String] | The account ID to modify for the snapshot.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySnapshotAttributePost(
      incomingOptions.snapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifySpotFleetRequestPost
  /*


&lt;p&gt;Modifies the specified Spot Fleet request.&lt;/p&gt; &lt;p&gt;You can only modify a Spot Fleet request of type &lt;code&gt;maintain&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;While the Spot Fleet request is being modified, it is in the &lt;code&gt;modifying&lt;/code&gt; state.&lt;/p&gt; &lt;p&gt;To scale up your Spot Fleet, increase its target capacity. The Spot Fleet launches the additional Spot Instances according to the allocation strategy for the Spot Fleet request. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet launches instances using the Spot Instance pool with the lowest price. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet distributes the instances across the Spot Instance pools. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.&lt;/p&gt; &lt;p&gt;To scale down your Spot Fleet, decrease its target capacity. First, the Spot Fleet cancels any open requests that exceed the new target capacity. You can request that the Spot Fleet terminate Spot Instances until the size of the fleet no longer exceeds the new target capacity. If the allocation strategy is &lt;code&gt;lowestPrice&lt;/code&gt;, the Spot Fleet terminates the instances with the highest price per unit. If the allocation strategy is &lt;code&gt;capacityOptimized&lt;/code&gt;, the Spot Fleet terminates the instances in the Spot Instance pools that have the least available Spot Instance capacity. If the allocation strategy is &lt;code&gt;diversified&lt;/code&gt;, the Spot Fleet terminates instances across the Spot Instance pools. Alternatively, you can request that the Spot Fleet keep the fleet at its current size, but not replace any Spot Instances that are interrupted or that you terminate manually.&lt;/p&gt; &lt;p&gt;If you are finished with your Spot Fleet for now, but will use it again later, you can set the target capacity to 0.&lt;/p&gt;

 */
  actionModifySpotFleetRequestPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Spot Fleet request.
    /*let spotFleetRequestId = "spotFleetRequestId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'excessCapacityTerminationPolicy': "excessCapacityTerminationPolicy_example", // String | Indicates whether running Spot Instances should be terminated if the target capacity of the Spot Fleet request is decreased below the current size of the Spot Fleet.
      targetCapacity: 56, // Number | The size of the fleet.
      onDemandTargetCapacity: 56 // Number | The number of On-Demand Instances in the fleet.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySpotFleetRequestPost(
      incomingOptions.spotFleetRequestId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifySubnetAttributePost
  /*


Modifies a subnet attribute. You can only modify one attribute at a time.

 */
  actionModifySubnetAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the subnet.
    /*let subnetId = "subnetId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'assignIpv6AddressOnCreationValue': "assignIpv6AddressOnCreationValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'mapPublicIpOnLaunchValue': "mapPublicIpOnLaunchValue_example" // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifySubnetAttributePost(
      incomingOptions.subnetId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorFilterNetworkServicesPost
  /*


&lt;p&gt;Allows or restricts mirroring network services.&lt;/p&gt; &lt;p&gt; By default, Amazon DNS network services are not eligible for Traffic Mirror. Use &lt;code&gt;AddNetworkServices&lt;/code&gt; to add network services to a Traffic Mirror filter. When a network service is added to the Traffic Mirror filter, all traffic related to that network service will be mirrored. When you no longer want to mirror network services, use &lt;code&gt;RemoveNetworkServices&lt;/code&gt; to remove the network services from the Traffic Mirror filter. &lt;/p&gt; &lt;p&gt;For information about filter rule properties, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html\&quot;&gt;Network Services&lt;/a&gt; in the &lt;i&gt;Traffic Mirroring User Guide &lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyTrafficMirrorFilterNetworkServicesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror filter.
    /*let trafficMirrorFilterId = "trafficMirrorFilterId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'addNetworkService': "addNetworkService_example", // [String] | The network service, for example Amazon DNS, that you want to mirror.
      //  'removeNetworkService': "removeNetworkService_example", // [String] | The network service, for example Amazon DNS, that you no longer want to mirror.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorFilterNetworkServicesPost(
      incomingOptions.trafficMirrorFilterId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorFilterRulePost
  /*


&lt;p&gt;Modifies the specified Traffic Mirror rule.&lt;/p&gt; &lt;p&gt; &lt;code&gt;DestinationCidrBlock&lt;/code&gt; and &lt;code&gt;SourceCidrBlock&lt;/code&gt; must both be an IPv4 range or an IPv6 range.&lt;/p&gt;

 */
  actionModifyTrafficMirrorFilterRulePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror rule.
    /*let trafficMirrorFilterRuleId = "trafficMirrorFilterRuleId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'trafficDirection': "trafficDirection_example", // String | The type of traffic (<code>ingress</code> | <code>egress</code>) to assign to the rule.
      ruleNumber: 56, // Number | The number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
      //  'ruleAction': "ruleAction_example", // String | The action to assign to the rule.
      //  'destinationPortRangeFromPort': "destinationPortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'destinationPortRangeToPort': "destinationPortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeFromPort': "sourcePortRangeFromPort_example", // String | Information about the Traffic Mirror filter rule port range. The first port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      //  'sourcePortRangeToPort': "sourcePortRangeToPort_example", // String | Information about the Traffic Mirror filter rule port range. The last port in the Traffic Mirror port range. This applies to the TCP and UDP protocols.
      protocol: 56, // Number | The protocol, for example TCP, to assign to the Traffic Mirror rule.
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The destination CIDR block to assign to the Traffic Mirror rule.
      //  'sourceCidrBlock': "sourceCidrBlock_example", // String | The source CIDR block to assign to the Traffic Mirror rule.
      //  'description': "description_example", // String | The description to assign to the Traffic Mirror rule.
      //  'removeField': "removeField_example", // [String] | <p>The properties that you want to remove from the Traffic Mirror filter rule.</p> <p>When you remove a property from a Traffic Mirror filter rule, the property is set to the default.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorFilterRulePost(
      incomingOptions.trafficMirrorFilterRuleId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTrafficMirrorSessionPost
  /*


Modifies a Traffic Mirror session.

 */
  actionModifyTrafficMirrorSessionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Traffic Mirror session.
    /*let trafficMirrorSessionId = "trafficMirrorSessionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'trafficMirrorTargetId': "trafficMirrorTargetId_example", // String | The Traffic Mirror target. The target must be in the same VPC as the source, or have a VPC peering connection with the source.
      //  'trafficMirrorFilterId': "trafficMirrorFilterId_example", // String | The ID of the Traffic Mirror filter.
      packetLength: 56, // Number | The number of bytes in each packet to mirror. These are bytes after the VXLAN header. To mirror a subset, set this to the length (in bytes) to mirror. For example, if you set this value to 100, then the first 100 bytes that meet the filter criteria are copied to the target. Do not specify this parameter when you want to mirror the entire packet.
      sessionNumber: 56, // Number | <p>The session number determines the order in which sessions are evaluated when an interface is used by multiple sessions. The first session with a matching filter is the one that mirrors the packets.</p> <p>Valid values are 1-32766.</p>
      virtualNetworkId: 56, // Number | The virtual network ID of the Traffic Mirror session.
      //  'description': "description_example", // String | The description to assign to the Traffic Mirror session.
      //  'removeField': "removeField_example", // [String] | <p>The properties that you want to remove from the Traffic Mirror session.</p> <p>When you remove a property from a Traffic Mirror session, the property is set to the default.</p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTrafficMirrorSessionPost(
      incomingOptions.trafficMirrorSessionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyTransitGatewayVpcAttachmentPost
  /*


Modifies the specified VPC attachment.

 */
  actionModifyTransitGatewayVpcAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'addSubnetIds': "addSubnetIds_example", // [String] | The IDs of one or more subnets to add. You can specify at most one subnet per Availability Zone.
      //  'removeSubnetIds': "removeSubnetIds_example", // [String] | The IDs of one or more subnets to remove.
      //  'optionsDnsSupport': "optionsDnsSupport_example", // String | Describes the options for a VPC attachment. Enable or disable DNS support. The default is <code>enable</code>.
      //  'optionsIpv6Support': "optionsIpv6Support_example", // String | Describes the options for a VPC attachment. Enable or disable IPv6 support. The default is <code>enable</code>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyTransitGatewayVpcAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVolumeAttributePost
  /*


&lt;p&gt;Modifies a volume attribute.&lt;/p&gt; &lt;p&gt;By default, all I/O operations for the volume are suspended when the data on the volume is determined to be potentially inconsistent, to prevent undetectable, latent data corruption. The I/O access to the volume can be resumed by first enabling I/O access and then checking the data consistency on your volume.&lt;/p&gt; &lt;p&gt;You can change the default behavior to resume I/O operations. We recommend that you change this only for boot volumes or for volumes that are stateless or disposable.&lt;/p&gt;

 */
  actionModifyVolumeAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'autoEnableIOValue': "autoEnableIOValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVolumeAttributePost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyVolumePost
  /*


&lt;p&gt;You can modify several parameters of an existing EBS volume, including volume size, volume type, and IOPS capacity. If your EBS volume is attached to a current-generation EC2 instance type, you may be able to apply these changes without stopping the instance or detaching the volume from it. For more information about modifying an EBS volume running Linux, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt;. For more information about modifying an EBS volume running Windows, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; When you complete a resize operation on your volume, you need to extend the volume&#39;s file-system size to take advantage of the new storage capacity. For information about extending a Linux file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#recognize-expanded-volume-linux\&quot;&gt;Extending a Linux File System&lt;/a&gt;. For information about extending a Windows file system, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html#recognize-expanded-volume-windows\&quot;&gt;Extending a Windows File System&lt;/a&gt;. &lt;/p&gt; &lt;p&gt; You can use CloudWatch Events to check the status of a modification to an EBS volume. For information about CloudWatch Events, see the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/\&quot;&gt;Amazon CloudWatch Events User Guide&lt;/a&gt;. You can also track the status of a modification using &lt;a&gt;DescribeVolumesModifications&lt;/a&gt;. For information about tracking status changes using either method, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html#monitoring_mods\&quot;&gt;Monitoring Volume Modifications&lt;/a&gt;. &lt;/p&gt; &lt;p&gt;With previous-generation instance types, resizing an EBS volume may require detaching and reattaching the volume or stopping and restarting the instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Linux&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ebs-expand-volume.html\&quot;&gt;Modifying the Size, IOPS, or Type of an EBS Volume on Windows&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;If you reach the maximum volume modification rate per volume limit, you will need to wait at least six hours before applying further modifications to the affected EBS volume.&lt;/p&gt;

 */
  actionModifyVolumePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the volume.
    /*let volumeId = "volumeId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      size: 56, // Number | <p>The target size of the volume, in GiB. The target volume size must be greater than or equal to than the existing size of the volume. For information about available EBS volume sizes, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html\\\">Amazon EBS Volume Types</a>.</p> <p>Default: If no size is specified, the existing size is retained.</p>
      //  'volumeType': "volumeType_example", // String | <p>The target EBS volume type of the volume.</p> <p>Default: If no type is specified, the existing type is retained.</p>
      iops: 56 // Number | <p>The target IOPS rate of the volume.</p> <p>This is only valid for Provisioned IOPS SSD (<code>io1</code>) volumes. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html#EBSVolumeTypes_piops\\\">Provisioned IOPS SSD (io1) Volumes</a>.</p> <p>Default: If no IOPS value is specified, the existing value is retained.</p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVolumePost(
      incomingOptions.volumeId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcAttributePost
  /*


Modifies the specified attribute of the specified VPC.

 */
  actionModifyVpcAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC.
    /*let vpcId = "vpcId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'enableDnsHostnamesValue': "enableDnsHostnamesValue_example", // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
      //  'enableDnsSupportValue': "enableDnsSupportValue_example" // String | Describes a value for a resource attribute that is a Boolean value. The attribute value. The valid values are <code>true</code> or <code>false</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcAttributePost(
      incomingOptions.vpcId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointConnectionNotificationPost
  /*


Modifies a connection notification for VPC endpoint or VPC endpoint service. You can change the SNS topic for the notification, or the events for which to be notified.

 */
  actionModifyVpcEndpointConnectionNotificationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the notification.
    /*let connectionNotificationId = "connectionNotificationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'connectionNotificationArn': "connectionNotificationArn_example", // String | The ARN for the SNS topic for the notification.
      //  'connectionEvents': "connectionEvents_example" // [String] | One or more events for the endpoint. Valid values are <code>Accept</code>, <code>Connect</code>, <code>Delete</code>, and <code>Reject</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointConnectionNotificationPost(
      incomingOptions.connectionNotificationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointPost
  /*


Modifies attributes of a specified VPC endpoint. The attributes that you can modify depend on the type of VPC endpoint (interface or gateway). For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints.html\&quot;&gt;VPC Endpoints&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionModifyVpcEndpointPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the endpoint.
    /*let vpcEndpointId = "vpcEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      resetPolicy: true, // Boolean | (Gateway endpoint) Specify <code>true</code> to reset the policy document to the default policy. The default policy allows full access to the service.
      //  'policyDocument': "policyDocument_example", // String | A policy to attach to the endpoint that controls access to the service. The policy must be in valid JSON format.
      //  'addRouteTableId': "addRouteTableId_example", // [String] | (Gateway endpoint) One or more route tables IDs to associate with the endpoint.
      //  'removeRouteTableId': "removeRouteTableId_example", // [String] | (Gateway endpoint) One or more route table IDs to disassociate from the endpoint.
      //  'addSubnetId': "addSubnetId_example", // [String] | (Interface endpoint) One or more subnet IDs in which to serve the endpoint.
      //  'removeSubnetId': "removeSubnetId_example", // [String] | (Interface endpoint) One or more subnets IDs in which to remove the endpoint.
      //  'addSecurityGroupId': "addSecurityGroupId_example", // [String] | (Interface endpoint) One or more security group IDs to associate with the network interface.
      //  'removeSecurityGroupId': "removeSecurityGroupId_example", // [String] | (Interface endpoint) One or more security group IDs to disassociate from the network interface.
      privateDnsEnabled: true // Boolean | (Interface endpoint) Indicate whether a private hosted zone is associated with the VPC.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointPost(
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointServiceConfigurationPost
  /*


Modifies the attributes of your VPC endpoint service configuration. You can change the Network Load Balancers for your service, and you can specify whether acceptance is required for requests to connect to your endpoint service through an interface VPC endpoint.

 */
  actionModifyVpcEndpointServiceConfigurationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the service.
    /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      acceptanceRequired: true // Boolean | Indicate whether requests to create an endpoint to your service must be accepted.
      //  'addNetworkLoadBalancerArn': "addNetworkLoadBalancerArn_example", // [String] | The Amazon Resource Names (ARNs) of Network Load Balancers to add to your service configuration.
      //  'removeNetworkLoadBalancerArn': "removeNetworkLoadBalancerArn_example" // [String] | The Amazon Resource Names (ARNs) of Network Load Balancers to remove from your service configuration.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointServiceConfigurationPost(
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcEndpointServicePermissionsPost
  /*


&lt;p&gt;Modifies the permissions for your &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html\&quot;&gt;VPC endpoint service&lt;/a&gt;. You can add or remove permissions for service consumers (IAM users, IAM roles, and AWS accounts) to connect to your endpoint service.&lt;/p&gt; &lt;p&gt;If you grant permissions to all principals, the service is public. Any users who know the name of a public service can send a request to attach an endpoint. If the service does not require manual approval, attachments are automatically approved.&lt;/p&gt;

 */
  actionModifyVpcEndpointServicePermissionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the service.
    /*let serviceId = "serviceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'addAllowedPrincipals': "addAllowedPrincipals_example", // [String] | The Amazon Resource Names (ARN) of one or more principals. Permissions are granted to the principals in this list. To grant permissions to all principals, specify an asterisk (*).
      //  'removeAllowedPrincipals': "removeAllowedPrincipals_example" // [String] | The Amazon Resource Names (ARN) of one or more principals. Permissions are revoked for principals in this list.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcEndpointServicePermissionsPost(
      incomingOptions.serviceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcPeeringConnectionOptionsPost
  /*


&lt;p&gt;Modifies the VPC peering connection options on one side of a VPC peering connection. You can do the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between an EC2-Classic instance that&#39;s linked to your VPC (using ClassicLink) and instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable communication over the peering connection between instances in your VPC and an EC2-Classic instance that&#39;s linked to the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Enable/disable the ability to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If the peered VPCs are in the same AWS account, you can enable DNS resolution for queries from the local VPC. This ensures that queries from the local VPC resolve to private IP addresses in the peer VPC. This option is not available if the peered VPCs are in different AWS accounts or different Regions. For peered VPCs in different AWS accounts, each AWS account owner must initiate a separate request to modify the peering connection options. For inter-region peering connections, you must use the Region for the requester VPC to modify the requester VPC peering options and the Region for the accepter VPC to modify the accepter VPC peering options. To verify which VPCs are the accepter and the requester for a VPC peering connection, use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; command.&lt;/p&gt;

 */
  actionModifyVpcPeeringConnectionOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC peering connection.
    /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'accepterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc': "accepterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc_example", // String | The VPC peering connection options. If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
      //  'accepterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc': "accepterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc_example", // String | The VPC peering connection options. If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      //  'accepterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink': "accepterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink_example", // String | The VPC peering connection options. If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'requesterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc': "requesterPeeringConnectionOptionsAllowDnsResolutionFromRemoteVpc_example", // String | The VPC peering connection options. If true, enables a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.
      //  'requesterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc': "requesterPeeringConnectionOptionsAllowEgressFromLocalClassicLinkToRemoteVpc_example", // String | The VPC peering connection options. If true, enables outbound communication from an EC2-Classic instance that's linked to a local VPC using ClassicLink to instances in a peer VPC.
      //  'requesterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink': "requesterPeeringConnectionOptionsAllowEgressFromLocalVpcToRemoteClassicLink_example" // String | The VPC peering connection options. If true, enables outbound communication from instances in a local VPC to an EC2-Classic instance that's linked to a peer VPC using ClassicLink.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcPeeringConnectionOptionsPost(
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpcTenancyPost
  /*


&lt;p&gt;Modifies the instance tenancy attribute of the specified VPC. You can change the instance tenancy attribute of a VPC to &lt;code&gt;default&lt;/code&gt; only. You cannot change the instance tenancy attribute to &lt;code&gt;dedicated&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After you modify the tenancy of the VPC, any new instances that you launch into the VPC have a tenancy of &lt;code&gt;default&lt;/code&gt;, unless you specify otherwise during launch. The tenancy of any existing instances in the VPC is not affected.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/dedicated-instance.html\&quot;&gt;Dedicated Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionModifyVpcTenancyPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC // String | The instance tenancy attribute for the VPC.
    /*let vpcId = "vpcId_example";*/ /*let instanceTenancy = "instanceTenancy_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpcTenancyPost(
      incomingOptions.vpcId,
      incomingOptions.instanceTenancy,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnConnectionPost
  /*


&lt;p&gt;Modifies the target gateway of an AWS Site-to-Site VPN connection. The following migration options are available:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a new virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing virtual private gateway to a transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a new transit gateway&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;An existing transit gateway to a virtual private gateway&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Before you perform the migration to the new gateway, you must configure the new gateway. Use &lt;a&gt;CreateVpnGateway&lt;/a&gt; to create a virtual private gateway, or &lt;a&gt;CreateTransitGateway&lt;/a&gt; to create a transit gateway.&lt;/p&gt; &lt;p&gt;This step is required when you migrate from a virtual private gateway with static routes to a transit gateway. &lt;/p&gt; &lt;p&gt;You must delete the static routes before you migrate to the new gateway.&lt;/p&gt; &lt;p&gt;Keep a copy of the static route before you delete it. You will need to add back these routes to the transit gateway after the VPN connection migration is complete.&lt;/p&gt; &lt;p&gt;After you migrate to the new gateway, you might need to modify your VPC route table. Use &lt;a&gt;CreateRoute&lt;/a&gt; and &lt;a&gt;DeleteRoute&lt;/a&gt; to make the changes described in &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/modify-vpn-target.html#step-update-routing\&quot;&gt;VPN Gateway Target Modification Required VPC Route Table Updates&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt; When the new gateway is a transit gateway, modify the transit gateway route table to allow traffic between the VPC and the AWS Site-to-Site VPN connection. Use &lt;a&gt;CreateTransitGatewayRoute&lt;/a&gt; to add the routes.&lt;/p&gt; &lt;p&gt; If you deleted VPN static routes, you must add the static routes to the transit gateway route table.&lt;/p&gt; &lt;p&gt;After you perform this operation, the AWS VPN endpoint&#39;s IP addresses on the AWS side and the tunnel options remain intact. Your s2slong connection will be temporarily unavailable for approximately 10 minutes while we provision the new endpoints &lt;/p&gt;

 */
  actionModifyVpnConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPN connection.
    /*let vpnConnectionId = "vpnConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of the transit gateway.
      //  'customerGatewayId': "customerGatewayId_example", // String | The ID of the customer gateway at your end of the VPN connection.
      //  'vpnGatewayId': "vpnGatewayId_example", // String | The ID of the virtual private gateway at the AWS side of the VPN connection.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnConnectionPost(
      incomingOptions.vpnConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnTunnelCertificatePost
  /*


Modifies the VPN tunnel endpoint certificate.

 */
  actionModifyVpnTunnelCertificatePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AWS Site-to-Site VPN connection // String | The external IP address of the VPN tunnel.
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let vpnTunnelOutsideIpAddress = "vpnTunnelOutsideIpAddress_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnTunnelCertificatePost(
      incomingOptions.vpnConnectionId,
      incomingOptions.vpnTunnelOutsideIpAddress,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionModifyVpnTunnelOptionsPost
  /*


Modifies the options for a VPN tunnel in an AWS Site-to-Site VPN connection. You can modify multiple options for a tunnel in a single request, but you can only modify one tunnel at a time. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpn/latest/s2svpn/VPNTunnels.html\&quot;&gt;Site-to-Site VPN Tunnel Options for Your Site-to-Site VPN Connection&lt;/a&gt; in the &lt;i&gt;AWS Site-to-Site VPN User Guide&lt;/i&gt;.

 */
  actionModifyVpnTunnelOptionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AWS Site-to-Site VPN connection // String | The external IP address of the VPN tunnel.
    /*let vpnConnectionId = "vpnConnectionId_example";*/ /*let vpnTunnelOutsideIpAddress = "vpnTunnelOutsideIpAddress_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'tunnelOptionsTunnelInsideCidr': "tunnelOptionsTunnelInsideCidr_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The range of inside IP addresses for the tunnel. Any specified CIDR blocks must be unique across all VPN connections that use the same virtual private gateway. </p> <p>Constraints: A size /30 CIDR block from the <code>169.254.0.0/16</code> range. The following CIDR blocks are reserved and cannot be used:</p> <ul> <li> <p> <code>169.254.0.0/30</code> </p> </li> <li> <p> <code>169.254.1.0/30</code> </p> </li> <li> <p> <code>169.254.2.0/30</code> </p> </li> <li> <p> <code>169.254.3.0/30</code> </p> </li> <li> <p> <code>169.254.4.0/30</code> </p> </li> <li> <p> <code>169.254.5.0/30</code> </p> </li> <li> <p> <code>169.254.169.252/30</code> </p> </li> </ul>
      //  'tunnelOptionsPreSharedKey': "tunnelOptionsPreSharedKey_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The pre-shared key (PSK) to establish initial authentication between the virtual private gateway and the customer gateway.</p> <p>Constraints: Allowed characters are alphanumeric characters, periods (.), and underscores (_). Must be between 8 and 64 characters in length and cannot start with zero (0).</p>
      //  'tunnelOptionsPhase1LifetimeSeconds': "tunnelOptionsPhase1LifetimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The lifetime for phase 1 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 28,800.</p> <p>Default: <code>28800</code> </p>
      //  'tunnelOptionsPhase2LifetimeSeconds': "tunnelOptionsPhase2LifetimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The lifetime for phase 2 of the IKE negotiation, in seconds.</p> <p>Constraints: A value between 900 and 3,600. The value must be less than the value for <code>Phase1LifetimeSeconds</code>.</p> <p>Default: <code>3600</code> </p>
      //  'tunnelOptionsRekeyMarginTimeSeconds': "tunnelOptionsRekeyMarginTimeSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The margin time, in seconds, before the phase 2 lifetime expires, during which the AWS side of the VPN connection performs an IKE rekey. The exact time of the rekey is randomly selected based on the value for <code>RekeyFuzzPercentage</code>.</p> <p>Constraints: A value between 60 and half of <code>Phase2LifetimeSeconds</code>.</p> <p>Default: <code>540</code> </p>
      //  'tunnelOptionsRekeyFuzzPercentage': "tunnelOptionsRekeyFuzzPercentage_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The percentage of the rekey window (determined by <code>RekeyMarginTimeSeconds</code>) during which the rekey time is randomly selected.</p> <p>Constraints: A value between 0 and 100.</p> <p>Default: <code>100</code> </p>
      //  'tunnelOptionsReplayWindowSize': "tunnelOptionsReplayWindowSize_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The number of packets in an IKE replay window.</p> <p>Constraints: A value between 64 and 2048.</p> <p>Default: <code>1024</code> </p>
      //  'tunnelOptionsDPDTimeoutSeconds': "tunnelOptionsDPDTimeoutSeconds_example", // String | The AWS Site-to-Site VPN tunnel options to modify. <p>The number of seconds after which a DPD timeout occurs.</p> <p>Constraints: A value between 0 and 30.</p> <p>Default: <code>30</code> </p>
      //  'tunnelOptionsPhase1EncryptionAlgorithms': "tunnelOptionsPhase1EncryptionAlgorithms_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> </p>
      //  'tunnelOptionsPhase2EncryptionAlgorithms': "tunnelOptionsPhase2EncryptionAlgorithms_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more encryption algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>AES128</code> | <code>AES256</code> </p>
      //  'tunnelOptionsPhase1IntegrityAlgorithms': "tunnelOptionsPhase1IntegrityAlgorithms_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> </p>
      //  'tunnelOptionsPhase2IntegrityAlgorithms': "tunnelOptionsPhase2IntegrityAlgorithms_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more integrity algorithms that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>SHA1</code> | <code>SHA2-256</code> </p>
      //  'tunnelOptionsPhase1DHGroupNumbers': "tunnelOptionsPhase1DHGroupNumbers_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 1 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>
      //  'tunnelOptionsPhase2DHGroupNumbers': "tunnelOptionsPhase2DHGroupNumbers_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>One or more Diffie-Hellman group numbers that are permitted for the VPN tunnel for phase 2 IKE negotiations.</p> <p>Valid values: <code>2</code> | <code>5</code> | <code>14</code> | <code>15</code> | <code>16</code> | <code>17</code> | <code>18</code> | <code>22</code> | <code>23</code> | <code>24</code> </p>
      //  'tunnelOptionsIKEVersions': "tunnelOptionsIKEVersions_example", // [String] | The AWS Site-to-Site VPN tunnel options to modify. <p>The IKE versions that are permitted for the VPN tunnel.</p> <p>Valid values: <code>ikev1</code> | <code>ikev2</code> </p>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionModifyVpnTunnelOptionsPost(
      incomingOptions.vpnConnectionId,
      incomingOptions.vpnTunnelOutsideIpAddress,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionMonitorInstancesPost
  /*


&lt;p&gt;Enables detailed monitoring for a running instance. Otherwise, basic monitoring is enabled. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;To disable detailed monitoring, see .&lt;/p&gt;

 */
  actionMonitorInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionMonitorInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionMoveAddressToVpcPost
  /*


Moves an Elastic IP address from the EC2-Classic platform to the EC2-VPC platform. The Elastic IP address must be allocated to your account for more than 24 hours, and it must not be associated with an instance. After the Elastic IP address is moved, it is no longer available for use in the EC2-Classic platform, unless you move it back using the &lt;a&gt;RestoreAddressToClassic&lt;/a&gt; request. You cannot move an Elastic IP address that was originally allocated for use in the EC2-VPC platform to the EC2-Classic platform.

 */
  actionMoveAddressToVpcPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Elastic IP address.
    /*let publicIp = "publicIp_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionMoveAddressToVpcPost(
      incomingOptions.publicIp,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionProvisionByoipCidrPost
  /*


&lt;p&gt;Provisions an address range for use with your AWS resources through bring your own IP addresses (BYOIP) and creates a corresponding address pool. After the address range is provisioned, it is ready to be advertised using &lt;a&gt;AdvertiseByoipCidr&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;AWS verifies that you own the address range and are authorized to advertise it. You must ensure that the address range is registered to you and that you created an RPKI ROA to authorize Amazon ASNs 16509 and 14618 to advertise the address range. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html\&quot;&gt;Bring Your Own IP Addresses (BYOIP)&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;Provisioning an address range is an asynchronous operation, so the call returns immediately, but the address range is not ready to use until its status changes from &lt;code&gt;pending-provision&lt;/code&gt; to &lt;code&gt;provisioned&lt;/code&gt;. To monitor the status of an address range, use &lt;a&gt;DescribeByoipCidrs&lt;/a&gt;. To allocate an Elastic IP address from your address pool, use &lt;a&gt;AllocateAddress&lt;/a&gt; with either the specific address from the address pool or the ID of the address pool.&lt;/p&gt;

 */
  actionProvisionByoipCidrPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation. The most specific prefix that you can specify is /24. The address range cannot overlap with another address range that you've brought to this or another Region.
    /*let cidr = "cidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cidrAuthorizationContextMessage': "cidrAuthorizationContextMessage_example", // String | Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip\\\">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. The plain-text authorization message for the prefix and account.
      //  'cidrAuthorizationContextSignature': "cidrAuthorizationContextSignature_example", // String | Provides authorization for Amazon to bring a specific IP address range to a specific AWS account using bring your own IP addresses (BYOIP). For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip\\\">Prepare to Bring Your Address Range to Your AWS Account</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. The signed authorization message for the prefix and account.
      //  'description': "description_example", // String | A description for the address range and the address pool.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionProvisionByoipCidrPost(
      incomingOptions.cidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseHostReservationPost
  /*


Purchase a reservation with configurations that match those of your Dedicated Host. You must have active Dedicated Hosts in your account before you purchase a reservation. This action results in the specified reservation being purchased and charged to your account.

 */
  actionPurchaseHostReservationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts with which the reservation will be associated // String | The ID of the offering.
    /*let hostIdSet = "hostIdSet_example";*/ /*let offeringId = "offeringId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a>.
      //  'currencyCode': "currencyCode_example", // String | The currency in which the <code>totalUpfrontPrice</code>, <code>LimitPrice</code>, and <code>totalHourlyPrice</code> amounts are specified. At this time, the only supported currency is <code>USD</code>.
      //  'limitPrice': "limitPrice_example" // String | The specified limit is checked against the total upfront cost of the reservation (calculated as the offering's upfront cost multiplied by the host count). If the total upfront cost is greater than the specified price limit, the request fails. This is used to ensure that the purchase does not exceed the expected upfront cost of the purchase. At this time, the only supported currency is <code>USD</code>. For example, to indicate a limit price of USD 100, specify 100.00.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseHostReservationPost(
      incomingOptions.hostIdSet,
      incomingOptions.offeringId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseReservedInstancesOfferingPost
  /*


&lt;p&gt;Purchases a Reserved Instance for use with your account. With Reserved Instances, you pay a lower hourly rate compared to On-Demand instance pricing.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeReservedInstancesOfferings&lt;/a&gt; to get a list of Reserved Instance offerings that match your specifications. After you&#39;ve purchased a Reserved Instance, you can check for your new Reserved Instance with &lt;a&gt;DescribeReservedInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;To queue a purchase for a future date and time, specify a purchase time. If you do not specify a purchase time, the default is the current time.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts-on-demand-reserved-instances.html\&quot;&gt;Reserved Instances&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ri-market-general.html\&quot;&gt;Reserved Instance Marketplace&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionPurchaseReservedInstancesOfferingPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | The number of Reserved Instances to purchase // String | The ID of the Reserved Instance offering to purchase.
    /*let instanceCount = 56;*/ /*let reservedInstancesOfferingId = "reservedInstancesOfferingId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'limitPriceAmount': "limitPriceAmount_example", // String | Describes the limit price of a Reserved Instance offering. Used for Reserved Instance Marketplace offerings. Specifies the limit price on the total order (instanceCount * price).
      //  'limitPriceCurrencyCode': "limitPriceCurrencyCode_example", // String | Describes the limit price of a Reserved Instance offering. The currency in which the <code>limitPrice</code> amount is specified. At this time, the only supported currency is <code>USD</code>.
      purchaseTime: new Date("2013-10-20T19:20:30+01:00") // Date | The time at which to purchase the Reserved Instance, in UTC format (for example, <i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z).
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseReservedInstancesOfferingPost(
      incomingOptions.instanceCount,
      incomingOptions.reservedInstancesOfferingId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionPurchaseScheduledInstancesPost
  /*


&lt;p&gt;Purchases the Scheduled Instances with the specified schedule.&lt;/p&gt; &lt;p&gt;Scheduled Instances enable you to purchase Amazon EC2 compute capacity by the hour for a one-year term. Before you can purchase a Scheduled Instance, you must call &lt;a&gt;DescribeScheduledInstanceAvailability&lt;/a&gt; to check for available schedules and obtain a purchase token. After you purchase a Scheduled Instance, you must call &lt;a&gt;RunScheduledInstances&lt;/a&gt; during each scheduled time period.&lt;/p&gt; &lt;p&gt;After you purchase a Scheduled Instance, you can&#39;t cancel, modify, or resell your purchase.&lt;/p&gt;

 */
  actionPurchaseScheduledInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The purchase requests.
    /*let purchaseRequest = "purchaseRequest_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionPurchaseScheduledInstancesPost(
      incomingOptions.purchaseRequest,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRebootInstancesPost
  /*


&lt;p&gt;Requests a reboot of the specified instances. This operation is asynchronous it only queues a request to reboot the specified instances. The operation succeeds if the instances are valid and belong to you. Requests to reboot terminated instances are ignored.&lt;/p&gt; &lt;p&gt;If an instance does not cleanly shut down within four minutes, Amazon EC2 performs a hard reboot.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-console.html\&quot;&gt;Getting Console Output and Rebooting Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRebootInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The instance IDs.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRebootInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRegisterImagePost
  /*


&lt;p&gt;Registers an AMI. When you&#39;re creating an AMI, this is the final step you must complete before you can launch an instance from the AMI. For more information about creating AMIs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/creating-an-ami.html\&quot;&gt;Creating Your Own AMIs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;note&gt; &lt;p&gt;For Amazon EBS-backed instances, &lt;a&gt;CreateImage&lt;/a&gt; creates and registers the AMI in a single request, so you don&#39;t have to register the AMI yourself.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;You can also use &lt;code&gt;RegisterImage&lt;/code&gt; to create an Amazon EBS-backed Linux AMI from a snapshot of a root device volume. You specify the snapshot using the block device mapping. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-launch-snapshot.html\&quot;&gt;Launching a Linux Instance from a Backup&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can&#39;t register an image where a secondary (non-root) snapshot has AWS Marketplace product codes.&lt;/p&gt; &lt;p&gt;Windows and some Linux distributions, such as Red Hat Enterprise Linux (RHEL) and SUSE Linux Enterprise Server (SLES), use the EC2 billing product code associated with an AMI to verify the subscription status for package updates. To create a new AMI for operating systems that require a billing product code, do the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;Launch an instance from an existing AMI with that billing product code.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Customize the instance.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Create a new AMI from the instance using &lt;a&gt;CreateImage&lt;/a&gt; to preserve the billing product code association.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you purchase a Reserved Instance to apply to an On-Demand Instance that was launched from an AMI with a billing product code, make sure that the Reserved Instance has the matching billing product code. If you purchase a Reserved Instance without the matching billing product code, the Reserved Instance will not be applied to the On-Demand Instance. &lt;/p&gt; &lt;p&gt;If needed, you can deregister an AMI at any time. Any modifications you make to an AMI backed by an instance store volume invalidates its registration. If you make changes to an image, deregister the previous image and register the new image.&lt;/p&gt;

 */
  actionRegisterImagePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>A name for your AMI.</p> <p>Constraints: 3-128 alphanumeric characters, parentheses (()), square brackets ([]), spaces ( ), periods (.), slashes (/), dashes (-), single quotes ('), at-signs (@), or underscores(_)</p>
    /*let name = "name_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'imageLocation': "imageLocation_example", // String | The full path to your AMI manifest in Amazon S3 storage. The specified bucket must have the <code>aws-exec-read</code> canned access control list (ACL) to ensure that it can be accessed by Amazon EC2. For more information, see <a href=\\\"https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#canned-acl\\\">Canned ACLs</a> in the <i>Amazon S3 Service Developer Guide</i>.
      //  'architecture': "architecture_example", // String | <p>The architecture of the AMI.</p> <p>Default: For Amazon EBS-backed AMIs, <code>i386</code>. For instance store-backed AMIs, the architecture specified in the manifest file.</p>
      //  'blockDeviceMapping': "blockDeviceMapping_example", // [String] | The block device mapping entries.
      //  'description': "description_example", // String | A description for your AMI.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      enaSupport: true // Boolean | <p>Set to <code>true</code> to enable enhanced networking with ENA for the AMI and any instances that you launch from the AMI.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      //  'kernelId': "kernelId_example", // String | The ID of the kernel.
      //  'billingProduct': "billingProduct_example", // [String] | The billing product codes. Your account must be authorized to specify billing product codes. Otherwise, you can use the AWS Marketplace to bill for the use of an AMI.
      //  'ramdiskId': "ramdiskId_example", // String | The ID of the RAM disk.
      //  'rootDeviceName': "rootDeviceName_example", // String | The device name of the root device volume (for example, <code>/dev/sda1</code>).
      //  'sriovNetSupport': "sriovNetSupport_example", // String | <p>Set to <code>simple</code> to enable enhanced networking with the Intel 82599 Virtual Function interface for the AMI and any instances that you launch from the AMI.</p> <p>There is no way to disable <code>sriovNetSupport</code> at this time.</p> <p>This option is supported only for HVM AMIs. Specifying this option with a PV AMI can make instances launched from the AMI unreachable.</p>
      //  'virtualizationType': "virtualizationType_example" // String | <p>The type of virtualization (<code>hvm</code> | <code>paravirtual</code>).</p> <p>Default: <code>paravirtual</code> </p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterImagePost(
      incomingOptions.name,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRegisterTransitGatewayMulticastGroupMembersPost
  /*


&lt;p&gt;Registers members (network interfaces) with the transit gateway multicast group. A member is a network interface associated with a supported EC2 instance that receives multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Consideration&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the members, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the members were added to the transit gateway multicast group.&lt;/p&gt;

 */
  actionRegisterTransitGatewayMulticastGroupMembersPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      //  'networkInterfaceIds': "networkInterfaceIds_example", // [String] | The group members' network interface IDs to register with the transit gateway multicast group.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterTransitGatewayMulticastGroupMembersPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRegisterTransitGatewayMulticastGroupSourcesPost
  /*


&lt;p&gt;Registers sources (network interfaces) with the specified transit gateway multicast group.&lt;/p&gt; &lt;p&gt;A multicast source is a network interface attached to a supported instance that sends multicast traffic. For information about supported instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/tgw/transit-gateway-limits.html#multicast-limits\&quot;&gt;Multicast Considerations&lt;/a&gt; in &lt;i&gt;Amazon VPC Transit Gateways&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;After you add the source, use &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SearchTransitGatewayMulticastGroups.html\&quot;&gt;SearchTransitGatewayMulticastGroups&lt;/a&gt; to verify that the source was added to the multicast group.&lt;/p&gt;

 */
  actionRegisterTransitGatewayMulticastGroupSourcesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'groupIpAddress': "groupIpAddress_example", // String | The IP address assigned to the transit gateway multicast group.
      //  'networkInterfaceIds': "networkInterfaceIds_example", // [String] | The group sources' network interface IDs to register with the transit gateway multicast group.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRegisterTransitGatewayMulticastGroupSourcesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectTransitGatewayPeeringAttachmentPost
  /*


Rejects a transit gateway peering attachment request.

 */
  actionRejectTransitGatewayPeeringAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway peering attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectTransitGatewayPeeringAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectTransitGatewayVpcAttachmentPost
  /*


&lt;p&gt;Rejects a request to attach a VPC to a transit gateway.&lt;/p&gt; &lt;p&gt;The VPC attachment must be in the &lt;code&gt;pendingAcceptance&lt;/code&gt; state. Use &lt;a&gt;DescribeTransitGatewayVpcAttachments&lt;/a&gt; to view your pending VPC attachment requests. Use &lt;a&gt;AcceptTransitGatewayVpcAttachment&lt;/a&gt; to accept a VPC attachment request.&lt;/p&gt;

 */
  actionRejectTransitGatewayVpcAttachmentPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the attachment.
    /*let transitGatewayAttachmentId = "transitGatewayAttachmentId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectTransitGatewayVpcAttachmentPost(
      incomingOptions.transitGatewayAttachmentId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectVpcEndpointConnectionsPost
  /*


Rejects one or more VPC endpoint connection requests to your VPC endpoint service.

 */
  actionRejectVpcEndpointConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the service // [String] | The IDs of one or more VPC endpoints.
    /*let serviceId = "serviceId_example";*/ /*let vpcEndpointId = "vpcEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectVpcEndpointConnectionsPost(
      incomingOptions.serviceId,
      incomingOptions.vpcEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRejectVpcPeeringConnectionPost
  /*


Rejects a VPC peering connection request. The VPC peering connection must be in the &lt;code&gt;pending-acceptance&lt;/code&gt; state. Use the &lt;a&gt;DescribeVpcPeeringConnections&lt;/a&gt; request to view your outstanding VPC peering connection requests. To delete an active VPC peering connection, or to delete a VPC peering connection request that you initiated, use &lt;a&gt;DeleteVpcPeeringConnection&lt;/a&gt;.

 */
  actionRejectVpcPeeringConnectionPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the VPC peering connection.
    /*let vpcPeeringConnectionId = "vpcPeeringConnectionId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRejectVpcPeeringConnectionPost(
      incomingOptions.vpcPeeringConnectionId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReleaseAddressPost
  /*


&lt;p&gt;Releases the specified Elastic IP address.&lt;/p&gt; &lt;p&gt;[EC2-Classic, default VPC] Releasing an Elastic IP address automatically disassociates it from any instance that it&#39;s associated with. To disassociate an Elastic IP address without releasing it, use &lt;a&gt;DisassociateAddress&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;[Nondefault VPC] You must use &lt;a&gt;DisassociateAddress&lt;/a&gt; to disassociate the Elastic IP address before you can release it. Otherwise, Amazon EC2 returns an error (&lt;code&gt;InvalidIPAddress.InUse&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;After releasing an Elastic IP address, it is released to the IP address pool. Be sure to update your DNS records and any servers or devices that communicate with the address. If you attempt to release an Elastic IP address that you already released, you&#39;ll get an &lt;code&gt;AuthFailure&lt;/code&gt; error if the address is already allocated to another AWS account.&lt;/p&gt; &lt;p&gt;[EC2-VPC] After you release an Elastic IP address for use in a VPC, you might be able to recover it. For more information, see &lt;a&gt;AllocateAddress&lt;/a&gt;.&lt;/p&gt;

 */
  actionReleaseAddressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'allocationId': "allocationId_example", // String | [EC2-VPC] The allocation ID. Required for EC2-VPC.
      //  'publicIp': "publicIp_example", // String | [EC2-Classic] The Elastic IP address. Required for EC2-Classic.
      //  'networkBorderGroup': "networkBorderGroup_example", // String | <p>The location that the IP address is released from.</p> <p>If you provide an incorrect network border group, you will receive an <code>InvalidAddress.NotFound</code> error. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\\\">Error Codes</a>.</p> <note> <p>You cannot use a network border group with EC2 Classic. If you attempt this operation on EC2 classic, you will receive an <code>InvalidParameterCombination</code> error. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/errors-overview.html\\\">Error Codes</a>.</p> </note>
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReleaseAddressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReleaseHostsPost
  /*


&lt;p&gt;When you no longer want to use an On-Demand Dedicated Host it can be released. On-Demand billing is stopped and the host goes into &lt;code&gt;released&lt;/code&gt; state. The host ID of Dedicated Hosts that have been released can no longer be specified in another request, for example, to modify the host. You must stop or terminate all instances on a host before it can be released.&lt;/p&gt; &lt;p&gt;When Dedicated Hosts are released, it may take some time for them to stop counting toward your limit and you may receive capacity errors when trying to allocate new Dedicated Hosts. Wait a few minutes and then try again.&lt;/p&gt; &lt;p&gt;Released hosts still appear in a &lt;a&gt;DescribeHosts&lt;/a&gt; response.&lt;/p&gt;

 */
  actionReleaseHostsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the Dedicated Hosts to release.
    /*let hostId = "hostId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReleaseHostsPost(
      incomingOptions.hostId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceIamInstanceProfileAssociationPost
  /*


&lt;p&gt;Replaces an IAM instance profile for the specified running instance. You can use this action to change the IAM instance profile that&#39;s associated with an instance without having to disassociate the existing IAM instance profile first.&lt;/p&gt; &lt;p&gt;Use &lt;a&gt;DescribeIamInstanceProfileAssociations&lt;/a&gt; to get the association ID.&lt;/p&gt;

 */
  actionReplaceIamInstanceProfileAssociationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the existing IAM instance profile association.
    /*let associationId = "associationId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example" // String | Describes an IAM instance profile. The name of the instance profile.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceIamInstanceProfileAssociationPost(
      incomingOptions.associationId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceNetworkAclAssociationPost
  /*


&lt;p&gt;Changes which network ACL a subnet is associated with. By default when you create a subnet, it&#39;s automatically associated with the default network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;This is an idempotent operation.&lt;/p&gt;

 */
  actionReplaceNetworkAclAssociationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the current association between the original network ACL and the subnet // String | The ID of the new network ACL to associate with the subnet.
    /*let associationId = "associationId_example";*/ /*let networkAclId = "networkAclId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceNetworkAclAssociationPost(
      incomingOptions.associationId,
      incomingOptions.networkAclId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceNetworkAclEntryPost
  /*


Replaces an entry (rule) in a network ACL. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_ACLs.html\&quot;&gt;Network ACLs&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.

 */
  actionReplaceNetworkAclEntryPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Boolean | <p>Indicates whether to replace the egress rule.</p> <p>Default: If no value is specified, we replace the ingress rule.</p // String | The ID of the ACL // String | The protocol number. A value of \\\"-1\\\" means all protocols. If you specify \\\"-1\\\" or a protocol number other than \\\"6\\\" (TCP), \\\"17\\\" (UDP), or \\\"1\\\" (ICMP), traffic on all ports is allowed, regardless of any ports or ICMP types or codes that you specify. If you specify protocol \\\"58\\\" (ICMPv6) and specify an IPv4 CIDR block, traffic for all ICMP types and codes allowed, regardless of any that you specify. If you specify protocol \\\"58\\\" (ICMPv6) and specify an IPv6 CIDR block, you must specify an ICMP type and code // String | Indicates whether to allow or deny the traffic that matches the rule // Number | The rule number of the entry to replace.
    /*let egress = true;*/ /*let networkAclId = "networkAclId_example";*/ /*let protocol = "protocol_example";*/ /*let ruleAction = "ruleAction_example";*/ /*let ruleNumber = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cidrBlock': "cidrBlock_example", // String | The IPv4 network range to allow or deny, in CIDR notation (for example <code>172.16.0.0/24</code>).
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'icmpCode': "icmpCode_example", // String | Describes the ICMP type and code. The ICMP code. A value of -1 means all codes for the specified ICMP type.
      //  'icmpType': "icmpType_example", // String | Describes the ICMP type and code. The ICMP type. A value of -1 means all types.
      //  'ipv6CidrBlock': "ipv6CidrBlock_example", // String | The IPv6 network range to allow or deny, in CIDR notation (for example <code>2001:bd8:1234:1a00::/64</code>).
      //  'portRangeFrom': "portRangeFrom_example", // String | Describes a range of ports. The first port in the range.
      //  'portRangeTo': "portRangeTo_example" // String | Describes a range of ports. The last port in the range.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceNetworkAclEntryPost(
      incomingOptions.egress,
      incomingOptions.networkAclId,
      incomingOptions.protocol,
      incomingOptions.ruleAction,
      incomingOptions.ruleNumber,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReplaceRoutePost
  /*


&lt;p&gt;Replaces an existing route within a route table in a VPC. You must provide only one of the following: internet gateway, virtual private gateway, NAT instance, NAT gateway, VPC peering connection, network interface, egress-only internet gateway, or transit gateway.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionReplaceRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the route table.
    /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'destinationCidrBlock': "destinationCidrBlock_example", // String | The IPv4 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      //  'destinationIpv6CidrBlock': "destinationIpv6CidrBlock_example", // String | The IPv6 CIDR address block used for the destination match. The value that you provide must match the CIDR of an existing route in the table.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'egressOnlyInternetGatewayId': "egressOnlyInternetGatewayId_example", // String | [IPv6 traffic only] The ID of an egress-only internet gateway.
      //  'gatewayId': "gatewayId_example", // String | The ID of an internet gateway or virtual private gateway.
      //  'instanceId': "instanceId_example", // String | The ID of a NAT instance in your VPC.
      localTarget: true // Boolean | Specifies whether to reset the local route to its default target (<code>local</code>).
      //  'natGatewayId': "natGatewayId_example", // String | [IPv4 traffic only] The ID of a NAT gateway.
      //  'transitGatewayId': "transitGatewayId_example", // String | The ID of a transit gateway.
      //  'localGatewayId': "localGatewayId_example", // String | The ID of the local gateway.
      //  'networkInterfaceId': "networkInterfaceId_example", // String | The ID of a network interface.
      //  'vpcPeeringConnectionId': "vpcPeeringConnectionId_example" // String | The ID of a VPC peering connection.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceRoutePost(
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionReplaceRouteTableAssociationPost
  /*


&lt;p&gt;Changes the route table associated with a given subnet, internet gateway, or virtual private gateway in a VPC. After the operation completes, the subnet or gateway uses the routes in the new route table. For more information about route tables, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Route_Tables.html\&quot;&gt;Route Tables&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;You can also use this operation to change which table is the main route table in the VPC. Specify the main route table&#39;s association ID and the route table ID of the new main route table.&lt;/p&gt;

 */
  actionReplaceRouteTableAssociationPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The association ID // String | The ID of the new route table to associate with the subnet.
    /*let associationId = "associationId_example";*/ /*let routeTableId = "routeTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceRouteTableAssociationPost(
      incomingOptions.associationId,
      incomingOptions.routeTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReplaceTransitGatewayRoutePost
  /*


Replaces the specified route in the specified transit gateway route table.

 */
  actionReplaceTransitGatewayRoutePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The CIDR range used for the destination match. Routing decisions are based on the most specific match // String | The ID of the route table.
    /*let destinationCidrBlock = "destinationCidrBlock_example";*/ /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayAttachmentId': "transitGatewayAttachmentId_example", // String | The ID of the attachment.
      blackhole: true, // Boolean | Indicates whether traffic matching this route is to be dropped.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReplaceTransitGatewayRoutePost(
      incomingOptions.destinationCidrBlock,
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionReportInstanceStatusPost
  /*


&lt;p&gt;Submits feedback about the status of an instance. The instance must be in the &lt;code&gt;running&lt;/code&gt; state. If your experience with the instance differs from the instance status returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;, use &lt;a&gt;ReportInstanceStatus&lt;/a&gt; to report your experience with the instance. Amazon EC2 collects this information to improve the accuracy of status checks.&lt;/p&gt; &lt;p&gt;Use of this action does not change the value returned by &lt;a&gt;DescribeInstanceStatus&lt;/a&gt;.&lt;/p&gt;

 */
  actionReportInstanceStatusPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The instances // [String] | <p>The reason codes that describe the health state of your instance.</p> <ul> <li> <p> <code>instance-stuck-in-state</code>: My instance is stuck in a state.</p> </li> <li> <p> <code>unresponsive</code>: My instance is unresponsive.</p> </li> <li> <p> <code>not-accepting-credentials</code>: My instance is not accepting my credentials.</p> </li> <li> <p> <code>password-not-available</code>: A password is not available for my instance.</p> </li> <li> <p> <code>performance-network</code>: My instance is experiencing performance problems that I believe are network related.</p> </li> <li> <p> <code>performance-instance-store</code>: My instance is experiencing performance problems that I believe are related to the instance stores.</p> </li> <li> <p> <code>performance-ebs-volume</code>: My instance is experiencing performance problems that I believe are related to an EBS volume.</p> </li> <li> <p> <code>performance-other</code>: My instance is experiencing performance problems.</p> </li> <li> <p> <code>other</code>: [explain using the description parameter]</p> </li> </ul // String | The status of all instances listed.
    /*let instanceId = "instanceId_example";*/ /*let reasonCode = "reasonCode_example";*/ /*let status = "status_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'description': "description_example", // String | Descriptive text about the health state of your instance.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      endTime: new Date("2013-10-20T19:20:30+01:00"), // Date | The time at which the reported instance health state ended.
      startTime: new Date("2013-10-20T19:20:30+01:00") // Date | The time at which the reported instance health state began.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionReportInstanceStatusPost(
      incomingOptions.instanceId,
      incomingOptions.reasonCode,
      incomingOptions.status,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRequestSpotFleetPost
  /*


&lt;p&gt;Creates a Spot Fleet request.&lt;/p&gt; &lt;p&gt;The Spot Fleet request specifies the total target capacity and the On-Demand target capacity. Amazon EC2 calculates the difference between the total capacity and On-Demand capacity, and launches the difference as Spot capacity.&lt;/p&gt; &lt;p&gt;You can submit a single request that includes multiple launch specifications that vary by instance type, AMI, Availability Zone, or subnet.&lt;/p&gt; &lt;p&gt;By default, the Spot Fleet requests Spot Instances in the Spot Instance pool where the price per unit is the lowest. Each launch specification can include its own instance weighting that reflects the value of the instance type to your application workload.&lt;/p&gt; &lt;p&gt;Alternatively, you can specify that the Spot Fleet distribute the target capacity across the Spot pools included in its launch specifications. By ensuring that the Spot Instances in your Spot Fleet are in different Spot pools, you can improve the availability of your fleet.&lt;/p&gt; &lt;p&gt;You can specify tags for the Spot Instances. You cannot tag other resource types in a Spot Fleet request because only the &lt;code&gt;instance&lt;/code&gt; resource type is supported.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html\&quot;&gt;Spot Fleet Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;

 */
  actionRequestSpotFleetPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'spotFleetRequestConfigAllocationStrategy': "spotFleetRequestConfigAllocationStrategy_example", // String | Describes the configuration of a Spot Fleet request. <p>Indicates how to allocate the target Spot Instance capacity across the Spot Instance pools specified by the Spot Fleet request.</p> <p>If the allocation strategy is <code>lowestPrice</code>, Spot Fleet launches instances from the Spot Instance pools with the lowest price. This is the default allocation strategy.</p> <p>If the allocation strategy is <code>diversified</code>, Spot Fleet launches instances from all the Spot Instance pools that you specify.</p> <p>If the allocation strategy is <code>capacityOptimized</code>, Spot Fleet launches instances from Spot Instance pools with optimal capacity for the number of instances that are launching.</p>
      //  'spotFleetRequestConfigOnDemandAllocationStrategy': "spotFleetRequestConfigOnDemandAllocationStrategy_example", // String | Describes the configuration of a Spot Fleet request. The order of the launch template overrides to use in fulfilling On-Demand capacity. If you specify <code>lowestPrice</code>, Spot Fleet uses price to determine the order, launching the lowest price first. If you specify <code>prioritized</code>, Spot Fleet uses the priority that you assign to each Spot Fleet launch template override, launching the highest priority first. If you do not specify a value, Spot Fleet defaults to <code>lowestPrice</code>.
      //  'spotFleetRequestConfigClientToken': "spotFleetRequestConfigClientToken_example", // String | Describes the configuration of a Spot Fleet request. A unique, case-sensitive identifier that you provide to ensure the idempotency of your listings. This helps to avoid duplicate listings. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
      //  'spotFleetRequestConfigExcessCapacityTerminationPolicy': "spotFleetRequestConfigExcessCapacityTerminationPolicy_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether running Spot Instances should be terminated if you decrease the target capacity of the Spot Fleet request below the current size of the Spot Fleet.
      //  'spotFleetRequestConfigFulfilledCapacity': "spotFleetRequestConfigFulfilledCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of units fulfilled by this request compared to the set target capacity. You cannot set this value.
      //  'spotFleetRequestConfigOnDemandFulfilledCapacity': "spotFleetRequestConfigOnDemandFulfilledCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of On-Demand units fulfilled by this request compared to the set target On-Demand capacity.
      //  'spotFleetRequestConfigIamFleetRole': "spotFleetRequestConfigIamFleetRole_example", // String | Describes the configuration of a Spot Fleet request. The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants the Spot Fleet the permission to request, launch, terminate, and tag instances on your behalf. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-fleet-requests.html#spot-fleet-prerequisites\\\">Spot Fleet Prerequisites</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>. Spot Fleet can terminate Spot Instances on your behalf when you cancel its Spot Fleet request using <a>CancelSpotFleetRequests</a> or when the Spot Fleet request expires, if you set <code>TerminateInstancesWithExpiration</code>.
      //  'spotFleetRequestConfigLaunchSpecifications': "spotFleetRequestConfigLaunchSpecifications_example", // [String] | Describes the configuration of a Spot Fleet request. The launch specifications for the Spot Fleet request. If you specify <code>LaunchSpecifications</code>, you can't specify <code>LaunchTemplateConfigs</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.
      //  'spotFleetRequestConfigLaunchTemplateConfigs': "spotFleetRequestConfigLaunchTemplateConfigs_example", // [String] | Describes the configuration of a Spot Fleet request. The launch template and overrides. If you specify <code>LaunchTemplateConfigs</code>, you can't specify <code>LaunchSpecifications</code>. If you include On-Demand capacity in your request, you must use <code>LaunchTemplateConfigs</code>.
      //  'spotFleetRequestConfigSpotPrice': "spotFleetRequestConfigSpotPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum price per unit hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      //  'spotFleetRequestConfigTargetCapacity': "spotFleetRequestConfigTargetCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of units to request for the Spot Fleet. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.
      //  'spotFleetRequestConfigOnDemandTargetCapacity': "spotFleetRequestConfigOnDemandTargetCapacity_example", // String | Describes the configuration of a Spot Fleet request. The number of On-Demand units to request. You can choose to set the target capacity in terms of instances or a performance characteristic that is important to your application workload, such as vCPUs, memory, or I/O. If the request type is <code>maintain</code>, you can specify a target capacity of 0 and add capacity later.
      //  'spotFleetRequestConfigOnDemandMaxTotalPrice': "spotFleetRequestConfigOnDemandMaxTotalPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum amount per hour for On-Demand Instances that you're willing to pay. You can use the <code>onDemandMaxTotalPrice</code> parameter, the <code>spotMaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
      //  'spotFleetRequestConfigSpotMaxTotalPrice': "spotFleetRequestConfigSpotMaxTotalPrice_example", // String | Describes the configuration of a Spot Fleet request. The maximum amount per hour for Spot Instances that you're willing to pay. You can use the <code>spotdMaxTotalPrice</code> parameter, the <code>onDemandMaxTotalPrice</code> parameter, or both parameters to ensure that your fleet cost does not exceed your budget. If you set a maximum price per hour for the On-Demand Instances and Spot Instances in your request, Spot Fleet will launch instances until it reaches the maximum amount you're willing to pay. When the maximum amount you're willing to pay is reached, the fleet stops launching instances even if it hasn’t met the target capacity.
      //  'spotFleetRequestConfigTerminateInstancesWithExpiration': "spotFleetRequestConfigTerminateInstancesWithExpiration_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether running Spot Instances are terminated when the Spot Fleet request expires.
      //  'spotFleetRequestConfigType': "spotFleetRequestConfigType_example", // String | Describes the configuration of a Spot Fleet request. The type of request. Indicates whether the Spot Fleet only requests the target capacity or also attempts to maintain it. When this value is <code>request</code>, the Spot Fleet only places the required requests. It does not attempt to replenish Spot Instances if capacity is diminished, nor does it submit requests in alternative Spot pools if capacity is not available. When this value is <code>maintain</code>, the Spot Fleet maintains the target capacity. The Spot Fleet places the required requests to meet capacity and automatically replenishes any interrupted instances. Default: <code>maintain</code>. <code>instant</code> is listed but is not used by Spot Fleet.
      //  'spotFleetRequestConfigValidFrom': "spotFleetRequestConfigValidFrom_example", // String | Describes the configuration of a Spot Fleet request. The start date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). By default, Amazon EC2 starts fulfilling the request immediately.
      //  'spotFleetRequestConfigValidUntil': "spotFleetRequestConfigValidUntil_example", // String | Describes the configuration of a Spot Fleet request. The end date and time of the request, in UTC format (<i>YYYY</i>-<i>MM</i>-<i>DD</i>T<i>HH</i>:<i>MM</i>:<i>SS</i>Z). After the end date and time, no new Spot Instance requests are placed or able to fulfill the request. If no value is specified, the Spot Fleet request remains until you cancel it.
      //  'spotFleetRequestConfigReplaceUnhealthyInstances': "spotFleetRequestConfigReplaceUnhealthyInstances_example", // String | Describes the configuration of a Spot Fleet request. Indicates whether Spot Fleet should replace unhealthy instances.
      //  'spotFleetRequestConfigInstanceInterruptionBehavior': "spotFleetRequestConfigInstanceInterruptionBehavior_example", // String | Describes the configuration of a Spot Fleet request. The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
      //  'spotFleetRequestConfigLoadBalancersConfig': "spotFleetRequestConfigLoadBalancersConfig_example", // String | Describes the configuration of a Spot Fleet request. <p>One or more Classic Load Balancers and target groups to attach to the Spot Fleet request. Spot Fleet registers the running Spot Instances with the specified Classic Load Balancers and target groups.</p> <p>With Network Load Balancers, Spot Fleet cannot register instances that have the following instance types: C1, CC1, CC2, CG1, CG2, CR1, CS1, G1, G2, HI1, HS1, M1, M2, M3, and T1.</p>
      //  'spotFleetRequestConfigInstancePoolsToUseCount': "spotFleetRequestConfigInstancePoolsToUseCount_example" // String | Describes the configuration of a Spot Fleet request. The number of Spot pools across which to allocate your target Spot capacity. Valid only when Spot <b>AllocationStrategy</b> is set to <code>lowest-price</code>. Spot Fleet selects the cheapest Spot pools and evenly allocates your target Spot capacity across the number of Spot pools that you specify.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRequestSpotFleetPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRequestSpotInstancesPost
  /*


&lt;p&gt;Creates a Spot Instance request.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-requests.html\&quot;&gt;Spot Instance Requests&lt;/a&gt; in the &lt;i&gt;Amazon EC2 User Guide for Linux Instances&lt;/i&gt;.&lt;/p&gt;

 */
  actionRequestSpotInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'availabilityZoneGroup': "availabilityZoneGroup_example", // String | <p>The user-specified name for a logical grouping of requests.</p> <p>When you specify an Availability Zone group in a Spot Instance request, all Spot Instances in the request are launched in the same Availability Zone. Instance proximity is maintained with this parameter, but the choice of Availability Zone is not. The group applies only to requests for Spot Instances of the same instance type. Any additional Spot Instance requests that are specified with the same Availability Zone group name are launched in that same Availability Zone, as long as at least one instance from the group is still active.</p> <p>If there is no active instance running in the Availability Zone group that you specify for a new Spot Instance request (all instances are terminated, the request is expired, or the maximum price you specified falls below current Spot price), then Amazon EC2 launches the instance in any Availability Zone where the constraint can be met. Consequently, the subsequent set of Spot Instances could be placed in a different zone from the original request, even if you specified the same Availability Zone group.</p> <p>Default: Instances are launched in any available Availability Zone.</p>
      blockDurationMinutes: 56, // Number | <p>The required duration for the Spot Instances (also known as Spot blocks), in minutes. This value must be a multiple of 60 (60, 120, 180, 240, 300, or 360).</p> <p>The duration period starts as soon as your Spot Instance receives its instance ID. At the end of the duration period, Amazon EC2 marks the Spot Instance for termination and provides a Spot Instance termination notice, which gives the instance a two-minute warning before it terminates.</p> <p>You can't specify an Availability Zone group or a launch group if you specify a duration.</p>
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Run_Instance_Idempotency.html\\\">How to Ensure Idempotency</a> in the <i>Amazon EC2 User Guide for Linux Instances</i>.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceCount: 56, // Number | <p>The maximum number of Spot Instances to launch.</p> <p>Default: 1</p>
      //  'launchGroup': "launchGroup_example", // String | <p>The instance launch group. Launch groups are Spot Instances that launch together and terminate together.</p> <p>Default: Instances are launched and terminated individually</p>
      //  'launchSpecificationSecurityGroupIds': "launchSpecificationSecurityGroupIds_example", // [String] | Describes the launch specification for an instance. One or more security group IDs.
      //  'launchSpecificationSecurityGroups': "launchSpecificationSecurityGroups_example", // [String] | Describes the launch specification for an instance. One or more security groups. When requesting instances in a VPC, you must specify the IDs of the security groups. When requesting instances in EC2-Classic, you can specify the names or the IDs of the security groups.
      //  'launchSpecificationAddressingType': "launchSpecificationAddressingType_example", // String | Describes the launch specification for an instance. Deprecated.
      //  'launchSpecificationBlockDeviceMappings': "launchSpecificationBlockDeviceMappings_example", // [String] | Describes the launch specification for an instance. One or more block device mapping entries. You can't specify both a snapshot ID and an encryption value. This is because only blank volumes can be encrypted on creation. If a snapshot is the basis for a volume, it is not blank and its encryption status is used for the volume encryption status.
      //  'launchSpecificationEbsOptimized': "launchSpecificationEbsOptimized_example", // String | Describes the launch specification for an instance. <p>Indicates whether the instance is optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS Optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'launchSpecificationIamInstanceProfile': "launchSpecificationIamInstanceProfile_example", // String | Describes the launch specification for an instance. The IAM instance profile.
      //  'launchSpecificationImageId': "launchSpecificationImageId_example", // String | Describes the launch specification for an instance. The ID of the AMI.
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | Describes the launch specification for an instance. The instance type.
      //  'launchSpecificationKernelId': "launchSpecificationKernelId_example", // String | Describes the launch specification for an instance. The ID of the kernel.
      //  'launchSpecificationKeyName': "launchSpecificationKeyName_example", // String | Describes the launch specification for an instance. The name of the key pair.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | Describes the launch specification for an instance. <p>Indicates whether basic or detailed monitoring is enabled for the instance.</p> <p>Default: Disabled</p>
      //  'launchSpecificationNetworkInterfaces': "launchSpecificationNetworkInterfaces_example", // [String] | Describes the launch specification for an instance. One or more network interfaces. If you specify a network interface, you must specify subnet IDs and security group IDs using the network interface.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | Describes the launch specification for an instance. The placement information for the instance.
      //  'launchSpecificationRamdiskId': "launchSpecificationRamdiskId_example", // String | Describes the launch specification for an instance. The ID of the RAM disk.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | Describes the launch specification for an instance. The IDs of the subnets in which to launch the instance. To specify multiple subnets, separate them using commas for example, \\\"subnet-1234abcdeexample1, subnet-0987cdef6example2\\\".
      //  'launchSpecificationUserData': "launchSpecificationUserData_example", // String | Describes the launch specification for an instance. The Base64-encoded user data for the instance. User data is limited to 16 KB.
      //  'spotPrice': "spotPrice_example", // String | The maximum price per hour that you are willing to pay for a Spot Instance. The default is the On-Demand price.
      //  'type': "type_example", // String | <p>The Spot Instance request type.</p> <p>Default: <code>one-time</code> </p>
      validFrom: new Date("2013-10-20T19:20:30+01:00"), // Date | <p>The start date of the request. If this is a one-time request, the request becomes active at this date and time and remains active until all instances launch, the request expires, or the request is canceled. If the request is persistent, the request becomes active at this date and time and remains active until it expires or is canceled.</p> <p>The specified start date and time cannot be equal to the current date and time. You must specify a start date and time that occurs after the current date and time.</p>
      validUntil: new Date("2013-10-20T19:20:30+01:00") // Date | The end date of the request. If this is a one-time request, the request remains active until all instances launch, the request is canceled, or this date is reached. If the request is persistent, it remains active until it is canceled or this date is reached. The default end date is 7 days from the current date.
      //  'instanceInterruptionBehavior': "instanceInterruptionBehavior_example" // String | The behavior when a Spot Instance is interrupted. The default is <code>terminate</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRequestSpotInstancesPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetEbsDefaultKmsKeyIdPost
  /*


&lt;p&gt;Resets the default customer master key (CMK) for EBS encryption for your account in this Region to the AWS managed CMK for EBS.&lt;/p&gt; &lt;p&gt;After resetting the default CMK to the AWS managed CMK, you can continue to encrypt by a customer managed CMK by specifying it when you create the volume. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html\&quot;&gt;Amazon EBS Encryption&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetEbsDefaultKmsKeyIdPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetEbsDefaultKmsKeyIdPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetFpgaImageAttributePost
  /*


Resets the specified attribute of the specified Amazon FPGA Image (AFI) to its default value. You can only reset the load permission attribute.

 */
  actionResetFpgaImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the AFI.
    /*let fpgaImageId = "fpgaImageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'attribute': "attribute_example" // String | The attribute.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetFpgaImageAttributePost(
      incomingOptions.fpgaImageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionResetImageAttributePost
  /*


&lt;p&gt;Resets an attribute of an AMI to its default value.&lt;/p&gt; &lt;note&gt; &lt;p&gt;The productCodes attribute can&#39;t be reset.&lt;/p&gt; &lt;/note&gt;

 */
  actionResetImageAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute to reset (currently you can only reset the launch permission attribute) // String | The ID of the AMI.
    /*let attribute = "attribute_example";*/ /*let imageId = "imageId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetImageAttributePost(
      incomingOptions.attribute,
      incomingOptions.imageId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetInstanceAttributePost
  /*


&lt;p&gt;Resets an attribute of an instance to its default value. To reset the &lt;code&gt;kernel&lt;/code&gt; or &lt;code&gt;ramdisk&lt;/code&gt;, the instance must be in a stopped state. To reset the &lt;code&gt;sourceDestCheck&lt;/code&gt;, the instance can be either running or stopped.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;sourceDestCheck&lt;/code&gt; attribute controls whether source/destination checking is enabled. The default value is &lt;code&gt;true&lt;/code&gt;, which means checking is enabled. This value must be &lt;code&gt;false&lt;/code&gt; for a NAT instance to perform NAT. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_NAT_Instance.html\&quot;&gt;NAT Instances&lt;/a&gt; in the &lt;i&gt;Amazon Virtual Private Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetInstanceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | <p>The attribute to reset.</p> <important> <p>You can only reset the following attributes: <code>kernel</code> | <code>ramdisk</code> | <code>sourceDestCheck</code>. To change an instance attribute, use <a>ModifyInstanceAttribute</a>.</p> </important // String | The ID of the instance.
    /*let attribute = "attribute_example";*/ /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetInstanceAttributePost(
      incomingOptions.attribute,
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetNetworkInterfaceAttributePost
  /*


Resets a network interface attribute. You can specify only one attribute at a time.

 */
  actionResetNetworkInterfaceAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'sourceDestCheck': "sourceDestCheck_example" // String | The source/destination checking attribute. Resets the value to <code>true</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetNetworkInterfaceAttributePost(
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionResetSnapshotAttributePost
  /*


&lt;p&gt;Resets permission settings for the specified snapshot.&lt;/p&gt; &lt;p&gt;For more information about modifying snapshot permissions, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-modifying-snapshot-permissions.html\&quot;&gt;Sharing Snapshots&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionResetSnapshotAttributePost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The attribute to reset. Currently, only the attribute for permission to create volumes can be reset // String | The ID of the snapshot.
    /*let attribute = "attribute_example";*/ /*let snapshotId = "snapshotId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionResetSnapshotAttributePost(
      incomingOptions.attribute,
      incomingOptions.snapshotId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRestoreAddressToClassicPost
  /*


Restores an Elastic IP address that was previously moved to the EC2-VPC platform back to the EC2-Classic platform. You cannot move an Elastic IP address that was originally allocated for use in EC2-VPC. The Elastic IP address must not be associated with an instance or network interface.

 */
  actionRestoreAddressToClassicPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Elastic IP address.
    /*let publicIp = "publicIp_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRestoreAddressToClassicPost(
      incomingOptions.publicIp,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRevokeClientVpnIngressPost
  /*


Removes an ingress authorization rule from a Client VPN endpoint.

 */
  actionRevokeClientVpnIngressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint with which the authorization rule is associated // String | The IPv4 address range, in CIDR notation, of the network for which access is being removed.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ /*let targetNetworkCidr = "targetNetworkCidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'accessGroupId': "accessGroupId_example", // String | The ID of the Active Directory group for which to revoke access.
      revokeAllGroups: true, // Boolean | Indicates whether access should be revoked for all clients.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeClientVpnIngressPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.targetNetworkCidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRevokeSecurityGroupEgressPost
  /*


&lt;p&gt;[VPC only] Removes the specified egress rules from a security group for EC2-VPC. This action doesn&#39;t apply to security groups for use in EC2-Classic. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;p&gt;Each rule consists of the protocol and the IPv4 or IPv6 CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;

 */
  actionRevokeSecurityGroupEgressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the security group.
    /*let groupId = "groupId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'ipPermissions': "ipPermissions_example", // [String] | The sets of IP permissions. You can't specify a destination security group and a CIDR IP address range in the same set of permissions.
      //  'cidrIp': "cidrIp_example", // String | Not supported. Use a set of IP permissions to specify the CIDR.
      fromPort: 56, // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'ipProtocol': "ipProtocol_example", // String | Not supported. Use a set of IP permissions to specify the protocol name or number.
      toPort: 56 // Number | Not supported. Use a set of IP permissions to specify the port.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | Not supported. Use a set of IP permissions to specify a destination security group.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example" // String | Not supported. Use a set of IP permissions to specify a destination security group.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeSecurityGroupEgressPost(
      incomingOptions.groupId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRevokeSecurityGroupIngressPost
  /*


&lt;p&gt;Removes the specified ingress rules from a security group. To remove a rule, the values that you specify (for example, ports) must match the existing rule&#39;s values exactly.&lt;/p&gt; &lt;note&gt; &lt;p&gt;[EC2-Classic only] If the values you specify do not match the existing rule&#39;s values, no error is returned. Use &lt;a&gt;DescribeSecurityGroups&lt;/a&gt; to verify that the rule has been removed.&lt;/p&gt; &lt;/note&gt; &lt;p&gt;Each rule consists of the protocol and the CIDR range or source security group. For the TCP and UDP protocols, you must also specify the destination port or range of ports. For the ICMP protocol, you must also specify the ICMP type and code. If the security group rule has a description, you do not have to specify the description to revoke the rule.&lt;/p&gt; &lt;p&gt;Rule changes are propagated to instances within the security group as quickly as possible. However, a small delay might occur.&lt;/p&gt;

 */
  actionRevokeSecurityGroupIngressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'cidrIp': "cidrIp_example", // String | The CIDR IP address range. You can't specify this parameter when specifying a source security group.
      fromPort: 56, // Number | The start of port range for the TCP and UDP protocols, or an ICMP type number. For the ICMP type number, use <code>-1</code> to specify all ICMP types.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example", // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
      //  'ipPermissions': "ipPermissions_example", // [String] | The sets of IP permissions. You can't specify a source security group and a CIDR IP address range in the same set of permissions.
      //  'ipProtocol': "ipProtocol_example", // String | The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>) or number (see <a href=\\\"http://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml\\\">Protocol Numbers</a>). Use <code>-1</code> to specify all.
      //  'sourceSecurityGroupName': "sourceSecurityGroupName_example", // String | [EC2-Classic, default VPC] The name of the source security group. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the start of the port range, the IP protocol, and the end of the port range. For EC2-VPC, the source security group must be in the same VPC. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      //  'sourceSecurityGroupOwnerId': "sourceSecurityGroupOwnerId_example", // String | [EC2-Classic] The AWS account ID of the source security group, if the source security group is in a different account. You can't specify this parameter in combination with the following parameters: the CIDR IP address range, the IP protocol, the start of the port range, and the end of the port range. To revoke a specific rule for an IP protocol and port range, use a set of IP permissions instead.
      toPort: 56, // Number | The end of port range for the TCP and UDP protocols, or an ICMP code number. For the ICMP code number, use <code>-1</code> to specify all ICMP codes for the ICMP type.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRevokeSecurityGroupIngressPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionRunInstancesPost
  /*


&lt;p&gt;Launches the specified number of instances using an AMI for which you have permissions. &lt;/p&gt; &lt;p&gt;You can specify a number of options, or leave the default options. The following rules apply:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] If you don&#39;t specify a subnet ID, we choose a default subnet from your default VPC for you. If you don&#39;t have a default VPC, you must specify a subnet ID in the request.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-Classic] If don&#39;t specify an Availability Zone, we choose one for you.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Some instance types must be launched into a VPC. If you do not have a default VPC, or if you do not specify a subnet ID, the request fails. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-vpc.html#vpc-only-instance-types\&quot;&gt;Instance Types Available Only in a VPC&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;[EC2-VPC] All instances have a network interface with a primary private IPv4 address. If you don&#39;t specify this address, we choose one from the IPv4 range of your subnet.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;Not all instance types support IPv6 addresses. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\&quot;&gt;Instance Types&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If you don&#39;t specify a security group ID, we use the default security group. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-network-security.html\&quot;&gt;Security Groups&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;If any of the AMIs have a product code attached for which the user has not subscribed, the request fails.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can create a &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-launch-templates.html\&quot;&gt;launch template&lt;/a&gt;, which is a resource that contains the parameters to launch an instance. When you launch an instance using &lt;a&gt;RunInstances&lt;/a&gt;, you can specify the launch template instead of specifying the launch parameters.&lt;/p&gt; &lt;p&gt;To ensure faster instance launches, break up large requests into smaller batches. For example, create five separate launch requests for 100 instances each instead of one launch request for 500 instances.&lt;/p&gt; &lt;p&gt;An instance is ready for you to use when it&#39;s in the &lt;code&gt;running&lt;/code&gt; state. You can check the state of your instance using &lt;a&gt;DescribeInstances&lt;/a&gt;. You can tag instances and EBS volumes during launch, after launch, or both. For more information, see &lt;a&gt;CreateTags&lt;/a&gt; and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html\&quot;&gt;Tagging Your Amazon EC2 Resources&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Linux instances have access to the public key of the key pair at boot. You can use this key to provide secure access to the instance. Amazon EC2 public images use this feature to provide secure access without passwords. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html\&quot;&gt;Key Pairs&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_InstanceStraightToTerminated.html\&quot;&gt;What To Do If An Instance Immediately Terminates&lt;/a&gt;, and &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html\&quot;&gt;Troubleshooting Connecting to Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRunInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // Number | <p>The maximum number of instances to launch. If you specify more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches the largest possible number of instances above <code>MinCount</code>.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href=\\\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\\\">How many instances can I run in Amazon EC2</a> in the Amazon EC2 FAQ.</p // Number | <p>The minimum number of instances to launch. If you specify a minimum that is more instances than Amazon EC2 can launch in the target Availability Zone, Amazon EC2 launches no instances.</p> <p>Constraints: Between 1 and the maximum number you're allowed for the specified instance type. For more information about the default limits, and how to request an increase, see <a href=\\\"http://aws.amazon.com/ec2/faqs/#How_many_instances_can_I_run_in_Amazon_EC2\\\">How many instances can I run in Amazon EC2</a> in the Amazon EC2 General FAQ.</p>
    /*let maxCount = 56;*/ /*let minCount = 56;*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'blockDeviceMapping': "blockDeviceMapping_example", // [String] | The block device mapping entries.
      //  'imageId': "imageId_example", // String | The ID of the AMI. An AMI ID is required to launch an instance and must be specified here or in a launch template.
      //  'instanceType': "instanceType_example", // String | <p>The instance type. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html\\\">Instance Types</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p>Default: <code>m1.small</code> </p>
      ipv6AddressCount: 56, // Number | <p>[EC2-VPC] The number of IPv6 addresses to associate with the primary network interface. Amazon EC2 chooses the IPv6 addresses from the range of your subnet. You cannot specify this option and the option to assign specific IPv6 addresses in the same request. You can specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      //  'ipv6Address': "ipv6Address_example", // [String] | <p>[EC2-VPC] The IPv6 addresses from the range of the subnet to associate with the primary network interface. You cannot specify this option and the option to assign a number of IPv6 addresses in the same request. You cannot specify this option if you've specified a minimum number of instances to launch.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      //  'kernelId': "kernelId_example", // String | <p>The ID of the kernel.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'keyName': "keyName_example", // String | <p>The name of the key pair. You can create a key pair using <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateKeyPair.html\\\">CreateKeyPair</a> or <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ImportKeyPair.html\\\">ImportKeyPair</a>.</p> <important> <p>If you do not specify a key pair, you can't connect to the instance unless you choose an AMI that is configured to allow users another way to log in.</p> </important>
      //  'monitoringEnabled': "monitoringEnabled_example", // String | Describes the monitoring of an instance. Indicates whether detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
      //  'placementAvailabilityZone': "placementAvailabilityZone_example", // String | Describes the placement of an instance. <p>The Availability Zone of the instance.</p> <p>If not specified, an Availability Zone will be automatically chosen for you based on the load balancing criteria for the Region.</p>
      //  'placementAffinity': "placementAffinity_example", // String | Describes the placement of an instance. The affinity setting for the instance on the Dedicated Host. This parameter is not supported for the <a>ImportInstance</a> command.
      //  'placementGroupName': "placementGroupName_example", // String | Describes the placement of an instance. The name of the placement group the instance is in.
      //  'placementPartitionNumber': "placementPartitionNumber_example", // String | Describes the placement of an instance. The number of the partition the instance is in. Valid only if the placement group strategy is set to <code>partition</code>.
      //  'placementHostId': "placementHostId_example", // String | Describes the placement of an instance. The ID of the Dedicated Host on which the instance resides. This parameter is not supported for the <a>ImportInstance</a> command.
      //  'placementTenancy': "placementTenancy_example", // String | Describes the placement of an instance. The tenancy of the instance (if the instance is running in a VPC). An instance with a tenancy of <code>dedicated</code> runs on single-tenant hardware. The <code>host</code> tenancy is not supported for the <a>ImportInstance</a> command.
      //  'placementSpreadDomain': "placementSpreadDomain_example", // String | Describes the placement of an instance. Reserved for future use.
      //  'placementHostResourceGroupArn': "placementHostResourceGroupArn_example", // String | Describes the placement of an instance. The ARN of the host resource group in which to launch the instances. If you specify a host resource group ARN, omit the <b>Tenancy</b> parameter or set it to <code>host</code>.
      //  'ramdiskId': "ramdiskId_example", // String | <p>The ID of the RAM disk to select. Some kernels require additional drivers at launch. Check the kernel requirements for information about whether you need to specify a RAM disk. To find kernel requirements, go to the AWS Resource Center and search for the kernel ID.</p> <important> <p>We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedkernels.html\\\"> PV-GRUB</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> </important>
      //  'securityGroupId': "securityGroupId_example", // [String] | <p>The IDs of the security groups. You can create a security group using <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateSecurityGroup.html\">CreateSecurityGroup</a>.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p>
      //  'securityGroup': "securityGroup_example", // [String] | <p>[EC2-Classic, default VPC] The names of the security groups. For a nondefault VPC, you must use security group IDs instead.</p> <p>If you specify a network interface, you must specify any security groups as part of the network interface.</p> <p>Default: Amazon EC2 uses the default security group.</p>
      //  'subnetId': "subnetId_example", // String | <p>[EC2-VPC] The ID of the subnet to launch the instance into.</p> <p>If you specify a network interface, you must specify any subnets as part of the network interface.</p>
      //  'userData': "userData_example", // String | The user data to make available to the instance. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/user-data.html\\\">Running Commands on Your Linux Instance at Launch</a> (Linux) and <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html#instancedata-add-user-data\\\">Adding User Data</a> (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
      //  'additionalInfo': "additionalInfo_example", // String | Reserved.
      //  'clientToken': "clientToken_example", // String | <p>Unique, case-sensitive identifier you provide to ensure the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.</p> <p>Constraints: Maximum 64 ASCII characters</p>
      disableApiTermination: true, // Boolean | <p>If you set this parameter to <code>true</code>, you can't terminate the instance using the Amazon EC2 console, CLI, or API otherwise, you can. To change this attribute after launch, use <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_ModifyInstanceAttribute.html\\\">ModifyInstanceAttribute</a>. Alternatively, if you set <code>InstanceInitiatedShutdownBehavior</code> to <code>terminate</code>, you can terminate the instance by running the shutdown command from the instance.</p> <p>Default: <code>false</code> </p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      ebsOptimized: true // Boolean | <p>Indicates whether the instance is optimized for Amazon EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal Amazon EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'iamInstanceProfileArn': "iamInstanceProfileArn_example", // String | Describes an IAM instance profile. The Amazon Resource Name (ARN) of the instance profile.
      //  'iamInstanceProfileName': "iamInstanceProfileName_example", // String | Describes an IAM instance profile. The name of the instance profile.
      //  'instanceInitiatedShutdownBehavior': "instanceInitiatedShutdownBehavior_example", // String | <p>Indicates whether an instance stops or terminates when you initiate shutdown from the instance (using the operating system command for system shutdown).</p> <p>Default: <code>stop</code> </p>
      //  'networkInterface': "networkInterface_example", // [String] | The network interfaces to associate with the instance. If you specify a network interface, you must specify any security groups and subnets as part of the network interface.
      //  'privateIpAddress': "privateIpAddress_example", // String | <p>[EC2-VPC] The primary IPv4 address. You must specify a value from the IPv4 address range of the subnet.</p> <p>Only one private IP address can be designated as primary. You can't specify this option if you've specified the option to designate a private IP address as the primary IP address in a network interface specification. You cannot specify this option if you're launching more than one instance in the request.</p> <p>You cannot specify this option and the network interfaces option in the same request.</p>
      //  'elasticGpuSpecification': "elasticGpuSpecification_example", // [String] | An elastic GPU to associate with the instance. An Elastic GPU is a GPU resource that you can attach to your Windows instance to accelerate the graphics performance of your applications. For more information, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/elastic-graphics.html\"> Amazon EC2 Elastic GPUs</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.
      //  'elasticInferenceAccelerator': "elasticInferenceAccelerator_example", // [String] | An elastic inference accelerator to associate with the instance. Elastic inference accelerators are a resource you can attach to your Amazon EC2 instances to accelerate your Deep Learning (DL) inference workloads.
      //  'tagSpecification': "tagSpecification_example", // [String] | The tags to apply to the resources during launch. You can only tag instances and volumes on launch. The specified tags are applied to all instances or volumes that are created during launch. To tag a resource after it has been created, see <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateTags.html\">CreateTags</a>.
      //  'launchTemplateLaunchTemplateId': "launchTemplateLaunchTemplateId_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. The ID of the launch template.
      //  'launchTemplateLaunchTemplateName': "launchTemplateLaunchTemplateName_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. The name of the launch template.
      //  'launchTemplateVersion': "launchTemplateVersion_example", // String | The launch template to use. You must specify either the launch template ID or launch template name in the request, but not both. <p>The version number of the launch template.</p> <p>Default: The default version for the launch template.</p>
      //  'instanceMarketOptionsMarketType': "instanceMarketOptionsMarketType_example", // String | Describes the market (purchasing) option for the instances. The market type.
      //  'instanceMarketOptionsSpotOptions': "instanceMarketOptionsSpotOptions_example", // String | Describes the market (purchasing) option for the instances. The options for Spot Instances.
      //  'creditSpecificationCpuCredits': "creditSpecificationCpuCredits_example", // String | The credit option for CPU usage of a T2 or T3 instance. The credit option for CPU usage of a T2 or T3 instance. Valid values are <code>standard</code> and <code>unlimited</code>.
      //  'cpuOptionsCoreCount': "cpuOptionsCoreCount_example", // String | The CPU options for the instance. Both the core count and threads per core must be specified in the request. The number of CPU cores for the instance.
      //  'cpuOptionsThreadsPerCore': "cpuOptionsThreadsPerCore_example", // String | The CPU options for the instance. Both the core count and threads per core must be specified in the request. The number of threads per CPU core. To disable multithreading for the instance, specify a value of <code>1</code>. Otherwise, specify the default value of <code>2</code>.
      //  'capacityReservationSpecificationCapacityReservationPreference': "capacityReservationSpecificationCapacityReservationPreference_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> <p>Indicates the instance's Capacity Reservation preferences. Possible preferences include:</p> <ul> <li> <p> <code>open</code> - The instance can run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone).</p> </li> <li> <p> <code>none</code> - The instance avoids running in a Capacity Reservation even if one is available. The instance runs as an On-Demand Instance.</p> </li> </ul>
      //  'capacityReservationSpecificationCapacityReservationTarget': "capacityReservationSpecificationCapacityReservationTarget_example", // String | <p>Describes an instance's Capacity Reservation targeting option. You can specify only one parameter at a time. If you specify <code>CapacityReservationPreference</code> and <code>CapacityReservationTarget</code>, the request fails.</p> <p>Use the <code>CapacityReservationPreference</code> parameter to configure the instance to run as an On-Demand Instance or to run in any <code>open</code> Capacity Reservation that has matching attributes (instance type, platform, Availability Zone). Use the <code>CapacityReservationTarget</code> parameter to explicitly target a specific Capacity Reservation.</p> Information about the target Capacity Reservation.
      //  'hibernationOptionsConfigured': "hibernationOptionsConfigured_example", // String | Indicates whether your instance is configured for hibernation. This parameter is valid only if the instance meets the <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\\\">hibernation prerequisites</a>. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\\\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>. <p>If you set this parameter to <code>true</code>, your instance is enabled for hibernation.</p> <p>Default: <code>false</code> </p>
      //  'licenseSpecification': "licenseSpecification_example", // [String] | The license configurations.
      //  'metadataOptionsHttpTokens': "metadataOptionsHttpTokens_example", // String | The metadata options for the instance. <p>The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is <code>optional</code>.</p> <p>If the state is <code>optional</code>, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned.</p> <p>If the state is <code>required</code>, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials the version 1.0 credentials are not available.</p>
      //  'metadataOptionsHttpPutResponseHopLimit': "metadataOptionsHttpPutResponseHopLimit_example", // String | The metadata options for the instance. <p>The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel.</p> <p>Default: 1</p> <p>Possible values: Integers from 1 to 64</p>
      //  'metadataOptionsHttpEndpoint': "metadataOptionsHttpEndpoint_example" // String | The metadata options for the instance. <p>This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is <code>enabled</code>.</p> <note> <p>If you specify a value of <code>disabled</code>, you will not be able to access your instance metadata.</p> </note>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRunInstancesPost(
      incomingOptions.maxCount,
      incomingOptions.minCount,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionRunScheduledInstancesPost
  /*


&lt;p&gt;Launches the specified Scheduled Instances.&lt;/p&gt; &lt;p&gt;Before you can launch a Scheduled Instance, you must purchase it and obtain an identifier using &lt;a&gt;PurchaseScheduledInstances&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;You must launch a Scheduled Instance during its scheduled time period. You can&#39;t stop or reboot a Scheduled Instance, but you can terminate it as needed. If you terminate a Scheduled Instance before the current scheduled time period ends, you can launch it again after a few minutes. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-scheduled-instances.html\&quot;&gt;Scheduled Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionRunScheduledInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The Scheduled Instance ID.
    /*let scheduledInstanceId = "scheduledInstanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'clientToken': "clientToken_example", // String | Unique, case-sensitive identifier that ensures the idempotency of the request. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html\\\">Ensuring Idempotency</a>.
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      instanceCount: 56 // Number | <p>The number of instances.</p> <p>Default: 1</p>
      //  'launchSpecificationBlockDeviceMappings': "launchSpecificationBlockDeviceMappings_example", // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The block device mapping entries.
      //  'launchSpecificationEbsOptimized': "launchSpecificationEbsOptimized_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> <p>Indicates whether the instances are optimized for EBS I/O. This optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal EBS I/O performance. This optimization isn't available with all instance types. Additional usage charges apply when using an EBS-optimized instance.</p> <p>Default: <code>false</code> </p>
      //  'launchSpecificationIamInstanceProfile': "launchSpecificationIamInstanceProfile_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The IAM instance profile.
      //  'launchSpecificationImageId': "launchSpecificationImageId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the Amazon Machine Image (AMI).
      //  'launchSpecificationInstanceType': "launchSpecificationInstanceType_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The instance type.
      //  'launchSpecificationKernelId': "launchSpecificationKernelId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the kernel.
      //  'launchSpecificationKeyName': "launchSpecificationKeyName_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The name of the key pair.
      //  'launchSpecificationMonitoring': "launchSpecificationMonitoring_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> Enable or disable monitoring for the instances.
      //  'launchSpecificationNetworkInterfaces': "launchSpecificationNetworkInterfaces_example", // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The network interfaces.
      //  'launchSpecificationPlacement': "launchSpecificationPlacement_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The placement information.
      //  'launchSpecificationRamdiskId': "launchSpecificationRamdiskId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the RAM disk.
      //  'launchSpecificationSecurityGroupIds': "launchSpecificationSecurityGroupIds_example", // [String] | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The IDs of the security groups.
      //  'launchSpecificationSubnetId': "launchSpecificationSubnetId_example", // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The ID of the subnet in which to launch the instances.
      //  'launchSpecificationUserData': "launchSpecificationUserData_example" // String | <p>Describes the launch specification for a Scheduled Instance.</p> <p>If you are launching the Scheduled Instance in EC2-VPC, you must specify the ID of the subnet. You can specify the subnet using either <code>SubnetId</code> or <code>NetworkInterface</code>.</p> The base64-encoded MIME user data.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionRunScheduledInstancesPost(
      incomingOptions.scheduledInstanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchLocalGatewayRoutesPost
  /*


Searches for routes in the specified local gateway route table.

 */
  actionSearchLocalGatewayRoutesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the local gateway route table // [String] | One or more filters.
    /*let localGatewayRouteTableId = "localGatewayRouteTableId_example";*/ /*let filter = "filter_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchLocalGatewayRoutesPost(
      incomingOptions.localGatewayRouteTableId,
      incomingOptions.filter,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchTransitGatewayMulticastGroupsPost
  /*


Searches one or more transit gateway multicast groups and returns the group membership information.

 */
  actionSearchTransitGatewayMulticastGroupsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi();
    let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'transitGatewayMulticastDomainId': "transitGatewayMulticastDomainId_example", // String | The ID of the transit gateway multicast domain.
      //  'filter': "filter_example", // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>group-ip-address</code> - The IP address of the transit gateway multicast group.</p> </li> <li> <p> <code>is-group-member</code> - The resource is a group member. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>is-group-source</code> - The resource is a group source. Valid values are <code>true</code> | <code>false</code>.</p> </li> <li> <p> <code>member-type</code> - The member type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>resource-id</code> - The ID of the resource.</p> </li> <li> <p> <code>resource-type</code> - The type of resource. Valid values are <code>vpc</code> | <code>vpn</code> | <code>direct-connect-gateway</code> | <code>tgw-peering</code>.</p> </li> <li> <p> <code>source-type</code> - The source type. Valid values are <code>igmp</code> | <code>static</code>.</p> </li> <li> <p> <code>state</code> - The state of the subnet association. Valid values are <code>associated</code> | <code>associated</code> | <code>disassociated</code> | <code>disassociating</code>.</p> </li> <li> <p> <code>subnet-id</code> - The ID of the subnet.</p> </li> <li> <p> <code>transit-gateway-attachment-id</code> - The id of the transit gateway attachment.</p> </li> </ul>
      maxResults: 56, // Number | The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.
      //  'nextToken': "nextToken_example", // String | The token for the next page of results.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchTransitGatewayMulticastGroupsPost(
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSearchTransitGatewayRoutesPost
  /*


Searches for routes in the specified transit gateway route table.

 */
  actionSearchTransitGatewayRoutesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the transit gateway route table // [String] | <p>One or more filters. The possible values are:</p> <ul> <li> <p> <code>attachment.transit-gateway-attachment-id</code>- The id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-id</code> - The resource id of the transit gateway attachment.</p> </li> <li> <p> <code>attachment.resource-type</code> - The attachment resource type (<code>vpc</code> | <code>vpn</code>).</p> </li> <li> <p> <code>route-search.exact-match</code> - The exact match of the specified filter.</p> </li> <li> <p> <code>route-search.longest-prefix-match</code> - The longest prefix that matches the route.</p> </li> <li> <p> <code>route-search.subnet-of-match</code> - The routes with a subnet that match the specified CIDR filter.</p> </li> <li> <p> <code>route-search.supernet-of-match</code> - The routes with a CIDR that encompass the CIDR filter. For example, if you have 10.0.1.0/29 and 10.0.1.0/31 routes in your route table and you specify supernet-of-match as 10.0.1.0/30, then the result returns 10.0.1.0/29.</p> </li> <li> <p> <code>state</code> - The state of the route (<code>active</code> | <code>blackhole</code>).</p> </li> <li> <p> <code>type</code> - The type of route (<code>propagated</code> | <code>static</code>).</p> </li> </ul>
    /*let transitGatewayRouteTableId = "transitGatewayRouteTableId_example";*/ /*let filter = "filter_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      maxResults: 56, // Number | The maximum number of routes to return.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSearchTransitGatewayRoutesPost(
      incomingOptions.transitGatewayRouteTableId,
      incomingOptions.filter,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionSendDiagnosticInterruptPost
  /*


&lt;p&gt;Sends a diagnostic interrupt to the specified Amazon EC2 instance to trigger a &lt;i&gt;kernel panic&lt;/i&gt; (on Linux instances), or a &lt;i&gt;blue screen&lt;/i&gt;/&lt;i&gt;stop error&lt;/i&gt; (on Windows instances). For instances based on Intel and AMD processors, the interrupt is received as a &lt;i&gt;non-maskable interrupt&lt;/i&gt; (NMI).&lt;/p&gt; &lt;p&gt;In general, the operating system crashes and reboots when a kernel panic or stop error is triggered. The operating system can also be configured to perform diagnostic tasks, such as generating a memory dump file, loading a secondary kernel, or obtaining a call trace.&lt;/p&gt; &lt;p&gt;Before sending a diagnostic interrupt to your instance, ensure that its operating system is configured to perform the required diagnostic tasks.&lt;/p&gt; &lt;p&gt;For more information about configuring your operating system to generate a crash dump when a kernel panic or stop error occurs, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Linux instances) or &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/diagnostic-interrupt.html\&quot;&gt;Send a Diagnostic Interrupt&lt;/a&gt; (Windows instances).&lt;/p&gt;

 */
  actionSendDiagnosticInterruptPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the instance.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionSendDiagnosticInterruptPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionStartInstancesPost
  /*


&lt;p&gt;Starts an Amazon EBS-backed instance that you&#39;ve previously stopped.&lt;/p&gt; &lt;p&gt;Instances that use Amazon EBS volumes as their root devices can be quickly stopped and started. When an instance is stopped, the compute resources are released and you are not billed for instance usage. However, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. You can restart your instance at any time. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;Before stopping an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM.&lt;/p&gt; &lt;p&gt;Performing this operation on an instance that uses an instance store as its root device returns an error.&lt;/p&gt; &lt;p&gt;For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Stop_Start.html\&quot;&gt;Stopping Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionStartInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'additionalInfo': "additionalInfo_example", // String | Reserved.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionStartInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionStopInstancesPost
  /*


&lt;p&gt;Stops an Amazon EBS-backed instance.&lt;/p&gt; &lt;p&gt;You can use the Stop action to hibernate an instance if the instance is &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#enabling-hibernation\&quot;&gt;enabled for hibernation&lt;/a&gt; and it meets the &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html#hibernating-prerequisites\&quot;&gt;hibernation prerequisites&lt;/a&gt;. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\&quot;&gt;Hibernate Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;We don&#39;t charge usage for a stopped instance, or data transfer fees however, your root partition Amazon EBS volume remains and continues to persist your data, and you are charged for Amazon EBS volume usage. Every time you start your Windows instance, Amazon EC2 charges you for a full instance hour. If you stop and restart your Windows instance, a new instance hour begins and Amazon EC2 charges you for another full instance hour even if you are still within the same 60-minute period when it was stopped. Every time you start your Linux instance, Amazon EC2 charges a one-minute minimum for instance usage, and thereafter charges per second for instance usage.&lt;/p&gt; &lt;p&gt;You can&#39;t start, stop, or hibernate Spot Instances, and you can&#39;t stop or hibernate instance store-backed instances. For information about using hibernation for Spot Instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/spot-interruptions.html#hibernate-spot-instances\&quot;&gt;Hibernating Interrupted Spot Instances&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop or hibernate an instance, we shut it down. You can restart your instance at any time. Before stopping or hibernating an instance, make sure it is in a state from which it can be restarted. Stopping an instance does not preserve data stored in RAM, but hibernating an instance does preserve data stored in RAM. If an instance cannot hibernate successfully, a normal shutdown occurs.&lt;/p&gt; &lt;p&gt;Stopping and hibernating an instance is different to rebooting or terminating it. For example, when you stop or hibernate an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, the root device and any other devices attached during the instance launch are automatically deleted. For more information about the differences between rebooting, stopping, hibernating, and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;When you stop an instance, we attempt to shut it down forcibly after a short while. If your instance appears stuck in the stopping state after a period of time, there may be an issue with the underlying host computer. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesStopping.html\&quot;&gt;Troubleshooting Stopping Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionStopInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      hibernate: true, // Boolean | <p>Hibernates the instance if the instance was enabled for hibernation at launch. If the instance cannot hibernate successfully, a normal shutdown occurs. For more information, see <a href=\\\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Hibernate.html\\\">Hibernate Your Instance</a> in the <i>Amazon Elastic Compute Cloud User Guide</i>.</p> <p> Default: <code>false</code> </p>
      dryRun: true, // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      force: true // Boolean | <p>Forces the instances to stop. The instances do not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances.</p> <p>Default: <code>false</code> </p>
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionStopInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionTerminateClientVpnConnectionsPost
  /*


Terminates active Client VPN endpoint connections. This action can be used to terminate a specific client connection, or up to five connections established by a specific user.

 */
  actionTerminateClientVpnConnectionsPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the Client VPN endpoint to which the client is connected.
    /*let clientVpnEndpointId = "clientVpnEndpointId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      //  'connectionId': "connectionId_example", // String | The ID of the client connection to be terminated.
      //  'username': "username_example", // String | The name of the user who initiated the connection. Use this option to terminate all active connections for the specified user. This option can only be used if the user has established up to five connections.
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionTerminateClientVpnConnectionsPost(
      incomingOptions.clientVpnEndpointId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionTerminateInstancesPost
  /*


&lt;p&gt;Shuts down the specified instances. This operation is idempotent if you terminate an instance more than once, each call succeeds. &lt;/p&gt; &lt;p&gt;If you specify multiple instances and the request fails (for example, because of a single incorrect instance ID), none of the instances are terminated.&lt;/p&gt; &lt;p&gt;Terminated instances remain visible after termination (for approximately one hour).&lt;/p&gt; &lt;p&gt;By default, Amazon EC2 deletes all EBS volumes that were attached when the instance launched. Volumes attached after instance launch continue running.&lt;/p&gt; &lt;p&gt;You can stop, start, and terminate EBS-backed instances. You can only terminate instance store-backed instances. What happens to an instance differs if you stop it or terminate it. For example, when you stop an instance, the root device and any other devices attached to the instance persist. When you terminate an instance, any attached EBS volumes with the &lt;code&gt;DeleteOnTermination&lt;/code&gt; block device mapping parameter set to &lt;code&gt;true&lt;/code&gt; are automatically deleted. For more information about the differences between stopping and terminating instances, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html\&quot;&gt;Instance Lifecycle&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt; &lt;p&gt;For more information about troubleshooting, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/TroubleshootingInstancesShuttingDown.html\&quot;&gt;Troubleshooting Terminating Your Instance&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.&lt;/p&gt;

 */
  actionTerminateInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | <p>The IDs of the instances.</p> <p>Constraints: Up to 1000 instance IDs. We recommend breaking up this request into smaller batches.</p>
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionTerminateInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUnassignIpv6AddressesPost
  /*


Unassigns one or more IPv6 addresses from a network interface.

 */
  actionUnassignIpv6AddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IPv6 addresses to unassign from the network interface // String | The ID of the network interface.
    /*let ipv6Addresses = "ipv6Addresses_example";*/ /*let networkInterfaceId = "networkInterfaceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnassignIpv6AddressesPost(
      incomingOptions.ipv6Addresses,
      incomingOptions.networkInterfaceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUnassignPrivateIpAddressesPost
  /*


Unassigns one or more secondary private IP addresses from a network interface.

 */
  actionUnassignPrivateIpAddressesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The ID of the network interface // [String] | The secondary private IP addresses to unassign from the network interface. You can specify this option multiple times to unassign more than one IP address.
    /*let networkInterfaceId = "networkInterfaceId_example";*/ /*let privateIpAddress = "privateIpAddress_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'" // String |
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnassignPrivateIpAddressesPost(
      incomingOptions.networkInterfaceId,
      incomingOptions.privateIpAddress,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, "", response);
        }
      }
    );
  }

  // This is a function for actionUnmonitorInstancesPost
  /*


Disables detailed monitoring for a running instance. For more information, see &lt;a href&#x3D;\&quot;https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-cloudwatch.html\&quot;&gt;Monitoring Your Instances and Volumes&lt;/a&gt; in the &lt;i&gt;Amazon Elastic Compute Cloud User Guide&lt;/i&gt;.

 */
  actionUnmonitorInstancesPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IDs of the instances.
    /*let instanceId = "instanceId_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUnmonitorInstancesPost(
      incomingOptions.instanceId,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUpdateSecurityGroupRuleDescriptionsEgressPost
  /*


&lt;p&gt;[VPC only] Updates the description of an egress (outbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;

 */
  actionUpdateSecurityGroupRuleDescriptionsEgressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IP permissions for the security group rule.
    /*let ipPermissions = "ipPermissions_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example" // String | [Default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUpdateSecurityGroupRuleDescriptionsEgressPost(
      incomingOptions.ipPermissions,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionUpdateSecurityGroupRuleDescriptionsIngressPost
  /*


&lt;p&gt;Updates the description of an ingress (inbound) security group rule. You can replace an existing description, or add a description to a rule that did not have one previously.&lt;/p&gt; &lt;p&gt;You specify the description as part of the IP permissions structure. You can remove a description for a security group rule by omitting the description parameter in the request.&lt;/p&gt;

 */
  actionUpdateSecurityGroupRuleDescriptionsIngressPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // [String] | The IP permissions for the security group rule.
    /*let ipPermissions = "ipPermissions_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
      //  'groupId': "groupId_example", // String | The ID of the security group. You must specify either the security group ID or the security group name in the request. For security groups in a nondefault VPC, you must specify the security group ID.
      //  'groupName': "groupName_example" // String | [EC2-Classic, default VPC] The name of the security group. You must specify either the security group ID or the security group name in the request.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionUpdateSecurityGroupRuleDescriptionsIngressPost(
      incomingOptions.ipPermissions,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  // This is a function for actionWithdrawByoipCidrPost
  /*


&lt;p&gt;Stops advertising an IPv4 address range that is provisioned as an address pool.&lt;/p&gt; &lt;p&gt;You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.&lt;/p&gt; &lt;p&gt;It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.&lt;/p&gt;

 */
  actionWithdrawByoipCidrPost(incomingOptions, cb) {
    const AmazonEc2 = require("./dist");
    let defaultClient = AmazonEc2.ApiClient.instance;
    // Configure API key authorization: hmac
    let hmac = defaultClient.authentications["hmac"];
    hmac.apiKey = incomingOptions.apiKey;
    // Uncomment the following line to set a prefix for the API key, e.g. "Token" (defaults to null)
    //hmac.apiKeyPrefix = 'Token';

    let apiInstance = new AmazonEc2.DefaultApi(); // String | The public IPv4 address range, in CIDR notation.
    /*let cidr = "cidr_example";*/ let opts = {
      //  'xAmzContentSha256': "xAmzContentSha256_example", // String |
      //  'xAmzDate': "xAmzDate_example", // String |
      //  'xAmzAlgorithm': "xAmzAlgorithm_example", // String |
      //  'xAmzCredential': "xAmzCredential_example", // String |
      //  'xAmzSecurityToken': "xAmzSecurityToken_example", // String |
      //  'xAmzSignature': "xAmzSignature_example", // String |
      //  'xAmzSignedHeaders': "xAmzSignedHeaders_example", // String |
      //  'action': "action_example", // String |
      version: "'2016-11-15'", // String |
      dryRun: true // Boolean | Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.
    };

    if (!incomingOptions.opts) delete incomingOptions.opts;
    incomingOptions.opts = Object.assign(opts, incomingOptions.opts);

    apiInstance.actionWithdrawByoipCidrPost(
      incomingOptions.cidr,
      incomingOptions.opts,
      (error, data, response) => {
        if (error) {
          cb(error, null, response);
        } else {
          cb(null, data, response);
        }
      }
    );
  }

  async put(entity, options) {
    switch (entity) {
      default:
        throw ErrorHelper.getError(`Can't get entity`, 404);
    }
  }
  async delete(entity, options) {
    switch (entity) {
      default:
        throw ErrorHelper.getError(`Can't get entity`, 404);
    }
  }
  async patch(entity, options) {
    switch (entity) {
      default:
        throw ErrorHelper.getError(`Can't get entity`, 404);
    }
  }
}
module.exports = new Amazon_EC2Service();
