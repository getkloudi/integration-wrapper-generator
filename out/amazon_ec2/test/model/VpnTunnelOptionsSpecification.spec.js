/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.VpnTunnelOptionsSpecification();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VpnTunnelOptionsSpecification', function() {
    it('should create an instance of VpnTunnelOptionsSpecification', function() {
      // uncomment below and update the code to test VpnTunnelOptionsSpecification
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be.a(AmazonEc2.VpnTunnelOptionsSpecification);
    });

    it('should have the property dPDTimeoutSeconds (base name: "DPDTimeoutSeconds")', function() {
      // uncomment below and update the code to test the property dPDTimeoutSeconds
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property iKEVersions (base name: "IKEVersions")', function() {
      // uncomment below and update the code to test the property iKEVersions
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase1DHGroupNumbers (base name: "Phase1DHGroupNumbers")', function() {
      // uncomment below and update the code to test the property phase1DHGroupNumbers
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase1EncryptionAlgorithms (base name: "Phase1EncryptionAlgorithms")', function() {
      // uncomment below and update the code to test the property phase1EncryptionAlgorithms
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase1IntegrityAlgorithms (base name: "Phase1IntegrityAlgorithms")', function() {
      // uncomment below and update the code to test the property phase1IntegrityAlgorithms
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase1LifetimeSeconds (base name: "Phase1LifetimeSeconds")', function() {
      // uncomment below and update the code to test the property phase1LifetimeSeconds
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase2DHGroupNumbers (base name: "Phase2DHGroupNumbers")', function() {
      // uncomment below and update the code to test the property phase2DHGroupNumbers
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase2EncryptionAlgorithms (base name: "Phase2EncryptionAlgorithms")', function() {
      // uncomment below and update the code to test the property phase2EncryptionAlgorithms
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase2IntegrityAlgorithms (base name: "Phase2IntegrityAlgorithms")', function() {
      // uncomment below and update the code to test the property phase2IntegrityAlgorithms
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property phase2LifetimeSeconds (base name: "Phase2LifetimeSeconds")', function() {
      // uncomment below and update the code to test the property phase2LifetimeSeconds
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property preSharedKey (base name: "PreSharedKey")', function() {
      // uncomment below and update the code to test the property preSharedKey
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property rekeyFuzzPercentage (base name: "RekeyFuzzPercentage")', function() {
      // uncomment below and update the code to test the property rekeyFuzzPercentage
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property rekeyMarginTimeSeconds (base name: "RekeyMarginTimeSeconds")', function() {
      // uncomment below and update the code to test the property rekeyMarginTimeSeconds
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property replayWindowSize (base name: "ReplayWindowSize")', function() {
      // uncomment below and update the code to test the property replayWindowSize
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

    it('should have the property tunnelInsideCidr (base name: "TunnelInsideCidr")', function() {
      // uncomment below and update the code to test the property tunnelInsideCidr
      //var instane = new AmazonEc2.VpnTunnelOptionsSpecification();
      //expect(instance).to.be();
    });

  });

}));
