/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.Host();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Host', function() {
    it('should create an instance of Host', function() {
      // uncomment below and update the code to test Host
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be.a(AmazonEc2.Host);
    });

    it('should have the property allocationTime (base name: "AllocationTime")', function() {
      // uncomment below and update the code to test the property allocationTime
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property allowsMultipleInstanceTypes (base name: "AllowsMultipleInstanceTypes")', function() {
      // uncomment below and update the code to test the property allowsMultipleInstanceTypes
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property autoPlacement (base name: "AutoPlacement")', function() {
      // uncomment below and update the code to test the property autoPlacement
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZone (base name: "AvailabilityZone")', function() {
      // uncomment below and update the code to test the property availabilityZone
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZoneId (base name: "AvailabilityZoneId")', function() {
      // uncomment below and update the code to test the property availabilityZoneId
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property availableCapacity (base name: "AvailableCapacity")', function() {
      // uncomment below and update the code to test the property availableCapacity
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "ClientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property hostId (base name: "HostId")', function() {
      // uncomment below and update the code to test the property hostId
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property hostProperties (base name: "HostProperties")', function() {
      // uncomment below and update the code to test the property hostProperties
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property hostRecovery (base name: "HostRecovery")', function() {
      // uncomment below and update the code to test the property hostRecovery
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property hostReservationId (base name: "HostReservationId")', function() {
      // uncomment below and update the code to test the property hostReservationId
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property instances (base name: "Instances")', function() {
      // uncomment below and update the code to test the property instances
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property memberOfServiceLinkedResourceGroup (base name: "MemberOfServiceLinkedResourceGroup")', function() {
      // uncomment below and update the code to test the property memberOfServiceLinkedResourceGroup
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "OwnerId")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property releaseTime (base name: "ReleaseTime")', function() {
      // uncomment below and update the code to test the property releaseTime
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new AmazonEc2.Host();
      //expect(instance).to.be();
    });

  });

}));
