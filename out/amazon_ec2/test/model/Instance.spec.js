/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.Instance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Instance', function() {
    it('should create an instance of Instance', function() {
      // uncomment below and update the code to test Instance
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be.a(AmazonEc2.Instance);
    });

    it('should have the property amiLaunchIndex (base name: "AmiLaunchIndex")', function() {
      // uncomment below and update the code to test the property amiLaunchIndex
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property architecture (base name: "Architecture")', function() {
      // uncomment below and update the code to test the property architecture
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property blockDeviceMappings (base name: "BlockDeviceMappings")', function() {
      // uncomment below and update the code to test the property blockDeviceMappings
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property capacityReservationId (base name: "CapacityReservationId")', function() {
      // uncomment below and update the code to test the property capacityReservationId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property capacityReservationSpecification (base name: "CapacityReservationSpecification")', function() {
      // uncomment below and update the code to test the property capacityReservationSpecification
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "ClientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property cpuOptions (base name: "CpuOptions")', function() {
      // uncomment below and update the code to test the property cpuOptions
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property ebsOptimized (base name: "EbsOptimized")', function() {
      // uncomment below and update the code to test the property ebsOptimized
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property elasticGpuAssociations (base name: "ElasticGpuAssociations")', function() {
      // uncomment below and update the code to test the property elasticGpuAssociations
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property elasticInferenceAcceleratorAssociations (base name: "ElasticInferenceAcceleratorAssociations")', function() {
      // uncomment below and update the code to test the property elasticInferenceAcceleratorAssociations
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property enaSupport (base name: "EnaSupport")', function() {
      // uncomment below and update the code to test the property enaSupport
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property hibernationOptions (base name: "HibernationOptions")', function() {
      // uncomment below and update the code to test the property hibernationOptions
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property hypervisor (base name: "Hypervisor")', function() {
      // uncomment below and update the code to test the property hypervisor
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property iamInstanceProfile (base name: "IamInstanceProfile")', function() {
      // uncomment below and update the code to test the property iamInstanceProfile
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property imageId (base name: "ImageId")', function() {
      // uncomment below and update the code to test the property imageId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceId (base name: "InstanceId")', function() {
      // uncomment below and update the code to test the property instanceId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceLifecycle (base name: "InstanceLifecycle")', function() {
      // uncomment below and update the code to test the property instanceLifecycle
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "InstanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property kernelId (base name: "KernelId")', function() {
      // uncomment below and update the code to test the property kernelId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property keyName (base name: "KeyName")', function() {
      // uncomment below and update the code to test the property keyName
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property launchTime (base name: "LaunchTime")', function() {
      // uncomment below and update the code to test the property launchTime
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property licenses (base name: "Licenses")', function() {
      // uncomment below and update the code to test the property licenses
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property metadataOptions (base name: "MetadataOptions")', function() {
      // uncomment below and update the code to test the property metadataOptions
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property monitoring (base name: "Monitoring")', function() {
      // uncomment below and update the code to test the property monitoring
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaces (base name: "NetworkInterfaces")', function() {
      // uncomment below and update the code to test the property networkInterfaces
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property outpostArn (base name: "OutpostArn")', function() {
      // uncomment below and update the code to test the property outpostArn
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property placement (base name: "Placement")', function() {
      // uncomment below and update the code to test the property placement
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property platform (base name: "Platform")', function() {
      // uncomment below and update the code to test the property platform
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property privateDnsName (base name: "PrivateDnsName")', function() {
      // uncomment below and update the code to test the property privateDnsName
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property privateIpAddress (base name: "PrivateIpAddress")', function() {
      // uncomment below and update the code to test the property privateIpAddress
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property productCodes (base name: "ProductCodes")', function() {
      // uncomment below and update the code to test the property productCodes
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property publicDnsName (base name: "PublicDnsName")', function() {
      // uncomment below and update the code to test the property publicDnsName
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property publicIpAddress (base name: "PublicIpAddress")', function() {
      // uncomment below and update the code to test the property publicIpAddress
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property ramdiskId (base name: "RamdiskId")', function() {
      // uncomment below and update the code to test the property ramdiskId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property rootDeviceName (base name: "RootDeviceName")', function() {
      // uncomment below and update the code to test the property rootDeviceName
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property rootDeviceType (base name: "RootDeviceType")', function() {
      // uncomment below and update the code to test the property rootDeviceType
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property securityGroups (base name: "SecurityGroups")', function() {
      // uncomment below and update the code to test the property securityGroups
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property sourceDestCheck (base name: "SourceDestCheck")', function() {
      // uncomment below and update the code to test the property sourceDestCheck
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property spotInstanceRequestId (base name: "SpotInstanceRequestId")', function() {
      // uncomment below and update the code to test the property spotInstanceRequestId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property sriovNetSupport (base name: "SriovNetSupport")', function() {
      // uncomment below and update the code to test the property sriovNetSupport
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property stateReason (base name: "StateReason")', function() {
      // uncomment below and update the code to test the property stateReason
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property stateTransitionReason (base name: "StateTransitionReason")', function() {
      // uncomment below and update the code to test the property stateTransitionReason
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property subnetId (base name: "SubnetId")', function() {
      // uncomment below and update the code to test the property subnetId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property virtualizationType (base name: "VirtualizationType")', function() {
      // uncomment below and update the code to test the property virtualizationType
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

    it('should have the property vpcId (base name: "VpcId")', function() {
      // uncomment below and update the code to test the property vpcId
      //var instane = new AmazonEc2.Instance();
      //expect(instance).to.be();
    });

  });

}));
