/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.ClientVpnConnection();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ClientVpnConnection', function() {
    it('should create an instance of ClientVpnConnection', function() {
      // uncomment below and update the code to test ClientVpnConnection
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be.a(AmazonEc2.ClientVpnConnection);
    });

    it('should have the property clientIp (base name: "ClientIp")', function() {
      // uncomment below and update the code to test the property clientIp
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property clientVpnEndpointId (base name: "ClientVpnEndpointId")', function() {
      // uncomment below and update the code to test the property clientVpnEndpointId
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property commonName (base name: "CommonName")', function() {
      // uncomment below and update the code to test the property commonName
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property connectionEndTime (base name: "ConnectionEndTime")', function() {
      // uncomment below and update the code to test the property connectionEndTime
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property connectionEstablishedTime (base name: "ConnectionEstablishedTime")', function() {
      // uncomment below and update the code to test the property connectionEstablishedTime
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property connectionId (base name: "ConnectionId")', function() {
      // uncomment below and update the code to test the property connectionId
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property egressBytes (base name: "EgressBytes")', function() {
      // uncomment below and update the code to test the property egressBytes
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property egressPackets (base name: "EgressPackets")', function() {
      // uncomment below and update the code to test the property egressPackets
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property ingressBytes (base name: "IngressBytes")', function() {
      // uncomment below and update the code to test the property ingressBytes
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property ingressPackets (base name: "IngressPackets")', function() {
      // uncomment below and update the code to test the property ingressPackets
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "Timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

    it('should have the property username (base name: "Username")', function() {
      // uncomment below and update the code to test the property username
      //var instane = new AmazonEc2.ClientVpnConnection();
      //expect(instance).to.be();
    });

  });

}));
