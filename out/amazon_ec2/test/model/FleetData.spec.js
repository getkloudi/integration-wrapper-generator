/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.FleetData();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FleetData', function() {
    it('should create an instance of FleetData', function() {
      // uncomment below and update the code to test FleetData
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be.a(AmazonEc2.FleetData);
    });

    it('should have the property activityStatus (base name: "ActivityStatus")', function() {
      // uncomment below and update the code to test the property activityStatus
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property clientToken (base name: "ClientToken")', function() {
      // uncomment below and update the code to test the property clientToken
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "CreateTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property errors (base name: "Errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property excessCapacityTerminationPolicy (base name: "ExcessCapacityTerminationPolicy")', function() {
      // uncomment below and update the code to test the property excessCapacityTerminationPolicy
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property fleetId (base name: "FleetId")', function() {
      // uncomment below and update the code to test the property fleetId
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property fleetState (base name: "FleetState")', function() {
      // uncomment below and update the code to test the property fleetState
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property fulfilledCapacity (base name: "FulfilledCapacity")', function() {
      // uncomment below and update the code to test the property fulfilledCapacity
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property fulfilledOnDemandCapacity (base name: "FulfilledOnDemandCapacity")', function() {
      // uncomment below and update the code to test the property fulfilledOnDemandCapacity
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property instances (base name: "Instances")', function() {
      // uncomment below and update the code to test the property instances
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property launchTemplateConfigs (base name: "LaunchTemplateConfigs")', function() {
      // uncomment below and update the code to test the property launchTemplateConfigs
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property onDemandOptions (base name: "OnDemandOptions")', function() {
      // uncomment below and update the code to test the property onDemandOptions
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property replaceUnhealthyInstances (base name: "ReplaceUnhealthyInstances")', function() {
      // uncomment below and update the code to test the property replaceUnhealthyInstances
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property spotOptions (base name: "SpotOptions")', function() {
      // uncomment below and update the code to test the property spotOptions
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property targetCapacitySpecification (base name: "TargetCapacitySpecification")', function() {
      // uncomment below and update the code to test the property targetCapacitySpecification
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property terminateInstancesWithExpiration (base name: "TerminateInstancesWithExpiration")', function() {
      // uncomment below and update the code to test the property terminateInstancesWithExpiration
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "Type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property validFrom (base name: "ValidFrom")', function() {
      // uncomment below and update the code to test the property validFrom
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

    it('should have the property validUntil (base name: "ValidUntil")', function() {
      // uncomment below and update the code to test the property validUntil
      //var instane = new AmazonEc2.FleetData();
      //expect(instance).to.be();
    });

  });

}));
