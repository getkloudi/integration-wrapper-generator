/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.InstanceTypeInfo();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstanceTypeInfo', function() {
    it('should create an instance of InstanceTypeInfo', function() {
      // uncomment below and update the code to test InstanceTypeInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be.a(AmazonEc2.InstanceTypeInfo);
    });

    it('should have the property autoRecoverySupported (base name: "AutoRecoverySupported")', function() {
      // uncomment below and update the code to test the property autoRecoverySupported
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property bareMetal (base name: "BareMetal")', function() {
      // uncomment below and update the code to test the property bareMetal
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property burstablePerformanceSupported (base name: "BurstablePerformanceSupported")', function() {
      // uncomment below and update the code to test the property burstablePerformanceSupported
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property currentGeneration (base name: "CurrentGeneration")', function() {
      // uncomment below and update the code to test the property currentGeneration
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property dedicatedHostsSupported (base name: "DedicatedHostsSupported")', function() {
      // uncomment below and update the code to test the property dedicatedHostsSupported
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property ebsInfo (base name: "EbsInfo")', function() {
      // uncomment below and update the code to test the property ebsInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property fpgaInfo (base name: "FpgaInfo")', function() {
      // uncomment below and update the code to test the property fpgaInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property freeTierEligible (base name: "FreeTierEligible")', function() {
      // uncomment below and update the code to test the property freeTierEligible
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property gpuInfo (base name: "GpuInfo")', function() {
      // uncomment below and update the code to test the property gpuInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property hibernationSupported (base name: "HibernationSupported")', function() {
      // uncomment below and update the code to test the property hibernationSupported
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property hypervisor (base name: "Hypervisor")', function() {
      // uncomment below and update the code to test the property hypervisor
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property inferenceAcceleratorInfo (base name: "InferenceAcceleratorInfo")', function() {
      // uncomment below and update the code to test the property inferenceAcceleratorInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property instanceStorageInfo (base name: "InstanceStorageInfo")', function() {
      // uncomment below and update the code to test the property instanceStorageInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property instanceStorageSupported (base name: "InstanceStorageSupported")', function() {
      // uncomment below and update the code to test the property instanceStorageSupported
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "InstanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property memoryInfo (base name: "MemoryInfo")', function() {
      // uncomment below and update the code to test the property memoryInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property networkInfo (base name: "NetworkInfo")', function() {
      // uncomment below and update the code to test the property networkInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property placementGroupInfo (base name: "PlacementGroupInfo")', function() {
      // uncomment below and update the code to test the property placementGroupInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property processorInfo (base name: "ProcessorInfo")', function() {
      // uncomment below and update the code to test the property processorInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportedRootDeviceTypes (base name: "SupportedRootDeviceTypes")', function() {
      // uncomment below and update the code to test the property supportedRootDeviceTypes
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property supportedUsageClasses (base name: "SupportedUsageClasses")', function() {
      // uncomment below and update the code to test the property supportedUsageClasses
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

    it('should have the property vCpuInfo (base name: "VCpuInfo")', function() {
      // uncomment below and update the code to test the property vCpuInfo
      //var instane = new AmazonEc2.InstanceTypeInfo();
      //expect(instance).to.be();
    });

  });

}));
