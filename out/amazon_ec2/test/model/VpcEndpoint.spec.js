/**
 * Amazon Elastic Compute Cloud
 * <fullname>Amazon Elastic Compute Cloud</fullname> <p>Amazon Elastic Compute Cloud (Amazon EC2) provides secure and resizable computing capacity in the AWS cloud. Using Amazon EC2 eliminates the need to invest in hardware up front, so you can develop and deploy applications faster.</p> <p>To learn more, see the following resources:</p> <ul> <li> <p>Amazon EC2: <a href=\"http://aws.amazon.com/ec2\">AmazonEC2 product page</a>, <a href=\"http://aws.amazon.com/documentation/ec2\">Amazon EC2 documentation</a> </p> </li> <li> <p>Amazon EBS: <a href=\"http://aws.amazon.com/ebs\">Amazon EBS product page</a>, <a href=\"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AmazonEBS.html\">Amazon EBS documentation</a> </p> </li> <li> <p>Amazon VPC: <a href=\"http://aws.amazon.com/vpc\">Amazon VPC product page</a>, <a href=\"http://aws.amazon.com/documentation/vpc\">Amazon VPC documentation</a> </p> </li> <li> <p>AWS VPN: <a href=\"http://aws.amazon.com/vpn\">AWS VPN product page</a>, <a href=\"http://aws.amazon.com/documentation/vpn\">AWS VPN documentation</a> </p> </li> </ul>
 *
 * The version of the OpenAPI document: 2016-11-15
 * Contact: mike.ralphson@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AmazonEc2);
  }
}(this, function(expect, AmazonEc2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AmazonEc2.VpcEndpoint();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VpcEndpoint', function() {
    it('should create an instance of VpcEndpoint', function() {
      // uncomment below and update the code to test VpcEndpoint
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be.a(AmazonEc2.VpcEndpoint);
    });

    it('should have the property creationTimestamp (base name: "CreationTimestamp")', function() {
      // uncomment below and update the code to test the property creationTimestamp
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property dnsEntries (base name: "DnsEntries")', function() {
      // uncomment below and update the code to test the property dnsEntries
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property groups (base name: "Groups")', function() {
      // uncomment below and update the code to test the property groups
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property networkInterfaceIds (base name: "NetworkInterfaceIds")', function() {
      // uncomment below and update the code to test the property networkInterfaceIds
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "OwnerId")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property policyDocument (base name: "PolicyDocument")', function() {
      // uncomment below and update the code to test the property policyDocument
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property privateDnsEnabled (base name: "PrivateDnsEnabled")', function() {
      // uncomment below and update the code to test the property privateDnsEnabled
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property requesterManaged (base name: "RequesterManaged")', function() {
      // uncomment below and update the code to test the property requesterManaged
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property routeTableIds (base name: "RouteTableIds")', function() {
      // uncomment below and update the code to test the property routeTableIds
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "ServiceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "State")', function() {
      // uncomment below and update the code to test the property state
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property subnetIds (base name: "SubnetIds")', function() {
      // uncomment below and update the code to test the property subnetIds
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "Tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property vpcEndpointId (base name: "VpcEndpointId")', function() {
      // uncomment below and update the code to test the property vpcEndpointId
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property vpcEndpointType (base name: "VpcEndpointType")', function() {
      // uncomment below and update the code to test the property vpcEndpointType
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

    it('should have the property vpcId (base name: "VpcId")', function() {
      // uncomment below and update the code to test the property vpcId
      //var instane = new AmazonEc2.VpcEndpoint();
      //expect(instance).to.be();
    });

  });

}));
