/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RemoteIssueLink from '../model/RemoteIssueLink';
import RemoteIssueLinkIdentifies from '../model/RemoteIssueLinkIdentifies';
import RemoteIssueLinkRequest from '../model/RemoteIssueLinkRequest';

/**
* IssueRemoteLinks service.
* @module api/IssueRemoteLinksApi
* @version 1.4.0
*/
export default class IssueRemoteLinksApi {

    /**
    * Constructs a new IssueRemoteLinksApi. 
    * @alias module:api/IssueRemoteLinksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkDelete operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete remote issue link by global ID
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} globalId The global ID of a remote issue link.
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueIssueIdOrKeyRemotelinkDelete(cloudid, issueIdOrKey, globalId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkDelete");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkDelete");
      }
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling issueIssueIdOrKeyRemotelinkDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': globalId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkGet operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get remote issue links
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.globalId The global ID of the remote issue link.
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLink}
     */
    issueIssueIdOrKeyRemotelinkGet(cloudid, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLink;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkLinkIdDelete operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete remote issue link by ID
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of a remote issue link.
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueIssueIdOrKeyRemotelinkLinkIdDelete(cloudid, issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkLinkIdDelete");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkLinkIdDelete");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling issueIssueIdOrKeyRemotelinkLinkIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkLinkIdGet operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLink} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get remote issue link by ID
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLink}
     */
    issueIssueIdOrKeyRemotelinkLinkIdGet(cloudid, issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkLinkIdGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkLinkIdGet");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling issueIssueIdOrKeyRemotelinkLinkIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLink;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkLinkIdPut operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update remote issue link by ID
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {module:model/RemoteIssueLinkRequest} body 
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkLinkIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    issueIssueIdOrKeyRemotelinkLinkIdPut(cloudid, issueIdOrKey, linkId, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkLinkIdPut");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkLinkIdPut");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling issueIssueIdOrKeyRemotelinkLinkIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issueIssueIdOrKeyRemotelinkLinkIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink/{linkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyRemotelinkPost operation.
     * @callback module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoteIssueLinkIdentifies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update remote issue link
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:model/RemoteIssueLinkRequest} body 
     * @param {module:api/IssueRemoteLinksApi~issueIssueIdOrKeyRemotelinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoteIssueLinkIdentifies}
     */
    issueIssueIdOrKeyRemotelinkPost(cloudid, issueIdOrKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyRemotelinkPost");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyRemotelinkPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issueIssueIdOrKeyRemotelinkPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RemoteIssueLinkIdentifies;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
