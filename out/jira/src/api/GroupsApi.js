/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddGroupBean from '../model/AddGroupBean';
import FoundGroups from '../model/FoundGroups';
import Group from '../model/Group';
import PageBeanUserDetails from '../model/PageBeanUserDetails';
import UpdateUserToGroupBean from '../model/UpdateUserToGroupBean';

/**
* Groups service.
* @module api/GroupsApi
* @version 1.4.0
*/
export default class GroupsApi {

    /**
    * Constructs a new GroupsApi. 
    * @alias module:api/GroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupDelete operation.
     * @callback module:api/GroupsApi~groupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove group
     * @param {Object} cloudid Cloudi of the project
     * @param {String} groupname The name of the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.swapGroup The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion.
     * @param {module:api/GroupsApi~groupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupDelete(cloudid, groupname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupDelete");
      }
      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling groupDelete");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'groupname': groupname,
        'swapGroup': opts['swapGroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/group', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupGet operation.
     * @callback module:api/GroupsApi~groupGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get group
     * @param {Object} cloudid Cloudi of the project
     * @param {String} groupname The name of the group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand List of fields to expand.
     * @param {module:api/GroupsApi~groupGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupGet(cloudid, groupname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupGet");
      }
      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling groupGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'groupname': groupname,
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupMemberGet operation.
     * @callback module:api/GroupsApi~groupMemberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanUserDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users from group
     * @param {Object} cloudid Cloudi of the project
     * @param {String} groupname The name of the group.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeInactiveUsers Include inactive users. (default to false)
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 50)
     * @param {module:api/GroupsApi~groupMemberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanUserDetails}
     */
    groupMemberGet(cloudid, groupname, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupMemberGet");
      }
      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling groupMemberGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'groupname': groupname,
        'includeInactiveUsers': opts['includeInactiveUsers'],
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanUserDetails;
      return this.apiClient.callApi(
        '/group/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupPost operation.
     * @callback module:api/GroupsApi~groupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create group
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/AddGroupBean} body The name of the group.
     * @param {module:api/GroupsApi~groupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupUserDelete operation.
     * @callback module:api/GroupsApi~groupUserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from group
     * @param {Object} cloudid Cloudi of the project
     * @param {String} groupname The name of the group.
     * @param {String} accountId The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
     * @param {Object} opts Optional parameters
     * @param {String} opts.username This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param {module:api/GroupsApi~groupUserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    groupUserDelete(cloudid, groupname, accountId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupUserDelete");
      }
      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling groupUserDelete");
      }
      // verify the required parameter 'accountId' is set
      if (accountId === undefined || accountId === null) {
        throw new Error("Missing the required parameter 'accountId' when calling groupUserDelete");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'groupname': groupname,
        'username': opts['username'],
        'accountId': accountId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/group/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupUserPost operation.
     * @callback module:api/GroupsApi~groupUserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Group} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to group
     * @param {Object} cloudid Cloudi of the project
     * @param {String} groupname The name of the group (case sensitive).
     * @param {module:model/UpdateUserToGroupBean} body The user to add to the group.
     * @param {module:api/GroupsApi~groupUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Group}
     */
    groupUserPost(cloudid, groupname, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupUserPost");
      }
      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling groupUserPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling groupUserPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'groupname': groupname
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Group;
      return this.apiClient.callApi(
        '/group/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the groupsPickerGet operation.
     * @callback module:api/GroupsApi~groupsPickerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoundGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find groups
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).
     * @param {String} opts.query The string to find in group names.
     * @param {Array.<String>} opts.exclude A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`.
     * @param {Number} opts.maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
     * @param {String} opts.userName This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
     * @param {module:api/GroupsApi~groupsPickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoundGroups}
     */
    groupsPickerGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupsPickerGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'query': opts['query'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'multi'),
        'maxResults': opts['maxResults'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FoundGroups;
      return this.apiClient.callApi(
        '/groups/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
