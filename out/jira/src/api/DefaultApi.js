/**
 * Jira
 * The Jira Cloud Platform REST API
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloudidRestApi3FilterIdPermissionProject from '../model/CloudidRestApi3FilterIdPermissionProject';
import CloudidRestApi3FilterIdPermissionProjectProjectCategory from '../model/CloudidRestApi3FilterIdPermissionProjectProjectCategory';
import CloudidRestApi3FilterIdPermissionRole from '../model/CloudidRestApi3FilterIdPermissionRole';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject10 from '../model/InlineObject10';
import InlineObject11 from '../model/InlineObject11';
import InlineObject12 from '../model/InlineObject12';
import InlineObject13 from '../model/InlineObject13';
import InlineObject14 from '../model/InlineObject14';
import InlineObject15 from '../model/InlineObject15';
import InlineObject16 from '../model/InlineObject16';
import InlineObject17 from '../model/InlineObject17';
import InlineObject18 from '../model/InlineObject18';
import InlineObject19 from '../model/InlineObject19';
import InlineObject2 from '../model/InlineObject2';
import InlineObject20 from '../model/InlineObject20';
import InlineObject21 from '../model/InlineObject21';
import InlineObject22 from '../model/InlineObject22';
import InlineObject23 from '../model/InlineObject23';
import InlineObject24 from '../model/InlineObject24';
import InlineObject25 from '../model/InlineObject25';
import InlineObject26 from '../model/InlineObject26';
import InlineObject27 from '../model/InlineObject27';
import InlineObject28 from '../model/InlineObject28';
import InlineObject29 from '../model/InlineObject29';
import InlineObject3 from '../model/InlineObject3';
import InlineObject30 from '../model/InlineObject30';
import InlineObject31 from '../model/InlineObject31';
import InlineObject32 from '../model/InlineObject32';
import InlineObject33 from '../model/InlineObject33';
import InlineObject34 from '../model/InlineObject34';
import InlineObject35 from '../model/InlineObject35';
import InlineObject36 from '../model/InlineObject36';
import InlineObject37 from '../model/InlineObject37';
import InlineObject38 from '../model/InlineObject38';
import InlineObject39 from '../model/InlineObject39';
import InlineObject4 from '../model/InlineObject4';
import InlineObject40 from '../model/InlineObject40';
import InlineObject41 from '../model/InlineObject41';
import InlineObject42 from '../model/InlineObject42';
import InlineObject43 from '../model/InlineObject43';
import InlineObject44 from '../model/InlineObject44';
import InlineObject45 from '../model/InlineObject45';
import InlineObject46 from '../model/InlineObject46';
import InlineObject47 from '../model/InlineObject47';
import InlineObject48 from '../model/InlineObject48';
import InlineObject49 from '../model/InlineObject49';
import InlineObject5 from '../model/InlineObject5';
import InlineObject50 from '../model/InlineObject50';
import InlineObject51 from '../model/InlineObject51';
import InlineObject52 from '../model/InlineObject52';
import InlineObject53 from '../model/InlineObject53';
import InlineObject54 from '../model/InlineObject54';
import InlineObject55 from '../model/InlineObject55';
import InlineObject56 from '../model/InlineObject56';
import InlineObject57 from '../model/InlineObject57';
import InlineObject58 from '../model/InlineObject58';
import InlineObject59 from '../model/InlineObject59';
import InlineObject6 from '../model/InlineObject6';
import InlineObject60 from '../model/InlineObject60';
import InlineObject61 from '../model/InlineObject61';
import InlineObject62 from '../model/InlineObject62';
import InlineObject63 from '../model/InlineObject63';
import InlineObject64 from '../model/InlineObject64';
import InlineObject65 from '../model/InlineObject65';
import InlineObject66 from '../model/InlineObject66';
import InlineObject67 from '../model/InlineObject67';
import InlineObject68 from '../model/InlineObject68';
import InlineObject69 from '../model/InlineObject69';
import InlineObject7 from '../model/InlineObject7';
import InlineObject70 from '../model/InlineObject70';
import InlineObject71 from '../model/InlineObject71';
import InlineObject72 from '../model/InlineObject72';
import InlineObject73 from '../model/InlineObject73';
import InlineObject74 from '../model/InlineObject74';
import InlineObject8 from '../model/InlineObject8';
import InlineObject9 from '../model/InlineObject9';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import InlineResponse20010 from '../model/InlineResponse20010';
import InlineResponse200100 from '../model/InlineResponse200100';
import InlineResponse200101 from '../model/InlineResponse200101';
import InlineResponse200102 from '../model/InlineResponse200102';
import InlineResponse200103 from '../model/InlineResponse200103';
import InlineResponse200104 from '../model/InlineResponse200104';
import InlineResponse200105 from '../model/InlineResponse200105';
import InlineResponse200106 from '../model/InlineResponse200106';
import InlineResponse200107 from '../model/InlineResponse200107';
import InlineResponse20011 from '../model/InlineResponse20011';
import InlineResponse20012 from '../model/InlineResponse20012';
import InlineResponse20013 from '../model/InlineResponse20013';
import InlineResponse20014 from '../model/InlineResponse20014';
import InlineResponse20015 from '../model/InlineResponse20015';
import InlineResponse20016 from '../model/InlineResponse20016';
import InlineResponse20017 from '../model/InlineResponse20017';
import InlineResponse20018 from '../model/InlineResponse20018';
import InlineResponse20019 from '../model/InlineResponse20019';
import InlineResponse2002 from '../model/InlineResponse2002';
import InlineResponse20020 from '../model/InlineResponse20020';
import InlineResponse20021 from '../model/InlineResponse20021';
import InlineResponse20022 from '../model/InlineResponse20022';
import InlineResponse20023 from '../model/InlineResponse20023';
import InlineResponse20024 from '../model/InlineResponse20024';
import InlineResponse20025 from '../model/InlineResponse20025';
import InlineResponse20026 from '../model/InlineResponse20026';
import InlineResponse20027 from '../model/InlineResponse20027';
import InlineResponse20028 from '../model/InlineResponse20028';
import InlineResponse20029 from '../model/InlineResponse20029';
import InlineResponse2003 from '../model/InlineResponse2003';
import InlineResponse20030 from '../model/InlineResponse20030';
import InlineResponse20031 from '../model/InlineResponse20031';
import InlineResponse20032 from '../model/InlineResponse20032';
import InlineResponse20033 from '../model/InlineResponse20033';
import InlineResponse20034 from '../model/InlineResponse20034';
import InlineResponse20035 from '../model/InlineResponse20035';
import InlineResponse20036 from '../model/InlineResponse20036';
import InlineResponse20037 from '../model/InlineResponse20037';
import InlineResponse20038 from '../model/InlineResponse20038';
import InlineResponse20039 from '../model/InlineResponse20039';
import InlineResponse2004 from '../model/InlineResponse2004';
import InlineResponse20040 from '../model/InlineResponse20040';
import InlineResponse20041 from '../model/InlineResponse20041';
import InlineResponse20042 from '../model/InlineResponse20042';
import InlineResponse20043 from '../model/InlineResponse20043';
import InlineResponse20044 from '../model/InlineResponse20044';
import InlineResponse20045 from '../model/InlineResponse20045';
import InlineResponse20045To from '../model/InlineResponse20045To';
import InlineResponse20045ToStatusCategory from '../model/InlineResponse20045ToStatusCategory';
import InlineResponse20046 from '../model/InlineResponse20046';
import InlineResponse20047 from '../model/InlineResponse20047';
import InlineResponse20048 from '../model/InlineResponse20048';
import InlineResponse20049 from '../model/InlineResponse20049';
import InlineResponse2004Author from '../model/InlineResponse2004Author';
import InlineResponse2005 from '../model/InlineResponse2005';
import InlineResponse20050 from '../model/InlineResponse20050';
import InlineResponse20050InwardIssueFieldsIssuetype from '../model/InlineResponse20050InwardIssueFieldsIssuetype';
import InlineResponse20050InwardIssueFieldsPriority from '../model/InlineResponse20050InwardIssueFieldsPriority';
import InlineResponse20051 from '../model/InlineResponse20051';
import InlineResponse20052 from '../model/InlineResponse20052';
import InlineResponse20053 from '../model/InlineResponse20053';
import InlineResponse20054 from '../model/InlineResponse20054';
import InlineResponse20055 from '../model/InlineResponse20055';
import InlineResponse20056 from '../model/InlineResponse20056';
import InlineResponse20057 from '../model/InlineResponse20057';
import InlineResponse20058 from '../model/InlineResponse20058';
import InlineResponse20059 from '../model/InlineResponse20059';
import InlineResponse2006 from '../model/InlineResponse2006';
import InlineResponse20060 from '../model/InlineResponse20060';
import InlineResponse20061 from '../model/InlineResponse20061';
import InlineResponse20062 from '../model/InlineResponse20062';
import InlineResponse20063 from '../model/InlineResponse20063';
import InlineResponse20064 from '../model/InlineResponse20064';
import InlineResponse20065 from '../model/InlineResponse20065';
import InlineResponse20066 from '../model/InlineResponse20066';
import InlineResponse20067 from '../model/InlineResponse20067';
import InlineResponse20068 from '../model/InlineResponse20068';
import InlineResponse20069 from '../model/InlineResponse20069';
import InlineResponse2007 from '../model/InlineResponse2007';
import InlineResponse20070 from '../model/InlineResponse20070';
import InlineResponse20071 from '../model/InlineResponse20071';
import InlineResponse20072 from '../model/InlineResponse20072';
import InlineResponse20073 from '../model/InlineResponse20073';
import InlineResponse20074 from '../model/InlineResponse20074';
import InlineResponse20075 from '../model/InlineResponse20075';
import InlineResponse20076 from '../model/InlineResponse20076';
import InlineResponse20077 from '../model/InlineResponse20077';
import InlineResponse20078 from '../model/InlineResponse20078';
import InlineResponse20078Values from '../model/InlineResponse20078Values';
import InlineResponse20079 from '../model/InlineResponse20079';
import InlineResponse2008 from '../model/InlineResponse2008';
import InlineResponse20080 from '../model/InlineResponse20080';
import InlineResponse20081 from '../model/InlineResponse20081';
import InlineResponse20082 from '../model/InlineResponse20082';
import InlineResponse20083 from '../model/InlineResponse20083';
import InlineResponse20084 from '../model/InlineResponse20084';
import InlineResponse20085 from '../model/InlineResponse20085';
import InlineResponse20086 from '../model/InlineResponse20086';
import InlineResponse20087 from '../model/InlineResponse20087';
import InlineResponse20088 from '../model/InlineResponse20088';
import InlineResponse20089 from '../model/InlineResponse20089';
import InlineResponse2009 from '../model/InlineResponse2009';
import InlineResponse20090 from '../model/InlineResponse20090';
import InlineResponse20091 from '../model/InlineResponse20091';
import InlineResponse20092 from '../model/InlineResponse20092';
import InlineResponse20093 from '../model/InlineResponse20093';
import InlineResponse20094 from '../model/InlineResponse20094';
import InlineResponse20095 from '../model/InlineResponse20095';
import InlineResponse20096 from '../model/InlineResponse20096';
import InlineResponse20097 from '../model/InlineResponse20097';
import InlineResponse20098 from '../model/InlineResponse20098';
import InlineResponse20099 from '../model/InlineResponse20099';
import InlineResponse201 from '../model/InlineResponse201';
import InlineResponse2011 from '../model/InlineResponse2011';
import InlineResponse20110 from '../model/InlineResponse20110';
import InlineResponse20111 from '../model/InlineResponse20111';
import InlineResponse20112 from '../model/InlineResponse20112';
import InlineResponse20113 from '../model/InlineResponse20113';
import InlineResponse20114 from '../model/InlineResponse20114';
import InlineResponse20115 from '../model/InlineResponse20115';
import InlineResponse2012 from '../model/InlineResponse2012';
import InlineResponse2013 from '../model/InlineResponse2013';
import InlineResponse2014 from '../model/InlineResponse2014';
import InlineResponse2015 from '../model/InlineResponse2015';
import InlineResponse2016 from '../model/InlineResponse2016';
import InlineResponse2017 from '../model/InlineResponse2017';
import InlineResponse2018 from '../model/InlineResponse2018';
import InlineResponse2019 from '../model/InlineResponse2019';
import InlineResponse303 from '../model/InlineResponse303';

/**
* Default service.
* @module api/DefaultApi
* @version 1.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cloudidRestApi3ApplicationPropertiesAdvancedSettingsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesAdvancedSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the application properties that are accessible on the Advanced Settings page. To navigate to the Advanced Settings page in Jira, choose the Jira icon > Jira settings > System, General Configuration and then click Advanced Settings (in the upper right).
     * @param {module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesAdvancedSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    cloudidRestApi3ApplicationPropertiesAdvancedSettingsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/application-properties/advanced-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ApplicationPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all application properties or a single application property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the application property.
     * @param {String} opts.keyFilter When a key isn't provided, this filters the list of results by the application property key using a regular expression. For example, using jira.lf.* will return all application properties with keys that start with jira.lf..
     * @param {String} opts.permissionLevel The permission level of all items being returned in the list.
     * @param {module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200>}
     */
    cloudidRestApi3ApplicationPropertiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key'],
        'keyFilter': opts['keyFilter'],
        'permissionLevel': opts['permissionLevel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/application-properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ApplicationPropertiesIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the value of an application property. For example, you can change the value of the jira.clone.prefix from its default value of CLONE - to Clone - if you prefer sentence case capitalization. Editable properties are described below along with their default values.
     * @param {String} id The key of the application property to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ApplicationPropertiesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ApplicationPropertiesIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ApplicationPropertiesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/application-properties/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ApplicationroleGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ApplicationroleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all application roles. In Jira, application roles are managed using the Application access configuration page.
     * @param {module:api/DefaultApi~cloudidRestApi3ApplicationroleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    cloudidRestApi3ApplicationroleGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/applicationrole', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ApplicationroleKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ApplicationroleKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an application role.
     * @param {String} key The key of the application role. Use the Get all application roles method to get the key for each application role.
     * @param {module:api/DefaultApi~cloudidRestApi3ApplicationroleKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    cloudidRestApi3ApplicationroleKeyGet(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cloudidRestApi3ApplicationroleKeyGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/applicationrole/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AttachmentIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AttachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an attachment from an issue.
     * @param {String} id The ID of the attachment.
     * @param {module:api/DefaultApi~cloudidRestApi3AttachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3AttachmentIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3AttachmentIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/attachment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AttachmentIdExpandHumanGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AttachmentIdExpandHumanGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
     * @param {String} id The ID of the attachment.
     * @param {module:api/DefaultApi~cloudidRestApi3AttachmentIdExpandHumanGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    cloudidRestApi3AttachmentIdExpandHumanGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3AttachmentIdExpandHumanGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2005;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/attachment/{id}/expand/human', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AttachmentIdExpandRawGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AttachmentIdExpandRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
     * @param {String} id The ID of the attachment.
     * @param {module:api/DefaultApi~cloudidRestApi3AttachmentIdExpandRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    cloudidRestApi3AttachmentIdExpandRawGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3AttachmentIdExpandRawGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/attachment/{id}/expand/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AttachmentIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the metadata for an attachment. Note that the attachment itself is not returned.
     * @param {String} id The ID of the attachment.
     * @param {module:api/DefaultApi~cloudidRestApi3AttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    cloudidRestApi3AttachmentIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3AttachmentIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2004;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/attachment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AttachmentMetaGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AttachmentMetaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the global attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
     * @param {module:api/DefaultApi~cloudidRestApi3AttachmentMetaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    cloudidRestApi3AttachmentMetaGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/attachment/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AuditingRecordGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AuditingRecordGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of audit records. The list can be filtered to include items:
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter The query string.
     * @param {String} opts.from The date and time on or after which returned audit records must have been created. If to is provided from must be before to or the result set will be empty.
     * @param {Number} opts.limit The maximum number of results to return. The maximum is 1000.
     * @param {Number} opts.offset The number of records to skip before returning the first result.
     * @param {String} opts.to The date and time on or before which returned audit results must have been created. If from is provided to must be after from or the result set will be empty.
     * @param {module:api/DefaultApi~cloudidRestApi3AuditingRecordGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    cloudidRestApi3AuditingRecordGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'from': opts['from'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2007;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/auditing/record', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3AvatarTypeSystemGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3AvatarTypeSystemGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
     * @param {String} type The avatar type.
     * @param {module:api/DefaultApi~cloudidRestApi3AvatarTypeSystemGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2008}
     */
    cloudidRestApi3AvatarTypeSystemGet(type, callback) {
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling cloudidRestApi3AvatarTypeSystemGet");
      }

      let pathParams = {
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/avatar/{type}/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CommentCommentIdPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all the properties of a comment.
     * @param {String} commentId The ID of the comment.
     * @param {module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3CommentCommentIdPropertiesGet(commentId, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling cloudidRestApi3CommentCommentIdPropertiesGet");
      }

      let pathParams = {
        'commentId': commentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/comment/{commentId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a comment property.
     * @param {String} commentId The ID of the comment.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDelete(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/comment/{commentId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of a comment property.
     * @param {String} commentId The ID of the comment.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGet(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/comment/{commentId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
     * @param {String} commentId The ID of the comment.
     * @param {String} propertyKey The key of the property. The maximum length is 255 characters.
     * @param {module:api/DefaultApi~cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPut(commentId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'commentId' is set
      if (commentId === undefined || commentId === null) {
        throw new Error("Missing the required parameter 'commentId' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3CommentCommentIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'commentId': commentId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/comment/{commentId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CommentListPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CommentListPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the comments for a list of comment IDs.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about comments in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:model/InlineObject1} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3CommentListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2009}
     */
    cloudidRestApi3CommentListPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/comment/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ComponentIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ComponentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a component. Permissions required: Any of the following:
     * @param {String} id The ID of the component.
     * @param {Object} opts Optional parameters
     * @param {String} opts.moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made.
     * @param {module:api/DefaultApi~cloudidRestApi3ComponentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ComponentIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ComponentIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'moveIssuesTo': opts['moveIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/component/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ComponentIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ComponentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a component. Permissions required: Browse projects project permission.
     * @param {String} id The ID of the component.
     * @param {module:api/DefaultApi~cloudidRestApi3ComponentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    cloudidRestApi3ComponentIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ComponentIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/component/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ComponentIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ComponentIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a component. Any fields included in the request are overwritten. If leadUserName is an empty string (\"\") the component lead is removed. Permissions required: Any of the following:
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject3} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ComponentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ComponentIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ComponentIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/component/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ComponentIdRelatedIssueCountsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ComponentIdRelatedIssueCountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the counts of issues assigned to the component. Permissions required: Permission to access Jira.
     * @param {String} id The ID of the component.
     * @param {module:api/DefaultApi~cloudidRestApi3ComponentIdRelatedIssueCountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20012}
     */
    cloudidRestApi3ComponentIdRelatedIssueCountsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ComponentIdRelatedIssueCountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20012;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/component/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ComponentPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ComponentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a component. Use components to provide containers for issues within a project. Permissions required: Any of the following:
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject2} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ComponentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse201}
     */
    cloudidRestApi3ComponentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse201;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/component', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the global settings in Jira. These settings determine whether optional features (for example, sub-tasks, time tracking, and others) are enabled. If time tracking is enabled, this method also returns the time tracking configuration.
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20013}
     */
    cloudidRestApi3ConfigurationGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20013;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables time tracking.
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ConfigurationTimetrackingDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20014}
     */
    cloudidRestApi3ConfigurationTimetrackingGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20014;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingListGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20015>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all time tracking providers. By default, Jira only has one time tracking provider: JIRA provided time tracking. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the Time Tracking Provider module.
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20015>}
     */
    cloudidRestApi3ConfigurationTimetrackingListGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20015];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingOptionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see Configuring time tracking.
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    cloudidRestApi3ConfigurationTimetrackingOptionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20016;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingOptionsPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingOptionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the time tracking settings.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject5} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingOptionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20016}
     */
    cloudidRestApi3ConfigurationTimetrackingOptionsPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20016;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking/options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ConfigurationTimetrackingPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Selects a time tracking provider.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject4} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ConfigurationTimetrackingPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ConfigurationTimetrackingPut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/configuration/timetracking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3CustomFieldOptionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3CustomFieldOptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a custom field option. For example, an option in a cascading select list.
     * @param {String} id The ID of the custom field option. To find this ID, configure the custom field and edit its options in Jira. Click the option and its ID will show in the URL as the selectedParentOptionId parameter.
     * @param {module:api/DefaultApi~cloudidRestApi3CustomFieldOptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20017}
     */
    cloudidRestApi3CustomFieldOptionIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3CustomFieldOptionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20017;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/customFieldOption/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for a dashboard item.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGet(dashboardId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGet");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesGet");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a dashboard item property.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property.
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete(dashboardId, itemId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the key and value of a dashboard item property.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property.
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet(dashboardId, itemId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
     * @param {String} dashboardId The ID of the dashboard.
     * @param {String} itemId The ID of the dashboard item.
     * @param {String} propertyKey The key of the dashboard item property. The maximum length of the key is 255 bytes.
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut(dashboardId, itemId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3DashboardDashboardIdItemsItemIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'dashboardId': dashboardId,
        'itemId': itemId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.filter The filter applied to the list of dashboards. Valid values are:
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20018}
     */
    cloudidRestApi3DashboardGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20018;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3DashboardIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3DashboardIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a dashboard.
     * @param {String} id The ID of the dashboard.
     * @param {module:api/DefaultApi~cloudidRestApi3DashboardIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20019}
     */
    cloudidRestApi3DashboardIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3DashboardIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20019;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/dashboard/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ExpressionEvalPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ExpressionEvalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluates a Jira expression and returns its value.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:model/InlineObject6} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ExpressionEvalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20020}
     */
    cloudidRestApi3ExpressionEvalPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20020;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/expression/eval', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all options defined for a select list issue field. A select list issue field is a type of issue field that allows a user to select an value from a list of options.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return per page. For example, 20.
     * @param {Number} opts.startAt The starting index of the returned objects. For example, 1.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20022}
     */
    cloudidRestApi3FieldFieldKeyOptionGet(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionGet");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20022;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionOptionIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an option from a select list issue field.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Number} optionId The ID of the option to be deleted. For example, 3.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FieldFieldKeyOptionOptionIdDelete(fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdDelete");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdDelete");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionOptionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an option from a select list issue field.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Number} optionId The ID of the option to be returned. For example, 3.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20025}
     */
    cloudidRestApi3FieldFieldKeyOptionOptionIdGet(fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdGet");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdGet");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20025;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/{optionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deselects a select list issue field option in all issues that it has been selected in. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Number} optionId The ID of the option to be deselected. For example, 3.
     * @param {Object} opts Optional parameters
     * @param {String} opts.jql A JQL query that specifies the issues to be updated. For example, project=10000.
     * @param {Number} opts.replaceWith The ID of the option that will replace the currently selected option. For example, 2.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDelete(fieldKey, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDelete");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdIssueDelete");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
        'jql': opts['jql'],
        'replaceWith': opts['replaceWith']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/{optionId}/issue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionOptionIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an option for a select list issue field. If the option does not exist, a new option is created.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Number} optionId The ID of the option to be updated. For example, 3.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject9} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionOptionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20025}
     */
    cloudidRestApi3FieldFieldKeyOptionOptionIdPut(fieldKey, optionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdPut");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling cloudidRestApi3FieldFieldKeyOptionOptionIdPut");
      }

      let pathParams = {
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20025;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an option for a select list issue field.
     * @param {String} fieldKey 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject8} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20023}
     */
    cloudidRestApi3FieldFieldKeyOptionPost(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionPost");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20023;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionSuggestionsEditGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionSuggestionsEditGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns options defined for a select list issue field that can be viewed and selected by the currently logged in user.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return per page. For example, 20.
     * @param {Number} opts.projectId Filters the results to options that are only available in the specified project. For example, 10000.
     * @param {Number} opts.startAt The starting index of the returned objects. For example, 1.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionSuggestionsEditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    cloudidRestApi3FieldFieldKeyOptionSuggestionsEditGet(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionSuggestionsEditGet");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/suggestions/edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldFieldKeyOptionSuggestionsSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionSuggestionsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns options defined for a select list issue field that can be viewed by the currently logged in user.
     * @param {String} fieldKey The field key is specified in the following format: $(app-key)__$(field-key). For example, example-add-on__example-issue-field.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return per page. For example, 20.
     * @param {Number} opts.projectId Filters the results to options that are only available in the specified project. For example, 10000.
     * @param {Number} opts.startAt The starting index of the returned objects. For example, 1.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldFieldKeyOptionSuggestionsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20024}
     */
    cloudidRestApi3FieldFieldKeyOptionSuggestionsSearchGet(fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling cloudidRestApi3FieldFieldKeyOptionSuggestionsSearchGet");
      }

      let pathParams = {
        'fieldKey': fieldKey
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20024;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field/{fieldKey}/option/suggestions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20021>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all issue fields in Jira, both system and custom fields.
     * @param {module:api/DefaultApi~cloudidRestApi3FieldGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20021>}
     */
    cloudidRestApi3FieldGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20021];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FieldPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FieldPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a custom field.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject7} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FieldPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2011}
     */
    cloudidRestApi3FieldPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/field', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterDefaultShareScopeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterDefaultShareScopeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default sharing settings for new filters and dashboards for a user. Permissions required: Permission to log in to Jira (i.e., member of the users group).
     * @param {module:api/DefaultApi~cloudidRestApi3FilterDefaultShareScopeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    cloudidRestApi3FilterDefaultShareScopeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20027;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/defaultShareScope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterDefaultShareScopePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterDefaultShareScopePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default sharing for new filters and dashboards for a user. Permissions required: Permission to log in to Jira (i.e., member of the users group).
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject11} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FilterDefaultShareScopePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20027}
     */
    cloudidRestApi3FilterDefaultShareScopePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20027;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/defaultShareScope', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterFavouriteGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterFavouriteGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20028>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the favorite filters of the calling user. Permissions required: Permission to log in to Jira (i.e., member of the users group).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3FilterFavouriteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20028>}
     */
    cloudidRestApi3FilterFavouriteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20028];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/favourite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all filters. Deprecated, use Search for filters that supports search and pagination. Permissions required: None, however only the following filters are returned:
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3FilterGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdColumnsDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdColumnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reset the user's column configuration for the filter to the default. Permissions required: Permission to log in to Jira (i.e., member of the users group) and permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdColumnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FilterIdColumnsDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdColumnsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/columns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdColumnsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdColumnsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20030>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in List View with the Columns set to Filter. Permissions required: None, however the calling user must have permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdColumnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20030>}
     */
    cloudidRestApi3FilterIdColumnsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdColumnsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20030];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdColumnsPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdColumnsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the columns for a filter. Only navigable fields can be set as columns. Use Get fields to get the list fields in Jira. A navigable field has navigable set to true. Permissions required: Permission to log in to Jira (i.e., member of the users group) and permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdColumnsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FilterIdColumnsPut(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdColumnsPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a filter. Permissions required: Permission to log in to Jira, however the following rules govern what a user can delete:
     * @param {Number} id The ID of the filter to delete.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FilterIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdFavouriteDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdFavouriteDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a filter as a favorite for the calling user. Permissions required: Permission to log in to Jira (i.e., member of the users group) and permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdFavouriteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterIdFavouriteDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdFavouriteDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/favourite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdFavouritePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdFavouritePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a filter as a favorite for the calling user. Permissions required: Permission to log in to Jira (i.e., member of the users group) and permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdFavouritePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterIdFavouritePut(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdFavouritePut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/favourite', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a filter. Permissions required: None, however the calling user must have permission view the filter.
     * @param {Number} id The ID of the filter to return.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdPermissionGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdPermissionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20031>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission. Permissions required: None, however the calling user must have permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdPermissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20031>}
     */
    cloudidRestApi3FilterIdPermissionGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdPermissionGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20031];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdPermissionPermissionIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPermissionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a share permission from a filter. Permissions required: Permission to log in to Jira (i.e., member of the users group) and the calling user must own the filter.
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPermissionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3FilterIdPermissionPermissionIdDelete(id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling cloudidRestApi3FilterIdPermissionPermissionIdDelete");
      }

      let pathParams = {
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdPermissionPermissionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPermissionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission. Permissions required: None, however the calling user must have permission to view the filter.
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPermissionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20032}
     */
    cloudidRestApi3FilterIdPermissionPermissionIdGet(id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling cloudidRestApi3FilterIdPermissionPermissionIdGet");
      }

      let pathParams = {
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20032;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdPermissionPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20031>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a share permissions to a filter. If you add a global share permission (i.e., all logged-in users or the public) it will overwrite all share permissions for the filter.Be aware that this method uses different objects for updating share permissions compared to Update filter. Permissions required: Share dashboards and filters global permission and the calling user must own the filter.
     * @param {Number} id The ID of the filter.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject13} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdPermissionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20031>}
     */
    cloudidRestApi3FilterIdPermissionPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdPermissionPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20031];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing filter. Use this method to update a filter's name, description, JQL, or sharing. Permissions required: Permission to log in to Jira, however the following rules govern what a user can update:
     * @param {Number} id The ID of the filter to update.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:model/InlineObject12} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FilterIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3FilterIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterMyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterMyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20028>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the filters owned by the calling user. If includeFavourites is true, the user's favorite filters are also returned. Permissions required: Permission to log in to Jira (i.e., member of the users group).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {Boolean} opts.includeFavourites Include the user's favorite filters in the response.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterMyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20028>}
     */
    cloudidRestApi3FilterMyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'includeFavourites': opts['includeFavourites']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20028];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/my', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new filter. The new filter is not shared and not selected as a favorite. Permissions required: Permission to log in to Jira.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:model/InlineObject10} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3FilterPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20026}
     */
    cloudidRestApi3FilterPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20026;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3FilterSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3FilterSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for filters. This method is similar to Get filters except that you can refine the results to include filters that have specific attributes. For example, filters with a particular name. Permissions required: None, however only the following filters are returned (if no search parameters are set):
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId Returns filters with an owner that exactly matches accountId of the owner. This parameter cannot be used with the owner parameter.
     * @param {module:model/String} opts.expand Use expand to include additional information about filter in the response. This parameter accepts multiple values separated by a comma:
     * @param {String} opts.filterName Returns filters with a name that partially matches filterName.
     * @param {String} opts.groupname Returns filters that are shared with a group that has a name that exactly matches groupname.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Max is 50.
     * @param {module:model/String} opts.orderBy Orders the results by a property of the filter. For example, name.
     * @param {String} opts.owner Returns filters with an owner that exactly matches owner. This parameter cannot be used with the accountId parameter.
     * @param {Number} opts.projectId Returns filters that are shared with a project that has an ID that exactly matches projectId.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). The base index is 0.
     * @param {module:api/DefaultApi~cloudidRestApi3FilterSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20029}
     */
    cloudidRestApi3FilterSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'expand': opts['expand'],
        'filterName': opts['filterName'],
        'groupname': opts['groupname'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'owner': opts['owner'],
        'projectId': opts['projectId'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20029;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/filter/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupname The name of the group.
     * @param {String} opts.swapGroup The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs will be inaccessible after the deletion.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3GroupDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'swapGroup': opts['swapGroup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This resource is deprecated, use group/member.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand List of fields to expand.
     * @param {String} opts.groupname The name of the group.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3GroupGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'groupname': opts['groupname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupMemberGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupMemberGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all users in a group. Users are ordered by username.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupname The name of the group.
     * @param {Boolean} opts.includeInactiveUsers Include inactive users.
     * @param {Number} opts.maxResults The maximum number of users to return per page.
     * @param {Number} opts.startAt The index of the first user to return.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupMemberGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20033}
     */
    cloudidRestApi3GroupMemberGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname'],
        'includeInactiveUsers': opts['includeInactiveUsers'],
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20033;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group/member', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject14} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3GroupPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2012}
     */
    cloudidRestApi3GroupPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2012;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupUserDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupUserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a user from a group. Permissions required: Administer Jira global permission.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountid The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username is specified.
     * @param {String} opts.groupname The name of the group.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupUserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3GroupUserDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountid': opts['accountid'],
        'groupname': opts['groupname'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupUserPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupUserPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user to a group.
     * @param {Object} opts Optional parameters
     * @param {String} opts.groupname The name of the group.
     * @param {module:model/InlineObject15} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3GroupUserPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3GroupUserPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'groupname': opts['groupname']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/group/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupsPickerGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupsPickerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId Parameter not in use.
     * @param {Array.<String>} opts.exclude A list of groups to exclude from the result.
     * @param {Number} opts.maxResults The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property jira.ajax.autocomplete.limit.
     * @param {String} opts.query The string to find in group names.
     * @param {String} opts.userName Parameter not in use.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupsPickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20034}
     */
    cloudidRestApi3GroupsPickerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'maxResults': opts['maxResults'],
        'query': opts['query'],
        'userName': opts['userName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20034;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/groups/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3GroupuserpickerGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3GroupuserpickerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users and groups matching a string. The string is used:
     * @param {Object} opts Optional parameters
     * @param {String} opts.avatarSize The size of the avatar to return. If an invalid value is provided, the default value is used.
     * @param {Boolean} opts.caseInsensitive Indicates whether the search for groups should be case insensitive.
     * @param {Boolean} opts.excludeConnectAddons Indicates whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
     * @param {String} opts.fieldId The custom field ID of the field this request is for.
     * @param {Array.<String>} opts.issueTypeId The ID of an issue type that returned users and groups must have permission to view. To include multiple issue type IDs repeat this parameter, use of a comma separated list is not supported. Special values, such as -1 (all standard issue types) and -2 (all subtask issue types), are supported. This parameter is only used when fieldId is present.
     * @param {Number} opts.maxResults The maximum number of items to return in each list. The maximum is 1000.
     * @param {Array.<String>} opts.projectId The ID of a project that returned users and groups must have permission to view. To include multiple projects repeat this parameter, use of a comma separated list is not supported. This parameter is only used when fieldId is present.
     * @param {String} opts.query The search string.
     * @param {Boolean} opts.showAvatar Indicates whether the user avatar should be returned. If an invalid value is provided, the default value is used.
     * @param {module:api/DefaultApi~cloudidRestApi3GroupuserpickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20035}
     */
    cloudidRestApi3GroupuserpickerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'avatarSize': opts['avatarSize'],
        'caseInsensitive': opts['caseInsensitive'],
        'excludeConnectAddons': opts['excludeConnectAddons'],
        'fieldId': opts['fieldId'],
        'issueTypeId': this.apiClient.buildCollectionParam(opts['issueTypeId'], 'csv'),
        'maxResults': opts['maxResults'],
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'csv'),
        'query': opts['query'],
        'showAvatar': opts['showAvatar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20035;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/groupuserpicker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueBulkPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueBulkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates issues and, where the option to create sub-tasks is enabled in Jira, sub-tasks. Transitions may be applied, to move the issues or sub-tasks to a workflow step other than the default start step, and issue properties set.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject17} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueBulkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2014}
     */
    cloudidRestApi3IssueBulkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2014;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/bulk', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueCreatemetaGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueCreatemetaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in Create issue and Create issues.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about in the response. This parameter accepts multiple values separated by a comma:
     * @param {Array.<String>} opts.issuetypeIds Comma-separated list of issue type IDs. May be specified multiple times and with issuetypeNames.
     * @param {Array.<String>} opts.issuetypeNames Comma-separated list of issue type names. May be specified multiple times and with issuetypeIds.
     * @param {Array.<String>} opts.projectIds Comma-separated list of project IDs. May be specified multiple times and with projectKeys.
     * @param {Array.<String>} opts.projectKeys Comma-separated list of project keys. May be specified multiple times and with projectIds.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueCreatemetaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20036}
     */
    cloudidRestApi3IssueCreatemetaGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'issuetypeIds': this.apiClient.buildCollectionParam(opts['issuetypeIds'], 'csv'),
        'issuetypeNames': this.apiClient.buildCollectionParam(opts['issuetypeNames'], 'csv'),
        'projectIds': this.apiClient.buildCollectionParam(opts['projectIds'], 'csv'),
        'projectKeys': this.apiClient.buildCollectionParam(opts['projectKeys'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20036;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/createmeta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyAssigneePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyAssigneePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assigns an issue to a user. Use this operation when the calling user does not have the Edit Issues permission but has the Assign issue permission for the project that the issue is in.
     * @param {String} issueIdOrKey The ID or key of the issue to be assigned.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject21} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyAssigneePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyAssigneePut(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyAssigneePut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/assignee', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyAttachmentsPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20038>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data (RFC 1867).
     * @param {String} issueIdOrKey The ID or key of the issue that attachments are added to.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20038>}
     */
    cloudidRestApi3IssueIssueIdOrKeyAttachmentsPost(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyAttachmentsPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20038];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyChangelogGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyChangelogGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of all updates of an issue, sorted by date, starting from the oldest.
     * @param {String} issueIdOrKey ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults Maximum number of items to return per page. See Pagination section for more details.
     * @param {Number} opts.startAt Page offset, ie. index of the first item returned in the page of results. Base index: 0.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyChangelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20039}
     */
    cloudidRestApi3IssueIssueIdOrKeyChangelogGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyChangelogGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20039;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/changelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyCommentGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * to get comments for
     * @param {String} issueIdOrKey to get comments for
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand optional flags: renderedBody (provides body rendered in HTML)
     * @param {Number} opts.maxResults how many results on the page should be included. Defaults to 50.
     * @param {String} opts.orderBy ordering of the results.
     * @param {Number} opts.startAt the page offset, if not specified then defaults to 0
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20040}
     */
    cloudidRestApi3IssueIssueIdOrKeyCommentGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyCommentGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20040;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/comment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyCommentIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a string containing the issue id or key the comment belongs to
     * @param {String} id id of the comment to be deleted
     * @param {String} issueIdOrKey a string containing the issue id or key the comment belongs to
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyCommentIdDelete(id, issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdDelete");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdDelete");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/comment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyCommentIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * of the issue the comment belongs to
     * @param {String} id the ID of the comment to request
     * @param {String} issueIdOrKey of the issue the comment belongs to
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2015}
     */
    cloudidRestApi3IssueIssueIdOrKeyCommentIdGet(id, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdGet");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2015;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/comment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyCommentIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a string containing the issue id or key the comment belongs to
     * @param {String} id id of the comment to be updated
     * @param {String} issueIdOrKey a string containing the issue id or key the comment belongs to
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:model/InlineObject23} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2015}
     */
    cloudidRestApi3IssueIssueIdOrKeyCommentIdPut(id, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdPut");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyCommentIdPut");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2015;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/comment/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyCommentPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a string containing the issue id or key the comment will be added to
     * @param {String} issueIdOrKey a string containing the issue id or key the comment will be added to
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand optional flags: renderedBody (provides body rendered in HTML)
     * @param {module:model/InlineObject22} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyCommentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2015}
     */
    cloudidRestApi3IssueIssueIdOrKeyCommentPost(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyCommentPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2015;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/comment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.deleteSubtasks Indicates whether the issue's sub-tasks are deleted when the issue is deleted.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyDelete(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'deleteSubtasks': opts['deleteSubtasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyEditmetaGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyEditmetaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in Edit issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.overrideEditableFlag Indicates whether non-editable fields should be returned. Available to connect app users with admin permissions.
     * @param {Boolean} opts.overrideScreenSecurity Indicates whether hidden fields should be returned. Available to connect app users with admin permissions.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyEditmetaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20041}
     */
    cloudidRestApi3IssueIssueIdOrKeyEditmetaGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyEditmetaGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'overrideEditableFlag': opts['overrideEditableFlag'],
        'overrideScreenSecurity': opts['overrideScreenSecurity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20041;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/editmeta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20037} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue. For example, JRACLOUD-1549.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about the issues in the response. This parameter accepts multiple values separated by a comma:
     * @param {Array.<module:model/String>} opts.fields A comma-separated list of fields to return for the issue. Use it to retrieve a subset of fields. Allowed values:
     * @param {Boolean} opts.fieldsByKeys Indicates whether fields in fields are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
     * @param {Array.<module:model/String>} opts.properties A comma-separated list of issue properties to return for the issue. Allowed values:
     * @param {Boolean} opts.updateHistory Indicates whether the project in which the issue is created is added to the user's Recently viewed project list, as shown under Projects in Jira. This also populates the JQL issues search lastViewed field.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20037}
     */
    cloudidRestApi3IssueIssueIdOrKeyGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'fieldsByKeys': opts['fieldsByKeys'],
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'csv'),
        'updateHistory': opts['updateHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20037;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyNotifyPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyNotifyPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an email notification for an issue and adds it to the mail queue.
     * @param {String} issueIdOrKey ID or key of the issue that the notification is sent for.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject24} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyNotifyPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyNotifyPost(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyNotifyPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/notify', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the URIs and keys of an issue's properties.
     * @param {String} issueIdOrKey The key or ID of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3IssueIssueIdOrKeyPropertiesGet(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an issue's property.
     * @param {String} issueIdOrKey The key or ID of the issue.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDelete(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the key and value of an issue's property.
     * @param {String} issueIdOrKey The key or ID of the issue.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGet(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of an issue's property. Use this resource to store custom data against an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPut(issueIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edits an issue. A transition may be applied and issue properties updated as part of the edit.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.notifyUsers Indicates whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.
     * @param {Boolean} opts.overrideEditableFlag Indicates whether screen security should be overridden to enable uneditable fields to be edited. Available to Connect app users with admin permissions.
     * @param {Boolean} opts.overrideScreenSecurity Indicates whether screen security should be overridden to enable hidden fields to be edited. Available to Connect app users with admin permissions.
     * @param {module:model/InlineObject20} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyPut(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyPut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'notifyUsers': opts['notifyUsers'],
        'overrideEditableFlag': opts['overrideEditableFlag'],
        'overrideScreenSecurity': opts['overrideScreenSecurity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the remote issue link from the issue using the link's global ID.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.globalId The global ID of a remote issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkDelete(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20042>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.globalId The global ID of the remote issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20042>}
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20042];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a remote issue link from an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of a remote issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDelete(issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDelete");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20044} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a remote issue link for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20044}
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGet(issueIdOrKey, linkId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGet");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20044;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a remote issue link for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} linkId The ID of the remote issue link.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject26} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPut(issueIdOrKey, linkId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPut");
      }
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkLinkIdPut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyRemotelinkPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20043} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a remote issue link for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject25} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyRemotelinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20043}
     */
    cloudidRestApi3IssueIssueIdOrKeyRemotelinkPost(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyRemotelinkPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20043;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyTransitionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyTransitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about in the response. This parameter accepts multiple values separated by a comma:
     * @param {Boolean} opts.skipRemoteOnlyCondition Indicates whether transitions with the condition Hide From User Condition are included in the response.
     * @param {String} opts.transitionId The ID of the transition.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyTransitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20045}
     */
    cloudidRestApi3IssueIssueIdOrKeyTransitionsGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyTransitionsGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand'],
        'skipRemoteOnlyCondition': opts['skipRemoteOnlyCondition'],
        'transitionId': opts['transitionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20045;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/transitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyTransitionsPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyTransitionsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen. Optionally, issue properties can be set.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject27} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyTransitionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyTransitionsPost(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyTransitionsPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/transitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyVotesDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user's vote from an issue. This is the equivalent of the user clicking Unvote on an issue in Jira.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyVotesDelete(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyVotesDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/votes', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyVotesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20046} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details about the votes on an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20046}
     */
    cloudidRestApi3IssueIssueIdOrKeyVotesGet(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyVotesGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20046;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/votes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyVotesPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the user's vote to an issue. This is the equivalent of the user clicking Vote on an issue in Jira.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyVotesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyVotesPost(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyVotesPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/votes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWatchersDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user as a watcher of an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The account ID of the user. Required if username is omitted, otherwise must be omitted.
     * @param {String} opts.username The name of the user. Required if accountId is omitted, otherwise must be omitted.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWatchersDelete(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWatchersDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/watchers', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWatchersGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20047} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the watchers for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20047}
     */
    cloudidRestApi3IssueIssueIdOrKeyWatchersGet(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWatchersGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20047;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/watchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWatchersPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a user as a watcher of an issue. If no user is specified the calling user is added.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWatchersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWatchersPost(issueIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWatchersPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/watchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all worklogs for an issue.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about worklogs in the response. This parameter accepts multiple values separated by a comma:
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1048576.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20048}
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogGet(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand'],
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20048;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a worklog from an issue.
     * @param {String} id The ID of the worklog.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.adjustEstimate Defines how to update the issue's time estimate, the options are:
     * @param {String} opts.increaseBy The amount to increase the issue's remaining estimate by, as days (#d), hours (#h), or minutes (#m or #). For example, 2d. Required when adjustEstimate is manual.
     * @param {String} opts.newEstimate The value to set as the issue's remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, 2d. Required when adjustEstimate is new.
     * @param {Boolean} opts.notifyUsers Indicates whether users watching the issue are notified by email.
     * @param {Boolean} opts.overrideEditableFlag Indicates whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin permissions can use this flag.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogIdDelete(id, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdDelete");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdDelete");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'increaseBy': opts['increaseBy'],
        'newEstimate': opts['newEstimate'],
        'notifyUsers': opts['notifyUsers'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a worklog.
     * @param {String} id The ID of the worklog.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about work logs in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20049}
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogIdGet(id, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdGet");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20049;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a worklog.
     * @param {String} id The ID of the worklog.
     * @param {String} issueIdOrKey The ID or key the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.adjustEstimate Defines how to update the issue's time estimate, the options are:
     * @param {module:model/String} opts.expand Use expand to include additional information about worklogs in the response. This parameter accepts multiple values separated by a comma:
     * @param {String} opts.newEstimate The value to set as the issue's remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, 2d. Required when adjustEstimate is new.
     * @param {Boolean} opts.notifyUsers Indicates whether users watching the issue are notified by email.
     * @param {Boolean} opts.overrideEditableFlag Indicates whether the worklog should be added to the issue even if the issue is not editable, for example, because the issue is closed. Only connect app users with admin permissions can use this flag.
     * @param {module:model/InlineObject29} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20049}
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogIdPut(id, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdPut");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogIdPut");
      }

      let pathParams = {
        'id': id,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'expand': opts['expand'],
        'newEstimate': opts['newEstimate'],
        'notifyUsers': opts['notifyUsers'],
        'overrideEditableFlag': opts['overrideEditableFlag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20049;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a worklog to an issue.
     * @param {String} issueIdOrKey The ID or key the issue.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.adjustEstimate Defines how to update the issue's time estimate, the options are:
     * @param {module:model/String} opts.expand Use expand to include additional information about work logs in the response. This parameter accepts multiple values separated by a comma:
     * @param {String} opts.newEstimate The value to set as the issue's remaining time estimate, as days (#d), hours (#h), or minutes (#m or #). For example, 2d. Required when adjustEstimate is new.
     * @param {Boolean} opts.notifyUsers Indicates whether users watching the issue are notified by email.
     * @param {Boolean} opts.overrideEditableFlag Indicates whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin scope permission can use this flag.
     * @param {String} opts.reduceBy The amount to reduce the issue's remaining estimate by, as days (#d), hours (#h), or minutes (#m). For example, 2d. Required when adjustEstimate is manual.
     * @param {module:model/InlineObject28} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogPost(issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogPost");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
        'adjustEstimate': opts['adjustEstimate'],
        'expand': opts['expand'],
        'newEstimate': opts['newEstimate'],
        'notifyUsers': opts['notifyUsers'],
        'overrideEditableFlag': opts['overrideEditableFlag'],
        'reduceBy': opts['reduceBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for a worklog.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGet(issueIdOrKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGet");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a worklog property.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} propertyKey The key of the property.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete(issueIdOrKey, propertyKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of a worklog property.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} propertyKey The key of the property.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet(issueIdOrKey, propertyKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a worklog property. Use this operation to store custom data against the worklog.
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut(issueIdOrKey, propertyKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling cloudidRestApi3IssueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'issueIdOrKey': issueIdOrKey,
        'propertyKey': propertyKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkLinkIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkLinkIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an issue link.
     * @param {String} linkId The ID of the issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkLinkIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueLinkLinkIdDelete(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling cloudidRestApi3IssueLinkLinkIdDelete");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLink/{linkId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkLinkIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkLinkIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue link.
     * @param {String} linkId The ID of the issue link.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkLinkIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20050}
     */
    cloudidRestApi3IssueLinkLinkIdGet(linkId, callback) {
      let postBody = null;
      // verify the required parameter 'linkId' is set
      if (linkId === undefined || linkId === null) {
        throw new Error("Missing the required parameter 'linkId' when calling cloudidRestApi3IssueLinkLinkIdGet");
      }

      let pathParams = {
        'linkId': linkId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20050;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLink/{linkId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have Issue Linking enabled.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject30} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueLinkPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkTypeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all issue link types.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20051}
     */
    cloudidRestApi3IssueLinkTypeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20051;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLinkType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkTypeIssueLinkTypeIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an issue link type.
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssueLinkTypeIssueLinkTypeIdDelete(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling cloudidRestApi3IssueLinkTypeIssueLinkTypeIdDelete");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLinkType/{issueLinkTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkTypeIssueLinkTypeIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue link type.
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    cloudidRestApi3IssueLinkTypeIssueLinkTypeIdGet(issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling cloudidRestApi3IssueLinkTypeIssueLinkTypeIdGet");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2016;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLinkType/{issueLinkTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkTypeIssueLinkTypeIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an issue link type.
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject32} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkTypeIssueLinkTypeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    cloudidRestApi3IssueLinkTypeIssueLinkTypeIdPut(issueLinkTypeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling cloudidRestApi3IssueLinkTypeIssueLinkTypeIdPut");
      }

      let pathParams = {
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2016;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLinkType/{issueLinkTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssueLinkTypePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssueLinkTypePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject31} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssueLinkTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2016}
     */
    cloudidRestApi3IssueLinkTypePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2016;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issueLinkType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuePickerGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuePickerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of suggested issues matching the auto-completion query for the user executing this request. This operation checks the user's history and browsing context to return issue suggestions.
     * @param {Object} opts Optional parameters
     * @param {String} opts.currentIssueKey Key of the issue defining search context. The issue defining a context is excluded from the search results.
     * @param {String} opts.currentJQL JQL that defines the search context. Only issues matching this JQL query are included in the results. Note that username and userkey have been deprecated as search terms for this parameter. See the migration guide for details. Use accountId instead.
     * @param {String} opts.currentProjectId ID of a project defining search context. Only issues belonging to a given project are suggested.
     * @param {String} opts.query Query used to filter issue search results.
     * @param {Boolean} opts.showSubTaskParent Set to false to exclude parent issue from the suggestions list if search is performed in the context of a sub-task.
     * @param {Boolean} opts.showSubTasks Set to false to exclude subtasks from the suggestions list.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuePickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuePickerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'currentIssueKey': opts['currentIssueKey'],
        'currentJQL': opts['currentJQL'],
        'currentProjectId': opts['currentProjectId'],
        'query': opts['query'],
        'showSubTaskParent': opts['showSubTaskParent'],
        'showSubTasks': opts['showSubTasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue or, where the option to create sub-tasks is enabled in Jira, a sub-task. A transition may be applied, to move the issue or sub-task to a workflow step other than the default start step, and issue properties set.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.updateHistory Indicates whether the project in which the issue is created is added to the user's Recently viewed project list, as shown under Projects in Jira.
     * @param {module:model/InlineObject16} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssuePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2013}
     */
    cloudidRestApi3IssuePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'updateHistory': opts['updateHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2013;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuePropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuePropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
     * @param {String} propertyKey The key of the property.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject19} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssuePropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuePropertiesPropertyKeyDelete(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssuePropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuePropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuePropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets a property value on multiple issues. The issues to be updated can be specified by a filter.
     * @param {String} propertyKey The key of the property. The maximum length is 255 characters.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject18} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssuePropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuePropertiesPropertyKeyPut(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssuePropertiesPropertyKeyPut");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issue/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuesecurityschemesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuesecurityschemesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all issue security schemes.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuesecurityschemesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20052}
     */
    cloudidRestApi3IssuesecurityschemesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20052;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuesecurityschemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuesecurityschemesIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuesecurityschemesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20053} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue security scheme along with its security levels.
     * @param {Number} id The ID of the issue security scheme. Use the Get issue security schemes operation to get a list of issue security scheme IDs.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuesecurityschemesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20053}
     */
    cloudidRestApi3IssuesecurityschemesIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuesecurityschemesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20053;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuesecurityschemes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20050InwardIssueFieldsIssuetype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all issue types. Permissions required: Permission to access Jira, however, only issue types that are visible to the user are returned.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20050InwardIssueFieldsIssuetype>}
     */
    cloudidRestApi3IssuetypeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20050InwardIssueFieldsIssuetype];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIdAlternativesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIdAlternativesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20050InwardIssueFieldsIssuetype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme. Permissions required: Permission to access Jira.
     * @param {String} id The ID of the issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIdAlternativesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20050InwardIssueFieldsIssuetype>}
     */
    cloudidRestApi3IssuetypeIdAlternativesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuetypeIdAlternativesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20050InwardIssueFieldsIssuetype];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{id}/alternatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIdAvatar2Post operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIdAvatar2PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads an avatar for the issue type.
     * @param {String} id The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The length of each side of the crop region.
     * @param {Number} opts.x The X coordinate of the top-left corner of the crop region.
     * @param {Number} opts.y The Y coordinate of the top-left corner of the crop region.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIdAvatar2PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2017}
     */
    cloudidRestApi3IssuetypeIdAvatar2Post(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuetypeIdAvatar2Post");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'size': opts['size'],
        'x': opts['x'],
        'y': opts['y']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2017;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{id}/avatar2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (alternativeIssueTypeId). A list of alternative issue types can be obtained from the Get alternative issue types resource. Permissions required: Administer Jira global permission.
     * @param {String} id The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.alternativeIssueTypeId The ID of the replacement issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuetypeIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuetypeIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'alternativeIssueTypeId': opts['alternativeIssueTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20054} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue type. Permissions required:
     * @param {String} id The ID of the issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20054}
     */
    cloudidRestApi3IssuetypeIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuetypeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20054;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the issue type. Permissions required: Administer Jira global permission.
     * @param {String} id The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject34} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuetypeIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3IssuetypeIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIssueTypeIdPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the issue type property keys of the issue type. Permissions required:
     * @param {String} issueTypeId The ID of the issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3IssuetypeIssueTypeIdPropertiesGet(issueTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesGet");
      }

      let pathParams = {
        'issueTypeId': issueTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{issueTypeId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the issue type property. Permissions required: Administer Jira global permission.
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the property. Use Get issue type property keys to get a list of all issue type property keys.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDelete(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the key and value of the issue type property. Permissions required:
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the property. Use Get issue type property keys to get a list of all issue type property keys.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGet(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the value of the issue type property. Use this resource to store and update data against an issue type. The value of the request body must be a valid, non-empty JSON blob. The maximum length of the property value is 32768 bytes. Permissions required: Administer Jira global permission.
     * @param {String} issueTypeId The ID of the issue type.
     * @param {String} propertyKey The key of the issue type property. The maximum length of the key is 255 bytes.
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPut(issueTypeId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'issueTypeId' is set
      if (issueTypeId === undefined || issueTypeId === null) {
        throw new Error("Missing the required parameter 'issueTypeId' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3IssuetypeIssueTypeIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'issueTypeId': issueTypeId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3IssuetypePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3IssuetypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an issue type and adds it to the default issue type scheme. Permissions required: Administer Jira global permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject33} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3IssuetypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3IssuetypePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/issuetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3JqlAutocompletedataGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3JqlAutocompletedataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20055} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns reference data for JQL searches. This is a downloadable version of the documentation provided in Advanced searching - fields reference and Advanced searching - functions reference, along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
     * @param {module:api/DefaultApi~cloudidRestApi3JqlAutocompletedataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20055}
     */
    cloudidRestApi3JqlAutocompletedataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20055;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/jql/autocompletedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3JqlAutocompletedataSuggestionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3JqlAutocompletedataSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the JQL search auto complete suggestions for a field.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldName The name of the field.
     * @param {String} opts.fieldValue The partial field item name entered by the user.
     * @param {String} opts.predicateName The name of the CHANGED operator predicate for which the suggestions are generated. The valid predicate operators are by, from, and to.
     * @param {String} opts.predicateValue The partial predicate item name entered by the user.
     * @param {module:api/DefaultApi~cloudidRestApi3JqlAutocompletedataSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20056}
     */
    cloudidRestApi3JqlAutocompletedataSuggestionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fieldName': opts['fieldName'],
        'fieldValue': opts['fieldValue'],
        'predicateName': opts['predicateName'],
        'predicateValue': opts['predicateValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20056;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/jql/autocompletedata/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3JqlPdcleanerPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3JqlPdcleanerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The query strings having personal data that need to be migrated. There should be at most 100 queries.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject35} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3JqlPdcleanerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20057}
     */
    cloudidRestApi3JqlPdcleanerPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20057;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/jql/pdcleaner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypermissionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, or issue context.
     * @param {Object} opts Optional parameters
     * @param {String} opts.issueId The ID of the issue.
     * @param {String} opts.issueKey The key of the issue. Ignored if issueId is provided.
     * @param {String} opts.permissions A comma separated list of permission keys. Omitting this parameter is deprecated. To get the list of available permissions, use Get all permissions. Note that deprecated keys cannot be used. Deprecated keys are not returned by Get all permissions but are returned by this operation if permissions is omitted.
     * @param {String} opts.projectId The ID of project.
     * @param {String} opts.projectKey The key of project. Ignored if projectId is provided.
     * @param {module:api/DefaultApi~cloudidRestApi3MypermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20058}
     */
    cloudidRestApi3MypermissionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'issueId': opts['issueId'],
        'issueKey': opts['issueKey'],
        'permissions': opts['permissions'],
        'projectId': opts['projectId'],
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20058;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a preference of the user, which restores the default value of system defined settings.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the preference.
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3MypreferencesDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of a preference of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the preference.
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3MypreferencesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesLocaleDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesLocaleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the locale of the current user, which restores the default setting.
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesLocaleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3MypreferencesLocaleDelete(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences/locale', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesLocaleGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesLocaleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20059} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the locale for the current user.
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesLocaleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20059}
     */
    cloudidRestApi3MypreferencesLocaleGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20059;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences/locale', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesLocalePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesLocalePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the locale of the current user. The requested locale must be one supported by the instance of Jira.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject36} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesLocalePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3MypreferencesLocalePut(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences/locale', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MypreferencesPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MypreferencesPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a preference for the user or updates its value. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the preference. Maximum length is 255 characters.
     * @param {module:api/DefaultApi~cloudidRestApi3MypreferencesPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3MypreferencesPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/mypreferences', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3MyselfGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3MyselfGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details for the authenticated user.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about user in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3MyselfGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    cloudidRestApi3MyselfGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/myself', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3NotificationschemeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3NotificationschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20061} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated list of notification schemes in order by display name.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {Number} opts.maxResults The maximum number of items to return per page. Max is 50.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). The base index is 0.
     * @param {module:api/DefaultApi~cloudidRestApi3NotificationschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20061}
     */
    cloudidRestApi3NotificationschemeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20061;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/notificationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3NotificationschemeIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3NotificationschemeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20062} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a notification scheme, including the list of events and the recipients who will receive notifications for those events.
     * @param {Number} id The ID of the notification scheme. Use Get notification schemes paginated to get a list of notification scheme IDs.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3NotificationschemeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20062}
     */
    cloudidRestApi3NotificationschemeIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3NotificationschemeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20062;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/notificationscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20063} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permissions, including:
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20063}
     */
    cloudidRestApi3PermissionsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20063;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionsProjectPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionsProjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20064} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the projects where the user is granted a list of project permissions.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject37} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionsProjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20064}
     */
    cloudidRestApi3PermissionsProjectPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20064;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissions/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20065} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permission schemes.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20065}
     */
    cloudidRestApi3PermissionschemeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20065;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants. Permissions required: Administer Jira global permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:
     * @param {module:model/InlineObject38} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2018}
     */
    cloudidRestApi3PermissionschemePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2018;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission scheme. Permissions required: Administer Jira global permission.
     * @param {Number} schemeId The ID of the permission scheme being deleted (e.g., 10000).
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3PermissionschemeSchemeIdDelete(schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdDelete");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a permission scheme. Permissions required: Permission to log in to Jira.
     * @param {Number} schemeId The ID of the permission scheme to return (e.g., 10000).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2018}
     */
    cloudidRestApi3PermissionschemeSchemeIdGet(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdGet");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2018;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdPermissionGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20066} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all permission grants for a permission scheme. Permissions required: Permission to log in to Jira.
     * @param {Number} schemeId The ID of the permission scheme (e.g., 10010).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20066}
     */
    cloudidRestApi3PermissionschemeSchemeIdPermissionGet(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionGet");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20066;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission grant from a permission scheme. See About permission schemes and grants for more details. Permissions required: Administer Jira global permission.
     * @param {Number} permissionId The ID of the permission grant to delete (e.g., 10847).
     * @param {Number} schemeId The ID of the permission scheme to delete the permission grant from (e.g., 10000).
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDelete(permissionId, schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdDelete");
      }

      let pathParams = {
        'permissionId': permissionId,
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a permission grant. Permissions required: Permission to log in to Jira.
     * @param {Number} permissionId The ID of the permission grant (e.g., 10000).
     * @param {Number} schemeId The ID of the permission scheme (e.g., 10010).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2019}
     */
    cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGet(permissionId, schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionPermissionIdGet");
      }

      let pathParams = {
        'permissionId': permissionId,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2019;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdPermissionPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new permission grant in the given permission scheme. Permissions required: Administer Jira global permission.
     * @param {Number} schemeId The ID of the permission scheme in which to create a new permission grant.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:
     * @param {module:model/InlineObject40} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPermissionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2019}
     */
    cloudidRestApi3PermissionschemeSchemeIdPermissionPost(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdPermissionPost");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2019;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PermissionschemeSchemeIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a permission scheme. Below are some important things to note when using this resource:
     * @param {Number} schemeId The ID of the permission scheme to update (e.g., 10000).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are always included when you specify any value:
     * @param {module:model/InlineObject39} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3PermissionschemeSchemeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2018}
     */
    cloudidRestApi3PermissionschemeSchemeIdPut(schemeId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling cloudidRestApi3PermissionschemeSchemeIdPut");
      }

      let pathParams = {
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2018;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/permissionscheme/{schemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PriorityGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PriorityGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20050InwardIssueFieldsPriority>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of all issue priorities.
     * @param {module:api/DefaultApi~cloudidRestApi3PriorityGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20050InwardIssueFieldsPriority>}
     */
    cloudidRestApi3PriorityGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20050InwardIssueFieldsPriority];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/priority', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3PriorityIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3PriorityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20067} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue priority.
     * @param {String} id The ID of the issue priority.
     * @param {module:api/DefaultApi~cloudidRestApi3PriorityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20067}
     */
    cloudidRestApi3PriorityIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3PriorityIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20067;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/priority/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectCategoryGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudidRestApi3FilterIdPermissionProjectProjectCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project categories.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudidRestApi3FilterIdPermissionProjectProjectCategory>}
     */
    cloudidRestApi3ProjectCategoryGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CloudidRestApi3FilterIdPermissionProjectProjectCategory];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectCategoryIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project category.
     * @param {Number} id ID of the project category to delete.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectCategoryIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectCategoryIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectCategory/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectCategoryIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project category.
     * @param {Number} id The ID of the project category.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20112}
     */
    cloudidRestApi3ProjectCategoryIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectCategoryIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectCategory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectCategoryIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project category.
     * @param {Number} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject48} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectCategoryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20112}
     */
    cloudidRestApi3ProjectCategoryIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectCategoryIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectCategory/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectCategoryPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectCategoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a project category.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject47} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectCategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20112}
     */
    cloudidRestApi3ProjectCategoryPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudidRestApi3FilterIdPermissionProject>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all projects visible to the currently logged in user. Deprecated, use Get projects paginated that supports search and pagination. For projects to be visible, the authenticated user must be granted either Browse projects or Administer projects permissions. If no user is logged in, it returns all projects that are visible for anonymous users.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {Number} opts.recent Returns the most recently accessed projects for the current user. You may specify the number of results to return up to a maximum of 20. If no user is logged in, then the recently accessed projects will be returned based on the current HTTP session.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudidRestApi3FilterIdPermissionProject>}
     */
    cloudidRestApi3ProjectGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'recent': opts['recent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CloudidRestApi3FilterIdPermissionProject];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new project.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject41} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20110}
     */
    cloudidRestApi3ProjectPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20110;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyAvatar2Post operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatar2PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads an avatar for a project.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The length of each side of the crop region.
     * @param {Number} opts.x The X coordinate of the top-left corner of the crop region.
     * @param {Number} opts.y The Y coordinate of the top-left corner of the crop region.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatar2PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20111}
     */
    cloudidRestApi3ProjectProjectIdOrKeyAvatar2Post(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyAvatar2Post");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'size': opts['size'],
        'x': opts['x'],
        'y': opts['y']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20111;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/avatar2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
     * @param {Number} id The ID of the avatar.
     * @param {String} projectIdOrKey The project ID or (case-sensitive) key.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDelete(id, projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDelete");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyAvatarIdDelete");
      }

      let pathParams = {
        'id': id,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyAvatarPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the avatar displayed for a project.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject43} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyAvatarPut(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyAvatarPut");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/avatar', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyAvatarsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project avatars, grouped by system and custom avatars.
     * @param {String} projectIdOrKey The ID or (case-sensitive) key of the project.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyAvatarsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    cloudidRestApi3ProjectProjectIdOrKeyAvatarsGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyAvatarsGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20072;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/avatars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyComponentGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyComponentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated representation of all components existing in a single project. See the Get project components resource if you want to get a full list of versions without pagination.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of components to return per page. Max 50.
     * @param {module:model/String} opts.orderBy Order the results by a particular field:
     * @param {String} opts.query Filter the results using a literal string. Components with a matching name or description are returned (case insensitive).
     * @param {Number} opts.startAt The starting index of the returned list of components. The base index is 0.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyComponentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20073}
     */
    cloudidRestApi3ProjectProjectIdOrKeyComponentGet(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyComponentGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'query': opts['query'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20073;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/component', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyComponentsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyComponentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20074>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all components existing in a single project. See the Get project components paginated resource if you want to get a full list of components with pagination.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyComponentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20074>}
     */
    cloudidRestApi3ProjectProjectIdOrKeyComponentsGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyComponentsGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20074];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyDelete(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyDelete");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the project details for the specified project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that the project description, issue types, and project lead are included in all responses by default:
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20071}
     */
    cloudidRestApi3ProjectProjectIdOrKeyGet(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20071;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project property keys for the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3ProjectProjectIdOrKeyPropertiesGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the property from the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {String} propertyKey The project property key. Use Get project property keys to get a list of all project property keys.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDelete(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of the project property.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {String} propertyKey The project property key. Use Get project property keys to get a list of all project property keys.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGet(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of the project property. You can use project properties to store custom data against the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {String} propertyKey The key of the project property. The maximum length is 255 bytes.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPut(projectIdOrKey, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the project details of an existing project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that the project description, issue types, and project lead are included in all responses by default:
     * @param {module:model/InlineObject42} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20071}
     */
    cloudidRestApi3ProjectProjectIdOrKeyPut(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyPut");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20071;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoleGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of project roles for the project.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20075}
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoleGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20075;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoleIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes actors from a project role for the project.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {String} opts.group The name of the group to remove from the project role.
     * @param {String} opts.user The user account ID of the user to remove from the project role.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoleIdDelete(id, projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdDelete");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdDelete");
      }

      let pathParams = {
        'id': id,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'group': opts['group'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoleIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the project role's details and actors associated with the project. The list of actors is sorted by display name.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoleIdGet(id, projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdGet");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdGet");
      }

      let pathParams = {
        'id': id,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/role/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoleIdPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds additional actors to a project role for the project.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject45} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoleIdPost(id, projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdPost");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdPost");
      }

      let pathParams = {
        'id': id,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoleIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates actors with the project role for the project, replacing all existing actors.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject44} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoleIdPut(id, projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdPut");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoleIdPut");
      }

      let pathParams = {
        'id': id,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyRoledetailsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoledetailsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudidRestApi3FilterIdPermissionRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project roles and the details for each role. Note that the list of project roles is common to all projects.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyRoledetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudidRestApi3FilterIdPermissionRole>}
     */
    cloudidRestApi3ProjectProjectIdOrKeyRoledetailsGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyRoledetailsGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CloudidRestApi3FilterIdPermissionRole];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/roledetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyStatusesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyStatusesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20077>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyStatusesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20077>}
     */
    cloudidRestApi3ProjectProjectIdOrKeyStatusesGet(projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyStatusesGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20077];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/statuses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the project type.
     * @param {String} newProjectTypeKey The key of the new project type.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20071}
     */
    cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPut(newProjectTypeKey, projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'newProjectTypeKey' is set
      if (newProjectTypeKey === undefined || newProjectTypeKey === null) {
        throw new Error("Missing the required parameter 'newProjectTypeKey' when calling cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPut");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyTypeNewProjectTypeKeyPut");
      }

      let pathParams = {
        'newProjectTypeKey': newProjectTypeKey,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20071;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyVersionGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyVersionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a paginated representation of all versions existing in a single project. See the Get project versions resource if you want to get a full list of versions without pagination.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {Number} opts.maxResults The maximum number of versions to return per page. Max 50.
     * @param {module:model/String} opts.orderBy Order the results by a particular field:
     * @param {String} opts.query Filter the results using a literal string. Versions with matching name or description are returned (case insensitive).
     * @param {Number} opts.startAt The starting index of the returned list of versions (page offset). The base index is 0.
     * @param {String} opts.status A comma separated string used to filter the results by version status.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyVersionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20078}
     */
    cloudidRestApi3ProjectProjectIdOrKeyVersionGet(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyVersionGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'status': opts['status']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20078;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/version', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectIdOrKeyVersionsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyVersionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20078Values>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all versions existing in a single project. The response is not paginated. Use Get project versions paginated if you want to get the versions in a project with pagination.
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectIdOrKeyVersionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20078Values>}
     */
    cloudidRestApi3ProjectProjectIdOrKeyVersionsGet(projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling cloudidRestApi3ProjectProjectIdOrKeyVersionsGet");
      }

      let pathParams = {
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20078Values];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectIdOrKey}/versions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20053} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue security scheme associated with the project.
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20053}
     */
    cloudidRestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeGet(projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling cloudidRestApi3ProjectProjectKeyOrIdIssuesecuritylevelschemeGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20053;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectKeyOrIdNotificationschemeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdNotificationschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20062} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a notification scheme associated with the project. See the Get notification scheme resource for more information about notification schemes.
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdNotificationschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20062}
     */
    cloudidRestApi3ProjectProjectKeyOrIdNotificationschemeGet(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling cloudidRestApi3ProjectProjectKeyOrIdNotificationschemeGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20062;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectKeyOrId}/notificationscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectKeyOrIdPermissionschemeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdPermissionschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the permission scheme associated with the project.
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdPermissionschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    cloudidRestApi3ProjectProjectKeyOrIdPermissionschemeGet(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling cloudidRestApi3ProjectProjectKeyOrIdPermissionschemeGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20079;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectKeyOrId}/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectKeyOrIdPermissionschemePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdPermissionschemePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates a permission scheme with a particular project. See Managing project permissions for more information about permission schemes.
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma. Note that permissions are included when you specify any value:
     * @param {module:model/InlineObject46} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdPermissionschemePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    cloudidRestApi3ProjectProjectKeyOrIdPermissionschemePut(projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling cloudidRestApi3ProjectProjectKeyOrIdPermissionschemePut");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20079;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectKeyOrId}/permissionscheme', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectProjectKeyOrIdSecuritylevelGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdSecuritylevelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all issue security levels for the project that the currently authenticated user has access to. If the user does not have permission to see an issue security level, then that level is not returned. If the user lacks the Set Issue Security permission, then an empty list is returned.
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectProjectKeyOrIdSecuritylevelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20080}
     */
    cloudidRestApi3ProjectProjectKeyOrIdSecuritylevelGet(projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling cloudidRestApi3ProjectProjectKeyOrIdSecuritylevelGet");
      }

      let pathParams = {
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20080;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/{projectKeyOrId}/securitylevel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns projects visible to the currently logged in user. For projects to be visible, the authenticated user must be granted either Browse projects or Administer projects permissions. If no user is logged in, then all projects visible to anonymous users are returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.action Filter results by projects for which the calling user has permission to perform the given action. The view action corresponds with the Browse projects project permission, and the edit action corresponds with Administer project permissions.
     * @param {Number} opts.categoryId The ID of the project's category. A complete list of category IDs can be found using the Get all project categories resource.
     * @param {module:model/String} opts.expand Use expand to include additional information in the response. This parameter accepts multiple values separated by a comma:
     * @param {Number} opts.maxResults The maximum number of items to return per page. Max 50.
     * @param {module:model/String} opts.orderBy Order the results by a particular field. If the orderBy field is not set, then projects are listed in ascending order by project key:
     * @param {String} opts.query Filter the results using a literal string. Projects with a matching key or name are returned (case insensitive).
     * @param {Number} opts.startAt The starting index of the first item returned in the page of results (page offset). The base index is 0.
     * @param {String} opts.typeKey Orders results by the project type. This parameter accepts multiple values separated by a comma. Valid values are business, service_desk, and software.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20068}
     */
    cloudidRestApi3ProjectSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'action': opts['action'],
        'categoryId': opts['categoryId'],
        'expand': opts['expand'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'typeKey': opts['typeKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20068;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectTypeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20069>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all project types, whether or not the instance has a valid license for each type.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20069>}
     */
    cloudidRestApi3ProjectTypeGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20069];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/type', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectTypeProjectTypeKeyAccessibleGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectTypeProjectTypeKeyAccessibleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project type if it is accessible to the logged in user.
     * @param {String} projectTypeKey The key of the project type.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectTypeProjectTypeKeyAccessibleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20070}
     */
    cloudidRestApi3ProjectTypeProjectTypeKeyAccessibleGet(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling cloudidRestApi3ProjectTypeProjectTypeKeyAccessibleGet");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20070;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/type/{projectTypeKey}/accessible', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectTypeProjectTypeKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectTypeProjectTypeKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project type.
     * @param {String} projectTypeKey The key of the project type.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectTypeProjectTypeKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20070}
     */
    cloudidRestApi3ProjectTypeProjectTypeKeyGet(projectTypeKey, callback) {
      let postBody = null;
      // verify the required parameter 'projectTypeKey' is set
      if (projectTypeKey === undefined || projectTypeKey === null) {
        throw new Error("Missing the required parameter 'projectTypeKey' when calling cloudidRestApi3ProjectTypeProjectTypeKeyGet");
      }

      let pathParams = {
        'projectTypeKey': projectTypeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20070;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/project/type/{projectTypeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectvalidateKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectvalidateKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates a project key by confirming the key is a valid string and not in use.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The project key.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectvalidateKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20081}
     */
    cloudidRestApi3ProjectvalidateKeyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20081;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectvalidate/key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectvalidateValidProjectKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectvalidateValidProjectKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The project key.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectvalidateValidProjectKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20082}
     */
    cloudidRestApi3ProjectvalidateValidProjectKeyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20082;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectvalidate/validProjectKey', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ProjectvalidateValidProjectNameGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ProjectvalidateValidProjectNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name The project name.
     * @param {module:api/DefaultApi~cloudidRestApi3ProjectvalidateValidProjectNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20083}
     */
    cloudidRestApi3ProjectvalidateValidProjectNameGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20083;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/projectvalidate/validProjectName', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ResolutionGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ResolutionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudidRestApi3FilterIdPermissionProjectProjectCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all issue resolution values.
     * @param {module:api/DefaultApi~cloudidRestApi3ResolutionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudidRestApi3FilterIdPermissionProjectProjectCategory>}
     */
    cloudidRestApi3ResolutionGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CloudidRestApi3FilterIdPermissionProjectProjectCategory];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/resolution', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ResolutionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ResolutionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an issue resolution value.
     * @param {String} id The ID of the issue resolution value.
     * @param {module:api/DefaultApi~cloudidRestApi3ResolutionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20112}
     */
    cloudidRestApi3ResolutionIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ResolutionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/resolution/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CloudidRestApi3FilterIdPermissionRole>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of all project roles, complete with project role details and default actors.
     * @param {module:api/DefaultApi~cloudidRestApi3RoleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CloudidRestApi3FilterIdPermissionRole>}
     */
    cloudidRestApi3RoleGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CloudidRestApi3FilterIdPermissionRole];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdActorsDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdActorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes default actors from the project role. You may remove either a group or user, but you cannot remove a group and a user in the same request.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.group The group name of the group to be removed as a default actor.
     * @param {String} opts.user The user account ID of the user to remove as a default actor.
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdActorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    cloudidRestApi3RoleIdActorsDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdActorsDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'group': opts['group'],
        'user': opts['user']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20084;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}/actors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdActorsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdActorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default actors for the project role.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdActorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    cloudidRestApi3RoleIdActorsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdActorsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20084;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdActorsPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdActorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds default actors to the given role. You may add either groups or users, but you cannot add groups and users in the same request.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject52} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdActorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20084}
     */
    cloudidRestApi3RoleIdActorsPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdActorsPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20084;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
     * @param {Number} id The ID of the project role to delete. Use Get all project roles to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.swap The ID of the project role that will replace the one being deleted.
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3RoleIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'swap': opts['swap']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    cloudidRestApi3RoleIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update either the project role's name or its description.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject51} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    cloudidRestApi3RoleIdPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RoleIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RoleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update the project role's name and description. You must include both a name and a description in the request.
     * @param {Number} id The ID of the project role. Use Get all project roles to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject50} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3RoleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20076}
     */
    cloudidRestApi3RoleIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3RoleIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20076;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3RolePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3RolePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new project role with no default actors. You can use the Add default actors to project role the project method to add default actors to the project role after creating it.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject49} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3RolePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20079}
     */
    cloudidRestApi3RolePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20079;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/role', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensAddToDefaultFieldIdPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensAddToDefaultFieldIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a field to the default tab of the default screen.
     * @param {String} fieldId The ID of the field.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensAddToDefaultFieldIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensAddToDefaultFieldIdPost(fieldId, callback) {
      let postBody = null;
      // verify the required parameter 'fieldId' is set
      if (fieldId === undefined || fieldId === null) {
        throw new Error("Missing the required parameter 'fieldId' when calling cloudidRestApi3ScreensAddToDefaultFieldIdPost");
      }

      let pathParams = {
        'fieldId': fieldId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/addToDefault/{fieldId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all screens.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 100.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdAvailableFieldsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdAvailableFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the fields that can be added to a tab on a screen.
     * @param {Number} screenId The ID of the screen.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdAvailableFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdAvailableFieldsGet(screenId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdAvailableFieldsGet");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/availableFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of tabs for a screen.
     * @param {Number} screenId The ID of the screen.
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectKey The key of the project.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsGet(screenId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsGet");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a tab for a screen.
     * @param {Number} screenId The ID of the screen.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject53} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20085}
     */
    cloudidRestApi3ScreensScreenIdTabsPost(screenId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsPost");
      }

      let pathParams = {
        'screenId': screenId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20085;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a screen tab.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdDelete(screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdDelete");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdDelete");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all fields for a screen tab.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectKey The key of the project.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGet(screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGet");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsGet");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
        'projectKey': opts['projectKey']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a field from a screen tab.
     * @param {String} id The ID of the field.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDelete(id, screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDelete");
      }
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDelete");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdDelete");
      }

      let pathParams = {
        'id': id,
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a screen tab field.
     * @param {String} id The ID of the field.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject56} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePost(id, screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePost");
      }
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePost");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsIdMovePost");
      }

      let pathParams = {
        'id': id,
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a field to a screen tab.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject55} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20086}
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPost(screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPost");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdFieldsPost");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20086;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}/fields', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Moves a screen tab.
     * @param {Number} pos The position of tab. The base index is 0.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPost(pos, screenId, tabId, callback) {
      let postBody = null;
      // verify the required parameter 'pos' is set
      if (pos === undefined || pos === null) {
        throw new Error("Missing the required parameter 'pos' when calling cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPost");
      }
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPost");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdMovePosPost");
      }

      let pathParams = {
        'pos': pos,
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ScreensScreenIdTabsTabIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the name of a screen tab.
     * @param {Number} screenId The ID of the screen.
     * @param {Number} tabId The ID of the screen tab.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject54} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3ScreensScreenIdTabsTabIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20085}
     */
    cloudidRestApi3ScreensScreenIdTabsTabIdPut(screenId, tabId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'screenId' is set
      if (screenId === undefined || screenId === null) {
        throw new Error("Missing the required parameter 'screenId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdPut");
      }
      // verify the required parameter 'tabId' is set
      if (tabId === undefined || tabId === null) {
        throw new Error("Missing the required parameter 'tabId' when calling cloudidRestApi3ScreensScreenIdTabsTabIdPut");
      }

      let pathParams = {
        'screenId': screenId,
        'tabId': tabId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20085;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/screens/{screenId}/tabs/{tabId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3SearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3SearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for issues using JQL. Permissions required: Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about issues in the response. This parameter accepts multiple values separated by a comma:
     * @param {Array.<module:model/String>} opts.fields A comma-separated list of fields to return for each issue, use it to retrieve a subset of fields. Allowed values:
     * @param {Boolean} opts.fieldsByKeys Reference fields by their key (rather than ID).
     * @param {String} opts.jql The JQL that defines the search. If no JQL expression is provided, all issues are returned. Note that username and userkey have been deprecated as search terms for this parameter. See the migration guide for details. Use accountId instead.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 100.
     * @param {Array.<String>} opts.properties A comma-separated list of up to 5 issue properties to include in the results.
     * @param {Number} opts.startAt The index of the first item to return in the page of results (page offset).
     * @param {module:model/String} opts.validateQuery Determines how to validate the JQL query and treat the validation results. Supported values are:
     * @param {module:api/DefaultApi~cloudidRestApi3SearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20087}
     */
    cloudidRestApi3SearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'fields': this.apiClient.buildCollectionParam(opts['fields'], 'csv'),
        'fieldsByKeys': opts['fieldsByKeys'],
        'jql': opts['jql'],
        'maxResults': opts['maxResults'],
        'properties': this.apiClient.buildCollectionParam(opts['properties'], 'csv'),
        'startAt': opts['startAt'],
        'validateQuery': opts['validateQuery']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20087;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3SearchPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3SearchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for issues using JQL. Permissions required: Permission to access Jira.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject57} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3SearchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20087}
     */
    cloudidRestApi3SearchPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20087;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3SecuritylevelIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3SecuritylevelIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of an issue security level.
     * @param {String} id The ID of the issue security level.
     * @param {module:api/DefaultApi~cloudidRestApi3SecuritylevelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20112}
     */
    cloudidRestApi3SecuritylevelIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3SecuritylevelIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20112;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/securitylevel/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3ServerInfoGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3ServerInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20088} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the Jira instance.
     * @param {module:api/DefaultApi~cloudidRestApi3ServerInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20088}
     */
    cloudidRestApi3ServerInfoGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20088;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/serverInfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3SettingsColumnsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3SettingsColumnsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20030>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default issue navigator columns.
     * @param {module:api/DefaultApi~cloudidRestApi3SettingsColumnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20030>}
     */
    cloudidRestApi3SettingsColumnsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20030];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/settings/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3SettingsColumnsPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3SettingsColumnsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default issue navigator columns.
     * @param {module:api/DefaultApi~cloudidRestApi3SettingsColumnsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3SettingsColumnsPut(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/settings/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3StatusGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3StatusGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20045To>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all statuses associated with workflows.
     * @param {module:api/DefaultApi~cloudidRestApi3StatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20045To>}
     */
    cloudidRestApi3StatusGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20045To];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3StatusIdOrNameGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3StatusIdOrNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20089} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a status. The status must be associated with a workflow to be returned.
     * @param {String} idOrName The ID or name of the status.
     * @param {module:api/DefaultApi~cloudidRestApi3StatusIdOrNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20089}
     */
    cloudidRestApi3StatusIdOrNameGet(idOrName, callback) {
      let postBody = null;
      // verify the required parameter 'idOrName' is set
      if (idOrName === undefined || idOrName === null) {
        throw new Error("Missing the required parameter 'idOrName' when calling cloudidRestApi3StatusIdOrNameGet");
      }

      let pathParams = {
        'idOrName': idOrName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20089;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/status/{idOrName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3StatuscategoryGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3StatuscategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse20045ToStatusCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all status categories.
     * @param {module:api/DefaultApi~cloudidRestApi3StatuscategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse20045ToStatusCategory>}
     */
    cloudidRestApi3StatuscategoryGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse20045ToStatusCategory];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/statuscategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3StatuscategoryIdOrKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3StatuscategoryIdOrKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20090} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a status category. Status categories provided a mechanism for categorizing statuses.
     * @param {String} idOrKey The ID or key of the status category.
     * @param {module:api/DefaultApi~cloudidRestApi3StatuscategoryIdOrKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20090}
     */
    cloudidRestApi3StatuscategoryIdOrKeyGet(idOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'idOrKey' is set
      if (idOrKey === undefined || idOrKey === null) {
        throw new Error("Missing the required parameter 'idOrKey' when calling cloudidRestApi3StatuscategoryIdOrKeyGet");
      }

      let pathParams = {
        'idOrKey': idOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20090;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/statuscategory/{idOrKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3TaskTaskIdCancelPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3TaskTaskIdCancelPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a task.
     * @param {String} taskId The ID of the task.
     * @param {module:api/DefaultApi~cloudidRestApi3TaskTaskIdCancelPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3TaskTaskIdCancelPost(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling cloudidRestApi3TaskTaskIdCancelPost");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/task/{taskId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3TaskTaskIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3TaskTaskIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20091} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the status of a long-running asynchronous task.
     * @param {String} taskId The ID of the task.
     * @param {module:api/DefaultApi~cloudidRestApi3TaskTaskIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20091}
     */
    cloudidRestApi3TaskTaskIdGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling cloudidRestApi3TaskTaskIdGet");
      }

      let pathParams = {
        'taskId': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20091;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/task/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the system and custom avatars for a project or issue type.
     * @param {String} entityId The ID of the entity item.
     * @param {String} type The type of the entity. Valid values are project and issuetype.
     * @param {module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20072}
     */
    cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGet(entityId, type, callback) {
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdGet");
      }

      let pathParams = {
        'entityId': entityId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20072;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/universal_avatar/type/{type}/owner/{entityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads a custom avatar for a project or issue type.
     * @param {String} entityId The ID of the entity item.
     * @param {String} type The type of the entity. Valid values are project and issuetype.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.size The length of each side of the crop region.
     * @param {Number} opts.x The X coordinate of the top-left corner of the crop region.
     * @param {Number} opts.y The Y coordinate of the top-left corner of the crop region.
     * @param {module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2017}
     */
    cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPost(entityId, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPost");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerEntityIdPost");
      }

      let pathParams = {
        'entityId': entityId,
        'type': type
      };
      let queryParams = {
        'size': opts['size'],
        'x': opts['x'],
        'y': opts['y']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse2017;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/universal_avatar/type/{type}/owner/{entityId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an avatar from a project or issue type.
     * @param {Number} id The ID of the avatar.
     * @param {String} owningObjectId The ID of the entity item.
     * @param {String} type The type of the entity. Valid values are project and issuetype.
     * @param {module:api/DefaultApi~cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete(id, owningObjectId, type, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }
      // verify the required parameter 'owningObjectId' is set
      if (owningObjectId === undefined || owningObjectId === null) {
        throw new Error("Missing the required parameter 'owningObjectId' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling cloudidRestApi3UniversalAvatarTypeTypeOwnerOwningObjectIdAvatarIdDelete");
      }

      let pathParams = {
        'id': id,
        'owningObjectId': owningObjectId,
        'type': type
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserAssignableMultiProjectSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserAssignableMultiProjectSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users who fulfill both of these criteria:
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.projectKeys A comma-separated list of project keys (case sensitive).
     * @param {String} opts.query A query string that is matched against user attributes, such as key, name, displayName, and emailAddress, to find relevant users. The string can match any part of the attribute's value. For example, query=john matches a user with a displayName of John Smith and a user with an emailAddress of jane.johnson@example.com.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use query instead. See the migration guide for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, ar matches to the username archie but not mark.
     * @param {module:api/DefaultApi~cloudidRestApi3UserAssignableMultiProjectSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004Author>}
     */
    cloudidRestApi3UserAssignableMultiProjectSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'projectKeys': opts['projectKeys'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse2004Author];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/assignable/multiProjectSearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserAssignableSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserAssignableSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that can be assigned to an issue. Use this method to find the list of users who can be assigned to:
     * @param {Object} opts Optional parameters
     * @param {Number} opts.actionDescriptorId The ID of the transition.
     * @param {String} opts.issueKey The key of the issue. Required, unless project is specified.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.project The project ID or project key (case sensitive). Required, unless issueKey is specified.
     * @param {String} opts.query A query string that is matched against user attributes, such as key, name, displayName, and emailAddress, to find relevant users. The string can match any part of the attribute's value. For example, query=john matches a user with a displayName of John Smith and a user with an emailAddress of jane.johnson@example.com. Required, unless username is specified.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use query instead. See the migration guide for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, ar matches to the username archie but not mark. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserAssignableSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    cloudidRestApi3UserAssignableSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'actionDescriptorId': opts['actionDescriptorId'],
        'issueKey': opts['issueKey'],
        'maxResults': opts['maxResults'],
        'project': opts['project'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/assignable/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserBulkGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserBulkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20092} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of users specified in a list of usernames or keys. Permissions required: Administer Jira global permission. Users with permission to access Jira can call this method, but empty search results are returned.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.key Comma-separated list of user keys. Required if username isn't provided.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 200.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {Array.<String>} opts.username Comma-separated list of usernames. Required if key isn't provided.
     * @param {module:api/DefaultApi~cloudidRestApi3UserBulkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20092}
     */
    cloudidRestApi3UserBulkGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': this.apiClient.buildCollectionParam(opts['key'], 'csv'),
        'maxResults': opts['maxResults'],
        'startAt': opts['startAt'],
        'username': this.apiClient.buildCollectionParam(opts['username'], 'csv')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20092;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/bulk', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserColumnsDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserColumnsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the default issue table columns for the user to the system default. If a username is not passed, the calling user's default columns are reset. Permissions required:
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserColumnsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserColumnsDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/columns', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserColumnsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserColumnsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default issue table columns for the user. If a username is not passed in the request, the calling user's details are returned. Permissions required:
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserColumnsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserColumnsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/columns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserColumnsPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserColumnsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default issue table columns for the user. If a username is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed. The parameters for this resource are expressed as HTML form data. For example, in curl: curl -X PUT -d username=<username> -d columns=summary -d columns=description <url> Permissions required:
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserColumnsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserColumnsPut(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/columns', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user. Permissions required: Site administration (i.e., member of the site-admin group).
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {String} opts.key This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin. Required, unless accountId or username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserDelete(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'key': opts['key'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user. Permissions required: None.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {module:model/String} opts.expand Use expand to include additional information about users in the response. This parameter accepts multiple values separated by a comma:
     * @param {String} opts.key This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin. Required, unless accountId or username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    cloudidRestApi3UserGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'expand': opts['expand'],
        'key': opts['key'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserGroupsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20093} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the groups to which a user belongs. Permissions required: Browse users and groups global permission.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The account ID of the user.
     * @param {String} opts.key The key of the user.
     * @param {String} opts.username The username of the user. Deprecated in favour of accountId.
     * @param {module:api/DefaultApi~cloudidRestApi3UserGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20093}
     */
    cloudidRestApi3UserGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'key': opts['key'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20093;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPermissionSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPermissionSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users who fulfill both of these criteria:
     * @param {Object} opts Optional parameters
     * @param {String} opts.issueKey The issue key for the issue.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.permissions A comma-separated list of permissions. The valid permissions are:
     * @param {String} opts.projectKey The project key for the project (case sensitive).
     * @param {String} opts.query A query string that is matched against user attributes, such as key, name, displayName, and emailAddress, to find relevant users. The string can match any part of the attribute's value. For example, query=john matches a user with a displayName of John Smith and a user with an emailAddress of jane.johnson@example.com.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use query instead. See the migration guide for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, ar matches to the username archie but not mark.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPermissionSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004Author>}
     */
    cloudidRestApi3UserPermissionSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'issueKey': opts['issueKey'],
        'maxResults': opts['maxResults'],
        'permissions': opts['permissions'],
        'projectKey': opts['projectKey'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse2004Author];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/permission/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPickerGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPickerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20094} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users whose attributes match the query term. The returned object includes the html field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results. Permissions required: Browse users and groups global permission. Users with permission to access Jira can call this method, but will only get search results for an exact name match.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.exclude This parameter has been deprecated due to privacy changes. Use excludeAccountIds instead. See the migration guide for details. A comma-separated list of usernames to exclude from the search results.
     * @param {Array.<String>} opts.excludeAccountIds A comma-separated list of account IDs to exclude from the search results.
     * @param {Number} opts.maxResults The maximum number of items to return. Maximum is 1000. The total number of matched users is returned in total.
     * @param {String} opts.query A search input that is matched against appropriate user attributes to find relevant users.
     * @param {Boolean} opts.showAvatar Include the URI to the user's avatar.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20094}
     */
    cloudidRestApi3UserPickerGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'exclude': this.apiClient.buildCollectionParam(opts['exclude'], 'csv'),
        'excludeAccountIds': this.apiClient.buildCollectionParam(opts['excludeAccountIds'], 'csv'),
        'maxResults': opts['maxResults'],
        'query': opts['query'],
        'showAvatar': opts['showAvatar']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20094;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/picker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated. The option is provided to set or generate a password for the user. When using the option to generate a password, by omitting password from the request, include \"notification\": \"true\" to ensure the user is sent an email advising them that their account has been created. This email includes a link for the user to set their password. If the notification isn't sent for a generated password, the user will need to be sent a reset password request from Jira. Permissions required: Administer Jira global permission
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject58} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3UserPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20060}
     */
    cloudidRestApi3UserPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20060;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the keys of all properties for a user. Permissions required:
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {String} opts.userKey This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin. Required, unless accountId or username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20010}
     */
    cloudidRestApi3UserPropertiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20010;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPropertiesPropertyKeyDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a property from a user. Permissions required:
     * @param {String} propertyKey The key of the user's property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {String} opts.userKey This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserPropertiesPropertyKeyDelete(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3UserPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPropertiesPropertyKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the value of a user's property. If no property key is provided Get user property keys is called. Permissions required:
     * @param {String} propertyKey The key of the user's property.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {String} opts.userKey This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20011}
     */
    cloudidRestApi3UserPropertiesPropertyKeyGet(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3UserPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserPropertiesPropertyKeyPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the value of a user's property. Use this resource to store custom data against a user. Permissions required:
     * @param {String} propertyKey The key of the user's property. The maximum length of the key is 255 bytes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.accountId The accountId of the user, which uniquely identifies the user across all Atlassian products. For example, 384093:32b4d9w0-f6a5-3535-11a3-9c8c88d10192. Required, unless username or key is specified.
     * @param {String} opts.userKey This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The key of the user. For example, admin. Required, unless accountId or username is specified.
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use accountId instead. See the migration guide for details.The username of the user. For example, admin. Required, unless accountId or key is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserPropertiesPropertyKeyPut(propertyKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling cloudidRestApi3UserPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'propertyKey': propertyKey
      };
      let queryParams = {
        'accountId': opts['accountId'],
        'userKey': opts['userKey'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users that match the search string and property. Permissions required: Browse users and groups global permission. Users with permission to access Jira can call this method, but empty search results are returned.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeActive Include active users.
     * @param {Boolean} opts.includeInactive Include inactive users.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.property A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of nested from {\"something\":{\"nested\":1,\"other\":2}} use thepropertykey.something.nested=1.
     * @param {String} opts.query A query string that is matched against user attributes (key, name, displayName, and emailAddress) to find relevant users. The string can match any part of the attribute's value. For example, query=john matches a user with a displayName of John Smith and a user with an emailAddress of jane.johnson@example.com. Required, unless username is specified.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use query instead. See the migration guide for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, ar matches to the username archie but not mark. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004Author>}
     */
    cloudidRestApi3UserSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeActive': opts['includeActive'],
        'includeInactive': opts['includeInactive'],
        'maxResults': opts['maxResults'],
        'property': opts['property'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse2004Author];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserSearchQueryGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserSearchQueryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds users using a structured query and returns user details. Permissions required: Browse users and groups global permission. The available queries statements are:
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeInactive Include inactive users in the results.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.query The search query.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {module:api/DefaultApi~cloudidRestApi3UserSearchQueryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserSearchQueryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeInactive': opts['includeInactive'],
        'maxResults': opts['maxResults'],
        'query': opts['query'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/search/query', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserSearchQueryKeyGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserSearchQueryKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds users using a structured query and returns a list of user keys. Permissions required: Browse users and groups global permission. The available query statements are:
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeInactive Include inactive users in the results.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.query The search query.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {module:api/DefaultApi~cloudidRestApi3UserSearchQueryKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3UserSearchQueryKeyGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'includeInactive': opts['includeInactive'],
        'maxResults': opts['maxResults'],
        'query': opts['query'],
        'startAt': opts['startAt']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/search/query/key', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3UserViewissueSearchGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3UserViewissueSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2004Author>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of users who fulfill both of these criteria:
     * @param {Object} opts Optional parameters
     * @param {String} opts.issueKey The issue key for the issue. Required, unless projectKey is specified.
     * @param {Number} opts.maxResults The maximum number of items to return per page. Maximum is 1000.
     * @param {String} opts.projectKey The project key for the project (case sensitive). Required, unless issueKey is specified.
     * @param {String} opts.query A query string that is matched against user attributes, such as key, name, displayName, and emailAddress, to find relevant users. The string can match any part of the attribute's value. For example, query=john matches a user with a displayName of John Smith and a user with an emailAddress of jane.johnson@example.com. Required, unless username is specified.
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset).
     * @param {String} opts.username This parameter has been deprecated due to privacy changes. Use query instead. See the migration guide for details. A query string used to search username, display name, and email address. The string is matched to the starting letters of any word in the searched fields. For example, ar matches to the username archie but not mark. Required, unless accountId is specified.
     * @param {module:api/DefaultApi~cloudidRestApi3UserViewissueSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2004Author>}
     */
    cloudidRestApi3UserViewissueSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'issueKey': opts['issueKey'],
        'maxResults': opts['maxResults'],
        'projectKey': opts['projectKey'],
        'query': opts['query'],
        'startAt': opts['startAt'],
        'username': opts['username']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse2004Author];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/user/viewissue/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project version. Deprecated, use Delete and replace version that supports swapping version values in custom fields, in addition to the swapping for fixVersion and affectedVersion provided in this resource. Alternative versions can be provided to update issues that use the deleted version in fixVersion or affectedVersion. If alternatives are not provided, occurrences of fixVersion and affectedVersion that contain the deleted version are cleared. Permissions required: Administer Jira global permission or Administer Projects project permission.
     * @param {String} id The ID of the version.
     * @param {Object} opts Optional parameters
     * @param {String} opts.moveAffectedIssuesTo The ID of the version to update affectedVersion to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @param {String} opts.moveFixIssuesTo The ID of the version to update fixVersion to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionIdDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'moveAffectedIssuesTo': opts['moveAffectedIssuesTo'],
        'moveFixIssuesTo': opts['moveFixIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a project version. Permissions required: Browse projects project permission
     * @param {String} id The ID of the version.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand Use expand to include additional information about version in the response. This parameter accepts multiple values separated by a comma:
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20096}
     */
    cloudidRestApi3VersionIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20096;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdMergetoMoveIssuesToPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdMergetoMoveIssuesToPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merges two project versions. The merge is completed by deleting the version specified in id and replacing any occurrences of its ID in fixVersion with the version ID specified in moveIssuesTo. Consider using Delete and replace version instead. This resource supports swapping version values in fixVersion, affectedVersion, and custom fields. Permissions required: Administer Jira global permission or Administer Projects project permission.
     * @param {String} id The ID of the version to delete.
     * @param {String} moveIssuesTo The ID of the version to merge into.
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdMergetoMoveIssuesToPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionIdMergetoMoveIssuesToPut(id, moveIssuesTo, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdMergetoMoveIssuesToPut");
      }
      // verify the required parameter 'moveIssuesTo' is set
      if (moveIssuesTo === undefined || moveIssuesTo === null) {
        throw new Error("Missing the required parameter 'moveIssuesTo' when calling cloudidRestApi3VersionIdMergetoMoveIssuesToPut");
      }

      let pathParams = {
        'id': id,
        'moveIssuesTo': moveIssuesTo
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}/mergeto/{moveIssuesTo}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdMovePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdMovePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies the version's sequence within the project, which affects the display order of the versions in Jira. Permissions required: Administer Jira global permission or Administer Projects project permission.
     * @param {String} id The ID of the version to be moved.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject61} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdMovePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20096}
     */
    cloudidRestApi3VersionIdMovePost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdMovePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20096;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}/move', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifies a project version. Permissions required: Administer Jira global permission or Administer Projects project permission.
     * @param {String} id The ID of the version.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject60} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdRelatedIssueCountsGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdRelatedIssueCountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20097} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the following counts for a version:
     * @param {String} id The ID of the version.
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdRelatedIssueCountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20097}
     */
    cloudidRestApi3VersionIdRelatedIssueCountsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdRelatedIssueCountsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20097;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdRemoveAndSwapPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdRemoveAndSwapPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project version. Permissions required: Administer Jira global permission or Administer Projects project permission. Alternative versions can be provided to update issues that use the deleted version in fixVersion, affectedVersion, or any version picker custom fields. If alternatives are not provided, occurrences of fixVersion, affectedVersion, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
     * @param {String} id The ID of the version.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject62} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdRemoveAndSwapPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionIdRemoveAndSwapPost(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdRemoveAndSwapPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}/removeAndSwap', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionIdUnresolvedIssueCountGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionIdUnresolvedIssueCountGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20098} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns counts of the issues and unresolved issues for the project version. Permissions required: Browse projects project permission
     * @param {String} id The ID of the version.
     * @param {module:api/DefaultApi~cloudidRestApi3VersionIdUnresolvedIssueCountGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20098}
     */
    cloudidRestApi3VersionIdUnresolvedIssueCountGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3VersionIdUnresolvedIssueCountGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20098;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{id}/unresolvedIssueCount', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20113} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a project version. Permissions required: Administer Jira global permission or Administer Projects project permission.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject59} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20113}
     */
    cloudidRestApi3VersionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20113;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionRemotelinkGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionRemotelinkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20095} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * the global ID of the remote resource that is linked to the versions
     * @param {Object} opts Optional parameters
     * @param {String} opts.globalId the global ID of the remote resource that is linked to the versions
     * @param {module:api/DefaultApi~cloudidRestApi3VersionRemotelinkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20095}
     */
    cloudidRestApi3VersionRemotelinkGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'globalId': opts['globalId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20095;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The version for which to delete ALL existing remote version links
     * @param {String} versionId The version for which to delete ALL existing remote version links
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionVersionIdRemotelinkDelete(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkDelete");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20095} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * a String containing the version ID
     * @param {String} versionId a String containing the version ID
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20095}
     */
    cloudidRestApi3VersionVersionIdRemotelinkGet(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkGet");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20095;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The version ID of the remote link
     * @param {String} globalId The global ID of the remote link
     * @param {String} versionId The version ID of the remote link
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDelete(globalId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDelete");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdDelete");
      }

      let pathParams = {
        'globalId': globalId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink/{globalId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20099} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A REST sub-resource representing a remote version link
     * @param {String} globalId The id of the remote issue link to be returned. If {@code null} (not provided) all remote links for the issue are returned.
     * @param {String} versionId a String containing the version id
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20099}
     */
    cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGet(globalId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdGet");
      }

      let pathParams = {
        'globalId': globalId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20099;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink/{globalId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} globalId 
     * @param {String} versionId 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPost(globalId, versionId, callback) {
      let postBody = null;
      // verify the required parameter 'globalId' is set
      if (globalId === undefined || globalId === null) {
        throw new Error("Missing the required parameter 'globalId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPost");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkGlobalIdPost");
      }

      let pathParams = {
        'globalId': globalId,
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink/{globalId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3VersionVersionIdRemotelinkPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a remote version link via POST. The link's global ID will be taken from the JSON payload if provided; otherwise, it will be generated.
     * @param {String} versionId 
     * @param {module:api/DefaultApi~cloudidRestApi3VersionVersionIdRemotelinkPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3VersionVersionIdRemotelinkPost(versionId, callback) {
      let postBody = null;
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling cloudidRestApi3VersionVersionIdRemotelinkPost");
      }

      let pathParams = {
        'versionId': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/version/{versionId}/remotelink', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200100>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all workflows in Jira or a single workflow.
     * @param {Object} opts Optional parameters
     * @param {String} opts.workflowName The name of the workflow to be returned. Only one workflow can be specified.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200100>}
     */
    cloudidRestApi3WorkflowGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200100];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see Transition properties and Workflow properties.
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The name of the transition property to delete, also known as the name of the property.
     * @param {String} opts.workflowMode The workflow status. Set to live for inactive workflows or draft for draft workflows. Active workflows cannot be edited.
     * @param {String} opts.workflowName The name of the workflow that the transition belongs to.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesDelete(transitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesDelete");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': opts['key'],
        'workflowMode': opts['workflowMode'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflow/transitions/{transitionId}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200101>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see Transition properties and Workflow properties.
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeReservedKeys Some properties with keys that have the jira. prefix are reserved, i.e., not editable. To include these properties in the results, set this parameter to true.
     * @param {String} opts.key The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
     * @param {String} opts.workflowMode The workflow status. Set to live for active and inactive workflows, or draft for draft workflows.
     * @param {String} opts.workflowName The name of the workflow that the transition belongs to.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200101>}
     */
    cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesGet(transitionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesGet");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'includeReservedKeys': opts['includeReservedKeys'],
        'key': opts['key'],
        'workflowMode': opts['workflowMode'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200101];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflow/transitions/{transitionId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see Transition properties and Workflow properties.
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the property being added, also known as the name of the property. Set this to the same value as the key defined in the request body.
     * @param {String} opts.workflowMode The workflow status. Set to live for inactive workflows or draft for draft workflows. Active workflows cannot be edited.
     * @param {String} opts.workflowName The name of the workflow that the transition belongs to.
     * @param {module:model/InlineObject64} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200102}
     */
    cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPost(transitionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPost");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': opts['key'],
        'workflowMode': opts['workflowMode'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200102;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflow/transitions/{transitionId}/properties', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see Transition properties and Workflow properties.
     * @param {Number} transitionId The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the property being updated, also known as the name of the property. Set this to the same value as the key defined in the request body.
     * @param {String} opts.workflowMode The workflow status. Set to live for inactive workflows or draft for draft workflows. Active workflows cannot be edited.
     * @param {String} opts.workflowName The name of the workflow that the transition belongs to.
     * @param {module:model/InlineObject63} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200102}
     */
    cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPut(transitionId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'transitionId' is set
      if (transitionId === undefined || transitionId === null) {
        throw new Error("Missing the required parameter 'transitionId' when calling cloudidRestApi3WorkflowTransitionsTransitionIdPropertiesPut");
      }

      let pathParams = {
        'transitionId': transitionId
      };
      let queryParams = {
        'key': opts['key'],
        'workflowMode': opts['workflowMode'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200102;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflow/transitions/{transitionId}/properties', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdCreatedraftPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdCreatedraftPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme at any given time.
     * @param {Number} id The ID of the active workflow scheme that the draft is created from.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdCreatedraftPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdCreatedraftPost(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdCreatedraftPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/createdraft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDefaultDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the jira workflow).
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to false.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdDefaultDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDefaultDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDefaultGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200103} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has All Unassigned Issue Types listed in its issue types for the workflow scheme in Jira.
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDraftIfExists Set to true to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200103}
     */
    cloudidRestApi3WorkflowschemeIdDefaultGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDefaultGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200103;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDefaultPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default workflow for a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject67} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDefaultPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdDefaultPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDefaultPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as schemeId (for example, schemeId=10301).
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3WorkflowschemeIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftDefaultDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the jira workflow).
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftDefaultDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftDefaultDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/default', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftDefaultGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200103} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has All Unassigned Issue Types listed in its issue types for the workflow scheme in Jira.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200103}
     */
    cloudidRestApi3WorkflowschemeIdDraftDefaultGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftDefaultGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200103;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/default', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftDefaultPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the default workflow for a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject69} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDefaultPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftDefaultPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftDefaultPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/default', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a draft workflow scheme.
     * @param {Number} id The ID of the active workflow scheme that the draft was originally created from.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3WorkflowschemeIdDraftDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See Configuring workflow schemes for more information.Note that:
     * @param {Number} id The ID of the active workflow scheme that the draft was originally created from.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDelete(id, issueType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDelete");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeDelete");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200104} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200104}
     */
    cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGet(id, issueType, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGet");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypeGet");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200104;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the workflow for an issue type in a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject70} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePut(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePut");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdDraftIssuetypeIssueTypePut");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme at any given time.
     * @param {Number} id The ID of the active workflow scheme that the draft was originally created from.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject68} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20115}
     */
    cloudidRestApi3WorkflowschemeIdDraftPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20115;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftWorkflowDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.workflowName The name of the workflow.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3WorkflowschemeIdDraftWorkflowDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftWorkflowDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftWorkflowGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the workflow-issue type mappings for a workflow scheme's draft.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200105}
     */
    cloudidRestApi3WorkflowschemeIdDraftWorkflowGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftWorkflowGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200105;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdDraftWorkflowPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
     * @param {Number} id The ID of the workflow scheme that the draft belongs to.
     * @param {Object} opts Optional parameters
     * @param {String} opts.workflowName The name of the workflow.
     * @param {module:model/InlineObject71} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdDraftWorkflowPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdDraftWorkflowPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdDraftWorkflowPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/draft/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a workflow scheme.
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as schemeId (for example, schemeId=10301).
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDraftIfExists Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to false.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDelete(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDelete");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeDelete");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200104} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the issue type-workflow mapping for an issue type in a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200104}
     */
    cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGet(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGet");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypeGet");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200104;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the workflow for an issue type in a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {String} issueType The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject72} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePut(id, issueType, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePut");
      }
      // verify the required parameter 'issueType' is set
      if (issueType === undefined || issueType === null) {
        throw new Error("Missing the required parameter 'issueType' when calling cloudidRestApi3WorkflowschemeIdIssuetypeIssueTypePut");
      }

      let pathParams = {
        'id': id,
        'issueType': issueType
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/issuetype/{issueType}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that updateDraftIfNeeded is set to true.
     * @param {Number} id The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID will be shown in the URL as schemeId (for example, schemeId=10301).
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject66} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdWorkflowDelete operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.updateDraftIfNeeded Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to false.
     * @param {String} opts.workflowName The name of the workflow.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cloudidRestApi3WorkflowschemeIdWorkflowDelete(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdWorkflowDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'updateDraftIfNeeded': opts['updateDraftIfNeeded'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/workflow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdWorkflowGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the workflow-issue type mappings for a workflow scheme.
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.returnDraftIfExists Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
     * @param {String} opts.workflowName The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200105}
     */
    cloudidRestApi3WorkflowschemeIdWorkflowGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdWorkflowGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'returnDraftIfExists': opts['returnDraftIfExists'],
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200105;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/workflow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemeIdWorkflowPut operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
     * @param {Number} id The ID of the workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {String} opts.workflowName The name of the workflow.
     * @param {module:model/InlineObject73} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemeIdWorkflowPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemeIdWorkflowPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cloudidRestApi3WorkflowschemeIdWorkflowPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'workflowName': opts['workflowName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme/{id}/workflow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorkflowschemePost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorkflowschemePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a workflow scheme.
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject65} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorkflowschemePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse20114}
     */
    cloudidRestApi3WorkflowschemePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse20114;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/workflowscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorklogDeletedGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorklogDeletedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.since The date and time, in UNIX timestamp format, after which deleted worklogs are returned.
     * @param {module:api/DefaultApi~cloudidRestApi3WorklogDeletedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    cloudidRestApi3WorklogDeletedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200106;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/worklog/deleted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorklogListPost operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorklogListPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse200107>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns worklog details for a list of worklog IDs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information about worklogs in the response. This parameter accepts properties that returns the properties of each worklog.
     * @param {module:model/InlineObject74} opts.body 
     * @param {module:api/DefaultApi~cloudidRestApi3WorklogListPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse200107>}
     */
    cloudidRestApi3WorklogListPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InlineResponse200107];
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/worklog/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cloudidRestApi3WorklogUpdatedGet operation.
     * @callback module:api/DefaultApi~cloudidRestApi3WorklogUpdatedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of IDs and update timestamps for worklogs updated after a date and time.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information about worklogs in the response. This parameter accepts properties that returns the properties of each worklog.
     * @param {Number} opts.since The date and time, in UNIX timestamp format, after which updated worklogs are returned.
     * @param {module:api/DefaultApi~cloudidRestApi3WorklogUpdatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200106}
     */
    cloudidRestApi3WorklogUpdatedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'expand': opts['expand'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InlineResponse200106;
      return this.apiClient.callApi(
        '/{cloudid}/rest/api/3/worklog/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
