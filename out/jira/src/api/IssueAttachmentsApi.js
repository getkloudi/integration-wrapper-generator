/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import AttachmentArchiveImpl from '../model/AttachmentArchiveImpl';
import AttachmentArchiveMetadataReadable from '../model/AttachmentArchiveMetadataReadable';
import AttachmentMetadata from '../model/AttachmentMetadata';
import AttachmentSettings from '../model/AttachmentSettings';

/**
* IssueAttachments service.
* @module api/IssueAttachmentsApi
* @version 1.4.0
*/
export default class IssueAttachmentsApi {

    /**
    * Constructs a new IssueAttachmentsApi. 
    * @alias module:api/IssueAttachmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachmentIdDelete operation.
     * @callback module:api/IssueAttachmentsApi~attachmentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete attachment
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the attachment.
     * @param {module:api/IssueAttachmentsApi~attachmentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    attachmentIdDelete(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling attachmentIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attachment/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentIdExpandHumanGet operation.
     * @callback module:api/IssueAttachmentsApi~attachmentIdExpandHumanGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentArchiveMetadataReadable} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all metadata for an expanded attachment
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the attachment.
     * @param {module:api/IssueAttachmentsApi~attachmentIdExpandHumanGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentArchiveMetadataReadable}
     */
    attachmentIdExpandHumanGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling attachmentIdExpandHumanGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentIdExpandHumanGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentArchiveMetadataReadable;
      return this.apiClient.callApi(
        '/attachment/{id}/expand/human', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentIdExpandRawGet operation.
     * @callback module:api/IssueAttachmentsApi~attachmentIdExpandRawGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentArchiveImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get contents metadata for an expanded attachment
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the attachment.
     * @param {module:api/IssueAttachmentsApi~attachmentIdExpandRawGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentArchiveImpl}
     */
    attachmentIdExpandRawGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling attachmentIdExpandRawGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentIdExpandRawGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentArchiveImpl;
      return this.apiClient.callApi(
        '/attachment/{id}/expand/raw', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentIdGet operation.
     * @callback module:api/IssueAttachmentsApi~attachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachment metadata
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the attachment.
     * @param {module:api/IssueAttachmentsApi~attachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentMetadata}
     */
    attachmentIdGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling attachmentIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling attachmentIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentMetadata;
      return this.apiClient.callApi(
        '/attachment/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the attachmentMetaGet operation.
     * @callback module:api/IssueAttachmentsApi~attachmentMetaGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Jira attachment settings
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/IssueAttachmentsApi~attachmentMetaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentSettings}
     */
    attachmentMetaGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling attachmentMetaGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AttachmentSettings;
      return this.apiClient.callApi(
        '/attachment/meta', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyAttachmentsPost operation.
     * @callback module:api/IssueAttachmentsApi~issueIssueIdOrKeyAttachmentsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add attachment
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue that attachments are added to.
     * @param {Object} opts Optional parameters
     * @param {File} opts.body 
     * @param {module:api/IssueAttachmentsApi~issueIssueIdOrKeyAttachmentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    issueIssueIdOrKeyAttachmentsPost(cloudid, issueIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyAttachmentsPost");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyAttachmentsPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'body': opts['body']
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/attachments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
