/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Component from '../model/Component';
import ComponentIssuesCount from '../model/ComponentIssuesCount';
import PageBeanComponentWithIssueCount from '../model/PageBeanComponentWithIssueCount';

/**
* ProjectComponents service.
* @module api/ProjectComponentsApi
* @version 1.4.0
*/
export default class ProjectComponentsApi {

    /**
    * Constructs a new ProjectComponentsApi. 
    * @alias module:api/ProjectComponentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the componentIdDelete operation.
     * @callback module:api/ProjectComponentsApi~componentIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete component
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the component.
     * @param {Object} opts Optional parameters
     * @param {String} opts.moveIssuesTo The ID of the component to replace the deleted component. If this value is null no replacement is made.
     * @param {module:api/ProjectComponentsApi~componentIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    componentIdDelete(cloudid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling componentIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling componentIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
        'moveIssuesTo': opts['moveIssuesTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/component/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the componentIdGet operation.
     * @callback module:api/ProjectComponentsApi~componentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get component
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the component.
     * @param {module:api/ProjectComponentsApi~componentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    componentIdGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling componentIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling componentIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Component;
      return this.apiClient.callApi(
        '/component/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the componentIdPut operation.
     * @callback module:api/ProjectComponentsApi~componentIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update component
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the component.
     * @param {module:model/Component} body 
     * @param {module:api/ProjectComponentsApi~componentIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    componentIdPut(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling componentIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling componentIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling componentIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Component;
      return this.apiClient.callApi(
        '/component/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the componentIdRelatedIssueCountsGet operation.
     * @callback module:api/ProjectComponentsApi~componentIdRelatedIssueCountsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComponentIssuesCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get component issues count
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the component.
     * @param {module:api/ProjectComponentsApi~componentIdRelatedIssueCountsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComponentIssuesCount}
     */
    componentIdRelatedIssueCountsGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling componentIdRelatedIssueCountsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling componentIdRelatedIssueCountsGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ComponentIssuesCount;
      return this.apiClient.callApi(
        '/component/{id}/relatedIssueCounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the componentPost operation.
     * @callback module:api/ProjectComponentsApi~componentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Component} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create component
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/Component} body 
     * @param {module:api/ProjectComponentsApi~componentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Component}
     */
    componentPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling componentPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling componentPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Component;
      return this.apiClient.callApi(
        '/component', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectIdOrKeyComponentGet operation.
     * @callback module:api/ProjectComponentsApi~projectProjectIdOrKeyComponentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanComponentWithIssueCount} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project components paginated
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 50)
     * @param {module:model/String} opts.orderBy [Order](#ordering) the results by a field:   *  `description` Sorts by the component description.  *  `issueCount` Sorts by the count of issues associated with the component.  *  `lead` Sorts by the user key of the component's project lead.  *  `name` Sorts by component name.
     * @param {String} opts.query Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
     * @param {module:api/ProjectComponentsApi~projectProjectIdOrKeyComponentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanComponentWithIssueCount}
     */
    projectProjectIdOrKeyComponentGet(cloudid, projectIdOrKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectIdOrKeyComponentGet");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling projectProjectIdOrKeyComponentGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanComponentWithIssueCount;
      return this.apiClient.callApi(
        '/project/{projectIdOrKey}/component', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectIdOrKeyComponentsGet operation.
     * @callback module:api/ProjectComponentsApi~projectProjectIdOrKeyComponentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Component>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project components
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {module:api/ProjectComponentsApi~projectProjectIdOrKeyComponentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Component>}
     */
    projectProjectIdOrKeyComponentsGet(cloudid, projectIdOrKey, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectIdOrKeyComponentsGet");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling projectProjectIdOrKeyComponentsGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectIdOrKey': projectIdOrKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Component];
      return this.apiClient.callApi(
        '/project/{projectIdOrKey}/components', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
