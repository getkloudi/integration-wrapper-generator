/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueLinkType from '../model/IssueLinkType';
import IssueLinkTypes from '../model/IssueLinkTypes';

/**
* IssueLinkTypes service.
* @module api/IssueLinkTypesApi
* @version 1.4.0
*/
export default class IssueLinkTypesApi {

    /**
    * Constructs a new IssueLinkTypesApi. 
    * @alias module:api/IssueLinkTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issueLinkTypeGet operation.
     * @callback module:api/IssueLinkTypesApi~issueLinkTypeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkTypes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue link types
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/IssueLinkTypesApi~issueLinkTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkTypes}
     */
    issueLinkTypeGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueLinkTypeGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueLinkTypes;
      return this.apiClient.callApi(
        '/issueLinkType', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueLinkTypeIssueLinkTypeIdDelete operation.
     * @callback module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue link type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueLinkTypeIssueLinkTypeIdDelete(cloudid, issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueLinkTypeIssueLinkTypeIdDelete");
      }
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling issueLinkTypeIssueLinkTypeIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/issueLinkType/{issueLinkTypeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueLinkTypeIssueLinkTypeIdGet operation.
     * @callback module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue link type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    issueLinkTypeIssueLinkTypeIdGet(cloudid, issueLinkTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueLinkTypeIssueLinkTypeIdGet");
      }
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling issueLinkTypeIssueLinkTypeIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/issueLinkType/{issueLinkTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueLinkTypeIssueLinkTypeIdPut operation.
     * @callback module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue link type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueLinkTypeId The ID of the issue link type.
     * @param {module:model/IssueLinkType} body 
     * @param {module:api/IssueLinkTypesApi~issueLinkTypeIssueLinkTypeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    issueLinkTypeIssueLinkTypeIdPut(cloudid, issueLinkTypeId, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueLinkTypeIssueLinkTypeIdPut");
      }
      // verify the required parameter 'issueLinkTypeId' is set
      if (issueLinkTypeId === undefined || issueLinkTypeId === null) {
        throw new Error("Missing the required parameter 'issueLinkTypeId' when calling issueLinkTypeIssueLinkTypeIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issueLinkTypeIssueLinkTypeIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueLinkTypeId': issueLinkTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/issueLinkType/{issueLinkTypeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueLinkTypePost operation.
     * @callback module:api/IssueLinkTypesApi~issueLinkTypePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueLinkType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue link type
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/IssueLinkType} body 
     * @param {module:api/IssueLinkTypesApi~issueLinkTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueLinkType}
     */
    issueLinkTypePost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueLinkTypePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issueLinkTypePost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueLinkType;
      return this.apiClient.callApi(
        '/issueLinkType', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
