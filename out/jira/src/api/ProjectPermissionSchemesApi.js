/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IdBean from '../model/IdBean';
import PermissionScheme from '../model/PermissionScheme';
import ProjectIssueSecurityLevels from '../model/ProjectIssueSecurityLevels';
import SecurityScheme from '../model/SecurityScheme';

/**
* ProjectPermissionSchemes service.
* @module api/ProjectPermissionSchemesApi
* @version 1.4.0
*/
export default class ProjectPermissionSchemesApi {

    /**
    * Constructs a new ProjectPermissionSchemesApi. 
    * @alias module:api/ProjectPermissionSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectProjectKeyOrIdIssuesecuritylevelschemeGet operation.
     * @callback module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdIssuesecuritylevelschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project issue security scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdIssuesecuritylevelschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityScheme}
     */
    projectProjectKeyOrIdIssuesecuritylevelschemeGet(cloudid, projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectKeyOrIdIssuesecuritylevelschemeGet");
      }
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling projectProjectKeyOrIdIssuesecuritylevelschemeGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityScheme;
      return this.apiClient.callApi(
        '/project/{projectKeyOrId}/issuesecuritylevelscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectKeyOrIdPermissionschemeGet operation.
     * @callback module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdPermissionschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get assigned permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdPermissionschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    projectProjectKeyOrIdPermissionschemeGet(cloudid, projectKeyOrId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectKeyOrIdPermissionschemeGet");
      }
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling projectProjectKeyOrIdPermissionschemeGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/project/{projectKeyOrId}/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectKeyOrIdPermissionschemePut operation.
     * @callback module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdPermissionschemePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {module:model/IdBean} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdPermissionschemePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    projectProjectKeyOrIdPermissionschemePut(cloudid, projectKeyOrId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectKeyOrIdPermissionschemePut");
      }
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling projectProjectKeyOrIdPermissionschemePut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectProjectKeyOrIdPermissionschemePut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/project/{projectKeyOrId}/permissionscheme', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectKeyOrIdSecuritylevelGet operation.
     * @callback module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdSecuritylevelGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectIssueSecurityLevels} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project issue security levels
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectKeyOrId The project ID or project key (case sensitive).
     * @param {module:api/ProjectPermissionSchemesApi~projectProjectKeyOrIdSecuritylevelGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectIssueSecurityLevels}
     */
    projectProjectKeyOrIdSecuritylevelGet(cloudid, projectKeyOrId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectKeyOrIdSecuritylevelGet");
      }
      // verify the required parameter 'projectKeyOrId' is set
      if (projectKeyOrId === undefined || projectKeyOrId === null) {
        throw new Error("Missing the required parameter 'projectKeyOrId' when calling projectProjectKeyOrIdSecuritylevelGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectKeyOrId': projectKeyOrId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectIssueSecurityLevels;
      return this.apiClient.callApi(
        '/project/{projectKeyOrId}/securitylevel', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
