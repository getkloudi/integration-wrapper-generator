/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorCollection from '../model/ErrorCollection';
import JiraExpressionEvalRequestBean from '../model/JiraExpressionEvalRequestBean';
import JiraExpressionForAnalysis from '../model/JiraExpressionForAnalysis';
import JiraExpressionResult from '../model/JiraExpressionResult';
import JiraExpressionsAnalysis from '../model/JiraExpressionsAnalysis';

/**
* JiraExpressions service.
* @module api/JiraExpressionsApi
* @version 1.4.0
*/
export default class JiraExpressionsApi {

    /**
    * Constructs a new JiraExpressionsApi. 
    * @alias module:api/JiraExpressionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expressionAnalysePost operation.
     * @callback module:api/JiraExpressionsApi~expressionAnalysePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraExpressionsAnalysis} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyse Jira expression
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/JiraExpressionForAnalysis} body The Jira expressions to analyse.
     * @param {module:api/JiraExpressionsApi~expressionAnalysePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraExpressionsAnalysis}
     */
    expressionAnalysePost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling expressionAnalysePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling expressionAnalysePost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JiraExpressionsAnalysis;
      return this.apiClient.callApi(
        '/expression/analyse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressionEvalPost operation.
     * @callback module:api/JiraExpressionsApi~expressionEvalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JiraExpressionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Evaluate Jira expression
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/JiraExpressionEvalRequestBean} body The Jira expression and the evaluation context.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
     * @param {module:api/JiraExpressionsApi~expressionEvalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JiraExpressionResult}
     */
    expressionEvalPost(cloudid, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling expressionEvalPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling expressionEvalPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JiraExpressionResult;
      return this.apiClient.callApi(
        '/expression/eval', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
