/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityProperty from '../model/EntityProperty';
import PropertyKeys from '../model/PropertyKeys';

/**
* IssueWorklogProperties service.
* @module api/IssueWorklogPropertiesApi
* @version 1.4.0
*/
export default class IssueWorklogPropertiesApi {

    /**
    * Constructs a new IssueWorklogPropertiesApi. 
    * @alias module:api/IssueWorklogPropertiesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issueIssueIdOrKeyWorklogWorklogIdPropertiesGet operation.
     * @callback module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklog property keys
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyKeys}
     */
    issueIssueIdOrKeyWorklogWorklogIdPropertiesGet(cloudid, issueIdOrKey, worklogId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesGet");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PropertyKeys;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/worklog/{worklogId}/properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete operation.
     * @callback module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete worklog property
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete(cloudid, issueIdOrKey, worklogId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet operation.
     * @callback module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get worklog property
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the property.
     * @param {module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityProperty}
     */
    issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet(cloudid, issueIdOrKey, worklogId, propertyKey, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityProperty;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut operation.
     * @callback module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set worklog property
     * @param {Object} cloudid Cloudi of the project
     * @param {String} issueIdOrKey The ID or key of the issue.
     * @param {String} worklogId The ID of the worklog.
     * @param {String} propertyKey The key of the issue property. The maximum length is 255 characters.
     * @param {Object} body 
     * @param {module:api/IssueWorklogPropertiesApi~issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut(cloudid, issueIdOrKey, worklogId, propertyKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'issueIdOrKey' is set
      if (issueIdOrKey === undefined || issueIdOrKey === null) {
        throw new Error("Missing the required parameter 'issueIdOrKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'worklogId' is set
      if (worklogId === undefined || worklogId === null) {
        throw new Error("Missing the required parameter 'worklogId' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'propertyKey' is set
      if (propertyKey === undefined || propertyKey === null) {
        throw new Error("Missing the required parameter 'propertyKey' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issueIssueIdOrKeyWorklogWorklogIdPropertiesPropertyKeyPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueIdOrKey': issueIdOrKey,
        'worklogId': worklogId,
        'propertyKey': propertyKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
