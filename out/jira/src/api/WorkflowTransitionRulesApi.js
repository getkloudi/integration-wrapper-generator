/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorCollection from '../model/ErrorCollection';
import PageBeanWorkflowTransitionRules from '../model/PageBeanWorkflowTransitionRules';
import WorkflowTransitionRulesUpdate from '../model/WorkflowTransitionRulesUpdate';
import WorkflowTransitionRulesUpdateErrors from '../model/WorkflowTransitionRulesUpdateErrors';

/**
* WorkflowTransitionRules service.
* @module api/WorkflowTransitionRulesApi
* @version 1.4.0
*/
export default class WorkflowTransitionRulesApi {

    /**
    * Constructs a new WorkflowTransitionRulesApi. 
    * @alias module:api/WorkflowTransitionRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowRuleConfigGet operation.
     * @callback module:api/WorkflowTransitionRulesApi~workflowRuleConfigGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanWorkflowTransitionRules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get workflow transition rule configurations
     * @param {Object} cloudid Cloudi of the project
     * @param {Array.<module:model/String>} types The types of the transition rules to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 10)
     * @param {Array.<String>} opts.keys The transition rule class keys, as defined in the Connect app descriptor, of the transition rules to return.
     * @param {String} opts.expand Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.
     * @param {module:api/WorkflowTransitionRulesApi~workflowRuleConfigGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanWorkflowTransitionRules}
     */
    workflowRuleConfigGet(cloudid, types, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling workflowRuleConfigGet");
      }
      // verify the required parameter 'types' is set
      if (types === undefined || types === null) {
        throw new Error("Missing the required parameter 'types' when calling workflowRuleConfigGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'types': this.apiClient.buildCollectionParam(types, 'multi'),
        'keys': this.apiClient.buildCollectionParam(opts['keys'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanWorkflowTransitionRules;
      return this.apiClient.callApi(
        '/workflow/rule/config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRuleConfigPut operation.
     * @callback module:api/WorkflowTransitionRulesApi~workflowRuleConfigPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTransitionRulesUpdateErrors} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update workflow transition rule configurations
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/WorkflowTransitionRulesUpdate} body 
     * @param {module:api/WorkflowTransitionRulesApi~workflowRuleConfigPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTransitionRulesUpdateErrors}
     */
    workflowRuleConfigPut(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling workflowRuleConfigPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling workflowRuleConfigPut");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowTransitionRulesUpdateErrors;
      return this.apiClient.callApi(
        '/workflow/rule/config', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
