/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkPermissionGrants from '../model/BulkPermissionGrants';
import BulkPermissionsRequestBean from '../model/BulkPermissionsRequestBean';
import ErrorCollection from '../model/ErrorCollection';
import Permissions from '../model/Permissions';
import PermissionsKeysBean from '../model/PermissionsKeysBean';
import PermittedProjects from '../model/PermittedProjects';

/**
* Permissions service.
* @module api/PermissionsApi
* @version 1.4.0
*/
export default class PermissionsApi {

    /**
    * Constructs a new PermissionsApi. 
    * @alias module:api/PermissionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mypermissionsGet operation.
     * @callback module:api/PermissionsApi~mypermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get my permissions
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.projectKey The key of project. Ignored if `projectId` is provided.
     * @param {String} opts.projectId The ID of project.
     * @param {String} opts.issueKey The key of the issue. Ignored if `issueId` is provided.
     * @param {String} opts.issueId The ID of the issue.
     * @param {String} opts.permissions A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).
     * @param {String} opts.projectUuid 
     * @param {String} opts.projectConfigurationUuid 
     * @param {module:api/PermissionsApi~mypermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    mypermissionsGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling mypermissionsGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'projectKey': opts['projectKey'],
        'projectId': opts['projectId'],
        'issueKey': opts['issueKey'],
        'issueId': opts['issueId'],
        'permissions': opts['permissions'],
        'projectUuid': opts['projectUuid'],
        'projectConfigurationUuid': opts['projectConfigurationUuid']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/mypermissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsCheckPost operation.
     * @callback module:api/PermissionsApi~permissionsCheckPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkPermissionGrants} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bulk permissions
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/BulkPermissionsRequestBean} body Details of the permissions to check.
     * @param {module:api/PermissionsApi~permissionsCheckPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkPermissionGrants}
     */
    permissionsCheckPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionsCheckPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionsCheckPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkPermissionGrants;
      return this.apiClient.callApi(
        '/permissions/check', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsGet operation.
     * @callback module:api/PermissionsApi~permissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permissions
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/PermissionsApi~permissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    permissionsGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionsGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsProjectPost operation.
     * @callback module:api/PermissionsApi~permissionsProjectPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermittedProjects} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permitted projects
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/PermissionsKeysBean} body 
     * @param {module:api/PermissionsApi~permissionsProjectPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermittedProjects}
     */
    permissionsProjectPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionsProjectPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionsProjectPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermittedProjects;
      return this.apiClient.callApi(
        '/permissions/project', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
