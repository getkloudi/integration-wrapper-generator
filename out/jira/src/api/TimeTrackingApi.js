/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TimeTrackingConfiguration from '../model/TimeTrackingConfiguration';
import TimeTrackingProvider from '../model/TimeTrackingProvider';

/**
* TimeTracking service.
* @module api/TimeTrackingApi
* @version 1.4.0
*/
export default class TimeTrackingApi {

    /**
    * Constructs a new TimeTrackingApi. 
    * @alias module:api/TimeTrackingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the configurationTimetrackingGet operation.
     * @callback module:api/TimeTrackingApi~configurationTimetrackingGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTrackingProvider} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get selected time tracking provider
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/TimeTrackingApi~configurationTimetrackingGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTrackingProvider}
     */
    configurationTimetrackingGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationTimetrackingGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeTrackingProvider;
      return this.apiClient.callApi(
        '/configuration/timetracking', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationTimetrackingListGet operation.
     * @callback module:api/TimeTrackingApi~configurationTimetrackingListGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TimeTrackingProvider>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all time tracking providers
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/TimeTrackingApi~configurationTimetrackingListGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TimeTrackingProvider>}
     */
    configurationTimetrackingListGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationTimetrackingListGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TimeTrackingProvider];
      return this.apiClient.callApi(
        '/configuration/timetracking/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationTimetrackingOptionsGet operation.
     * @callback module:api/TimeTrackingApi~configurationTimetrackingOptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTrackingConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get time tracking settings
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/TimeTrackingApi~configurationTimetrackingOptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTrackingConfiguration}
     */
    configurationTimetrackingOptionsGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationTimetrackingOptionsGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TimeTrackingConfiguration;
      return this.apiClient.callApi(
        '/configuration/timetracking/options', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationTimetrackingOptionsPut operation.
     * @callback module:api/TimeTrackingApi~configurationTimetrackingOptionsPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeTrackingConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set time tracking settings
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/TimeTrackingConfiguration} body 
     * @param {module:api/TimeTrackingApi~configurationTimetrackingOptionsPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeTrackingConfiguration}
     */
    configurationTimetrackingOptionsPut(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationTimetrackingOptionsPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configurationTimetrackingOptionsPut");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TimeTrackingConfiguration;
      return this.apiClient.callApi(
        '/configuration/timetracking/options', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationTimetrackingPut operation.
     * @callback module:api/TimeTrackingApi~configurationTimetrackingPutCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Select time tracking provider
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/TimeTrackingProvider} body 
     * @param {module:api/TimeTrackingApi~configurationTimetrackingPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    configurationTimetrackingPut(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationTimetrackingPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling configurationTimetrackingPut");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/configuration/timetracking', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
