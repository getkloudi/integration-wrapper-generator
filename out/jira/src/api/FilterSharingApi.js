/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DefaultShareScope from '../model/DefaultShareScope';
import SharePermission from '../model/SharePermission';
import SharePermissionInputBean from '../model/SharePermissionInputBean';

/**
* FilterSharing service.
* @module api/FilterSharingApi
* @version 1.4.0
*/
export default class FilterSharingApi {

    /**
    * Constructs a new FilterSharingApi. 
    * @alias module:api/FilterSharingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the filterDefaultShareScopeGet operation.
     * @callback module:api/FilterSharingApi~filterDefaultShareScopeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultShareScope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default share scope
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/FilterSharingApi~filterDefaultShareScopeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultShareScope}
     */
    filterDefaultShareScopeGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterDefaultShareScopeGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DefaultShareScope;
      return this.apiClient.callApi(
        '/filter/defaultShareScope', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterDefaultShareScopePut operation.
     * @callback module:api/FilterSharingApi~filterDefaultShareScopePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DefaultShareScope} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set default share scope
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/DefaultShareScope} body 
     * @param {module:api/FilterSharingApi~filterDefaultShareScopePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DefaultShareScope}
     */
    filterDefaultShareScopePut(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterDefaultShareScopePut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filterDefaultShareScopePut");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DefaultShareScope;
      return this.apiClient.callApi(
        '/filter/defaultShareScope', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterIdPermissionGet operation.
     * @callback module:api/FilterSharingApi~filterIdPermissionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharePermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share permissions
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the filter.
     * @param {module:api/FilterSharingApi~filterIdPermissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharePermission>}
     */
    filterIdPermissionGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterIdPermissionGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filterIdPermissionGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SharePermission];
      return this.apiClient.callApi(
        '/filter/{id}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterIdPermissionPermissionIdDelete operation.
     * @callback module:api/FilterSharingApi~filterIdPermissionPermissionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete share permission
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/FilterSharingApi~filterIdPermissionPermissionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    filterIdPermissionPermissionIdDelete(cloudid, id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filterIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling filterIdPermissionPermissionIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/filter/{id}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterIdPermissionPermissionIdGet operation.
     * @callback module:api/FilterSharingApi~filterIdPermissionPermissionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharePermission} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share permission
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the filter.
     * @param {Number} permissionId The ID of the share permission.
     * @param {module:api/FilterSharingApi~filterIdPermissionPermissionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharePermission}
     */
    filterIdPermissionPermissionIdGet(cloudid, id, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filterIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling filterIdPermissionPermissionIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharePermission;
      return this.apiClient.callApi(
        '/filter/{id}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filterIdPermissionPost operation.
     * @callback module:api/FilterSharingApi~filterIdPermissionPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharePermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add share permission
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the filter.
     * @param {module:model/SharePermissionInputBean} body 
     * @param {module:api/FilterSharingApi~filterIdPermissionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharePermission>}
     */
    filterIdPermissionPost(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling filterIdPermissionPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling filterIdPermissionPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling filterIdPermissionPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [SharePermission];
      return this.apiClient.callApi(
        '/filter/{id}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
