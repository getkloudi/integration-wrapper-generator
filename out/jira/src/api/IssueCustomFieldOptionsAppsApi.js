/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IssueFieldOption from '../model/IssueFieldOption';
import IssueFieldOptionCreateBean from '../model/IssueFieldOptionCreateBean';
import PageBeanIssueFieldOption from '../model/PageBeanIssueFieldOption';
import TaskProgressBeanRemoveOptionFromIssuesResult from '../model/TaskProgressBeanRemoveOptionFromIssuesResult';

/**
* IssueCustomFieldOptionsApps service.
* @module api/IssueCustomFieldOptionsAppsApi
* @version 1.4.0
*/
export default class IssueCustomFieldOptionsAppsApi {

    /**
    * Constructs a new IssueCustomFieldOptionsAppsApi. 
    * @alias module:api/IssueCustomFieldOptionsAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the fieldFieldKeyOptionGet operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue field options
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 50)
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    fieldFieldKeyOptionGet(cloudid, fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionGet");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionOptionIdDelete operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue field option
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be deleted.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    fieldFieldKeyOptionOptionIdDelete(cloudid, fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionOptionIdDelete");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionOptionIdDelete");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling fieldFieldKeyOptionOptionIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/{optionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionOptionIdGet operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue field option
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be returned.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    fieldFieldKeyOptionOptionIdGet(cloudid, fieldKey, optionId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionOptionIdGet");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionOptionIdGet");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling fieldFieldKeyOptionOptionIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/{optionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionOptionIdIssueDelete operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdIssueDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace issue field option
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be deselected.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.replaceWith The ID of the option that will replace the currently selected option.
     * @param {String} opts.jql A JQL query that specifies the issues to be updated. For example, *project=10000*.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdIssueDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fieldFieldKeyOptionOptionIdIssueDelete(cloudid, fieldKey, optionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionOptionIdIssueDelete");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionOptionIdIssueDelete");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling fieldFieldKeyOptionOptionIdIssueDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
        'replaceWith': opts['replaceWith'],
        'jql': opts['jql']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/{optionId}/issue', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionOptionIdPut operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue field option
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Number} optionId The ID of the option to be updated.
     * @param {module:model/IssueFieldOption} body 
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionOptionIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    fieldFieldKeyOptionOptionIdPut(cloudid, fieldKey, optionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionOptionIdPut");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionOptionIdPut");
      }
      // verify the required parameter 'optionId' is set
      if (optionId === undefined || optionId === null) {
        throw new Error("Missing the required parameter 'optionId' when calling fieldFieldKeyOptionOptionIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fieldFieldKeyOptionOptionIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey,
        'optionId': optionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/{optionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionPost operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue field option
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {module:model/IssueFieldOptionCreateBean} body 
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueFieldOption}
     */
    fieldFieldKeyOptionPost(cloudid, fieldKey, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionPost");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling fieldFieldKeyOptionPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionSuggestionsEditGet operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionSuggestionsEditGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get selectable issue field options
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 50)
     * @param {Number} opts.projectId Filters the results to options that are only available in the specified project.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionSuggestionsEditGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    fieldFieldKeyOptionSuggestionsEditGet(cloudid, fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionSuggestionsEditGet");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionSuggestionsEditGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/suggestions/edit', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fieldFieldKeyOptionSuggestionsSearchGet operation.
     * @callback module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionSuggestionsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueFieldOption} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get visible issue field options
     * @param {Object} cloudid Cloudi of the project
     * @param {String} fieldKey The field key is specified in the following format: **$(app-key)\\_\\_$(field-key)**. For example, *example-add-on\\_\\_example-issue-field*. To determine the `fieldKey` value, do one of the following:   *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.  *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `\"key\": \"teams-add-on__team-issue-field\"`
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page.
     * @param {Number} opts.projectId Filters the results to options that are only available in the specified project.
     * @param {module:api/IssueCustomFieldOptionsAppsApi~fieldFieldKeyOptionSuggestionsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueFieldOption}
     */
    fieldFieldKeyOptionSuggestionsSearchGet(cloudid, fieldKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling fieldFieldKeyOptionSuggestionsSearchGet");
      }
      // verify the required parameter 'fieldKey' is set
      if (fieldKey === undefined || fieldKey === null) {
        throw new Error("Missing the required parameter 'fieldKey' when calling fieldFieldKeyOptionSuggestionsSearchGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'fieldKey': fieldKey
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'projectId': opts['projectId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueFieldOption;
      return this.apiClient.callApi(
        '/field/{fieldKey}/option/suggestions/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
