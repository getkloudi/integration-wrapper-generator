/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApplicationProperty from '../model/ApplicationProperty';
import Configuration from '../model/Configuration';
import SimpleApplicationPropertyBean from '../model/SimpleApplicationPropertyBean';

/**
* JiraSettings service.
* @module api/JiraSettingsApi
* @version 1.4.0
*/
export default class JiraSettingsApi {

    /**
    * Constructs a new JiraSettingsApi. 
    * @alias module:api/JiraSettingsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the applicationPropertiesAdvancedSettingsGet operation.
     * @callback module:api/JiraSettingsApi~applicationPropertiesAdvancedSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get advanced settings
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/JiraSettingsApi~applicationPropertiesAdvancedSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationProperty>}
     */
    applicationPropertiesAdvancedSettingsGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling applicationPropertiesAdvancedSettingsGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationProperty];
      return this.apiClient.callApi(
        '/application-properties/advanced-settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPropertiesGet operation.
     * @callback module:api/JiraSettingsApi~applicationPropertiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApplicationProperty>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get application property
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.key The key of the application property.
     * @param {String} opts.permissionLevel The permission level of all items being returned in the list.
     * @param {String} opts.keyFilter When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.
     * @param {module:api/JiraSettingsApi~applicationPropertiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ApplicationProperty>}
     */
    applicationPropertiesGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling applicationPropertiesGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'key': opts['key'],
        'permissionLevel': opts['permissionLevel'],
        'keyFilter': opts['keyFilter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApplicationProperty];
      return this.apiClient.callApi(
        '/application-properties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the applicationPropertiesIdPut operation.
     * @callback module:api/JiraSettingsApi~applicationPropertiesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApplicationProperty} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set application property
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The key of the application property to update.
     * @param {module:model/SimpleApplicationPropertyBean} body 
     * @param {module:api/JiraSettingsApi~applicationPropertiesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApplicationProperty}
     */
    applicationPropertiesIdPut(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling applicationPropertiesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling applicationPropertiesIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling applicationPropertiesIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApplicationProperty;
      return this.apiClient.callApi(
        '/application-properties/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the configurationGet operation.
     * @callback module:api/JiraSettingsApi~configurationGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get global settings
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/JiraSettingsApi~configurationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Configuration}
     */
    configurationGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling configurationGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Configuration;
      return this.apiClient.callApi(
        '/configuration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
