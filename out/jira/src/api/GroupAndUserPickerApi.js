/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FoundUsersAndGroups from '../model/FoundUsersAndGroups';

/**
* GroupAndUserPicker service.
* @module api/GroupAndUserPickerApi
* @version 1.4.0
*/
export default class GroupAndUserPickerApi {

    /**
    * Constructs a new GroupAndUserPickerApi. 
    * @alias module:api/GroupAndUserPickerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the groupuserpickerGet operation.
     * @callback module:api/GroupAndUserPickerApi~groupuserpickerGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoundUsersAndGroups} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find users and groups
     * @param {Object} cloudid Cloudi of the project
     * @param {String} query The search string.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of items to return in each list. (default to 50)
     * @param {Boolean} opts.showAvatar Whether the user avatar should be returned. If an invalid value is provided, the default value is used. (default to false)
     * @param {String} opts.fieldId The custom field ID of the field this request is for.
     * @param {Array.<String>} opts.projectId The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
     * @param {Array.<String>} opts.issueTypeId The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
     * @param {module:model/String} opts.avatarSize The size of the avatar to return. If an invalid value is provided, the default value is used. (default to 'xsmall')
     * @param {Boolean} opts.caseInsensitive Whether the search for groups should be case insensitive. (default to false)
     * @param {Boolean} opts.excludeConnectAddons Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used. (default to false)
     * @param {module:api/GroupAndUserPickerApi~groupuserpickerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoundUsersAndGroups}
     */
    groupuserpickerGet(cloudid, query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling groupuserpickerGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling groupuserpickerGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'query': query,
        'maxResults': opts['maxResults'],
        'showAvatar': opts['showAvatar'],
        'fieldId': opts['fieldId'],
        'projectId': this.apiClient.buildCollectionParam(opts['projectId'], 'multi'),
        'issueTypeId': this.apiClient.buildCollectionParam(opts['issueTypeId'], 'multi'),
        'avatarSize': opts['avatarSize'],
        'caseInsensitive': opts['caseInsensitive'],
        'excludeConnectAddons': opts['excludeConnectAddons']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FoundUsersAndGroups;
      return this.apiClient.callApi(
        '/groupuserpicker', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
