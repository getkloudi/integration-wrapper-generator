/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PageBeanIssueSecurityLevelMember from '../model/PageBeanIssueSecurityLevelMember';
import SecurityLevel from '../model/SecurityLevel';

/**
* IssueSecurityLevel service.
* @module api/IssueSecurityLevelApi
* @version 1.4.0
*/
export default class IssueSecurityLevelApi {

    /**
    * Constructs a new IssueSecurityLevelApi. 
    * @alias module:api/IssueSecurityLevelApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issuesecurityschemesIssueSecuritySchemeIdMembersGet operation.
     * @callback module:api/IssueSecurityLevelApi~issuesecurityschemesIssueSecuritySchemeIdMembersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanIssueSecurityLevelMember} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security level members
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} issueSecuritySchemeId The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 50)
     * @param {Array.<Number>} opts.issueSecurityLevelId The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/IssueSecurityLevelApi~issuesecurityschemesIssueSecuritySchemeIdMembersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanIssueSecurityLevelMember}
     */
    issuesecurityschemesIssueSecuritySchemeIdMembersGet(cloudid, issueSecuritySchemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuesecurityschemesIssueSecuritySchemeIdMembersGet");
      }
      // verify the required parameter 'issueSecuritySchemeId' is set
      if (issueSecuritySchemeId === undefined || issueSecuritySchemeId === null) {
        throw new Error("Missing the required parameter 'issueSecuritySchemeId' when calling issuesecurityschemesIssueSecuritySchemeIdMembersGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'issueSecuritySchemeId': issueSecuritySchemeId
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults'],
        'issueSecurityLevelId': this.apiClient.buildCollectionParam(opts['issueSecurityLevelId'], 'multi'),
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanIssueSecurityLevelMember;
      return this.apiClient.callApi(
        '/issuesecurityschemes/{issueSecuritySchemeId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the securitylevelIdGet operation.
     * @callback module:api/IssueSecurityLevelApi~securitylevelIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityLevel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue security level
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue security level.
     * @param {module:api/IssueSecurityLevelApi~securitylevelIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityLevel}
     */
    securitylevelIdGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling securitylevelIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling securitylevelIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SecurityLevel;
      return this.apiClient.callApi(
        '/securitylevel/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
