/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectCategory from '../model/ProjectCategory';
import UpdatedProjectCategory from '../model/UpdatedProjectCategory';

/**
* ProjectCategories service.
* @module api/ProjectCategoriesApi
* @version 1.4.0
*/
export default class ProjectCategoriesApi {

    /**
    * Constructs a new ProjectCategoriesApi. 
    * @alias module:api/ProjectCategoriesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectCategoryGet operation.
     * @callback module:api/ProjectCategoriesApi~projectCategoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all project categories
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/ProjectCategoriesApi~projectCategoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectCategory>}
     */
    projectCategoryGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectCategoryGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProjectCategory];
      return this.apiClient.callApi(
        '/projectCategory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCategoryIdDelete operation.
     * @callback module:api/ProjectCategoriesApi~projectCategoryIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project category
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id ID of the project category to delete.
     * @param {module:api/ProjectCategoriesApi~projectCategoryIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectCategoryIdDelete(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectCategoryIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectCategoryIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projectCategory/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCategoryIdGet operation.
     * @callback module:api/ProjectCategoriesApi~projectCategoryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project category by id
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the project category.
     * @param {module:api/ProjectCategoriesApi~projectCategoryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCategory}
     */
    projectCategoryIdGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectCategoryIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectCategoryIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectCategory;
      return this.apiClient.callApi(
        '/projectCategory/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCategoryIdPut operation.
     * @callback module:api/ProjectCategoriesApi~projectCategoryIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project category
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id 
     * @param {module:model/ProjectCategory} body 
     * @param {module:api/ProjectCategoriesApi~projectCategoryIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatedProjectCategory}
     */
    projectCategoryIdPut(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectCategoryIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectCategoryIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectCategoryIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdatedProjectCategory;
      return this.apiClient.callApi(
        '/projectCategory/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectCategoryPost operation.
     * @callback module:api/ProjectCategoriesApi~projectCategoryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create project category
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/ProjectCategory} body 
     * @param {module:api/ProjectCategoriesApi~projectCategoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectCategory}
     */
    projectCategoryPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectCategoryPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectCategoryPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectCategory;
      return this.apiClient.callApi(
        '/projectCategory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
