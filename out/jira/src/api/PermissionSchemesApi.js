/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PermissionGrant from '../model/PermissionGrant';
import PermissionGrants from '../model/PermissionGrants';
import PermissionScheme from '../model/PermissionScheme';
import PermissionSchemes from '../model/PermissionSchemes';

/**
* PermissionSchemes service.
* @module api/PermissionSchemesApi
* @version 1.4.0
*/
export default class PermissionSchemesApi {

    /**
    * Constructs a new PermissionSchemesApi. 
    * @alias module:api/PermissionSchemesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the permissionschemeGet operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionSchemes} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permission schemes
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~permissionschemeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionSchemes}
     */
    permissionschemeGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionSchemes;
      return this.apiClient.callApi(
        '/permissionscheme', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemePost operation.
     * @callback module:api/PermissionSchemesApi~permissionschemePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/PermissionScheme} body The permission scheme to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~permissionschemePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    permissionschemePost(cloudid, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionschemePost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/permissionscheme', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdDelete operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme being deleted.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionschemeSchemeIdDelete(cloudid, schemeId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdDelete");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdGet operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme to return.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    permissionschemeSchemeIdGet(cloudid, schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdGet");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdPermissionGet operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrants} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme grants
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrants}
     */
    permissionschemeSchemeIdPermissionGet(cloudid, schemeId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdPermissionGet");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdPermissionGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionGrants;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}/permission', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdPermissionPermissionIdDelete operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPermissionIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete permission scheme grant
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme to delete the permission grant from.
     * @param {Number} permissionId The ID of the permission grant to delete.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPermissionIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionschemeSchemeIdPermissionPermissionIdDelete(cloudid, schemeId, permissionId, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdPermissionPermissionIdDelete");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling permissionschemeSchemeIdPermissionPermissionIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId,
        'permissionId': permissionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}/permission/{permissionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdPermissionPermissionIdGet operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPermissionIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permission scheme grant
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme.
     * @param {Number} permissionId The ID of the permission grant.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPermissionIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrant}
     */
    permissionschemeSchemeIdPermissionPermissionIdGet(cloudid, schemeId, permissionId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdPermissionPermissionIdGet");
      }
      // verify the required parameter 'permissionId' is set
      if (permissionId === undefined || permissionId === null) {
        throw new Error("Missing the required parameter 'permissionId' when calling permissionschemeSchemeIdPermissionPermissionIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId,
        'permissionId': permissionId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PermissionGrant;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}/permission/{permissionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdPermissionPost operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionGrant} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create permission grant
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme in which to create a new permission grant.
     * @param {module:model/PermissionGrant} body The permission grant to create.
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `permissions` Returns all permission grants for each permission scheme.  *  `user` Returns information about the user who is granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `projectRole` Returns information about the project role granted the permission.  *  `field` Returns information about the custom field granted the permission.  *  `all` Returns all expandable information.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdPermissionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionGrant}
     */
    permissionschemeSchemeIdPermissionPost(cloudid, schemeId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdPermissionPost");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdPermissionPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionschemeSchemeIdPermissionPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionGrant;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}/permission', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionschemeSchemeIdPut operation.
     * @callback module:api/PermissionSchemesApi~permissionschemeSchemeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PermissionScheme} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update permission scheme
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} schemeId The ID of the permission scheme to update.
     * @param {module:model/PermissionScheme} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.expand Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  `all` Returns all expandable information.  *  `field` Returns information about the custom field granted the permission.  *  `group` Returns information about the group that is granted the permission.  *  `permissions` Returns all permission grants for each permission scheme.  *  `projectRole` Returns information about the project role granted the permission.  *  `user` Returns information about the user who is granted the permission.
     * @param {module:api/PermissionSchemesApi~permissionschemeSchemeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PermissionScheme}
     */
    permissionschemeSchemeIdPut(cloudid, schemeId, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling permissionschemeSchemeIdPut");
      }
      // verify the required parameter 'schemeId' is set
      if (schemeId === undefined || schemeId === null) {
        throw new Error("Missing the required parameter 'schemeId' when calling permissionschemeSchemeIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling permissionschemeSchemeIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'schemeId': schemeId
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PermissionScheme;
      return this.apiClient.callApi(
        '/permissionscheme/{schemeId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
