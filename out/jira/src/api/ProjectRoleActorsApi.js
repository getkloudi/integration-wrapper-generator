/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActorInputBean from '../model/ActorInputBean';
import ActorsMap from '../model/ActorsMap';
import ProjectRole from '../model/ProjectRole';
import ProjectRoleActorsUpdateBean from '../model/ProjectRoleActorsUpdateBean';

/**
* ProjectRoleActors service.
* @module api/ProjectRoleActorsApi
* @version 1.4.0
*/
export default class ProjectRoleActorsApi {

    /**
    * Constructs a new ProjectRoleActorsApi. 
    * @alias module:api/ProjectRoleActorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectProjectIdOrKeyRoleIdDelete operation.
     * @callback module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete actors from project role
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user account ID of the user to remove from the project role.
     * @param {String} opts.group The name of the group to remove from the project role.
     * @param {module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    projectProjectIdOrKeyRoleIdDelete(cloudid, projectIdOrKey, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectIdOrKeyRoleIdDelete");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling projectProjectIdOrKeyRoleIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectProjectIdOrKeyRoleIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/project/{projectIdOrKey}/role/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectIdOrKeyRoleIdPost operation.
     * @callback module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add actors to project role
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ActorsMap} body The groups or users to associate with the project role for this project. Provide the user account ID or group name.
     * @param {module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    projectProjectIdOrKeyRoleIdPost(cloudid, projectIdOrKey, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectIdOrKeyRoleIdPost");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling projectProjectIdOrKeyRoleIdPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectProjectIdOrKeyRoleIdPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectProjectIdOrKeyRoleIdPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/project/{projectIdOrKey}/role/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectProjectIdOrKeyRoleIdPut operation.
     * @callback module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set actors for project role
     * @param {Object} cloudid Cloudi of the project
     * @param {String} projectIdOrKey The project ID or project key (case sensitive).
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ProjectRoleActorsUpdateBean} body The groups or users to associate with the project role for this project. Provide the user account ID or group name.
     * @param {module:api/ProjectRoleActorsApi~projectProjectIdOrKeyRoleIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    projectProjectIdOrKeyRoleIdPut(cloudid, projectIdOrKey, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling projectProjectIdOrKeyRoleIdPut");
      }
      // verify the required parameter 'projectIdOrKey' is set
      if (projectIdOrKey === undefined || projectIdOrKey === null) {
        throw new Error("Missing the required parameter 'projectIdOrKey' when calling projectProjectIdOrKeyRoleIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling projectProjectIdOrKeyRoleIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling projectProjectIdOrKeyRoleIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'projectIdOrKey': projectIdOrKey,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/project/{projectIdOrKey}/role/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleIdActorsDelete operation.
     * @callback module:api/ProjectRoleActorsApi~roleIdActorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete default actors from project role
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {Object} opts Optional parameters
     * @param {String} opts.user The user account ID of the user to remove as a default actor.
     * @param {String} opts.group The group name of the group to be removed as a default actor.
     * @param {module:api/ProjectRoleActorsApi~roleIdActorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    roleIdActorsDelete(cloudid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling roleIdActorsDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleIdActorsDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
        'user': opts['user'],
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/role/{id}/actors', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleIdActorsGet operation.
     * @callback module:api/ProjectRoleActorsApi~roleIdActorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default actors for project role
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:api/ProjectRoleActorsApi~roleIdActorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    roleIdActorsGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling roleIdActorsGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleIdActorsGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/role/{id}/actors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleIdActorsPost operation.
     * @callback module:api/ProjectRoleActorsApi~roleIdActorsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRole} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add default actors to project role
     * @param {Object} cloudid Cloudi of the project
     * @param {Number} id The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
     * @param {module:model/ActorInputBean} body 
     * @param {module:api/ProjectRoleActorsApi~roleIdActorsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRole}
     */
    roleIdActorsPost(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling roleIdActorsPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling roleIdActorsPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling roleIdActorsPost");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectRole;
      return this.apiClient.callApi(
        '/role/{id}/actors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
