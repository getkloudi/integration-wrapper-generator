/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutoCompleteSuggestions from '../model/AutoCompleteSuggestions';
import ConvertedJQLQueries from '../model/ConvertedJQLQueries';
import ErrorCollection from '../model/ErrorCollection';
import JQLPersonalDataMigrationRequest from '../model/JQLPersonalDataMigrationRequest';
import JQLReferenceData from '../model/JQLReferenceData';
import JqlQueriesToParse from '../model/JqlQueriesToParse';
import ParsedJqlQueries from '../model/ParsedJqlQueries';

/**
* JQL service.
* @module api/JQLApi
* @version 1.4.0
*/
export default class JQLApi {

    /**
    * Constructs a new JQLApi. 
    * @alias module:api/JQLApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jqlAutocompletedataGet operation.
     * @callback module:api/JQLApi~jqlAutocompletedataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JQLReferenceData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field reference data
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/JQLApi~jqlAutocompletedataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JQLReferenceData}
     */
    jqlAutocompletedataGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling jqlAutocompletedataGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JQLReferenceData;
      return this.apiClient.callApi(
        '/jql/autocompletedata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jqlAutocompletedataSuggestionsGet operation.
     * @callback module:api/JQLApi~jqlAutocompletedataSuggestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutoCompleteSuggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get field auto complete suggestions
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {String} opts.fieldName The name of the field.
     * @param {String} opts.fieldValue The partial field item name entered by the user.
     * @param {String} opts.predicateName The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.
     * @param {String} opts.predicateValue The partial predicate item name entered by the user.
     * @param {module:api/JQLApi~jqlAutocompletedataSuggestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutoCompleteSuggestions}
     */
    jqlAutocompletedataSuggestionsGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling jqlAutocompletedataSuggestionsGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'fieldName': opts['fieldName'],
        'fieldValue': opts['fieldValue'],
        'predicateName': opts['predicateName'],
        'predicateValue': opts['predicateValue']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AutoCompleteSuggestions;
      return this.apiClient.callApi(
        '/jql/autocompletedata/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jqlParsePost operation.
     * @callback module:api/JQLApi~jqlParsePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParsedJqlQueries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parse JQL query
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/JqlQueriesToParse} body 
     * @param {module:api/JQLApi~jqlParsePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParsedJqlQueries}
     */
    jqlParsePost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling jqlParsePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jqlParsePost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ParsedJqlQueries;
      return this.apiClient.callApi(
        '/jql/parse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jqlPdcleanerPost operation.
     * @callback module:api/JQLApi~jqlPdcleanerPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConvertedJQLQueries} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert user identifiers to account IDs in JQL queries
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/JQLPersonalDataMigrationRequest} body 
     * @param {module:api/JQLApi~jqlPdcleanerPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConvertedJQLQueries}
     */
    jqlPdcleanerPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling jqlPdcleanerPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling jqlPdcleanerPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConvertedJQLQueries;
      return this.apiClient.callApi(
        '/jql/pdcleaner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
