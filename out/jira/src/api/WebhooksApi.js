/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContainerForRegisteredWebhooks from '../model/ContainerForRegisteredWebhooks';
import ContainerForWebhookIDs from '../model/ContainerForWebhookIDs';
import ErrorCollection from '../model/ErrorCollection';
import FailedWebhooks from '../model/FailedWebhooks';
import PageBeanWebhook from '../model/PageBeanWebhook';
import WebhookRegistrationDetails from '../model/WebhookRegistrationDetails';
import WebhooksExpirationDate from '../model/WebhooksExpirationDate';

/**
* Webhooks service.
* @module api/WebhooksApi
* @version 1.4.0
*/
export default class WebhooksApi {

    /**
    * Constructs a new WebhooksApi. 
    * @alias module:api/WebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the webhookDelete operation.
     * @callback module:api/WebhooksApi~webhookDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete webhooks by ID
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/ContainerForWebhookIDs} body 
     * @param {module:api/WebhooksApi~webhookDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    webhookDelete(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling webhookDelete");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhookDelete");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhook', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookFailedGet operation.
     * @callback module:api/WebhooksApi~webhookFailedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FailedWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get failed webhooks
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {Number} opts.maxResults The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.
     * @param {Number} opts.after The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.
     * @param {module:api/WebhooksApi~webhookFailedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FailedWebhooks}
     */
    webhookFailedGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling webhookFailedGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'maxResults': opts['maxResults'],
        'after': opts['after']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FailedWebhooks;
      return this.apiClient.callApi(
        '/webhook/failed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookGet operation.
     * @callback module:api/WebhooksApi~webhookGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PageBeanWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get dynamic webhooks for app
     * @param {Object} cloudid Cloudi of the project
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startAt The index of the first item to return in a page of results (page offset). (default to 0)
     * @param {Number} opts.maxResults The maximum number of items to return per page. (default to 100)
     * @param {module:api/WebhooksApi~webhookGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PageBeanWebhook}
     */
    webhookGet(cloudid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling webhookGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
        'startAt': opts['startAt'],
        'maxResults': opts['maxResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PageBeanWebhook;
      return this.apiClient.callApi(
        '/webhook', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookPost operation.
     * @callback module:api/WebhooksApi~webhookPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContainerForRegisteredWebhooks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register dynamic webhooks
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/WebhookRegistrationDetails} body 
     * @param {module:api/WebhooksApi~webhookPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContainerForRegisteredWebhooks}
     */
    webhookPost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling webhookPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhookPost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ContainerForRegisteredWebhooks;
      return this.apiClient.callApi(
        '/webhook', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the webhookRefreshPut operation.
     * @callback module:api/WebhooksApi~webhookRefreshPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebhooksExpirationDate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extend webhook life
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/ContainerForWebhookIDs} body 
     * @param {module:api/WebhooksApi~webhookRefreshPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebhooksExpirationDate}
     */
    webhookRefreshPut(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling webhookRefreshPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling webhookRefreshPut");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WebhooksExpirationDate;
      return this.apiClient.callApi(
        '/webhook/refresh', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
