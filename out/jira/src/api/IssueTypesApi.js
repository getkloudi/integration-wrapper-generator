/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Avatar from '../model/Avatar';
import IssueTypeCreateBean from '../model/IssueTypeCreateBean';
import IssueTypeDetails from '../model/IssueTypeDetails';
import IssueTypeUpdateBean from '../model/IssueTypeUpdateBean';

/**
* IssueTypes service.
* @module api/IssueTypesApi
* @version 1.4.0
*/
export default class IssueTypesApi {

    /**
    * Constructs a new IssueTypesApi. 
    * @alias module:api/IssueTypesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the issuetypeGet operation.
     * @callback module:api/IssueTypesApi~issuetypeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTypeDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all issue types for user
     * @param {Object} cloudid Cloudi of the project
     * @param {module:api/IssueTypesApi~issuetypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTypeDetails>}
     */
    issuetypeGet(cloudid, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeGet");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueTypeDetails];
      return this.apiClient.callApi(
        '/issuetype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypeIdAlternativesGet operation.
     * @callback module:api/IssueTypesApi~issuetypeIdAlternativesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssueTypeDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get alternative issue types
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue type.
     * @param {module:api/IssueTypesApi~issuetypeIdAlternativesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssueTypeDetails>}
     */
    issuetypeIdAlternativesGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeIdAlternativesGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuetypeIdAlternativesGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [IssueTypeDetails];
      return this.apiClient.callApi(
        '/issuetype/{id}/alternatives', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypeIdAvatar2Post operation.
     * @callback module:api/IssueTypesApi~issuetypeIdAvatar2PostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Avatar} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load issue type avatar
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue type.
     * @param {Number} size The length of each side of the crop region.
     * @param {Object} body 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.x The X coordinate of the top-left corner of the crop region. (default to 0)
     * @param {Number} opts.y The Y coordinate of the top-left corner of the crop region. (default to 0)
     * @param {module:api/IssueTypesApi~issuetypeIdAvatar2PostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Avatar}
     */
    issuetypeIdAvatar2Post(cloudid, id, size, body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeIdAvatar2Post");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuetypeIdAvatar2Post");
      }
      // verify the required parameter 'size' is set
      if (size === undefined || size === null) {
        throw new Error("Missing the required parameter 'size' when calling issuetypeIdAvatar2Post");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuetypeIdAvatar2Post");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
        'x': opts['x'],
        'y': opts['y'],
        'size': size
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Avatar;
      return this.apiClient.callApi(
        '/issuetype/{id}/avatar2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypeIdDelete operation.
     * @callback module:api/IssueTypesApi~issuetypeIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete issue type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue type.
     * @param {Object} opts Optional parameters
     * @param {String} opts.alternativeIssueTypeId The ID of the replacement issue type.
     * @param {module:api/IssueTypesApi~issuetypeIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    issuetypeIdDelete(cloudid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuetypeIdDelete");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
        'alternativeIssueTypeId': opts['alternativeIssueTypeId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/issuetype/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypeIdGet operation.
     * @callback module:api/IssueTypesApi~issuetypeIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get issue type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue type.
     * @param {module:api/IssueTypesApi~issuetypeIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    issuetypeIdGet(cloudid, id, callback) {
      let postBody = null;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuetypeIdGet");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/issuetype/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypeIdPut operation.
     * @callback module:api/IssueTypesApi~issuetypeIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update issue type
     * @param {Object} cloudid Cloudi of the project
     * @param {String} id The ID of the issue type.
     * @param {module:model/IssueTypeUpdateBean} body 
     * @param {module:api/IssueTypesApi~issuetypeIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    issuetypeIdPut(cloudid, id, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypeIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling issuetypeIdPut");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuetypeIdPut");
      }

      let pathParams = {
        'cloudid': cloudid,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/issuetype/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuetypePost operation.
     * @callback module:api/IssueTypesApi~issuetypePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IssueTypeDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create issue type
     * @param {Object} cloudid Cloudi of the project
     * @param {module:model/IssueTypeCreateBean} body 
     * @param {module:api/IssueTypesApi~issuetypePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IssueTypeDetails}
     */
    issuetypePost(cloudid, body, callback) {
      let postBody = body;
      // verify the required parameter 'cloudid' is set
      if (cloudid === undefined || cloudid === null) {
        throw new Error("Missing the required parameter 'cloudid' when calling issuetypePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling issuetypePost");
      }

      let pathParams = {
        'cloudid': cloudid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['OAuth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IssueTypeDetails;
      return this.apiClient.callApi(
        '/issuetype', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
