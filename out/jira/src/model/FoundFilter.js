/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FilterSubscription from './FilterSubscription';
import SharePermission from './SharePermission';
import User from './User';

/**
 * The FoundFilter model module.
 * @module model/FoundFilter
 * @version 1.4.0
 */
class FoundFilter {
    /**
     * Constructs a new <code>FoundFilter</code>.
     * Details of a filter identified as part of a search.
     * @alias module:model/FoundFilter
     * @param name {String} The name of the filter. Must be unique.
     */
    constructor(name) { 
        
        FoundFilter.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>FoundFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FoundFilter} obj Optional instance to populate.
     * @return {module:model/FoundFilter} The populated <code>FoundFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FoundFilter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('favourite')) {
                obj['favourite'] = ApiClient.convertToType(data['favourite'], 'Boolean');
            }
            if (data.hasOwnProperty('favouritedCount')) {
                obj['favouritedCount'] = ApiClient.convertToType(data['favouritedCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('jql')) {
                obj['jql'] = ApiClient.convertToType(data['jql'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], User);
            }
            if (data.hasOwnProperty('searchUrl')) {
                obj['searchUrl'] = ApiClient.convertToType(data['searchUrl'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('sharePermissions')) {
                obj['sharePermissions'] = ApiClient.convertToType(data['sharePermissions'], [SharePermission]);
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], [FilterSubscription]);
            }
            if (data.hasOwnProperty('viewUrl')) {
                obj['viewUrl'] = ApiClient.convertToType(data['viewUrl'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A description of the filter.
 * @member {String} description
 */
FoundFilter.prototype['description'] = undefined;

/**
 * Whether the filter is selected as a favorite by any users, not including the filter owner.
 * @member {Boolean} favourite
 */
FoundFilter.prototype['favourite'] = undefined;

/**
 * The count of how many users have selected this filter as a favorite, including the filter owner.
 * @member {Number} favouritedCount
 */
FoundFilter.prototype['favouritedCount'] = undefined;

/**
 * The unique identifier for the filter.
 * @member {String} id
 */
FoundFilter.prototype['id'] = undefined;

/**
 * The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
 * @member {String} jql
 */
FoundFilter.prototype['jql'] = undefined;

/**
 * The name of the filter. Must be unique.
 * @member {String} name
 */
FoundFilter.prototype['name'] = undefined;

/**
 * The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
 * @member {module:model/User} owner
 */
FoundFilter.prototype['owner'] = undefined;

/**
 * A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
 * @member {String} searchUrl
 */
FoundFilter.prototype['searchUrl'] = undefined;

/**
 * The URL of the filter.
 * @member {String} self
 */
FoundFilter.prototype['self'] = undefined;

/**
 * The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
 * @member {Array.<module:model/SharePermission>} sharePermissions
 */
FoundFilter.prototype['sharePermissions'] = undefined;

/**
 * The users that are subscribed to the filter.
 * @member {Array.<module:model/FilterSubscription>} subscriptions
 */
FoundFilter.prototype['subscriptions'] = undefined;

/**
 * A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
 * @member {String} viewUrl
 */
FoundFilter.prototype['viewUrl'] = undefined;






export default FoundFilter;

