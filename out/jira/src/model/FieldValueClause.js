/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryField from './JqlQueryField';

/**
 * The FieldValueClause model module.
 * @module model/FieldValueClause
 * @version 1.4.0
 */
class FieldValueClause {
    /**
     * Constructs a new <code>FieldValueClause</code>.
     * A clause that asserts the current value of a field. For example, &#x60;summary ~ test&#x60;.
     * @alias module:model/FieldValueClause
     * @param field {module:model/JqlQueryField} 
     * @param operand {Object} Details of an operand in a JQL clause.
     * @param operator {module:model/FieldValueClause.OperatorEnum} The operator between the field and operand.
     */
    constructor(field, operand, operator) { 
        
        FieldValueClause.initialize(this, field, operand, operator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, operand, operator) { 
        obj['field'] = field;
        obj['operand'] = operand;
        obj['operator'] = operator;
    }

    /**
     * Constructs a <code>FieldValueClause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldValueClause} obj Optional instance to populate.
     * @return {module:model/FieldValueClause} The populated <code>FieldValueClause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldValueClause();

            if (data.hasOwnProperty('field')) {
                obj['field'] = JqlQueryField.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('operand')) {
                obj['operand'] = ApiClient.convertToType(data['operand'], Object);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/JqlQueryField} field
 */
FieldValueClause.prototype['field'] = undefined;

/**
 * Details of an operand in a JQL clause.
 * @member {Object} operand
 */
FieldValueClause.prototype['operand'] = undefined;

/**
 * The operator between the field and operand.
 * @member {module:model/FieldValueClause.OperatorEnum} operator
 */
FieldValueClause.prototype['operator'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
FieldValueClause['OperatorEnum'] = {

    /**
     * value: "="
     * @const
     */
    "EQUAL": "=",

    /**
     * value: "!="
     * @const
     */
    "NOT_EQUAL": "!=",

    /**
     * value: ">"
     * @const
     */
    "GREATER_THAN": ">",

    /**
     * value: "<"
     * @const
     */
    "LESS_THAN": "<",

    /**
     * value: ">="
     * @const
     */
    "GREATER_THAN_OR_EQUAL_TO": ">=",

    /**
     * value: "<="
     * @const
     */
    "LESS_THAN_OR_EQUAL_TO": "<=",

    /**
     * value: "in"
     * @const
     */
    "in": "in",

    /**
     * value: "not in"
     * @const
     */
    "not in": "not in",

    /**
     * value: "~="
     * @const
     */
    "~&#x3D;": "~=",

    /**
     * value: "is"
     * @const
     */
    "is": "is",

    /**
     * value: "is not"
     * @const
     */
    "is not": "is not"
};



export default FieldValueClause;

