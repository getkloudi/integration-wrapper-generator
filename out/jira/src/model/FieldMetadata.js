/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JsonTypeBean from './JsonTypeBean';

/**
 * The FieldMetadata model module.
 * @module model/FieldMetadata
 * @version 1.4.0
 */
class FieldMetadata {
    /**
     * Constructs a new <code>FieldMetadata</code>.
     * The metadata describing an issue field.
     * @alias module:model/FieldMetadata
     * @param key {String} The key of the field.
     * @param name {String} The name of the field.
     * @param operations {Array.<String>} The list of operations that can be performed on the field.
     * @param required {Boolean} Whether the field is required.
     */
    constructor(key, name, operations, required) { 
        
        FieldMetadata.initialize(this, key, name, operations, required);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, key, name, operations, required) { 
        obj['key'] = key;
        obj['name'] = name;
        obj['operations'] = operations;
        obj['required'] = required;
    }

    /**
     * Constructs a <code>FieldMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldMetadata} obj Optional instance to populate.
     * @return {module:model/FieldMetadata} The populated <code>FieldMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldMetadata();

            if (data.hasOwnProperty('allowedValues')) {
                obj['allowedValues'] = ApiClient.convertToType(data['allowedValues'], [Object]);
            }
            if (data.hasOwnProperty('autoCompleteUrl')) {
                obj['autoCompleteUrl'] = ApiClient.convertToType(data['autoCompleteUrl'], 'String');
            }
            if (data.hasOwnProperty('defaultValue')) {
                obj['defaultValue'] = ApiClient.convertToType(data['defaultValue'], Object);
            }
            if (data.hasOwnProperty('hasDefaultValue')) {
                obj['hasDefaultValue'] = ApiClient.convertToType(data['hasDefaultValue'], 'Boolean');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], ['String']);
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('schema')) {
                obj['schema'] = ApiClient.convertToType(data['schema'], JsonTypeBean);
            }
        }
        return obj;
    }


}

/**
 * The list of values allowed in the field.
 * @member {Array.<Object>} allowedValues
 */
FieldMetadata.prototype['allowedValues'] = undefined;

/**
 * The URL that can be used to automatically complete the field.
 * @member {String} autoCompleteUrl
 */
FieldMetadata.prototype['autoCompleteUrl'] = undefined;

/**
 * The default value of the field.
 * @member {Object} defaultValue
 */
FieldMetadata.prototype['defaultValue'] = undefined;

/**
 * Whether the field has a default value.
 * @member {Boolean} hasDefaultValue
 */
FieldMetadata.prototype['hasDefaultValue'] = undefined;

/**
 * The key of the field.
 * @member {String} key
 */
FieldMetadata.prototype['key'] = undefined;

/**
 * The name of the field.
 * @member {String} name
 */
FieldMetadata.prototype['name'] = undefined;

/**
 * The list of operations that can be performed on the field.
 * @member {Array.<String>} operations
 */
FieldMetadata.prototype['operations'] = undefined;

/**
 * Whether the field is required.
 * @member {Boolean} required
 */
FieldMetadata.prototype['required'] = undefined;

/**
 * The data type of the field.
 * @member {module:model/JsonTypeBean} schema
 */
FieldMetadata.prototype['schema'] = undefined;






export default FieldMetadata;

