/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvatarUrlsBean from './AvatarUrlsBean';
import Component from './Component';
import Hierarchy from './Hierarchy';
import IssueTypeDetails from './IssueTypeDetails';
import ProjectCategory from './ProjectCategory';
import ProjectInsight from './ProjectInsight';
import ProjectPermissions from './ProjectPermissions';
import User from './User';
import Version from './Version';

/**
 * The Project model module.
 * @module model/Project
 * @version 1.4.0
 */
class Project {
    /**
     * Constructs a new <code>Project</code>.
     * Details about a project.
     * @alias module:model/Project
     */
    constructor() { 
        
        Project.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Project</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Project} obj Optional instance to populate.
     * @return {module:model/Project} The populated <code>Project</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Project();

            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], [Component]);
            }
            if (data.hasOwnProperty('archived')) {
                obj['archived'] = ApiClient.convertToType(data['archived'], 'Boolean');
            }
            if (data.hasOwnProperty('archivedBy')) {
                obj['archivedBy'] = ApiClient.convertToType(data['archivedBy'], User);
            }
            if (data.hasOwnProperty('archivedDate')) {
                obj['archivedDate'] = ApiClient.convertToType(data['archivedDate'], 'Date');
            }
            if (data.hasOwnProperty('assigneeType')) {
                obj['assigneeType'] = ApiClient.convertToType(data['assigneeType'], 'String');
            }
            if (data.hasOwnProperty('avatarUrls')) {
                obj['avatarUrls'] = ApiClient.convertToType(data['avatarUrls'], AvatarUrlsBean);
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('deletedBy')) {
                obj['deletedBy'] = ApiClient.convertToType(data['deletedBy'], User);
            }
            if (data.hasOwnProperty('deletedDate')) {
                obj['deletedDate'] = ApiClient.convertToType(data['deletedDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('expand')) {
                obj['expand'] = ApiClient.convertToType(data['expand'], 'String');
            }
            if (data.hasOwnProperty('favourite')) {
                obj['favourite'] = ApiClient.convertToType(data['favourite'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('insight')) {
                obj['insight'] = ApiClient.convertToType(data['insight'], ProjectInsight);
            }
            if (data.hasOwnProperty('isPrivate')) {
                obj['isPrivate'] = ApiClient.convertToType(data['isPrivate'], 'Boolean');
            }
            if (data.hasOwnProperty('issueTypeHierarchy')) {
                obj['issueTypeHierarchy'] = ApiClient.convertToType(data['issueTypeHierarchy'], Hierarchy);
            }
            if (data.hasOwnProperty('issueTypes')) {
                obj['issueTypes'] = ApiClient.convertToType(data['issueTypes'], [IssueTypeDetails]);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('lead')) {
                obj['lead'] = ApiClient.convertToType(data['lead'], User);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], ProjectPermissions);
            }
            if (data.hasOwnProperty('projectCategory')) {
                obj['projectCategory'] = ApiClient.convertToType(data['projectCategory'], ProjectCategory);
            }
            if (data.hasOwnProperty('projectTypeKey')) {
                obj['projectTypeKey'] = ApiClient.convertToType(data['projectTypeKey'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], {'String': Object});
            }
            if (data.hasOwnProperty('retentionTillDate')) {
                obj['retentionTillDate'] = ApiClient.convertToType(data['retentionTillDate'], 'Date');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], {'String': 'String'});
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('simplified')) {
                obj['simplified'] = ApiClient.convertToType(data['simplified'], 'Boolean');
            }
            if (data.hasOwnProperty('style')) {
                obj['style'] = ApiClient.convertToType(data['style'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('uuid')) {
                obj['uuid'] = ApiClient.convertToType(data['uuid'], 'String');
            }
            if (data.hasOwnProperty('versions')) {
                obj['versions'] = ApiClient.convertToType(data['versions'], [Version]);
            }
        }
        return obj;
    }


}

/**
 * List of the components contained in the project.
 * @member {Array.<module:model/Component>} components
 */
Project.prototype['components'] = undefined;

/**
 * Whether the project is archived.
 * @member {Boolean} archived
 */
Project.prototype['archived'] = undefined;

/**
 * The user who archived the project.
 * @member {module:model/User} archivedBy
 */
Project.prototype['archivedBy'] = undefined;

/**
 * The date when the project was archived.
 * @member {Date} archivedDate
 */
Project.prototype['archivedDate'] = undefined;

/**
 * The default assignee when creating issues for this project.
 * @member {module:model/Project.AssigneeTypeEnum} assigneeType
 */
Project.prototype['assigneeType'] = undefined;

/**
 * The URLs of the project's avatars.
 * @member {module:model/AvatarUrlsBean} avatarUrls
 */
Project.prototype['avatarUrls'] = undefined;

/**
 * Whether the project is marked as deleted.
 * @member {Boolean} deleted
 */
Project.prototype['deleted'] = undefined;

/**
 * The user who marked the project as deleted.
 * @member {module:model/User} deletedBy
 */
Project.prototype['deletedBy'] = undefined;

/**
 * The date when the project was marked as deleted.
 * @member {Date} deletedDate
 */
Project.prototype['deletedDate'] = undefined;

/**
 * A brief description of the project.
 * @member {String} description
 */
Project.prototype['description'] = undefined;

/**
 * An email address associated with the project.
 * @member {String} email
 */
Project.prototype['email'] = undefined;

/**
 * Expand options that include additional project details in the response.
 * @member {String} expand
 */
Project.prototype['expand'] = undefined;

/**
 * Whether the project is selected as a favorite.
 * @member {Boolean} favourite
 */
Project.prototype['favourite'] = undefined;

/**
 * The ID of the project.
 * @member {String} id
 */
Project.prototype['id'] = undefined;

/**
 * Insights about the project.
 * @member {module:model/ProjectInsight} insight
 */
Project.prototype['insight'] = undefined;

/**
 * Whether the project is private.
 * @member {Boolean} isPrivate
 */
Project.prototype['isPrivate'] = undefined;

/**
 * The issue type hierarchy for the project
 * @member {module:model/Hierarchy} issueTypeHierarchy
 */
Project.prototype['issueTypeHierarchy'] = undefined;

/**
 * List of the issue types available in the project.
 * @member {Array.<module:model/IssueTypeDetails>} issueTypes
 */
Project.prototype['issueTypes'] = undefined;

/**
 * The key of the project.
 * @member {String} key
 */
Project.prototype['key'] = undefined;

/**
 * The username of the project lead.
 * @member {module:model/User} lead
 */
Project.prototype['lead'] = undefined;

/**
 * The name of the project.
 * @member {String} name
 */
Project.prototype['name'] = undefined;

/**
 * User permissions on the project
 * @member {module:model/ProjectPermissions} permissions
 */
Project.prototype['permissions'] = undefined;

/**
 * The category the project belongs to.
 * @member {module:model/ProjectCategory} projectCategory
 */
Project.prototype['projectCategory'] = undefined;

/**
 * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
 * @member {module:model/Project.ProjectTypeKeyEnum} projectTypeKey
 */
Project.prototype['projectTypeKey'] = undefined;

/**
 * Map of project properties
 * @member {Object.<String, Object>} properties
 */
Project.prototype['properties'] = undefined;

/**
 * The date when the project is deleted permanently.
 * @member {Date} retentionTillDate
 */
Project.prototype['retentionTillDate'] = undefined;

/**
 * The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
 * @member {Object.<String, String>} roles
 */
Project.prototype['roles'] = undefined;

/**
 * The URL of the project details.
 * @member {String} self
 */
Project.prototype['self'] = undefined;

/**
 * Whether the project is simplified.
 * @member {Boolean} simplified
 */
Project.prototype['simplified'] = undefined;

/**
 * The type of the project.
 * @member {module:model/Project.StyleEnum} style
 */
Project.prototype['style'] = undefined;

/**
 * A link to information about this project, such as project documentation.
 * @member {String} url
 */
Project.prototype['url'] = undefined;

/**
 * Unique ID for next-gen projects.
 * @member {String} uuid
 */
Project.prototype['uuid'] = undefined;

/**
 * The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
 * @member {Array.<module:model/Version>} versions
 */
Project.prototype['versions'] = undefined;





/**
 * Allowed values for the <code>assigneeType</code> property.
 * @enum {String}
 * @readonly
 */
Project['AssigneeTypeEnum'] = {

    /**
     * value: "PROJECT_LEAD"
     * @const
     */
    "PROJECT_LEAD": "PROJECT_LEAD",

    /**
     * value: "UNASSIGNED"
     * @const
     */
    "UNASSIGNED": "UNASSIGNED"
};


/**
 * Allowed values for the <code>projectTypeKey</code> property.
 * @enum {String}
 * @readonly
 */
Project['ProjectTypeKeyEnum'] = {

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "service_desk"
     * @const
     */
    "service_desk": "service_desk",

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};


/**
 * Allowed values for the <code>style</code> property.
 * @enum {String}
 * @readonly
 */
Project['StyleEnum'] = {

    /**
     * value: "CLASSIC"
     * @const
     */
    "CLASSIC": "CLASSIC",

    /**
     * value: "NEXTGEN"
     * @const
     */
    "NEXTGEN": "NEXTGEN",

    /**
     * value: "classic"
     * @const
     */
    "classic": "classic",

    /**
     * value: "next-gen"
     * @const
     */
    "next-gen": "next-gen"
};



export default Project;

