/**
 * Jira
 * The Jira Cloud Platform REST API
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InlineObject66 model module.
 * @module model/InlineObject66
 * @version 1.3.0
 */
class InlineObject66 {
    /**
     * Constructs a new <code>InlineObject66</code>.
     * @alias module:model/InlineObject66
     */
    constructor() { 
        
        InlineObject66.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineObject66</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineObject66} obj Optional instance to populate.
     * @return {module:model/InlineObject66} The populated <code>InlineObject66</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineObject66();

            if (data.hasOwnProperty('defaultWorkflow')) {
                obj['defaultWorkflow'] = ApiClient.convertToType(data['defaultWorkflow'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('issueTypeMappings')) {
                obj['issueTypeMappings'] = ApiClient.convertToType(data['issueTypeMappings'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('updateDraftIfNeeded')) {
                obj['updateDraftIfNeeded'] = ApiClient.convertToType(data['updateDraftIfNeeded'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The name of the default workflow for the workflow scheme. The default workflow has All Unassigned Issue Types assigned to it in Jira. If defaultWorkflow is not specified when creating a workflow scheme, it is set to Jira Workflow (jira).
 * @member {String} defaultWorkflow
 */
InlineObject66.prototype['defaultWorkflow'] = undefined;

/**
 * The description of the workflow scheme.
 * @member {String} description
 */
InlineObject66.prototype['description'] = undefined;

/**
 * The issue type-project mappings, where each mapping is an issue type ID and project name pair. Note that an issue type can only be mapped to one project in a workflow scheme.
 * @member {Object} issueTypeMappings
 */
InlineObject66.prototype['issueTypeMappings'] = undefined;

/**
 * The name of the workflow scheme. The name must be unique. Maximum length 255 characters.
 * @member {String} name
 */
InlineObject66.prototype['name'] = undefined;

/**
 * Indicates whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
 * @member {Boolean} updateDraftIfNeeded
 */
InlineObject66.prototype['updateDraftIfNeeded'] = undefined;






export default InlineObject66;

