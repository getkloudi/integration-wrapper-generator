/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryClauseTimePredicate from './JqlQueryClauseTimePredicate';
import JqlQueryField from './JqlQueryField';

/**
 * The FieldWasClause model module.
 * @module model/FieldWasClause
 * @version 1.4.0
 */
class FieldWasClause {
    /**
     * Constructs a new <code>FieldWasClause</code>.
     * A clause that asserts a previous value of a field. For example, &#x60;status WAS \&quot;Resolved\&quot; BY currentUser() BEFORE \&quot;2019/02/02\&quot;&#x60;. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
     * @alias module:model/FieldWasClause
     * @param field {module:model/JqlQueryField} 
     * @param operand {Object} Details of an operand in a JQL clause.
     * @param operator {module:model/FieldWasClause.OperatorEnum} The operator between the field and operand.
     * @param predicates {Array.<module:model/JqlQueryClauseTimePredicate>} The list of time predicates.
     */
    constructor(field, operand, operator, predicates) { 
        
        FieldWasClause.initialize(this, field, operand, operator, predicates);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, field, operand, operator, predicates) { 
        obj['field'] = field;
        obj['operand'] = operand;
        obj['operator'] = operator;
        obj['predicates'] = predicates;
    }

    /**
     * Constructs a <code>FieldWasClause</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FieldWasClause} obj Optional instance to populate.
     * @return {module:model/FieldWasClause} The populated <code>FieldWasClause</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FieldWasClause();

            if (data.hasOwnProperty('field')) {
                obj['field'] = JqlQueryField.constructFromObject(data['field']);
            }
            if (data.hasOwnProperty('operand')) {
                obj['operand'] = ApiClient.convertToType(data['operand'], Object);
            }
            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('predicates')) {
                obj['predicates'] = ApiClient.convertToType(data['predicates'], [JqlQueryClauseTimePredicate]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/JqlQueryField} field
 */
FieldWasClause.prototype['field'] = undefined;

/**
 * Details of an operand in a JQL clause.
 * @member {Object} operand
 */
FieldWasClause.prototype['operand'] = undefined;

/**
 * The operator between the field and operand.
 * @member {module:model/FieldWasClause.OperatorEnum} operator
 */
FieldWasClause.prototype['operator'] = undefined;

/**
 * The list of time predicates.
 * @member {Array.<module:model/JqlQueryClauseTimePredicate>} predicates
 */
FieldWasClause.prototype['predicates'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
FieldWasClause['OperatorEnum'] = {

    /**
     * value: "was"
     * @const
     */
    "was": "was",

    /**
     * value: "was in"
     * @const
     */
    "was in": "was in",

    /**
     * value: "was not in"
     * @const
     */
    "was not in": "was not in",

    /**
     * value: "was not"
     * @const
     */
    "was not": "was not"
};



export default FieldWasClause;

