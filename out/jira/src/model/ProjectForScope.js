/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvatarUrlsBean from './AvatarUrlsBean';
import UpdatedProjectCategory from './UpdatedProjectCategory';

/**
 * The ProjectForScope model module.
 * @module model/ProjectForScope
 * @version 1.4.0
 */
class ProjectForScope {
    /**
     * Constructs a new <code>ProjectForScope</code>.
     * Details about a next-gen project.
     * @alias module:model/ProjectForScope
     */
    constructor() { 
        
        ProjectForScope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProjectForScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectForScope} obj Optional instance to populate.
     * @return {module:model/ProjectForScope} The populated <code>ProjectForScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectForScope();

            if (data.hasOwnProperty('avatarUrls')) {
                obj['avatarUrls'] = ApiClient.convertToType(data['avatarUrls'], AvatarUrlsBean);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projectCategory')) {
                obj['projectCategory'] = ApiClient.convertToType(data['projectCategory'], UpdatedProjectCategory);
            }
            if (data.hasOwnProperty('projectTypeKey')) {
                obj['projectTypeKey'] = ApiClient.convertToType(data['projectTypeKey'], 'String');
            }
            if (data.hasOwnProperty('self')) {
                obj['self'] = ApiClient.convertToType(data['self'], 'String');
            }
            if (data.hasOwnProperty('simplified')) {
                obj['simplified'] = ApiClient.convertToType(data['simplified'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * The URLs of the project's avatars.
 * @member {module:model/AvatarUrlsBean} avatarUrls
 */
ProjectForScope.prototype['avatarUrls'] = undefined;

/**
 * The ID of the project.
 * @member {String} id
 */
ProjectForScope.prototype['id'] = undefined;

/**
 * The key of the project.
 * @member {String} key
 */
ProjectForScope.prototype['key'] = undefined;

/**
 * The name of the project.
 * @member {String} name
 */
ProjectForScope.prototype['name'] = undefined;

/**
 * The category the project belongs to.
 * @member {module:model/UpdatedProjectCategory} projectCategory
 */
ProjectForScope.prototype['projectCategory'] = undefined;

/**
 * The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
 * @member {module:model/ProjectForScope.ProjectTypeKeyEnum} projectTypeKey
 */
ProjectForScope.prototype['projectTypeKey'] = undefined;

/**
 * The URL of the project details.
 * @member {String} self
 */
ProjectForScope.prototype['self'] = undefined;

/**
 * Whether or not the project is simplified.
 * @member {Boolean} simplified
 */
ProjectForScope.prototype['simplified'] = undefined;





/**
 * Allowed values for the <code>projectTypeKey</code> property.
 * @enum {String}
 * @readonly
 */
ProjectForScope['ProjectTypeKeyEnum'] = {

    /**
     * value: "software"
     * @const
     */
    "software": "software",

    /**
     * value: "service_desk"
     * @const
     */
    "service_desk": "service_desk",

    /**
     * value: "business"
     * @const
     */
    "business": "business"
};



export default ProjectForScope;

