/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JqlQueryFieldEntityProperty from './JqlQueryFieldEntityProperty';

/**
 * The JqlQueryField model module.
 * @module model/JqlQueryField
 * @version 1.4.0
 */
class JqlQueryField {
    /**
     * Constructs a new <code>JqlQueryField</code>.
     * A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
     * @alias module:model/JqlQueryField
     * @param name {String} The name of the field.
     */
    constructor(name) { 
        
        JqlQueryField.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>JqlQueryField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JqlQueryField} obj Optional instance to populate.
     * @return {module:model/JqlQueryField} The populated <code>JqlQueryField</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JqlQueryField();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = ApiClient.convertToType(data['property'], [JqlQueryFieldEntityProperty]);
            }
        }
        return obj;
    }


}

/**
 * The name of the field.
 * @member {String} name
 */
JqlQueryField.prototype['name'] = undefined;

/**
 * When the field refers to a value in an entity property, details of the entity property value.
 * @member {Array.<module:model/JqlQueryFieldEntityProperty>} property
 */
JqlQueryField.prototype['property'] = undefined;






export default JqlQueryField;

