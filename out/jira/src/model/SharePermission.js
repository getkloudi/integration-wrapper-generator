/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GroupName from './GroupName';
import Project from './Project';
import ProjectRole from './ProjectRole';

/**
 * The SharePermission model module.
 * @module model/SharePermission
 * @version 1.4.0
 */
class SharePermission {
    /**
     * Constructs a new <code>SharePermission</code>.
     * Details of a share permission for the filter.
     * @alias module:model/SharePermission
     * @param type {module:model/SharePermission.TypeEnum} The type of share permission:   *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
     */
    constructor(type) { 
        
        SharePermission.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SharePermission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharePermission} obj Optional instance to populate.
     * @return {module:model/SharePermission} The populated <code>SharePermission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharePermission();

            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], GroupName);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], Project);
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], ProjectRole);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The group that the filter is shared with. For a request, specify the `name` property for the group.
 * @member {module:model/GroupName} group
 */
SharePermission.prototype['group'] = undefined;

/**
 * The unique identifier of the share permission.
 * @member {Number} id
 */
SharePermission.prototype['id'] = undefined;

/**
 * The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.   For a request, specify the `id` for the project.
 * @member {module:model/Project} project
 */
SharePermission.prototype['project'] = undefined;

/**
 * The project role that the filter is shared with.   For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
 * @member {module:model/ProjectRole} role
 */
SharePermission.prototype['role'] = undefined;

/**
 * The type of share permission:   *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
 * @member {module:model/SharePermission.TypeEnum} type
 */
SharePermission.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SharePermission['TypeEnum'] = {

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "projectRole"
     * @const
     */
    "projectRole": "projectRole",

    /**
     * value: "global"
     * @const
     */
    "global": "global",

    /**
     * value: "loggedin"
     * @const
     */
    "loggedin": "loggedin",

    /**
     * value: "authenticated"
     * @const
     */
    "authenticated": "authenticated",

    /**
     * value: "project-unknown"
     * @const
     */
    "project-unknown": "project-unknown"
};



export default SharePermission;

