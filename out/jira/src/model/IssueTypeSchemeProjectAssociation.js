/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IssueTypeSchemeProjectAssociation model module.
 * @module model/IssueTypeSchemeProjectAssociation
 * @version 1.4.0
 */
class IssueTypeSchemeProjectAssociation {
    /**
     * Constructs a new <code>IssueTypeSchemeProjectAssociation</code>.
     * Details of the association between an issue type scheme and project.
     * @alias module:model/IssueTypeSchemeProjectAssociation
     * @param issueTypeSchemeId {String} The ID of the issue type scheme.
     * @param projectId {String} The ID of the project.
     */
    constructor(issueTypeSchemeId, projectId) { 
        
        IssueTypeSchemeProjectAssociation.initialize(this, issueTypeSchemeId, projectId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, issueTypeSchemeId, projectId) { 
        obj['issueTypeSchemeId'] = issueTypeSchemeId;
        obj['projectId'] = projectId;
    }

    /**
     * Constructs a <code>IssueTypeSchemeProjectAssociation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IssueTypeSchemeProjectAssociation} obj Optional instance to populate.
     * @return {module:model/IssueTypeSchemeProjectAssociation} The populated <code>IssueTypeSchemeProjectAssociation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IssueTypeSchemeProjectAssociation();

            if (data.hasOwnProperty('issueTypeSchemeId')) {
                obj['issueTypeSchemeId'] = ApiClient.convertToType(data['issueTypeSchemeId'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The ID of the issue type scheme.
 * @member {String} issueTypeSchemeId
 */
IssueTypeSchemeProjectAssociation.prototype['issueTypeSchemeId'] = undefined;

/**
 * The ID of the project.
 * @member {String} projectId
 */
IssueTypeSchemeProjectAssociation.prototype['projectId'] = undefined;






export default IssueTypeSchemeProjectAssociation;

