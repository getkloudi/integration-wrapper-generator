/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharePermissionInputBean model module.
 * @module model/SharePermissionInputBean
 * @version 1.4.0
 */
class SharePermissionInputBean {
    /**
     * Constructs a new <code>SharePermissionInputBean</code>.
     * @alias module:model/SharePermissionInputBean
     * @param type {module:model/SharePermissionInputBean.TypeEnum} The type of the share permission.Specify the type as follows:   *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
     */
    constructor(type) { 
        
        SharePermissionInputBean.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>SharePermissionInputBean</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharePermissionInputBean} obj Optional instance to populate.
     * @return {module:model/SharePermissionInputBean} The populated <code>SharePermissionInputBean</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharePermissionInputBean();

            if (data.hasOwnProperty('groupname')) {
                obj['groupname'] = ApiClient.convertToType(data['groupname'], 'String');
            }
            if (data.hasOwnProperty('projectId')) {
                obj['projectId'] = ApiClient.convertToType(data['projectId'], 'String');
            }
            if (data.hasOwnProperty('projectRoleId')) {
                obj['projectRoleId'] = ApiClient.convertToType(data['projectRoleId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}

/**
 * The name of the group to share the filter with. Set `type` to `group`.
 * @member {String} groupname
 */
SharePermissionInputBean.prototype['groupname'] = undefined;

/**
 * The ID of the project to share the filter with. Set `type` to `project`.
 * @member {String} projectId
 */
SharePermissionInputBean.prototype['projectId'] = undefined;

/**
 * The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
 * @member {String} projectRoleId
 */
SharePermissionInputBean.prototype['projectRoleId'] = undefined;

/**
 * The type of the share permission.Specify the type as follows:   *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
 * @member {module:model/SharePermissionInputBean.TypeEnum} type
 */
SharePermissionInputBean.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SharePermissionInputBean['TypeEnum'] = {

    /**
     * value: "project"
     * @const
     */
    "project": "project",

    /**
     * value: "group"
     * @const
     */
    "group": "group",

    /**
     * value: "projectRole"
     * @const
     */
    "projectRole": "projectRole",

    /**
     * value: "global"
     * @const
     */
    "global": "global",

    /**
     * value: "authenticated"
     * @const
     */
    "authenticated": "authenticated"
};



export default SharePermissionInputBean;

