/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jira);
  }
}(this, function(expect, Jira) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Jira.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('projectGet', function() {
      it('should call projectGet successfully', function(done) {
        //uncomment below and update the code to test projectGet
        //instance.projectGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectPost', function() {
      it('should call projectPost successfully', function(done) {
        //uncomment below and update the code to test projectPost
        //instance.projectPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdHierarchyGet', function() {
      it('should call projectProjectIdHierarchyGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdHierarchyGet
        //instance.projectProjectIdHierarchyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyDelete', function() {
      it('should call projectProjectIdOrKeyDelete successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyDelete
        //instance.projectProjectIdOrKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyDeletePost', function() {
      it('should call projectProjectIdOrKeyDeletePost successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyDeletePost
        //instance.projectProjectIdOrKeyDeletePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyGet', function() {
      it('should call projectProjectIdOrKeyGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyGet
        //instance.projectProjectIdOrKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyPut', function() {
      it('should call projectProjectIdOrKeyPut successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyPut
        //instance.projectProjectIdOrKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyStatusesGet', function() {
      it('should call projectProjectIdOrKeyStatusesGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyStatusesGet
        //instance.projectProjectIdOrKeyStatusesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyTypeNewProjectTypeKeyPut', function() {
      it('should call projectProjectIdOrKeyTypeNewProjectTypeKeyPut successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyTypeNewProjectTypeKeyPut
        //instance.projectProjectIdOrKeyTypeNewProjectTypeKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectKeyOrIdNotificationschemeGet', function() {
      it('should call projectProjectKeyOrIdNotificationschemeGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectKeyOrIdNotificationschemeGet
        //instance.projectProjectKeyOrIdNotificationschemeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectSearchGet', function() {
      it('should call projectSearchGet successfully', function(done) {
        //uncomment below and update the code to test projectSearchGet
        //instance.projectSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
