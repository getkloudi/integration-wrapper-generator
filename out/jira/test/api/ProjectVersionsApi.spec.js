/**
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Jira);
  }
}(this, function(expect, Jira) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Jira.ProjectVersionsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectVersionsApi', function() {
    describe('projectProjectIdOrKeyVersionGet', function() {
      it('should call projectProjectIdOrKeyVersionGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyVersionGet
        //instance.projectProjectIdOrKeyVersionGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectProjectIdOrKeyVersionsGet', function() {
      it('should call projectProjectIdOrKeyVersionsGet successfully', function(done) {
        //uncomment below and update the code to test projectProjectIdOrKeyVersionsGet
        //instance.projectProjectIdOrKeyVersionsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdDelete', function() {
      it('should call versionIdDelete successfully', function(done) {
        //uncomment below and update the code to test versionIdDelete
        //instance.versionIdDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdGet', function() {
      it('should call versionIdGet successfully', function(done) {
        //uncomment below and update the code to test versionIdGet
        //instance.versionIdGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdMergetoMoveIssuesToPut', function() {
      it('should call versionIdMergetoMoveIssuesToPut successfully', function(done) {
        //uncomment below and update the code to test versionIdMergetoMoveIssuesToPut
        //instance.versionIdMergetoMoveIssuesToPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdMovePost', function() {
      it('should call versionIdMovePost successfully', function(done) {
        //uncomment below and update the code to test versionIdMovePost
        //instance.versionIdMovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdPut', function() {
      it('should call versionIdPut successfully', function(done) {
        //uncomment below and update the code to test versionIdPut
        //instance.versionIdPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdRelatedIssueCountsGet', function() {
      it('should call versionIdRelatedIssueCountsGet successfully', function(done) {
        //uncomment below and update the code to test versionIdRelatedIssueCountsGet
        //instance.versionIdRelatedIssueCountsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdRemoveAndSwapPost', function() {
      it('should call versionIdRemoveAndSwapPost successfully', function(done) {
        //uncomment below and update the code to test versionIdRemoveAndSwapPost
        //instance.versionIdRemoveAndSwapPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionIdUnresolvedIssueCountGet', function() {
      it('should call versionIdUnresolvedIssueCountGet successfully', function(done) {
        //uncomment below and update the code to test versionIdUnresolvedIssueCountGet
        //instance.versionIdUnresolvedIssueCountGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('versionPost', function() {
      it('should call versionPost successfully', function(done) {
        //uncomment below and update the code to test versionPost
        //instance.versionPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
